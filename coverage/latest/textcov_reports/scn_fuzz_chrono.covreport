_ZN3scn2v46detail23chrono_datetime_scannerIc2tmE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  57.7k|    {
 1523|  57.7k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  57.7k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  57.7k|{
 1494|  57.7k|    auto it = pctx.begin();
 1495|  57.7k|    auto end = pctx.end();
 1496|  57.7k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.64k, False: 56.0k]
  |  Branch (1496:22): [True: 0, False: 56.0k]
  ------------------
 1497|  1.64k|        pctx.on_error(
 1498|  1.64k|            "Format string without specifiers is not valid for this type");
 1499|  1.64k|        return it;
 1500|  1.64k|    }
 1501|       |
 1502|  56.0k|    auto checker = detail::tm_format_checker<T>{};
 1503|  56.0k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  56.0k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 56.0k, False: 0]
  ------------------
 1505|  56.0k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  56.0k|    }
 1507|  56.0k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 56.0k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  56.0k|    return end;
 1512|  56.0k|}
_ZN3scn2v46detail12setter_stateC2Ev:
  742|   695k|        : localized(0),
  743|   695k|          subsec_set(0),
  744|   695k|          sec_set(0),
  745|   695k|          min_set(0),
  746|   695k|          hour24_set(0),
  747|   695k|          hour12_set(0),
  748|   695k|          mday_set(0),
  749|   695k|          mon_set(0),
  750|   695k|          full_year_set(0),
  751|   695k|          century_set(0),
  752|   695k|          short_year_set(0),
  753|   695k|          wday_set(0),
  754|   695k|          yday_set(0),
  755|   695k|          tzoff_set(0),
  756|   695k|          tzname_set(0),
  757|   695k|          am_pm_set(0),
  758|   695k|          epoch_ticks_set(0),
  759|   695k|          duration_ticks_set(0),
  760|   695k|          duration_suffix_set(0),
  761|   695k|          is_pm(0)
  762|   695k|    {
  763|   695k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  56.0k|{
  377|  56.0k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 56.0k]
  |  Branch (377:25): [True: 0, False: 56.0k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  56.0k|    auto p = begin;
  383|  56.0k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 56.0k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  56.0k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 56.0k]
  |  Branch (392:21): [True: 0, False: 56.0k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   148k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 148k, False: 0]
  ------------------
  399|   148k|        auto ch = *p;
  400|   148k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 56.0k, False: 92.3k]
  ------------------
  401|  56.0k|            break;
  402|  56.0k|        }
  403|  92.3k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16.4k, False: 75.8k]
  ------------------
  404|  16.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16.4k]
  |  Branch (404:32): [True: 16.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 16.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  16.4k|            const auto cp_len =
  412|  16.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  16.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  16.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  16.4k|            ++p;
  439|  16.4k|            continue;
  440|  16.4k|        }
  441|  75.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16.4k, False: 59.3k]
  ------------------
  442|  16.4k|            handler.on_text(begin, p);
  443|  16.4k|        }
  444|  75.8k|        ++p;  // Consume '%'
  445|  75.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 75.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  75.8k|        ch = *p;
  451|  75.8k|        ++p;
  452|       |
  453|  75.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 75.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 75.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 75.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.29k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.29k, False: 72.5k]
  ------------------
  463|  3.29k|                handler.on_full_year();
  464|  3.29k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 75.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 75.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 75.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 75.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.87k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.87k, False: 67.9k]
  ------------------
  479|  7.87k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 75.8k]
  ------------------
  480|  7.87k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 75.8k]
  ------------------
  481|  7.87k|                handler.on_month_name();
  482|  7.87k|                break;
  483|  3.29k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.29k, False: 72.5k]
  ------------------
  484|  3.29k|                handler.on_dec_month();
  485|  3.29k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 75.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 75.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 75.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 75.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.29k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.29k, False: 72.5k]
  ------------------
  502|  3.29k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 75.8k]
  ------------------
  503|  3.29k|                handler.on_day_of_month();
  504|  3.29k|                break;
  505|       |            // Day of week
  506|  6.22k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.22k, False: 69.6k]
  ------------------
  507|  6.22k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 75.8k]
  ------------------
  508|  6.22k|                handler.on_weekday_name();
  509|  6.22k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 75.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 75.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.29k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.29k, False: 72.5k]
  ------------------
  518|  3.29k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 75.8k]
  ------------------
  519|  3.29k|                handler.on_24_hour();
  520|  3.29k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 75.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 75.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.29k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.29k, False: 72.5k]
  ------------------
  527|  3.29k|                handler.on_minute();
  528|  3.29k|                break;
  529|       |            // Second
  530|  3.29k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.29k, False: 72.5k]
  ------------------
  531|  3.29k|                handler.on_second();
  532|  3.29k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 75.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.29k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.29k, False: 72.5k]
  ------------------
  563|  3.29k|                handler.on_tz_offset();
  564|  3.29k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 75.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 75.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 75.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 75.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.89k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.89k, False: 67.9k]
  ------------------
  579|  7.89k|                handler.on_us_date();
  580|  7.89k|                break;
  581|  3.90k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.90k, False: 71.9k]
  ------------------
  582|  3.90k|                handler.on_iso_date();
  583|  3.90k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 75.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  21.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 21.4k, False: 54.4k]
  ------------------
  588|  21.4k|                handler.on_24_hour_time();
  589|  21.4k|                break;
  590|  5.47k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.47k, False: 70.3k]
  ------------------
  591|  5.47k|                handler.on_iso_time();
  592|  5.47k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 75.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 75.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 75.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 75.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 75.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 75.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 75.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 75.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  75.8k|        }
  704|  75.8k|        begin = p;
  705|       |
  706|  75.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 75.8k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  75.8k|    }
  710|  56.0k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 56.0k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  56.0k|    handler.verify();
  714|  56.0k|    return p;
  715|  56.0k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIcEEvPKT_S8_:
 1176|  16.4k|    {
 1177|  16.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_full_yearENS1_14numeric_systemE:
 1188|  20.3k|    {
 1189|  20.3k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  20.3k|        st.set_full_year(*this);
 1193|  20.3k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  20.3k|    {                                                                \
  769|  20.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.3k|        field##_set = 1;                                             \
  774|  20.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_short_yearENS1_14numeric_systemE:
 1195|  14.5k|    {
 1196|  14.5k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.5k|        st.set_short_year(*this);
 1200|  14.5k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  14.5k|    {                                                                \
  769|  14.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.5k|        field##_set = 1;                                             \
  774|  14.5k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_month_nameEv:
 1231|  15.6k|    {
 1232|  15.6k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  15.6k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_dec_monthENS1_14numeric_systemE:
 1237|  34.8k|    {
 1238|  34.8k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  34.8k|        st.set_mon(*this);
 1242|  34.8k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  34.8k|    {                                                                \
  769|  34.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  34.8k|        field##_set = 1;                                             \
  774|  34.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_day_of_monthENS1_14numeric_systemE:
 1265|  34.8k|    {
 1266|  34.8k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  34.8k|        st.set_mday(*this);
 1270|  34.8k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  34.8k|    {                                                                \
  769|  34.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  34.8k|        field##_set = 1;                                             \
  774|  34.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_weekday_nameEv:
 1273|  12.8k|    {
 1274|  12.8k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  12.8k|        st.set_wday(*this);
 1278|  12.8k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  12.8k|    {                                                                \
  769|  12.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.8k|        field##_set = 1;                                             \
  774|  12.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_24_hourENS1_14numeric_systemE:
 1295|  63.1k|    {
 1296|  63.1k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  63.1k|        st.set_hour24(*this);
 1300|  63.1k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  63.1k|    {                                                                \
  769|  63.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.1k|        field##_set = 1;                                             \
  774|  63.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_minuteENS1_14numeric_systemE:
 1309|  63.1k|    {
 1310|  63.1k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  63.1k|        st.set_min(*this);
 1314|  63.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  63.1k|    {                                                                \
  769|  63.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.1k|        field##_set = 1;                                             \
  774|  63.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_secondENS1_14numeric_systemE:
 1316|  22.1k|    {
 1317|  22.1k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  22.1k|        st.set_sec(*this);
 1321|  22.1k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  22.1k|    {                                                                \
  769|  22.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  22.1k|        field##_set = 1;                                             \
  774|  22.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_tz_offsetENS1_14numeric_systemE:
 1335|  9.88k|    {
 1336|  9.88k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  9.88k|        st.set_tzoff(*this);
 1340|  9.88k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  9.88k|    {                                                                \
  769|  9.88k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.88k|        field##_set = 1;                                             \
  774|  9.88k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_us_dateEv:
 1368|  14.5k|    {
 1369|  14.5k|        on_dec_month();
 1370|  14.5k|        on_day_of_month();
 1371|  14.5k|        on_short_year();
 1372|  14.5k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_dateEv:
 1374|  10.4k|    {
 1375|  10.4k|        on_full_year();
 1376|  10.4k|        on_dec_month();
 1377|  10.4k|        on_day_of_month();
 1378|  10.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_24_hour_timeEv:
 1386|  41.0k|    {
 1387|  41.0k|        on_24_hour();
 1388|  41.0k|        on_minute();
 1389|  41.0k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_timeEv:
 1391|  12.2k|    {
 1392|  12.2k|        on_24_hour();
 1393|  12.2k|        on_minute();
 1394|  12.2k|        on_second();
 1395|  12.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE6verifyEv:
 1418|   116k|    {
 1419|   116k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   116k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   116k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   116k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   116k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   116k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   116k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   116k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   116k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   116k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   116k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   116k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   116k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   116k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   116k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   116k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   116k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   116k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   116k|        st.verify(*this);
 1463|   116k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerI2tmEEEEvRT_:
  799|   116k|    {
  800|   116k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 63.1k, False: 53.4k]
  |  Branch (800:27): [True: 0, False: 63.1k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   116k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 116k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   116k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 20.3k, False: 96.2k]
  |  Branch (818:31): [True: 0, False: 20.3k]
  |  Branch (818:46): [True: 0, False: 20.3k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   116k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 9.88k, False: 106k]
  |  Branch (824:26): [True: 0, False: 9.88k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   116k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 12.8k, False: 103k]
  |  Branch (829:26): [True: 34.8k, False: 68.9k]
  |  Branch (829:38): [True: 0, False: 68.9k]
  ------------------
  830|   116k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 47.7k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   116k|    }
_ZNK3scn2v46detail17tm_format_checkerI2tmE9get_errorEv:
 1466|   292k|    {
 1467|   292k|        return err;
 1468|   292k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIc2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  56.0k|    {
 1530|  56.0k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  56.0k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  57.7k|    {
 1523|  57.7k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  57.7k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  57.7k|{
 1494|  57.7k|    auto it = pctx.begin();
 1495|  57.7k|    auto end = pctx.end();
 1496|  57.7k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.64k, False: 56.0k]
  |  Branch (1496:22): [True: 0, False: 56.0k]
  ------------------
 1497|  1.64k|        pctx.on_error(
 1498|  1.64k|            "Format string without specifiers is not valid for this type");
 1499|  1.64k|        return it;
 1500|  1.64k|    }
 1501|       |
 1502|  56.0k|    auto checker = detail::tm_format_checker<T>{};
 1503|  56.0k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  56.0k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 56.0k, False: 0]
  ------------------
 1505|  56.0k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  56.0k|    }
 1507|  56.0k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 56.0k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  56.0k|    return end;
 1512|  56.0k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  56.0k|{
  377|  56.0k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 56.0k]
  |  Branch (377:25): [True: 0, False: 56.0k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  56.0k|    auto p = begin;
  383|  56.0k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 56.0k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  56.0k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 56.0k]
  |  Branch (392:21): [True: 0, False: 56.0k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   148k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 148k, False: 0]
  ------------------
  399|   148k|        auto ch = *p;
  400|   148k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 56.0k, False: 92.3k]
  ------------------
  401|  56.0k|            break;
  402|  56.0k|        }
  403|  92.3k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16.4k, False: 75.8k]
  ------------------
  404|  16.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16.4k]
  |  Branch (404:32): [True: 16.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 16.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  16.4k|            const auto cp_len =
  412|  16.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  16.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  16.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  16.4k|            ++p;
  439|  16.4k|            continue;
  440|  16.4k|        }
  441|  75.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16.4k, False: 59.3k]
  ------------------
  442|  16.4k|            handler.on_text(begin, p);
  443|  16.4k|        }
  444|  75.8k|        ++p;  // Consume '%'
  445|  75.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 75.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  75.8k|        ch = *p;
  451|  75.8k|        ++p;
  452|       |
  453|  75.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 75.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 75.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 75.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.29k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.29k, False: 72.5k]
  ------------------
  463|  3.29k|                handler.on_full_year();
  464|  3.29k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 75.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 75.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 75.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 75.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.87k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.87k, False: 67.9k]
  ------------------
  479|  7.87k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 75.8k]
  ------------------
  480|  7.87k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 75.8k]
  ------------------
  481|  7.87k|                handler.on_month_name();
  482|  7.87k|                break;
  483|  3.29k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.29k, False: 72.5k]
  ------------------
  484|  3.29k|                handler.on_dec_month();
  485|  3.29k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 75.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 75.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 75.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 75.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.29k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.29k, False: 72.5k]
  ------------------
  502|  3.29k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 75.8k]
  ------------------
  503|  3.29k|                handler.on_day_of_month();
  504|  3.29k|                break;
  505|       |            // Day of week
  506|  6.22k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.22k, False: 69.6k]
  ------------------
  507|  6.22k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 75.8k]
  ------------------
  508|  6.22k|                handler.on_weekday_name();
  509|  6.22k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 75.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 75.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.29k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.29k, False: 72.5k]
  ------------------
  518|  3.29k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 75.8k]
  ------------------
  519|  3.29k|                handler.on_24_hour();
  520|  3.29k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 75.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 75.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.29k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.29k, False: 72.5k]
  ------------------
  527|  3.29k|                handler.on_minute();
  528|  3.29k|                break;
  529|       |            // Second
  530|  3.29k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.29k, False: 72.5k]
  ------------------
  531|  3.29k|                handler.on_second();
  532|  3.29k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 75.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.29k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.29k, False: 72.5k]
  ------------------
  563|  3.29k|                handler.on_tz_offset();
  564|  3.29k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 75.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 75.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 75.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 75.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.89k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.89k, False: 67.9k]
  ------------------
  579|  7.89k|                handler.on_us_date();
  580|  7.89k|                break;
  581|  3.90k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.90k, False: 71.9k]
  ------------------
  582|  3.90k|                handler.on_iso_date();
  583|  3.90k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 75.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  21.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 21.4k, False: 54.4k]
  ------------------
  588|  21.4k|                handler.on_24_hour_time();
  589|  21.4k|                break;
  590|  5.47k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.47k, False: 70.3k]
  ------------------
  591|  5.47k|                handler.on_iso_time();
  592|  5.47k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 75.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 75.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 75.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 75.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 75.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 75.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 75.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 75.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  75.8k|        }
  704|  75.8k|        begin = p;
  705|       |
  706|  75.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 75.8k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  75.8k|    }
  710|  56.0k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 56.0k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  56.0k|    handler.verify();
  714|  56.0k|    return p;
  715|  56.0k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIcEEvPKT_S8_:
 1176|  16.4k|    {
 1177|  16.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_full_yearENS1_14numeric_systemE:
 1188|  20.3k|    {
 1189|  20.3k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  20.3k|        st.set_full_year(*this);
 1193|  20.3k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  20.3k|    {                                                                \
  769|  20.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.3k|        field##_set = 1;                                             \
  774|  20.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_short_yearENS1_14numeric_systemE:
 1195|  14.5k|    {
 1196|  14.5k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.5k|        st.set_short_year(*this);
 1200|  14.5k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  14.5k|    {                                                                \
  769|  14.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.5k|        field##_set = 1;                                             \
  774|  14.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_month_nameEv:
 1231|  15.6k|    {
 1232|  15.6k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  15.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_dec_monthENS1_14numeric_systemE:
 1237|  34.8k|    {
 1238|  34.8k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  34.8k|        st.set_mon(*this);
 1242|  34.8k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  34.8k|    {                                                                \
  769|  34.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  34.8k|        field##_set = 1;                                             \
  774|  34.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  34.8k|    {
 1266|  34.8k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  34.8k|        st.set_mday(*this);
 1270|  34.8k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  34.8k|    {                                                                \
  769|  34.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  34.8k|        field##_set = 1;                                             \
  774|  34.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_weekday_nameEv:
 1273|  12.8k|    {
 1274|  12.8k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  12.8k|        st.set_wday(*this);
 1278|  12.8k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  12.8k|    {                                                                \
  769|  12.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.8k|        field##_set = 1;                                             \
  774|  12.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_24_hourENS1_14numeric_systemE:
 1295|  63.1k|    {
 1296|  63.1k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  63.1k|        st.set_hour24(*this);
 1300|  63.1k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  63.1k|    {                                                                \
  769|  63.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.1k|        field##_set = 1;                                             \
  774|  63.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_minuteENS1_14numeric_systemE:
 1309|  63.1k|    {
 1310|  63.1k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  63.1k|        st.set_min(*this);
 1314|  63.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  63.1k|    {                                                                \
  769|  63.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.1k|        field##_set = 1;                                             \
  774|  63.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_secondENS1_14numeric_systemE:
 1316|  22.1k|    {
 1317|  22.1k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  22.1k|        st.set_sec(*this);
 1321|  22.1k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  22.1k|    {                                                                \
  769|  22.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  22.1k|        field##_set = 1;                                             \
  774|  22.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  9.88k|    {
 1336|  9.88k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  9.88k|        st.set_tzoff(*this);
 1340|  9.88k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  9.88k|    {                                                                \
  769|  9.88k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.88k|        field##_set = 1;                                             \
  774|  9.88k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_us_dateEv:
 1368|  14.5k|    {
 1369|  14.5k|        on_dec_month();
 1370|  14.5k|        on_day_of_month();
 1371|  14.5k|        on_short_year();
 1372|  14.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_dateEv:
 1374|  10.4k|    {
 1375|  10.4k|        on_full_year();
 1376|  10.4k|        on_dec_month();
 1377|  10.4k|        on_day_of_month();
 1378|  10.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_24_hour_timeEv:
 1386|  41.0k|    {
 1387|  41.0k|        on_24_hour();
 1388|  41.0k|        on_minute();
 1389|  41.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_timeEv:
 1391|  12.2k|    {
 1392|  12.2k|        on_24_hour();
 1393|  12.2k|        on_minute();
 1394|  12.2k|        on_second();
 1395|  12.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE6verifyEv:
 1418|   116k|    {
 1419|   116k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   116k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   116k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   116k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   116k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   116k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   116k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   116k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   116k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   116k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   116k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   116k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   116k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   116k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   116k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   116k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   116k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   116k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   116k|        st.verify(*this);
 1463|   116k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  799|   116k|    {
  800|   116k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 63.1k, False: 53.4k]
  |  Branch (800:27): [True: 0, False: 63.1k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   116k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 116k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   116k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 20.3k, False: 96.2k]
  |  Branch (818:31): [True: 0, False: 20.3k]
  |  Branch (818:46): [True: 0, False: 20.3k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   116k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 9.88k, False: 106k]
  |  Branch (824:26): [True: 0, False: 9.88k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   116k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 12.8k, False: 103k]
  |  Branch (829:26): [True: 34.8k, False: 68.9k]
  |  Branch (829:38): [True: 0, False: 68.9k]
  ------------------
  830|   116k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 47.7k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   116k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9get_errorEv:
 1466|   292k|    {
 1467|   292k|        return err;
 1468|   292k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  56.0k|    {
 1530|  56.0k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  56.0k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  57.7k|    {
 1523|  57.7k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  57.7k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  57.7k|{
 1494|  57.7k|    auto it = pctx.begin();
 1495|  57.7k|    auto end = pctx.end();
 1496|  57.7k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.64k, False: 56.0k]
  |  Branch (1496:22): [True: 0, False: 56.0k]
  ------------------
 1497|  1.64k|        pctx.on_error(
 1498|  1.64k|            "Format string without specifiers is not valid for this type");
 1499|  1.64k|        return it;
 1500|  1.64k|    }
 1501|       |
 1502|  56.0k|    auto checker = detail::tm_format_checker<T>{};
 1503|  56.0k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  56.0k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 56.0k, False: 0]
  ------------------
 1505|  56.0k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  56.0k|    }
 1507|  56.0k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 56.0k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  56.0k|    return end;
 1512|  56.0k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  56.0k|{
  377|  56.0k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 56.0k]
  |  Branch (377:25): [True: 0, False: 56.0k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  56.0k|    auto p = begin;
  383|  56.0k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 56.0k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  56.0k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 56.0k]
  |  Branch (392:21): [True: 0, False: 56.0k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   148k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 148k, False: 0]
  ------------------
  399|   148k|        auto ch = *p;
  400|   148k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 56.0k, False: 92.3k]
  ------------------
  401|  56.0k|            break;
  402|  56.0k|        }
  403|  92.3k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16.4k, False: 75.8k]
  ------------------
  404|  16.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16.4k]
  |  Branch (404:32): [True: 16.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 16.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  16.4k|            const auto cp_len =
  412|  16.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  16.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  16.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  16.4k|            ++p;
  439|  16.4k|            continue;
  440|  16.4k|        }
  441|  75.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16.4k, False: 59.3k]
  ------------------
  442|  16.4k|            handler.on_text(begin, p);
  443|  16.4k|        }
  444|  75.8k|        ++p;  // Consume '%'
  445|  75.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 75.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  75.8k|        ch = *p;
  451|  75.8k|        ++p;
  452|       |
  453|  75.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 75.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 75.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 75.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.29k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.29k, False: 72.5k]
  ------------------
  463|  3.29k|                handler.on_full_year();
  464|  3.29k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 75.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 75.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 75.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 75.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.87k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.87k, False: 67.9k]
  ------------------
  479|  7.87k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 75.8k]
  ------------------
  480|  7.87k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 75.8k]
  ------------------
  481|  7.87k|                handler.on_month_name();
  482|  7.87k|                break;
  483|  3.29k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.29k, False: 72.5k]
  ------------------
  484|  3.29k|                handler.on_dec_month();
  485|  3.29k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 75.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 75.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 75.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 75.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.29k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.29k, False: 72.5k]
  ------------------
  502|  3.29k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 75.8k]
  ------------------
  503|  3.29k|                handler.on_day_of_month();
  504|  3.29k|                break;
  505|       |            // Day of week
  506|  6.22k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.22k, False: 69.6k]
  ------------------
  507|  6.22k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 75.8k]
  ------------------
  508|  6.22k|                handler.on_weekday_name();
  509|  6.22k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 75.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 75.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.29k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.29k, False: 72.5k]
  ------------------
  518|  3.29k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 75.8k]
  ------------------
  519|  3.29k|                handler.on_24_hour();
  520|  3.29k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 75.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 75.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.29k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.29k, False: 72.5k]
  ------------------
  527|  3.29k|                handler.on_minute();
  528|  3.29k|                break;
  529|       |            // Second
  530|  3.29k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.29k, False: 72.5k]
  ------------------
  531|  3.29k|                handler.on_second();
  532|  3.29k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 75.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.29k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.29k, False: 72.5k]
  ------------------
  563|  3.29k|                handler.on_tz_offset();
  564|  3.29k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 75.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 75.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 75.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 75.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.89k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.89k, False: 67.9k]
  ------------------
  579|  7.89k|                handler.on_us_date();
  580|  7.89k|                break;
  581|  3.90k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.90k, False: 71.9k]
  ------------------
  582|  3.90k|                handler.on_iso_date();
  583|  3.90k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 75.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  21.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 21.4k, False: 54.4k]
  ------------------
  588|  21.4k|                handler.on_24_hour_time();
  589|  21.4k|                break;
  590|  5.47k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.47k, False: 70.3k]
  ------------------
  591|  5.47k|                handler.on_iso_time();
  592|  5.47k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 75.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 75.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 75.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 75.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 75.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 75.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 75.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 75.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  75.8k|        }
  704|  75.8k|        begin = p;
  705|       |
  706|  75.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 75.8k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  75.8k|    }
  710|  56.0k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 56.0k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  56.0k|    handler.verify();
  714|  56.0k|    return p;
  715|  56.0k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIcEEvPKT_S8_:
 1176|  16.4k|    {
 1177|  16.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_full_yearENS1_14numeric_systemE:
 1188|  20.3k|    {
 1189|  20.3k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  20.3k|        st.set_full_year(*this);
 1193|  20.3k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  20.3k|    {                                                                \
  769|  20.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.3k|        field##_set = 1;                                             \
  774|  20.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_short_yearENS1_14numeric_systemE:
 1195|  14.5k|    {
 1196|  14.5k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.5k|        st.set_short_year(*this);
 1200|  14.5k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  14.5k|    {                                                                \
  769|  14.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.5k|        field##_set = 1;                                             \
  774|  14.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_month_nameEv:
 1231|  15.6k|    {
 1232|  15.6k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  15.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_dec_monthENS1_14numeric_systemE:
 1237|  34.8k|    {
 1238|  34.8k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  34.8k|        st.set_mon(*this);
 1242|  34.8k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  34.8k|    {                                                                \
  769|  34.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  34.8k|        field##_set = 1;                                             \
  774|  34.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  34.8k|    {
 1266|  34.8k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  34.8k|        st.set_mday(*this);
 1270|  34.8k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  34.8k|    {                                                                \
  769|  34.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  34.8k|        field##_set = 1;                                             \
  774|  34.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_weekday_nameEv:
 1273|  12.8k|    {
 1274|  12.8k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  12.8k|        st.set_wday(*this);
 1278|  12.8k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  12.8k|    {                                                                \
  769|  12.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.8k|        field##_set = 1;                                             \
  774|  12.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_24_hourENS1_14numeric_systemE:
 1295|  63.1k|    {
 1296|  63.1k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  63.1k|        st.set_hour24(*this);
 1300|  63.1k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  63.1k|    {                                                                \
  769|  63.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.1k|        field##_set = 1;                                             \
  774|  63.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_minuteENS1_14numeric_systemE:
 1309|  63.1k|    {
 1310|  63.1k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  63.1k|        st.set_min(*this);
 1314|  63.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  63.1k|    {                                                                \
  769|  63.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.1k|        field##_set = 1;                                             \
  774|  63.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_secondENS1_14numeric_systemE:
 1316|  22.1k|    {
 1317|  22.1k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  22.1k|        st.set_sec(*this);
 1321|  22.1k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  22.1k|    {                                                                \
  769|  22.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  22.1k|        field##_set = 1;                                             \
  774|  22.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  9.88k|    {
 1336|  9.88k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  9.88k|        st.set_tzoff(*this);
 1340|  9.88k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  9.88k|    {                                                                \
  769|  9.88k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.88k|        field##_set = 1;                                             \
  774|  9.88k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_us_dateEv:
 1368|  14.5k|    {
 1369|  14.5k|        on_dec_month();
 1370|  14.5k|        on_day_of_month();
 1371|  14.5k|        on_short_year();
 1372|  14.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_dateEv:
 1374|  10.4k|    {
 1375|  10.4k|        on_full_year();
 1376|  10.4k|        on_dec_month();
 1377|  10.4k|        on_day_of_month();
 1378|  10.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_24_hour_timeEv:
 1386|  41.0k|    {
 1387|  41.0k|        on_24_hour();
 1388|  41.0k|        on_minute();
 1389|  41.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_timeEv:
 1391|  12.2k|    {
 1392|  12.2k|        on_24_hour();
 1393|  12.2k|        on_minute();
 1394|  12.2k|        on_second();
 1395|  12.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE6verifyEv:
 1418|   116k|    {
 1419|   116k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   116k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   116k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   116k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   116k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   116k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   116k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   116k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   116k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   116k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   116k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   116k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   116k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   116k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   116k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   116k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   116k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   116k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   116k|        st.verify(*this);
 1463|   116k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  799|   116k|    {
  800|   116k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 63.1k, False: 53.4k]
  |  Branch (800:27): [True: 0, False: 63.1k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   116k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 116k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   116k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 20.3k, False: 96.2k]
  |  Branch (818:31): [True: 0, False: 20.3k]
  |  Branch (818:46): [True: 0, False: 20.3k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   116k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 9.88k, False: 106k]
  |  Branch (824:26): [True: 0, False: 9.88k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   116k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 12.8k, False: 103k]
  |  Branch (829:26): [True: 34.8k, False: 68.9k]
  |  Branch (829:38): [True: 0, False: 68.9k]
  ------------------
  830|   116k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 47.7k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   116k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9get_errorEv:
 1466|   292k|    {
 1467|   292k|        return err;
 1468|   292k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  56.0k|    {
 1530|  56.0k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  56.0k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIw2tmE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  63.8k|    {
 1523|  63.8k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  63.8k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  63.8k|{
 1494|  63.8k|    auto it = pctx.begin();
 1495|  63.8k|    auto end = pctx.end();
 1496|  63.8k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.29k, False: 60.5k]
  |  Branch (1496:22): [True: 0, False: 60.5k]
  ------------------
 1497|  3.29k|        pctx.on_error(
 1498|  3.29k|            "Format string without specifiers is not valid for this type");
 1499|  3.29k|        return it;
 1500|  3.29k|    }
 1501|       |
 1502|  60.5k|    auto checker = detail::tm_format_checker<T>{};
 1503|  60.5k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  60.5k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 60.5k, False: 0]
  ------------------
 1505|  60.5k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  60.5k|    }
 1507|  60.5k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 60.5k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  60.5k|    return end;
 1512|  60.5k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  60.5k|{
  377|  60.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 60.5k]
  |  Branch (377:25): [True: 0, False: 60.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  60.5k|    auto p = begin;
  383|  60.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 60.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  60.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 60.5k]
  |  Branch (392:21): [True: 0, False: 60.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   193k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 193k, False: 0]
  ------------------
  399|   193k|        auto ch = *p;
  400|   193k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 60.5k, False: 133k]
  ------------------
  401|  60.5k|            break;
  402|  60.5k|        }
  403|   133k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 32.9k, False: 100k]
  ------------------
  404|  32.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 32.9k]
  |  Branch (404:32): [True: 32.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 32.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  32.9k|            const auto cp_len =
  412|  32.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  32.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 32.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  32.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 32.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  32.9k|            ++p;
  439|  32.9k|            continue;
  440|  32.9k|        }
  441|   100k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 32.9k, False: 67.1k]
  ------------------
  442|  32.9k|            handler.on_text(begin, p);
  443|  32.9k|        }
  444|   100k|        ++p;  // Consume '%'
  445|   100k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 100k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   100k|        ch = *p;
  451|   100k|        ++p;
  452|       |
  453|   100k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 100k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 100k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 100k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.59k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.59k, False: 93.4k]
  ------------------
  463|  6.59k|                handler.on_full_year();
  464|  6.59k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 100k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 100k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 100k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 100k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.74k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.74k, False: 92.3k]
  ------------------
  479|  7.74k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 100k]
  ------------------
  480|  7.74k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 100k]
  ------------------
  481|  7.74k|                handler.on_month_name();
  482|  7.74k|                break;
  483|  6.59k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.59k, False: 93.4k]
  ------------------
  484|  6.59k|                handler.on_dec_month();
  485|  6.59k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 100k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 100k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 100k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 100k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.59k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.59k, False: 93.4k]
  ------------------
  502|  6.59k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 100k]
  ------------------
  503|  6.59k|                handler.on_day_of_month();
  504|  6.59k|                break;
  505|       |            // Day of week
  506|  6.59k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.59k, False: 93.4k]
  ------------------
  507|  6.59k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 100k]
  ------------------
  508|  6.59k|                handler.on_weekday_name();
  509|  6.59k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 100k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 100k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.59k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.59k, False: 93.4k]
  ------------------
  518|  6.59k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 100k]
  ------------------
  519|  6.59k|                handler.on_24_hour();
  520|  6.59k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 100k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 100k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.59k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.59k, False: 93.4k]
  ------------------
  527|  6.59k|                handler.on_minute();
  528|  6.59k|                break;
  529|       |            // Second
  530|  6.59k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.59k, False: 93.4k]
  ------------------
  531|  6.59k|                handler.on_second();
  532|  6.59k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 100k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.59k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.59k, False: 93.4k]
  ------------------
  563|  6.59k|                handler.on_tz_offset();
  564|  6.59k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 100k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 100k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 100k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 100k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.61k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.61k, False: 93.4k]
  ------------------
  579|  6.61k|                handler.on_us_date();
  580|  6.61k|                break;
  581|  6.59k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.59k, False: 93.4k]
  ------------------
  582|  6.59k|                handler.on_iso_date();
  583|  6.59k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 100k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  19.6k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 19.6k, False: 80.4k]
  ------------------
  588|  19.6k|                handler.on_24_hour_time();
  589|  19.6k|                break;
  590|  6.79k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.79k, False: 93.2k]
  ------------------
  591|  6.79k|                handler.on_iso_time();
  592|  6.79k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 100k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 100k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 100k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 100k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 100k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 100k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 100k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 100k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   100k|        }
  704|   100k|        begin = p;
  705|       |
  706|   100k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 100k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   100k|    }
  710|  60.5k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 60.5k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  60.5k|    handler.verify();
  714|  60.5k|    return p;
  715|  60.5k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIwEEvPKT_S8_:
 1176|  32.9k|    {
 1177|  32.9k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIw2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  60.5k|    {
 1530|  60.5k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  60.5k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  63.8k|    {
 1523|  63.8k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  63.8k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  63.8k|{
 1494|  63.8k|    auto it = pctx.begin();
 1495|  63.8k|    auto end = pctx.end();
 1496|  63.8k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.29k, False: 60.5k]
  |  Branch (1496:22): [True: 0, False: 60.5k]
  ------------------
 1497|  3.29k|        pctx.on_error(
 1498|  3.29k|            "Format string without specifiers is not valid for this type");
 1499|  3.29k|        return it;
 1500|  3.29k|    }
 1501|       |
 1502|  60.5k|    auto checker = detail::tm_format_checker<T>{};
 1503|  60.5k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  60.5k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 60.5k, False: 0]
  ------------------
 1505|  60.5k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  60.5k|    }
 1507|  60.5k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 60.5k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  60.5k|    return end;
 1512|  60.5k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  60.5k|{
  377|  60.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 60.5k]
  |  Branch (377:25): [True: 0, False: 60.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  60.5k|    auto p = begin;
  383|  60.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 60.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  60.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 60.5k]
  |  Branch (392:21): [True: 0, False: 60.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   193k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 193k, False: 0]
  ------------------
  399|   193k|        auto ch = *p;
  400|   193k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 60.5k, False: 133k]
  ------------------
  401|  60.5k|            break;
  402|  60.5k|        }
  403|   133k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 32.9k, False: 100k]
  ------------------
  404|  32.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 32.9k]
  |  Branch (404:32): [True: 32.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 32.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  32.9k|            const auto cp_len =
  412|  32.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  32.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 32.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  32.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 32.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  32.9k|            ++p;
  439|  32.9k|            continue;
  440|  32.9k|        }
  441|   100k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 32.9k, False: 67.1k]
  ------------------
  442|  32.9k|            handler.on_text(begin, p);
  443|  32.9k|        }
  444|   100k|        ++p;  // Consume '%'
  445|   100k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 100k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   100k|        ch = *p;
  451|   100k|        ++p;
  452|       |
  453|   100k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 100k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 100k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 100k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.59k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.59k, False: 93.4k]
  ------------------
  463|  6.59k|                handler.on_full_year();
  464|  6.59k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 100k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 100k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 100k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 100k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.74k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.74k, False: 92.3k]
  ------------------
  479|  7.74k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 100k]
  ------------------
  480|  7.74k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 100k]
  ------------------
  481|  7.74k|                handler.on_month_name();
  482|  7.74k|                break;
  483|  6.59k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.59k, False: 93.4k]
  ------------------
  484|  6.59k|                handler.on_dec_month();
  485|  6.59k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 100k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 100k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 100k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 100k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.59k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.59k, False: 93.4k]
  ------------------
  502|  6.59k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 100k]
  ------------------
  503|  6.59k|                handler.on_day_of_month();
  504|  6.59k|                break;
  505|       |            // Day of week
  506|  6.59k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.59k, False: 93.4k]
  ------------------
  507|  6.59k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 100k]
  ------------------
  508|  6.59k|                handler.on_weekday_name();
  509|  6.59k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 100k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 100k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.59k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.59k, False: 93.4k]
  ------------------
  518|  6.59k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 100k]
  ------------------
  519|  6.59k|                handler.on_24_hour();
  520|  6.59k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 100k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 100k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.59k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.59k, False: 93.4k]
  ------------------
  527|  6.59k|                handler.on_minute();
  528|  6.59k|                break;
  529|       |            // Second
  530|  6.59k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.59k, False: 93.4k]
  ------------------
  531|  6.59k|                handler.on_second();
  532|  6.59k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 100k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.59k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.59k, False: 93.4k]
  ------------------
  563|  6.59k|                handler.on_tz_offset();
  564|  6.59k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 100k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 100k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 100k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 100k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.61k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.61k, False: 93.4k]
  ------------------
  579|  6.61k|                handler.on_us_date();
  580|  6.61k|                break;
  581|  6.59k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.59k, False: 93.4k]
  ------------------
  582|  6.59k|                handler.on_iso_date();
  583|  6.59k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 100k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  19.6k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 19.6k, False: 80.4k]
  ------------------
  588|  19.6k|                handler.on_24_hour_time();
  589|  19.6k|                break;
  590|  6.79k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.79k, False: 93.2k]
  ------------------
  591|  6.79k|                handler.on_iso_time();
  592|  6.79k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 100k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 100k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 100k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 100k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 100k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 100k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 100k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 100k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   100k|        }
  704|   100k|        begin = p;
  705|       |
  706|   100k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 100k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   100k|    }
  710|  60.5k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 60.5k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  60.5k|    handler.verify();
  714|  60.5k|    return p;
  715|  60.5k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIwEEvPKT_S8_:
 1176|  32.9k|    {
 1177|  32.9k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  60.5k|    {
 1530|  60.5k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  60.5k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  63.8k|    {
 1523|  63.8k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  63.8k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  63.8k|{
 1494|  63.8k|    auto it = pctx.begin();
 1495|  63.8k|    auto end = pctx.end();
 1496|  63.8k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.29k, False: 60.5k]
  |  Branch (1496:22): [True: 0, False: 60.5k]
  ------------------
 1497|  3.29k|        pctx.on_error(
 1498|  3.29k|            "Format string without specifiers is not valid for this type");
 1499|  3.29k|        return it;
 1500|  3.29k|    }
 1501|       |
 1502|  60.5k|    auto checker = detail::tm_format_checker<T>{};
 1503|  60.5k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  60.5k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 60.5k, False: 0]
  ------------------
 1505|  60.5k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  60.5k|    }
 1507|  60.5k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 60.5k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  60.5k|    return end;
 1512|  60.5k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  60.5k|{
  377|  60.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 60.5k]
  |  Branch (377:25): [True: 0, False: 60.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  60.5k|    auto p = begin;
  383|  60.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 60.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  60.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 60.5k]
  |  Branch (392:21): [True: 0, False: 60.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   193k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 193k, False: 0]
  ------------------
  399|   193k|        auto ch = *p;
  400|   193k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 60.5k, False: 133k]
  ------------------
  401|  60.5k|            break;
  402|  60.5k|        }
  403|   133k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 32.9k, False: 100k]
  ------------------
  404|  32.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 32.9k]
  |  Branch (404:32): [True: 32.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 32.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  32.9k|            const auto cp_len =
  412|  32.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  32.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 32.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  32.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 32.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  32.9k|            ++p;
  439|  32.9k|            continue;
  440|  32.9k|        }
  441|   100k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 32.9k, False: 67.1k]
  ------------------
  442|  32.9k|            handler.on_text(begin, p);
  443|  32.9k|        }
  444|   100k|        ++p;  // Consume '%'
  445|   100k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 100k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   100k|        ch = *p;
  451|   100k|        ++p;
  452|       |
  453|   100k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 100k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 100k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 100k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.59k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.59k, False: 93.4k]
  ------------------
  463|  6.59k|                handler.on_full_year();
  464|  6.59k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 100k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 100k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 100k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 100k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.74k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.74k, False: 92.3k]
  ------------------
  479|  7.74k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 100k]
  ------------------
  480|  7.74k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 100k]
  ------------------
  481|  7.74k|                handler.on_month_name();
  482|  7.74k|                break;
  483|  6.59k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.59k, False: 93.4k]
  ------------------
  484|  6.59k|                handler.on_dec_month();
  485|  6.59k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 100k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 100k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 100k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 100k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.59k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.59k, False: 93.4k]
  ------------------
  502|  6.59k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 100k]
  ------------------
  503|  6.59k|                handler.on_day_of_month();
  504|  6.59k|                break;
  505|       |            // Day of week
  506|  6.59k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.59k, False: 93.4k]
  ------------------
  507|  6.59k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 100k]
  ------------------
  508|  6.59k|                handler.on_weekday_name();
  509|  6.59k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 100k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 100k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.59k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.59k, False: 93.4k]
  ------------------
  518|  6.59k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 100k]
  ------------------
  519|  6.59k|                handler.on_24_hour();
  520|  6.59k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 100k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 100k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.59k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.59k, False: 93.4k]
  ------------------
  527|  6.59k|                handler.on_minute();
  528|  6.59k|                break;
  529|       |            // Second
  530|  6.59k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.59k, False: 93.4k]
  ------------------
  531|  6.59k|                handler.on_second();
  532|  6.59k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 100k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.59k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.59k, False: 93.4k]
  ------------------
  563|  6.59k|                handler.on_tz_offset();
  564|  6.59k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 100k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 100k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 100k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 100k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.61k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.61k, False: 93.4k]
  ------------------
  579|  6.61k|                handler.on_us_date();
  580|  6.61k|                break;
  581|  6.59k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.59k, False: 93.4k]
  ------------------
  582|  6.59k|                handler.on_iso_date();
  583|  6.59k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 100k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  19.6k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 19.6k, False: 80.4k]
  ------------------
  588|  19.6k|                handler.on_24_hour_time();
  589|  19.6k|                break;
  590|  6.79k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.79k, False: 93.2k]
  ------------------
  591|  6.79k|                handler.on_iso_time();
  592|  6.79k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 100k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 100k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 100k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 100k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 100k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 100k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 100k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 100k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   100k|        }
  704|   100k|        begin = p;
  705|       |
  706|   100k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 100k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   100k|    }
  710|  60.5k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 60.5k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  60.5k|    handler.verify();
  714|  60.5k|    return p;
  715|  60.5k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIwEEvPKT_S8_:
 1176|  32.9k|    {
 1177|  32.9k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  60.5k|    {
 1530|  60.5k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  60.5k|    }
_ZN3scn2v47weekdayC2Ej:
   71|  2.92k|        : m_value(static_cast<unsigned char>(wd != 7 ? wd : 0))
  ------------------
  |  Branch (71:46): [True: 2.92k, False: 0]
  ------------------
   72|  2.92k|    {
   73|  2.92k|    }
_ZN3scn2v45monthC2Ej:
  119|  12.7k|        : m_value(static_cast<unsigned char>(d))
  120|  12.7k|    {
  121|  12.7k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  30.1k|{
  377|  30.1k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.1k]
  |  Branch (377:25): [True: 0, False: 30.1k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.1k|    auto p = begin;
  383|  30.1k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.1k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.1k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.1k]
  |  Branch (392:21): [True: 0, False: 30.1k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  49.5k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.4k, False: 19.0k]
  ------------------
  399|  30.4k|        auto ch = *p;
  400|  30.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 180, False: 30.3k]
  ------------------
  404|    180|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 180]
  |  Branch (404:32): [True: 180, False: 0]
  |  Branch (404:46): [True: 0, False: 180]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    180|            const auto cp_len =
  412|    180|                detail::code_point_length_by_starting_code_unit(ch);
  413|    180|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 180]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    180|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 180]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    180|            ++p;
  439|    180|            continue;
  440|    180|        }
  441|  30.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 180, False: 30.1k]
  ------------------
  442|    180|            handler.on_text(begin, p);
  443|    180|        }
  444|  30.3k|        ++p;  // Consume '%'
  445|  30.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.3k|        ch = *p;
  451|  30.3k|        ++p;
  452|       |
  453|  30.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.59k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.59k, False: 28.7k]
  ------------------
  463|  1.59k|                handler.on_full_year();
  464|  1.59k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.86k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.86k, False: 26.4k]
  ------------------
  479|  3.86k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.3k]
  ------------------
  480|  3.86k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.3k]
  ------------------
  481|  3.86k|                handler.on_month_name();
  482|  3.86k|                break;
  483|     78|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 78, False: 30.2k]
  ------------------
  484|     78|                handler.on_dec_month();
  485|     78|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     56|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 56, False: 30.2k]
  ------------------
  502|     56|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.3k]
  ------------------
  503|     56|                handler.on_day_of_month();
  504|     56|                break;
  505|       |            // Day of week
  506|  3.09k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.09k, False: 27.2k]
  ------------------
  507|  3.09k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.3k]
  ------------------
  508|  3.09k|                handler.on_weekday_name();
  509|  3.09k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     46|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 46, False: 30.2k]
  ------------------
  518|     46|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.3k]
  ------------------
  519|     46|                handler.on_24_hour();
  520|     46|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.04k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.04k, False: 24.2k]
  ------------------
  579|  6.04k|                handler.on_us_date();
  580|  6.04k|                break;
  581|  1.89k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.89k, False: 28.4k]
  ------------------
  582|  1.89k|                handler.on_iso_date();
  583|  1.89k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.9k, False: 19.3k]
  ------------------
  588|  10.9k|                handler.on_24_hour_time();
  589|  10.9k|                break;
  590|  2.68k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.68k, False: 27.6k]
  ------------------
  591|  2.68k|                handler.on_iso_time();
  592|  2.68k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.3k|        }
  704|  30.3k|        begin = p;
  705|       |
  706|  30.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.0k, False: 19.2k]
  ------------------
  707|  11.0k|            return p;
  708|  11.0k|        }
  709|  30.3k|    }
  710|  19.0k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.0k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.0k|    handler.verify();
  714|  19.0k|    return p;
  715|  30.1k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.49k|    {                                                                \
  769|  3.49k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.49k|        field##_set = 1;                                             \
  774|  3.49k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.48k|    {                                                                \
  769|  4.48k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.48k|        field##_set = 1;                                             \
  774|  4.48k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.62k|    {                                                                \
  769|  7.62k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.62k|        field##_set = 1;                                             \
  774|  7.62k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.87k|    {                                                                \
  769|  4.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.87k|        field##_set = 1;                                             \
  774|  4.87k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.49k|    {                                                                \
  769|  1.49k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.49k|        field##_set = 1;                                             \
  774|  1.49k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.3k|    {                                                                \
  769|  11.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.3k|        field##_set = 1;                                             \
  774|  11.3k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.0k|    {                                                                \
  769|  11.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.0k|        field##_set = 1;                                             \
  774|  11.0k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.12k|    {                                                                \
  769|  1.12k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.12k|        field##_set = 1;                                             \
  774|  1.12k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.0k|    {
  800|  19.0k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.5k, False: 8.55k]
  |  Branch (800:27): [True: 0, False: 10.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.0k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.0k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.0k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 302, False: 18.7k]
  |  Branch (818:31): [True: 0, False: 302]
  |  Branch (818:46): [True: 0, False: 302]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.0k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.0k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.0k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.49k, False: 17.5k]
  |  Branch (829:26): [True: 4.77k, False: 12.7k]
  |  Branch (829:38): [True: 0, False: 12.7k]
  ------------------
  830|  19.0k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.26k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.0k|    }
_ZN3scn2v46detail12setter_state29handle_short_year_and_centuryIiEEvRT_S4_:
  866|  13.8k|    {
  867|  13.8k|        assert(!full_year_set);
  868|  13.8k|        if (short_year_set && century_set) {
  ------------------
  |  Branch (868:13): [True: 13.8k, False: 0]
  |  Branch (868:31): [True: 0, False: 13.8k]
  ------------------
  869|      0|            year = century_value * 100 + short_year_value - offset;
  870|      0|        }
  871|  13.8k|        else if (short_year_set) {
  ------------------
  |  Branch (871:18): [True: 13.8k, False: 0]
  ------------------
  872|  13.8k|            if (short_year_value >= 69) {
  ------------------
  |  Branch (872:17): [True: 156, False: 13.6k]
  ------------------
  873|    156|                year = 1900 + short_year_value - offset;
  874|    156|            }
  875|  13.6k|            else {
  876|  13.6k|                year = 2000 + short_year_value - offset;
  877|  13.6k|            }
  878|  13.8k|        }
  879|      0|        else if (century_set) {
  ------------------
  |  Branch (879:18): [True: 0, False: 0]
  ------------------
  880|      0|            year = 100 * century_value - offset;
  881|      0|        }
  882|  13.8k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  25.2k|{
  377|  25.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 25.2k]
  |  Branch (377:25): [True: 0, False: 25.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  25.2k|    auto p = begin;
  383|  25.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 25.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  25.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 25.2k]
  |  Branch (392:21): [True: 0, False: 25.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  39.5k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 25.6k, False: 13.9k]
  ------------------
  399|  25.6k|        auto ch = *p;
  400|  25.6k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 25.6k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  25.6k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 176, False: 25.4k]
  ------------------
  404|    176|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 176]
  |  Branch (404:32): [True: 176, False: 0]
  |  Branch (404:46): [True: 0, False: 176]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    176|            const auto cp_len =
  412|    176|                detail::code_point_length_by_starting_code_unit(ch);
  413|    176|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 176]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    176|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 176]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    176|            ++p;
  439|    176|            continue;
  440|    176|        }
  441|  25.4k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 176, False: 25.2k]
  ------------------
  442|    176|            handler.on_text(begin, p);
  443|    176|        }
  444|  25.4k|        ++p;  // Consume '%'
  445|  25.4k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 25.4k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  25.4k|        ch = *p;
  451|  25.4k|        ++p;
  452|       |
  453|  25.4k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 25.4k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 25.4k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 25.4k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.62k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.62k, False: 23.8k]
  ------------------
  463|  1.62k|                handler.on_full_year();
  464|  1.62k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 25.4k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 25.4k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 25.4k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 25.4k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.89k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.89k, False: 21.5k]
  ------------------
  479|  3.89k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 25.4k]
  ------------------
  480|  3.89k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 25.4k]
  ------------------
  481|  3.89k|                handler.on_month_name();
  482|  3.89k|                break;
  483|     74|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 74, False: 25.3k]
  ------------------
  484|     74|                handler.on_dec_month();
  485|     74|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 25.4k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 25.4k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 25.4k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 25.4k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     56|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 56, False: 25.3k]
  ------------------
  502|     56|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 25.4k]
  ------------------
  503|     56|                handler.on_day_of_month();
  504|     56|                break;
  505|       |            // Day of week
  506|  3.05k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.05k, False: 22.3k]
  ------------------
  507|  3.05k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 25.4k]
  ------------------
  508|  3.05k|                handler.on_weekday_name();
  509|  3.05k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 25.4k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 25.4k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     46|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 46, False: 25.3k]
  ------------------
  518|     46|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 25.4k]
  ------------------
  519|     46|                handler.on_24_hour();
  520|     46|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 25.4k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 25.4k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 25.4k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 25.4k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 25.4k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 25.4k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 25.4k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 25.4k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 25.4k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 25.4k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.74k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.74k, False: 23.6k]
  ------------------
  579|  1.74k|                handler.on_us_date();
  580|  1.74k|                break;
  581|  1.92k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.92k, False: 23.5k]
  ------------------
  582|  1.92k|                handler.on_iso_date();
  583|  1.92k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 25.4k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.3k, False: 15.1k]
  ------------------
  588|  10.3k|                handler.on_24_hour_time();
  589|  10.3k|                break;
  590|  2.70k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.70k, False: 22.7k]
  ------------------
  591|  2.70k|                handler.on_iso_time();
  592|  2.70k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 25.4k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 25.4k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 25.4k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 25.4k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 25.4k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 25.4k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 25.4k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 25.4k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  25.4k|        }
  704|  25.4k|        begin = p;
  705|       |
  706|  25.4k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.2k, False: 14.1k]
  ------------------
  707|  11.2k|            return p;
  708|  11.2k|        }
  709|  25.4k|    }
  710|  13.9k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 13.9k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  13.9k|    handler.verify();
  714|  13.9k|    return p;
  715|  25.2k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.54k|    {                                                                \
  769|  3.54k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.54k|        field##_set = 1;                                             \
  774|  3.54k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    138|    {                                                                \
  769|    138|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    138|        field##_set = 1;                                             \
  774|    138|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.24k|    {                                                                \
  769|  3.24k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.24k|        field##_set = 1;                                             \
  774|  3.24k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    516|    {                                                                \
  769|    516|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    516|        field##_set = 1;                                             \
  774|    516|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.42k|    {                                                                \
  769|  1.42k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.42k|        field##_set = 1;                                             \
  774|  1.42k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.4k|    {                                                                \
  769|  10.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.4k|        field##_set = 1;                                             \
  774|  10.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.3k|    {                                                                \
  769|  10.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.3k|        field##_set = 1;                                             \
  774|  10.3k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.11k|    {                                                                \
  769|  1.11k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.11k|        field##_set = 1;                                             \
  774|  1.11k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  13.9k|    {
  800|  13.9k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 9.81k, False: 4.14k]
  |  Branch (800:27): [True: 0, False: 9.81k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  13.9k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 13.9k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  13.9k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 302, False: 13.6k]
  |  Branch (818:31): [True: 0, False: 302]
  |  Branch (818:46): [True: 0, False: 302]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  13.9k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 13.9k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  13.9k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.42k, False: 12.5k]
  |  Branch (829:26): [True: 432, False: 12.0k]
  |  Branch (829:38): [True: 0, False: 12.0k]
  ------------------
  830|  13.9k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 1.86k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  13.9k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  30.1k|{
  377|  30.1k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.1k]
  |  Branch (377:25): [True: 0, False: 30.1k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.1k|    auto p = begin;
  383|  30.1k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.1k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.1k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.1k]
  |  Branch (392:21): [True: 0, False: 30.1k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  49.5k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.4k, False: 19.0k]
  ------------------
  399|  30.4k|        auto ch = *p;
  400|  30.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 180, False: 30.3k]
  ------------------
  404|    180|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 180]
  |  Branch (404:32): [True: 180, False: 0]
  |  Branch (404:46): [True: 0, False: 180]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    180|            const auto cp_len =
  412|    180|                detail::code_point_length_by_starting_code_unit(ch);
  413|    180|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 180]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    180|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 180]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    180|            ++p;
  439|    180|            continue;
  440|    180|        }
  441|  30.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 180, False: 30.1k]
  ------------------
  442|    180|            handler.on_text(begin, p);
  443|    180|        }
  444|  30.3k|        ++p;  // Consume '%'
  445|  30.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.3k|        ch = *p;
  451|  30.3k|        ++p;
  452|       |
  453|  30.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.59k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.59k, False: 28.7k]
  ------------------
  463|  1.59k|                handler.on_full_year();
  464|  1.59k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.86k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.86k, False: 26.4k]
  ------------------
  479|  3.86k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.3k]
  ------------------
  480|  3.86k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.3k]
  ------------------
  481|  3.86k|                handler.on_month_name();
  482|  3.86k|                break;
  483|     78|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 78, False: 30.2k]
  ------------------
  484|     78|                handler.on_dec_month();
  485|     78|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     56|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 56, False: 30.2k]
  ------------------
  502|     56|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.3k]
  ------------------
  503|     56|                handler.on_day_of_month();
  504|     56|                break;
  505|       |            // Day of week
  506|  3.09k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.09k, False: 27.2k]
  ------------------
  507|  3.09k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.3k]
  ------------------
  508|  3.09k|                handler.on_weekday_name();
  509|  3.09k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     46|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 46, False: 30.2k]
  ------------------
  518|     46|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.3k]
  ------------------
  519|     46|                handler.on_24_hour();
  520|     46|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.04k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.04k, False: 24.2k]
  ------------------
  579|  6.04k|                handler.on_us_date();
  580|  6.04k|                break;
  581|  1.89k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.89k, False: 28.4k]
  ------------------
  582|  1.89k|                handler.on_iso_date();
  583|  1.89k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.9k, False: 19.3k]
  ------------------
  588|  10.9k|                handler.on_24_hour_time();
  589|  10.9k|                break;
  590|  2.68k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.68k, False: 27.6k]
  ------------------
  591|  2.68k|                handler.on_iso_time();
  592|  2.68k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.3k|        }
  704|  30.3k|        begin = p;
  705|       |
  706|  30.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.0k, False: 19.2k]
  ------------------
  707|  11.0k|            return p;
  708|  11.0k|        }
  709|  30.3k|    }
  710|  19.0k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.0k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.0k|    handler.verify();
  714|  19.0k|    return p;
  715|  30.1k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.49k|    {                                                                \
  769|  3.49k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.49k|        field##_set = 1;                                             \
  774|  3.49k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.48k|    {                                                                \
  769|  4.48k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.48k|        field##_set = 1;                                             \
  774|  4.48k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.62k|    {                                                                \
  769|  7.62k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.62k|        field##_set = 1;                                             \
  774|  7.62k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.87k|    {                                                                \
  769|  4.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.87k|        field##_set = 1;                                             \
  774|  4.87k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.49k|    {                                                                \
  769|  1.49k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.49k|        field##_set = 1;                                             \
  774|  1.49k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.3k|    {                                                                \
  769|  11.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.3k|        field##_set = 1;                                             \
  774|  11.3k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.0k|    {                                                                \
  769|  11.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.0k|        field##_set = 1;                                             \
  774|  11.0k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.12k|    {                                                                \
  769|  1.12k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.12k|        field##_set = 1;                                             \
  774|  1.12k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.0k|    {
  800|  19.0k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.5k, False: 8.55k]
  |  Branch (800:27): [True: 0, False: 10.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.0k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.0k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.0k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 302, False: 18.7k]
  |  Branch (818:31): [True: 0, False: 302]
  |  Branch (818:46): [True: 0, False: 302]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.0k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.0k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.0k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.49k, False: 17.5k]
  |  Branch (829:26): [True: 4.77k, False: 12.7k]
  |  Branch (829:38): [True: 0, False: 12.7k]
  ------------------
  830|  19.0k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.26k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.0k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  25.2k|{
  377|  25.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 25.2k]
  |  Branch (377:25): [True: 0, False: 25.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  25.2k|    auto p = begin;
  383|  25.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 25.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  25.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 25.2k]
  |  Branch (392:21): [True: 0, False: 25.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  39.5k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 25.6k, False: 13.9k]
  ------------------
  399|  25.6k|        auto ch = *p;
  400|  25.6k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 25.6k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  25.6k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 176, False: 25.4k]
  ------------------
  404|    176|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 176]
  |  Branch (404:32): [True: 176, False: 0]
  |  Branch (404:46): [True: 0, False: 176]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    176|            const auto cp_len =
  412|    176|                detail::code_point_length_by_starting_code_unit(ch);
  413|    176|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 176]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    176|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 176]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    176|            ++p;
  439|    176|            continue;
  440|    176|        }
  441|  25.4k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 176, False: 25.2k]
  ------------------
  442|    176|            handler.on_text(begin, p);
  443|    176|        }
  444|  25.4k|        ++p;  // Consume '%'
  445|  25.4k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 25.4k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  25.4k|        ch = *p;
  451|  25.4k|        ++p;
  452|       |
  453|  25.4k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 25.4k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 25.4k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 25.4k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.62k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.62k, False: 23.8k]
  ------------------
  463|  1.62k|                handler.on_full_year();
  464|  1.62k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 25.4k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 25.4k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 25.4k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 25.4k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.89k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.89k, False: 21.5k]
  ------------------
  479|  3.89k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 25.4k]
  ------------------
  480|  3.89k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 25.4k]
  ------------------
  481|  3.89k|                handler.on_month_name();
  482|  3.89k|                break;
  483|     74|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 74, False: 25.3k]
  ------------------
  484|     74|                handler.on_dec_month();
  485|     74|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 25.4k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 25.4k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 25.4k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 25.4k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     56|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 56, False: 25.3k]
  ------------------
  502|     56|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 25.4k]
  ------------------
  503|     56|                handler.on_day_of_month();
  504|     56|                break;
  505|       |            // Day of week
  506|  3.05k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.05k, False: 22.3k]
  ------------------
  507|  3.05k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 25.4k]
  ------------------
  508|  3.05k|                handler.on_weekday_name();
  509|  3.05k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 25.4k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 25.4k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     46|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 46, False: 25.3k]
  ------------------
  518|     46|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 25.4k]
  ------------------
  519|     46|                handler.on_24_hour();
  520|     46|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 25.4k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 25.4k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 25.4k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 25.4k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 25.4k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 25.4k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 25.4k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 25.4k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 25.4k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 25.4k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.74k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.74k, False: 23.6k]
  ------------------
  579|  1.74k|                handler.on_us_date();
  580|  1.74k|                break;
  581|  1.92k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.92k, False: 23.5k]
  ------------------
  582|  1.92k|                handler.on_iso_date();
  583|  1.92k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 25.4k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.3k, False: 15.1k]
  ------------------
  588|  10.3k|                handler.on_24_hour_time();
  589|  10.3k|                break;
  590|  2.70k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.70k, False: 22.7k]
  ------------------
  591|  2.70k|                handler.on_iso_time();
  592|  2.70k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 25.4k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 25.4k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 25.4k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 25.4k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 25.4k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 25.4k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 25.4k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 25.4k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  25.4k|        }
  704|  25.4k|        begin = p;
  705|       |
  706|  25.4k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.2k, False: 14.1k]
  ------------------
  707|  11.2k|            return p;
  708|  11.2k|        }
  709|  25.4k|    }
  710|  13.9k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 13.9k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  13.9k|    handler.verify();
  714|  13.9k|    return p;
  715|  25.2k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.54k|    {                                                                \
  769|  3.54k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.54k|        field##_set = 1;                                             \
  774|  3.54k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    138|    {                                                                \
  769|    138|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    138|        field##_set = 1;                                             \
  774|    138|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.24k|    {                                                                \
  769|  3.24k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.24k|        field##_set = 1;                                             \
  774|  3.24k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    516|    {                                                                \
  769|    516|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    516|        field##_set = 1;                                             \
  774|    516|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.42k|    {                                                                \
  769|  1.42k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.42k|        field##_set = 1;                                             \
  774|  1.42k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.4k|    {                                                                \
  769|  10.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.4k|        field##_set = 1;                                             \
  774|  10.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.3k|    {                                                                \
  769|  10.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.3k|        field##_set = 1;                                             \
  774|  10.3k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.11k|    {                                                                \
  769|  1.11k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.11k|        field##_set = 1;                                             \
  774|  1.11k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  13.9k|    {
  800|  13.9k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 9.81k, False: 4.14k]
  |  Branch (800:27): [True: 0, False: 9.81k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  13.9k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 13.9k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  13.9k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 302, False: 13.6k]
  |  Branch (818:31): [True: 0, False: 302]
  |  Branch (818:46): [True: 0, False: 302]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  13.9k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 13.9k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  13.9k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.42k, False: 12.5k]
  |  Branch (829:26): [True: 432, False: 12.0k]
  |  Branch (829:38): [True: 0, False: 12.0k]
  ------------------
  830|  13.9k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 1.86k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  13.9k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  30.1k|{
  377|  30.1k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.1k]
  |  Branch (377:25): [True: 0, False: 30.1k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.1k|    auto p = begin;
  383|  30.1k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.1k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.1k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.1k]
  |  Branch (392:21): [True: 0, False: 30.1k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  49.5k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.4k, False: 19.0k]
  ------------------
  399|  30.4k|        auto ch = *p;
  400|  30.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 180, False: 30.3k]
  ------------------
  404|    180|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 180]
  |  Branch (404:32): [True: 180, False: 0]
  |  Branch (404:46): [True: 0, False: 180]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    180|            const auto cp_len =
  412|    180|                detail::code_point_length_by_starting_code_unit(ch);
  413|    180|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 180]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    180|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 180]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    180|            ++p;
  439|    180|            continue;
  440|    180|        }
  441|  30.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 180, False: 30.1k]
  ------------------
  442|    180|            handler.on_text(begin, p);
  443|    180|        }
  444|  30.3k|        ++p;  // Consume '%'
  445|  30.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.3k|        ch = *p;
  451|  30.3k|        ++p;
  452|       |
  453|  30.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.59k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.59k, False: 28.7k]
  ------------------
  463|  1.59k|                handler.on_full_year();
  464|  1.59k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.86k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.86k, False: 26.4k]
  ------------------
  479|  3.86k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.3k]
  ------------------
  480|  3.86k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.3k]
  ------------------
  481|  3.86k|                handler.on_month_name();
  482|  3.86k|                break;
  483|     78|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 78, False: 30.2k]
  ------------------
  484|     78|                handler.on_dec_month();
  485|     78|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     56|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 56, False: 30.2k]
  ------------------
  502|     56|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.3k]
  ------------------
  503|     56|                handler.on_day_of_month();
  504|     56|                break;
  505|       |            // Day of week
  506|  3.09k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.09k, False: 27.2k]
  ------------------
  507|  3.09k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.3k]
  ------------------
  508|  3.09k|                handler.on_weekday_name();
  509|  3.09k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     46|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 46, False: 30.2k]
  ------------------
  518|     46|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.3k]
  ------------------
  519|     46|                handler.on_24_hour();
  520|     46|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.04k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.04k, False: 24.2k]
  ------------------
  579|  6.04k|                handler.on_us_date();
  580|  6.04k|                break;
  581|  1.89k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.89k, False: 28.4k]
  ------------------
  582|  1.89k|                handler.on_iso_date();
  583|  1.89k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.9k, False: 19.3k]
  ------------------
  588|  10.9k|                handler.on_24_hour_time();
  589|  10.9k|                break;
  590|  2.68k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.68k, False: 27.6k]
  ------------------
  591|  2.68k|                handler.on_iso_time();
  592|  2.68k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.3k|        }
  704|  30.3k|        begin = p;
  705|       |
  706|  30.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.0k, False: 19.2k]
  ------------------
  707|  11.0k|            return p;
  708|  11.0k|        }
  709|  30.3k|    }
  710|  19.0k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.0k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.0k|    handler.verify();
  714|  19.0k|    return p;
  715|  30.1k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.49k|    {                                                                \
  769|  3.49k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.49k|        field##_set = 1;                                             \
  774|  3.49k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  6.04k|    {                                                                \
  769|  6.04k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.04k|        field##_set = 1;                                             \
  774|  6.04k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.62k|    {                                                                \
  769|  7.62k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.62k|        field##_set = 1;                                             \
  774|  7.62k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.87k|    {                                                                \
  769|  4.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.87k|        field##_set = 1;                                             \
  774|  4.87k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.49k|    {                                                                \
  769|  1.49k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.49k|        field##_set = 1;                                             \
  774|  1.49k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.3k|    {                                                                \
  769|  11.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.3k|        field##_set = 1;                                             \
  774|  11.3k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.0k|    {                                                                \
  769|  11.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.0k|        field##_set = 1;                                             \
  774|  11.0k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.12k|    {                                                                \
  769|  1.12k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.12k|        field##_set = 1;                                             \
  774|  1.12k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.0k|    {
  800|  19.0k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.5k, False: 8.55k]
  |  Branch (800:27): [True: 0, False: 10.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.0k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.0k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.0k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 302, False: 18.7k]
  |  Branch (818:31): [True: 0, False: 302]
  |  Branch (818:46): [True: 0, False: 302]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.0k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.0k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.0k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.49k, False: 17.5k]
  |  Branch (829:26): [True: 4.77k, False: 12.7k]
  |  Branch (829:38): [True: 0, False: 12.7k]
  ------------------
  830|  19.0k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.26k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.0k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  25.2k|{
  377|  25.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 25.2k]
  |  Branch (377:25): [True: 0, False: 25.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  25.2k|    auto p = begin;
  383|  25.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 25.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  25.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 25.2k]
  |  Branch (392:21): [True: 0, False: 25.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  39.5k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 25.6k, False: 13.9k]
  ------------------
  399|  25.6k|        auto ch = *p;
  400|  25.6k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 25.6k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  25.6k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 176, False: 25.4k]
  ------------------
  404|    176|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 176]
  |  Branch (404:32): [True: 176, False: 0]
  |  Branch (404:46): [True: 0, False: 176]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    176|            const auto cp_len =
  412|    176|                detail::code_point_length_by_starting_code_unit(ch);
  413|    176|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 176]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    176|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 176]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    176|            ++p;
  439|    176|            continue;
  440|    176|        }
  441|  25.4k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 176, False: 25.2k]
  ------------------
  442|    176|            handler.on_text(begin, p);
  443|    176|        }
  444|  25.4k|        ++p;  // Consume '%'
  445|  25.4k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 25.4k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  25.4k|        ch = *p;
  451|  25.4k|        ++p;
  452|       |
  453|  25.4k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 25.4k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 25.4k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 25.4k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.62k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.62k, False: 23.8k]
  ------------------
  463|  1.62k|                handler.on_full_year();
  464|  1.62k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 25.4k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 25.4k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 25.4k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 25.4k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.89k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.89k, False: 21.5k]
  ------------------
  479|  3.89k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 25.4k]
  ------------------
  480|  3.89k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 25.4k]
  ------------------
  481|  3.89k|                handler.on_month_name();
  482|  3.89k|                break;
  483|     74|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 74, False: 25.3k]
  ------------------
  484|     74|                handler.on_dec_month();
  485|     74|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 25.4k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 25.4k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 25.4k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 25.4k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     56|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 56, False: 25.3k]
  ------------------
  502|     56|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 25.4k]
  ------------------
  503|     56|                handler.on_day_of_month();
  504|     56|                break;
  505|       |            // Day of week
  506|  3.05k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.05k, False: 22.3k]
  ------------------
  507|  3.05k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 25.4k]
  ------------------
  508|  3.05k|                handler.on_weekday_name();
  509|  3.05k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 25.4k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 25.4k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     46|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 46, False: 25.3k]
  ------------------
  518|     46|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 25.4k]
  ------------------
  519|     46|                handler.on_24_hour();
  520|     46|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 25.4k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 25.4k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 25.4k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 25.4k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 25.4k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 25.4k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 25.4k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 25.4k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 25.4k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 25.4k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.74k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.74k, False: 23.6k]
  ------------------
  579|  1.74k|                handler.on_us_date();
  580|  1.74k|                break;
  581|  1.92k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.92k, False: 23.5k]
  ------------------
  582|  1.92k|                handler.on_iso_date();
  583|  1.92k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 25.4k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.3k, False: 15.1k]
  ------------------
  588|  10.3k|                handler.on_24_hour_time();
  589|  10.3k|                break;
  590|  2.70k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.70k, False: 22.7k]
  ------------------
  591|  2.70k|                handler.on_iso_time();
  592|  2.70k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 25.4k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 25.4k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 25.4k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 25.4k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 25.4k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 25.4k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 25.4k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 25.4k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  25.4k|        }
  704|  25.4k|        begin = p;
  705|       |
  706|  25.4k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.2k, False: 14.1k]
  ------------------
  707|  11.2k|            return p;
  708|  11.2k|        }
  709|  25.4k|    }
  710|  13.9k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 13.9k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  13.9k|    handler.verify();
  714|  13.9k|    return p;
  715|  25.2k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.54k|    {                                                                \
  769|  3.54k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.54k|        field##_set = 1;                                             \
  774|  3.54k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.74k|    {                                                                \
  769|  1.74k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.74k|        field##_set = 1;                                             \
  774|  1.74k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.24k|    {                                                                \
  769|  3.24k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.24k|        field##_set = 1;                                             \
  774|  3.24k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    516|    {                                                                \
  769|    516|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    516|        field##_set = 1;                                             \
  774|    516|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.42k|    {                                                                \
  769|  1.42k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.42k|        field##_set = 1;                                             \
  774|  1.42k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.4k|    {                                                                \
  769|  10.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.4k|        field##_set = 1;                                             \
  774|  10.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.3k|    {                                                                \
  769|  10.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.3k|        field##_set = 1;                                             \
  774|  10.3k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.11k|    {                                                                \
  769|  1.11k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.11k|        field##_set = 1;                                             \
  774|  1.11k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  13.9k|    {
  800|  13.9k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 9.81k, False: 4.14k]
  |  Branch (800:27): [True: 0, False: 9.81k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  13.9k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 13.9k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  13.9k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 302, False: 13.6k]
  |  Branch (818:31): [True: 0, False: 302]
  |  Branch (818:46): [True: 0, False: 302]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  13.9k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 13.9k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  13.9k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.42k, False: 12.5k]
  |  Branch (829:26): [True: 432, False: 12.0k]
  |  Branch (829:38): [True: 0, False: 12.0k]
  ------------------
  830|  13.9k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 1.86k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  13.9k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  29.9k|{
  377|  29.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 29.9k]
  |  Branch (377:25): [True: 0, False: 29.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  29.9k|    auto p = begin;
  383|  29.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 29.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  29.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 29.9k]
  |  Branch (392:21): [True: 0, False: 29.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.1k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 29.9k, False: 7.19k]
  ------------------
  399|  29.9k|        auto ch = *p;
  400|  29.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 29.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  29.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 36, False: 29.9k]
  ------------------
  404|     36|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 36]
  |  Branch (404:32): [True: 36, False: 0]
  |  Branch (404:46): [True: 0, False: 36]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     36|            const auto cp_len =
  412|     36|                detail::code_point_length_by_starting_code_unit(ch);
  413|     36|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 36]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     36|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 36]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     36|            ++p;
  439|     36|            continue;
  440|     36|        }
  441|  29.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 36, False: 29.9k]
  ------------------
  442|     36|            handler.on_text(begin, p);
  443|     36|        }
  444|  29.9k|        ++p;  // Consume '%'
  445|  29.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 29.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  29.9k|        ch = *p;
  451|  29.9k|        ++p;
  452|       |
  453|  29.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 29.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 29.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 29.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.25k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.25k, False: 26.7k]
  ------------------
  463|  3.25k|                handler.on_full_year();
  464|  3.25k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 29.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 29.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 29.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 29.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.81k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.81k, False: 26.1k]
  ------------------
  479|  3.81k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 29.9k]
  ------------------
  480|  3.81k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 29.9k]
  ------------------
  481|  3.81k|                handler.on_month_name();
  482|  3.81k|                break;
  483|     24|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 24, False: 29.9k]
  ------------------
  484|     24|                handler.on_dec_month();
  485|     24|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 29.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 29.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 29.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 29.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     10|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 10, False: 29.9k]
  ------------------
  502|     10|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 29.9k]
  ------------------
  503|     10|                handler.on_day_of_month();
  504|     10|                break;
  505|       |            // Day of week
  506|  3.25k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.25k, False: 26.7k]
  ------------------
  507|  3.25k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 29.9k]
  ------------------
  508|  3.25k|                handler.on_weekday_name();
  509|  3.25k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 29.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 29.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      2|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 2, False: 29.9k]
  ------------------
  518|      2|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 29.9k]
  ------------------
  519|      2|                handler.on_24_hour();
  520|      2|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 29.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 29.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 29.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 29.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 29.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 29.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 29.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 29.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 29.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 29.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.26k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.26k, False: 26.6k]
  ------------------
  579|  3.26k|                handler.on_us_date();
  580|  3.26k|                break;
  581|  3.25k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.25k, False: 26.7k]
  ------------------
  582|  3.25k|                handler.on_iso_date();
  583|  3.25k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 29.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.72k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.72k, False: 20.2k]
  ------------------
  588|  9.72k|                handler.on_24_hour_time();
  589|  9.72k|                break;
  590|  3.35k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.35k, False: 26.6k]
  ------------------
  591|  3.35k|                handler.on_iso_time();
  592|  3.35k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 29.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 29.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 29.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 29.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 29.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 29.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 29.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 29.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  29.9k|        }
  704|  29.9k|        begin = p;
  705|       |
  706|  29.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 22.7k, False: 7.23k]
  ------------------
  707|  22.7k|            return p;
  708|  22.7k|        }
  709|  29.9k|    }
  710|  7.19k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.19k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.19k|    handler.verify();
  714|  7.19k|    return p;
  715|  29.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.51k|    {                                                                \
  769|  6.51k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.51k|        field##_set = 1;                                             \
  774|  6.51k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    932|    {                                                                \
  769|    932|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    932|        field##_set = 1;                                             \
  774|    932|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     44|    {                                                                \
  769|     44|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     44|        field##_set = 1;                                             \
  774|     44|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.02k|    {                                                                \
  769|  7.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.02k|        field##_set = 1;                                             \
  774|  7.02k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.95k|    {                                                                \
  769|  6.95k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.95k|        field##_set = 1;                                             \
  774|  6.95k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    126|    {                                                                \
  769|    126|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    126|        field##_set = 1;                                             \
  774|    126|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.19k|    {
  800|  7.19k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.60k, False: 588]
  |  Branch (800:27): [True: 0, False: 6.60k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.19k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.19k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.19k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 2, False: 7.19k]
  |  Branch (818:31): [True: 0, False: 2]
  |  Branch (818:46): [True: 0, False: 2]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.19k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.19k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.19k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.19k]
  |  Branch (829:26): [True: 12, False: 7.18k]
  |  Branch (829:38): [True: 0, False: 7.18k]
  ------------------
  830|  7.19k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 12]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.19k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  29.9k|{
  377|  29.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 29.9k]
  |  Branch (377:25): [True: 0, False: 29.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  29.9k|    auto p = begin;
  383|  29.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 29.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  29.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 29.9k]
  |  Branch (392:21): [True: 0, False: 29.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.1k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 29.9k, False: 7.19k]
  ------------------
  399|  29.9k|        auto ch = *p;
  400|  29.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 29.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  29.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 36, False: 29.9k]
  ------------------
  404|     36|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 36]
  |  Branch (404:32): [True: 36, False: 0]
  |  Branch (404:46): [True: 0, False: 36]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     36|            const auto cp_len =
  412|     36|                detail::code_point_length_by_starting_code_unit(ch);
  413|     36|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 36]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     36|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 36]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     36|            ++p;
  439|     36|            continue;
  440|     36|        }
  441|  29.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 36, False: 29.9k]
  ------------------
  442|     36|            handler.on_text(begin, p);
  443|     36|        }
  444|  29.9k|        ++p;  // Consume '%'
  445|  29.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 29.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  29.9k|        ch = *p;
  451|  29.9k|        ++p;
  452|       |
  453|  29.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 29.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 29.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 29.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.25k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.25k, False: 26.7k]
  ------------------
  463|  3.25k|                handler.on_full_year();
  464|  3.25k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 29.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 29.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 29.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 29.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.81k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.81k, False: 26.1k]
  ------------------
  479|  3.81k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 29.9k]
  ------------------
  480|  3.81k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 29.9k]
  ------------------
  481|  3.81k|                handler.on_month_name();
  482|  3.81k|                break;
  483|     24|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 24, False: 29.9k]
  ------------------
  484|     24|                handler.on_dec_month();
  485|     24|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 29.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 29.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 29.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 29.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     10|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 10, False: 29.9k]
  ------------------
  502|     10|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 29.9k]
  ------------------
  503|     10|                handler.on_day_of_month();
  504|     10|                break;
  505|       |            // Day of week
  506|  3.25k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.25k, False: 26.7k]
  ------------------
  507|  3.25k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 29.9k]
  ------------------
  508|  3.25k|                handler.on_weekday_name();
  509|  3.25k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 29.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 29.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      2|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 2, False: 29.9k]
  ------------------
  518|      2|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 29.9k]
  ------------------
  519|      2|                handler.on_24_hour();
  520|      2|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 29.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 29.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 29.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 29.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 29.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 29.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 29.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 29.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 29.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 29.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.26k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.26k, False: 26.6k]
  ------------------
  579|  3.26k|                handler.on_us_date();
  580|  3.26k|                break;
  581|  3.25k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.25k, False: 26.7k]
  ------------------
  582|  3.25k|                handler.on_iso_date();
  583|  3.25k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 29.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.72k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.72k, False: 20.2k]
  ------------------
  588|  9.72k|                handler.on_24_hour_time();
  589|  9.72k|                break;
  590|  3.35k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.35k, False: 26.6k]
  ------------------
  591|  3.35k|                handler.on_iso_time();
  592|  3.35k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 29.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 29.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 29.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 29.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 29.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 29.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 29.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 29.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  29.9k|        }
  704|  29.9k|        begin = p;
  705|       |
  706|  29.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 22.7k, False: 7.23k]
  ------------------
  707|  22.7k|            return p;
  708|  22.7k|        }
  709|  29.9k|    }
  710|  7.19k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.19k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.19k|    handler.verify();
  714|  7.19k|    return p;
  715|  29.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.51k|    {                                                                \
  769|  6.51k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.51k|        field##_set = 1;                                             \
  774|  6.51k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    932|    {                                                                \
  769|    932|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    932|        field##_set = 1;                                             \
  774|    932|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     44|    {                                                                \
  769|     44|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     44|        field##_set = 1;                                             \
  774|     44|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.02k|    {                                                                \
  769|  7.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.02k|        field##_set = 1;                                             \
  774|  7.02k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.95k|    {                                                                \
  769|  6.95k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.95k|        field##_set = 1;                                             \
  774|  6.95k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    126|    {                                                                \
  769|    126|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    126|        field##_set = 1;                                             \
  774|    126|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.19k|    {
  800|  7.19k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.60k, False: 588]
  |  Branch (800:27): [True: 0, False: 6.60k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.19k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.19k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.19k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 2, False: 7.19k]
  |  Branch (818:31): [True: 0, False: 2]
  |  Branch (818:46): [True: 0, False: 2]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.19k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.19k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.19k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.19k]
  |  Branch (829:26): [True: 12, False: 7.18k]
  |  Branch (829:38): [True: 0, False: 7.18k]
  ------------------
  830|  7.19k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 12]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.19k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  29.9k|{
  377|  29.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 29.9k]
  |  Branch (377:25): [True: 0, False: 29.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  29.9k|    auto p = begin;
  383|  29.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 29.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  29.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 29.9k]
  |  Branch (392:21): [True: 0, False: 29.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.1k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 29.9k, False: 7.19k]
  ------------------
  399|  29.9k|        auto ch = *p;
  400|  29.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 29.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  29.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 36, False: 29.9k]
  ------------------
  404|     36|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 36]
  |  Branch (404:32): [True: 36, False: 0]
  |  Branch (404:46): [True: 0, False: 36]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     36|            const auto cp_len =
  412|     36|                detail::code_point_length_by_starting_code_unit(ch);
  413|     36|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 36]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     36|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 36]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     36|            ++p;
  439|     36|            continue;
  440|     36|        }
  441|  29.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 36, False: 29.9k]
  ------------------
  442|     36|            handler.on_text(begin, p);
  443|     36|        }
  444|  29.9k|        ++p;  // Consume '%'
  445|  29.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 29.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  29.9k|        ch = *p;
  451|  29.9k|        ++p;
  452|       |
  453|  29.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 29.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 29.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 29.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.25k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.25k, False: 26.7k]
  ------------------
  463|  3.25k|                handler.on_full_year();
  464|  3.25k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 29.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 29.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 29.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 29.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.81k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.81k, False: 26.1k]
  ------------------
  479|  3.81k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 29.9k]
  ------------------
  480|  3.81k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 29.9k]
  ------------------
  481|  3.81k|                handler.on_month_name();
  482|  3.81k|                break;
  483|     24|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 24, False: 29.9k]
  ------------------
  484|     24|                handler.on_dec_month();
  485|     24|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 29.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 29.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 29.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 29.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     10|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 10, False: 29.9k]
  ------------------
  502|     10|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 29.9k]
  ------------------
  503|     10|                handler.on_day_of_month();
  504|     10|                break;
  505|       |            // Day of week
  506|  3.25k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.25k, False: 26.7k]
  ------------------
  507|  3.25k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 29.9k]
  ------------------
  508|  3.25k|                handler.on_weekday_name();
  509|  3.25k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 29.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 29.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      2|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 2, False: 29.9k]
  ------------------
  518|      2|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 29.9k]
  ------------------
  519|      2|                handler.on_24_hour();
  520|      2|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 29.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 29.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 29.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 29.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 29.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 29.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 29.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 29.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 29.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 29.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.26k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.26k, False: 26.6k]
  ------------------
  579|  3.26k|                handler.on_us_date();
  580|  3.26k|                break;
  581|  3.25k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.25k, False: 26.7k]
  ------------------
  582|  3.25k|                handler.on_iso_date();
  583|  3.25k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 29.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.72k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.72k, False: 20.2k]
  ------------------
  588|  9.72k|                handler.on_24_hour_time();
  589|  9.72k|                break;
  590|  3.35k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.35k, False: 26.6k]
  ------------------
  591|  3.35k|                handler.on_iso_time();
  592|  3.35k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 29.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 29.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 29.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 29.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 29.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 29.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 29.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 29.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  29.9k|        }
  704|  29.9k|        begin = p;
  705|       |
  706|  29.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 22.7k, False: 7.23k]
  ------------------
  707|  22.7k|            return p;
  708|  22.7k|        }
  709|  29.9k|    }
  710|  7.19k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.19k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.19k|    handler.verify();
  714|  7.19k|    return p;
  715|  29.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.51k|    {                                                                \
  769|  6.51k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.51k|        field##_set = 1;                                             \
  774|  6.51k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    932|    {                                                                \
  769|    932|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    932|        field##_set = 1;                                             \
  774|    932|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     44|    {                                                                \
  769|     44|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     44|        field##_set = 1;                                             \
  774|     44|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.02k|    {                                                                \
  769|  7.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.02k|        field##_set = 1;                                             \
  774|  7.02k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.95k|    {                                                                \
  769|  6.95k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.95k|        field##_set = 1;                                             \
  774|  6.95k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    126|    {                                                                \
  769|    126|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    126|        field##_set = 1;                                             \
  774|    126|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.19k|    {
  800|  7.19k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.60k, False: 588]
  |  Branch (800:27): [True: 0, False: 6.60k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.19k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.19k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.19k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 2, False: 7.19k]
  |  Branch (818:31): [True: 0, False: 2]
  |  Branch (818:46): [True: 0, False: 2]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.19k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.19k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.19k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.19k]
  |  Branch (829:26): [True: 12, False: 7.18k]
  |  Branch (829:38): [True: 0, False: 7.18k]
  ------------------
  830|  7.19k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 12]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.19k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  29.9k|{
  377|  29.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 29.9k]
  |  Branch (377:25): [True: 0, False: 29.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  29.9k|    auto p = begin;
  383|  29.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 29.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  29.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 29.9k]
  |  Branch (392:21): [True: 0, False: 29.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.1k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 29.9k, False: 7.19k]
  ------------------
  399|  29.9k|        auto ch = *p;
  400|  29.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 29.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  29.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 36, False: 29.9k]
  ------------------
  404|     36|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 36]
  |  Branch (404:32): [True: 36, False: 0]
  |  Branch (404:46): [True: 0, False: 36]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     36|            const auto cp_len =
  412|     36|                detail::code_point_length_by_starting_code_unit(ch);
  413|     36|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 36]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     36|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 36]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     36|            ++p;
  439|     36|            continue;
  440|     36|        }
  441|  29.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 36, False: 29.9k]
  ------------------
  442|     36|            handler.on_text(begin, p);
  443|     36|        }
  444|  29.9k|        ++p;  // Consume '%'
  445|  29.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 29.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  29.9k|        ch = *p;
  451|  29.9k|        ++p;
  452|       |
  453|  29.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 29.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 29.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 29.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.25k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.25k, False: 26.7k]
  ------------------
  463|  3.25k|                handler.on_full_year();
  464|  3.25k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 29.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 29.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 29.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 29.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.81k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.81k, False: 26.1k]
  ------------------
  479|  3.81k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 29.9k]
  ------------------
  480|  3.81k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 29.9k]
  ------------------
  481|  3.81k|                handler.on_month_name();
  482|  3.81k|                break;
  483|     24|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 24, False: 29.9k]
  ------------------
  484|     24|                handler.on_dec_month();
  485|     24|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 29.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 29.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 29.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 29.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     10|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 10, False: 29.9k]
  ------------------
  502|     10|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 29.9k]
  ------------------
  503|     10|                handler.on_day_of_month();
  504|     10|                break;
  505|       |            // Day of week
  506|  3.25k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.25k, False: 26.7k]
  ------------------
  507|  3.25k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 29.9k]
  ------------------
  508|  3.25k|                handler.on_weekday_name();
  509|  3.25k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 29.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 29.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      2|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 2, False: 29.9k]
  ------------------
  518|      2|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 29.9k]
  ------------------
  519|      2|                handler.on_24_hour();
  520|      2|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 29.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 29.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 29.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 29.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 29.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 29.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 29.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 29.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 29.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 29.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.26k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.26k, False: 26.6k]
  ------------------
  579|  3.26k|                handler.on_us_date();
  580|  3.26k|                break;
  581|  3.25k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.25k, False: 26.7k]
  ------------------
  582|  3.25k|                handler.on_iso_date();
  583|  3.25k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 29.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.72k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.72k, False: 20.2k]
  ------------------
  588|  9.72k|                handler.on_24_hour_time();
  589|  9.72k|                break;
  590|  3.35k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.35k, False: 26.6k]
  ------------------
  591|  3.35k|                handler.on_iso_time();
  592|  3.35k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 29.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 29.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 29.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 29.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 29.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 29.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 29.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 29.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  29.9k|        }
  704|  29.9k|        begin = p;
  705|       |
  706|  29.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 22.7k, False: 7.23k]
  ------------------
  707|  22.7k|            return p;
  708|  22.7k|        }
  709|  29.9k|    }
  710|  7.19k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.19k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.19k|    handler.verify();
  714|  7.19k|    return p;
  715|  29.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.51k|    {                                                                \
  769|  6.51k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.51k|        field##_set = 1;                                             \
  774|  6.51k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    932|    {                                                                \
  769|    932|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    932|        field##_set = 1;                                             \
  774|    932|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     44|    {                                                                \
  769|     44|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     44|        field##_set = 1;                                             \
  774|     44|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.02k|    {                                                                \
  769|  7.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.02k|        field##_set = 1;                                             \
  774|  7.02k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.95k|    {                                                                \
  769|  6.95k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.95k|        field##_set = 1;                                             \
  774|  6.95k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    126|    {                                                                \
  769|    126|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    126|        field##_set = 1;                                             \
  774|    126|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.19k|    {
  800|  7.19k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.60k, False: 588]
  |  Branch (800:27): [True: 0, False: 6.60k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.19k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.19k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.19k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 2, False: 7.19k]
  |  Branch (818:31): [True: 0, False: 2]
  |  Branch (818:46): [True: 0, False: 2]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.19k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.19k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.19k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.19k]
  |  Branch (829:26): [True: 12, False: 7.18k]
  |  Branch (829:38): [True: 0, False: 7.18k]
  ------------------
  830|  7.19k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 12]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.19k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  29.9k|{
  377|  29.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 29.9k]
  |  Branch (377:25): [True: 0, False: 29.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  29.9k|    auto p = begin;
  383|  29.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 29.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  29.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 29.9k]
  |  Branch (392:21): [True: 0, False: 29.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.1k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 29.9k, False: 7.19k]
  ------------------
  399|  29.9k|        auto ch = *p;
  400|  29.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 29.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  29.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 36, False: 29.9k]
  ------------------
  404|     36|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 36]
  |  Branch (404:32): [True: 36, False: 0]
  |  Branch (404:46): [True: 0, False: 36]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     36|            const auto cp_len =
  412|     36|                detail::code_point_length_by_starting_code_unit(ch);
  413|     36|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 36]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     36|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 36]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     36|            ++p;
  439|     36|            continue;
  440|     36|        }
  441|  29.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 36, False: 29.9k]
  ------------------
  442|     36|            handler.on_text(begin, p);
  443|     36|        }
  444|  29.9k|        ++p;  // Consume '%'
  445|  29.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 29.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  29.9k|        ch = *p;
  451|  29.9k|        ++p;
  452|       |
  453|  29.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 29.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 29.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 29.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.25k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.25k, False: 26.7k]
  ------------------
  463|  3.25k|                handler.on_full_year();
  464|  3.25k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 29.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 29.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 29.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 29.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.81k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.81k, False: 26.1k]
  ------------------
  479|  3.81k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 29.9k]
  ------------------
  480|  3.81k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 29.9k]
  ------------------
  481|  3.81k|                handler.on_month_name();
  482|  3.81k|                break;
  483|     24|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 24, False: 29.9k]
  ------------------
  484|     24|                handler.on_dec_month();
  485|     24|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 29.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 29.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 29.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 29.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     10|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 10, False: 29.9k]
  ------------------
  502|     10|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 29.9k]
  ------------------
  503|     10|                handler.on_day_of_month();
  504|     10|                break;
  505|       |            // Day of week
  506|  3.25k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.25k, False: 26.7k]
  ------------------
  507|  3.25k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 29.9k]
  ------------------
  508|  3.25k|                handler.on_weekday_name();
  509|  3.25k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 29.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 29.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      2|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 2, False: 29.9k]
  ------------------
  518|      2|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 29.9k]
  ------------------
  519|      2|                handler.on_24_hour();
  520|      2|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 29.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 29.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 29.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 29.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 29.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 29.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 29.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 29.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 29.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 29.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.26k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.26k, False: 26.6k]
  ------------------
  579|  3.26k|                handler.on_us_date();
  580|  3.26k|                break;
  581|  3.25k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.25k, False: 26.7k]
  ------------------
  582|  3.25k|                handler.on_iso_date();
  583|  3.25k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 29.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.72k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.72k, False: 20.2k]
  ------------------
  588|  9.72k|                handler.on_24_hour_time();
  589|  9.72k|                break;
  590|  3.35k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.35k, False: 26.6k]
  ------------------
  591|  3.35k|                handler.on_iso_time();
  592|  3.35k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 29.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 29.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 29.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 29.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 29.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 29.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 29.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 29.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  29.9k|        }
  704|  29.9k|        begin = p;
  705|       |
  706|  29.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 22.7k, False: 7.23k]
  ------------------
  707|  22.7k|            return p;
  708|  22.7k|        }
  709|  29.9k|    }
  710|  7.19k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.19k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.19k|    handler.verify();
  714|  7.19k|    return p;
  715|  29.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.51k|    {                                                                \
  769|  6.51k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.51k|        field##_set = 1;                                             \
  774|  6.51k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  3.26k|    {                                                                \
  769|  3.26k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.26k|        field##_set = 1;                                             \
  774|  3.26k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    932|    {                                                                \
  769|    932|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    932|        field##_set = 1;                                             \
  774|    932|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     44|    {                                                                \
  769|     44|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     44|        field##_set = 1;                                             \
  774|     44|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.02k|    {                                                                \
  769|  7.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.02k|        field##_set = 1;                                             \
  774|  7.02k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.95k|    {                                                                \
  769|  6.95k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.95k|        field##_set = 1;                                             \
  774|  6.95k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    126|    {                                                                \
  769|    126|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    126|        field##_set = 1;                                             \
  774|    126|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.19k|    {
  800|  7.19k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.60k, False: 588]
  |  Branch (800:27): [True: 0, False: 6.60k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.19k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.19k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.19k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 2, False: 7.19k]
  |  Branch (818:31): [True: 0, False: 2]
  |  Branch (818:46): [True: 0, False: 2]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.19k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.19k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.19k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.19k]
  |  Branch (829:26): [True: 12, False: 7.18k]
  |  Branch (829:38): [True: 0, False: 7.18k]
  ------------------
  830|  7.19k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 12]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.19k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  29.9k|{
  377|  29.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 29.9k]
  |  Branch (377:25): [True: 0, False: 29.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  29.9k|    auto p = begin;
  383|  29.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 29.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  29.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 29.9k]
  |  Branch (392:21): [True: 0, False: 29.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.1k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 29.9k, False: 7.19k]
  ------------------
  399|  29.9k|        auto ch = *p;
  400|  29.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 29.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  29.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 36, False: 29.9k]
  ------------------
  404|     36|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 36]
  |  Branch (404:32): [True: 36, False: 0]
  |  Branch (404:46): [True: 0, False: 36]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     36|            const auto cp_len =
  412|     36|                detail::code_point_length_by_starting_code_unit(ch);
  413|     36|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 36]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     36|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 36]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     36|            ++p;
  439|     36|            continue;
  440|     36|        }
  441|  29.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 36, False: 29.9k]
  ------------------
  442|     36|            handler.on_text(begin, p);
  443|     36|        }
  444|  29.9k|        ++p;  // Consume '%'
  445|  29.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 29.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  29.9k|        ch = *p;
  451|  29.9k|        ++p;
  452|       |
  453|  29.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 29.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 29.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 29.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.25k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.25k, False: 26.7k]
  ------------------
  463|  3.25k|                handler.on_full_year();
  464|  3.25k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 29.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 29.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 29.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 29.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.81k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.81k, False: 26.1k]
  ------------------
  479|  3.81k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 29.9k]
  ------------------
  480|  3.81k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 29.9k]
  ------------------
  481|  3.81k|                handler.on_month_name();
  482|  3.81k|                break;
  483|     24|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 24, False: 29.9k]
  ------------------
  484|     24|                handler.on_dec_month();
  485|     24|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 29.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 29.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 29.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 29.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     10|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 10, False: 29.9k]
  ------------------
  502|     10|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 29.9k]
  ------------------
  503|     10|                handler.on_day_of_month();
  504|     10|                break;
  505|       |            // Day of week
  506|  3.25k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.25k, False: 26.7k]
  ------------------
  507|  3.25k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 29.9k]
  ------------------
  508|  3.25k|                handler.on_weekday_name();
  509|  3.25k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 29.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 29.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      2|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 2, False: 29.9k]
  ------------------
  518|      2|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 29.9k]
  ------------------
  519|      2|                handler.on_24_hour();
  520|      2|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 29.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 29.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 29.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 29.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 29.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 29.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 29.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 29.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 29.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 29.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.26k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.26k, False: 26.6k]
  ------------------
  579|  3.26k|                handler.on_us_date();
  580|  3.26k|                break;
  581|  3.25k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.25k, False: 26.7k]
  ------------------
  582|  3.25k|                handler.on_iso_date();
  583|  3.25k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 29.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.72k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.72k, False: 20.2k]
  ------------------
  588|  9.72k|                handler.on_24_hour_time();
  589|  9.72k|                break;
  590|  3.35k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.35k, False: 26.6k]
  ------------------
  591|  3.35k|                handler.on_iso_time();
  592|  3.35k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 29.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 29.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 29.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 29.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 29.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 29.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 29.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 29.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  29.9k|        }
  704|  29.9k|        begin = p;
  705|       |
  706|  29.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 22.7k, False: 7.23k]
  ------------------
  707|  22.7k|            return p;
  708|  22.7k|        }
  709|  29.9k|    }
  710|  7.19k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.19k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.19k|    handler.verify();
  714|  7.19k|    return p;
  715|  29.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.51k|    {                                                                \
  769|  6.51k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.51k|        field##_set = 1;                                             \
  774|  6.51k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  3.26k|    {                                                                \
  769|  3.26k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.26k|        field##_set = 1;                                             \
  774|  3.26k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    932|    {                                                                \
  769|    932|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    932|        field##_set = 1;                                             \
  774|    932|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     44|    {                                                                \
  769|     44|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     44|        field##_set = 1;                                             \
  774|     44|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.02k|    {                                                                \
  769|  7.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.02k|        field##_set = 1;                                             \
  774|  7.02k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.95k|    {                                                                \
  769|  6.95k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.95k|        field##_set = 1;                                             \
  774|  6.95k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    126|    {                                                                \
  769|    126|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    126|        field##_set = 1;                                             \
  774|    126|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.19k|    {
  800|  7.19k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.60k, False: 588]
  |  Branch (800:27): [True: 0, False: 6.60k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.19k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.19k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.19k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 2, False: 7.19k]
  |  Branch (818:31): [True: 0, False: 2]
  |  Branch (818:46): [True: 0, False: 2]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.19k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.19k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.19k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.19k]
  |  Branch (829:26): [True: 12, False: 7.18k]
  |  Branch (829:38): [True: 0, False: 7.18k]
  ------------------
  830|  7.19k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 12]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.19k|    }

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|   860k|{
 4068|   860k|    if constexpr (sizeof(U) == 1) {
 4069|   860k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|   860k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|   860k|{
 4032|   860k|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|   860k|    SCN_GCC_COMPAT_PUSH
 4035|   860k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|   860k|    constexpr char lengths[] =
 4037|   860k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|   860k|        "\1\1\1\1\1\1\1\1"
 4039|   860k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|   860k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|   860k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|   860k|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|   860k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|   860k|    SCN_GCC_COMPAT_POP
 4046|   860k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   427k|{
 4274|   427k|    if constexpr (sizeof(CharT) == 1) {
 4275|   427k|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|   427k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|   427k|{
 4087|   427k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|   427k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   427k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|   427k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   427k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   427k|    };
 4092|       |
 4093|   427k|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 417k, False: 9.93k]
  ------------------
 4094|   417k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 174, False: 416k]
  ------------------
 4095|    174|            SCN_UNLIKELY_ATTR
 4096|    174|            return invalid_code_point;
 4097|    174|        }
 4098|   416k|        return static_cast<char32_t>(input[0]);
 4099|   417k|    }
 4100|       |
 4101|  9.93k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 8.25k, False: 1.67k]
  ------------------
 4102|  8.25k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 54, False: 8.20k]
  ------------------
 4103|     54|            SCN_UNLIKELY_ATTR
 4104|     54|            return invalid_code_point;
 4105|     54|        }
 4106|  8.20k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 1.72k, False: 6.47k]
  ------------------
 4107|  1.72k|            SCN_UNLIKELY_ATTR
 4108|  1.72k|            return invalid_code_point;
 4109|  1.72k|        }
 4110|       |
 4111|  6.47k|        char32_t cp{};
 4112|  6.47k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  6.47k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  6.47k|        return cp;
 4115|  8.20k|    }
 4116|       |
 4117|  1.67k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 630, False: 1.04k]
  ------------------
 4118|    630|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 48, False: 582]
  ------------------
 4119|     48|            SCN_UNLIKELY_ATTR
 4120|     48|            return invalid_code_point;
 4121|     48|        }
 4122|    582|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 327, False: 255]
  ------------------
 4123|    582|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 133, False: 122]
  ------------------
 4124|    460|            SCN_UNLIKELY_ATTR
 4125|    460|            return invalid_code_point;
 4126|    460|        }
 4127|       |
 4128|    122|        char32_t cp{};
 4129|    122|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|    122|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|    122|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|    122|        return cp;
 4133|    582|    }
 4134|       |
 4135|  1.04k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 1.04k, False: 0]
  ------------------
 4136|  1.04k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 1.04k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  1.04k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 289, False: 754]
  ------------------
 4141|    289|            SCN_UNLIKELY_ATTR
 4142|    289|            return invalid_code_point;
 4143|    289|        }
 4144|    754|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 359, False: 395]
  ------------------
 4145|    754|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 122, False: 273]
  ------------------
 4146|    754|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 145, False: 128]
  ------------------
 4147|    626|            SCN_UNLIKELY_ATTR
 4148|    626|            return invalid_code_point;
 4149|    626|        }
 4150|       |
 4151|    128|        char32_t cp{};
 4152|    128|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    128|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    128|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    128|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    128|        return cp;
 4157|    754|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  10.4k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  10.4k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  10.4k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   322k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   322k|    else {
 3966|   322k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   322k|                                       to_address(first), to_address(last)))};
 3968|   322k|    }
 3969|   322k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   973k|{
  316|   973k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   973k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   973k|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  1.28M|{
  294|  1.28M|    return p;
  295|  1.28M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|   458k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|   458k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|   458k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|   458k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|   458k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|   458k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  37.9k|    {
 2869|  37.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  37.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  37.9k|    {
 2850|  37.9k|        return decay_copy(t.begin());
 2851|  37.9k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|   931k|{
 2094|   931k|    return SCN_FWD(t);
  ------------------
  |  |  936|   931k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   931k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   158k|    {
 2926|   158k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   158k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   158k|    {
 2908|   158k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   158k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9704|  12.7k|{
 9705|  12.7k|    auto result = make_scan_result<Source, Args...>();
 9706|  12.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  12.7k|                                   make_scan_args(result->values())));
 9708|  12.7k|    return result;
 9709|  12.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEEDav:
 9660|  26.3k|{
 9661|  26.3k|    return scan_result_type<Source, Args...>();
 9662|  26.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  26.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  26.3k|        : m_value(T{}), m_has_value(true)
  427|  26.3k|    {
  428|  26.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2Ev:
 6610|  26.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6453|  78.9k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  78.9k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJ2tmEEC2Ev:
 6384|   121k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  26.3k|{
 9646|  26.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 13.9k]
  |  |  ------------------
  ------------------
 9647|  12.3k|        out = unexpected(in.error());
 9648|  12.3k|    }
 9649|  13.9k|    else {
 9650|  13.9k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  13.9k|    static_cast<    \
  |  |  935|  13.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  13.9k|    }
 9652|  26.3k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  78.9k|    {
 1740|  78.9k|        return has_value();
 1741|  78.9k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   157k|    {
  490|   157k|        return m_has_value;
  491|   157k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  37.0k|    {
 1746|  37.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  37.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  37.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  37.0k|        return this->get_unexpected().error();
 1748|  37.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  37.0k|    {
  473|  37.0k|        return m_unexpected;
  474|  37.0k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  3.49M|    {
  365|  3.49M|        return m_unexpected;
  366|  3.49M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  1.83M|        : m_unexpected(std::forward<Err>(e))
  350|  1.83M|    {
  351|  1.83M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.83M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.83M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  12.3k|        : base(unexpect, std::move(e.error())),
 1616|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.3k|    {
 1618|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  12.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.3k|          m_has_value(false)
  451|  12.3k|    {
  452|  12.3k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  1.85M|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.85M|    {
  360|  1.85M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.85M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.85M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.3k|    {
 1316|  12.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1556|  12.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  902|  12.3k|    {
  903|  12.3k|        assign_common(std::move(other));
  904|  12.3k|        return *this;
  905|  12.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  12.3k|    {
  950|  12.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.3k, False: 0]
  ------------------
  951|  12.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   105k|    {
  490|   105k|        return m_has_value;
  491|   105k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  54.2k|    {
  456|  54.2k|        return m_value;
  457|  54.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  12.3k|    {
 1046|  12.3k|        this->destroy_value();
 1047|  12.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  12.3k|    {
  504|  12.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.3k|                                  std::forward<Args>(args)...);
  506|  12.3k|        m_has_value = false;
  507|  12.3k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   222k|{
  396|   222k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   222k|        T(std::forward<Args>(args)...);
  398|   222k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.3k|    {
  473|  12.3k|        return m_unexpected;
  474|  12.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.3k|    {
  481|  12.3k|        return std::move(m_unexpected);
  482|  12.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6484|  41.8k|    {
 6485|  41.8k|        m_range = std::forward<Other>(r);
 6486|  41.8k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  41.8k|    {
 1795|  41.8k|        return value();
 1796|  41.8k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  41.8k|    {
 1769|  41.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  41.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  41.8k|        return this->get_value();
 1771|  41.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  41.8k|    {
  456|  41.8k|        return m_value;
  457|  41.8k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9484|  38.2k|{
 9485|  38.2k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  38.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|  38.2k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|  38.2k|{
 9422|  38.2k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  38.2k|    auto result = vscan_impl(buffer, format, args);
 9425|  38.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.3k, False: 20.9k]
  |  |  ------------------
  ------------------
 9426|  17.3k|        return unexpected(result.error());
 9427|  17.3k|    }
 9428|  20.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  20.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  38.2k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|  78.9k|{
 5381|  78.9k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  78.9k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  78.9k|                  "\n"
 5385|  78.9k|                  "Unsupported range type given as input to a scanning "
 5386|  78.9k|                  "function.\n"
 5387|  78.9k|                  "A range needs to have a character type (value type) "
 5388|  78.9k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  78.9k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  78.9k|                  "to be included.\n"
 5391|  78.9k|                  "See the scnlib documentation for more details.");
 5392|  78.9k|    static_assert(
 5393|  78.9k|        !std::is_same_v<T, custom_char_traits>,
 5394|  78.9k|        "\n"
 5395|  78.9k|        "Unsupported range type given as input to a scanning "
 5396|  78.9k|        "function.\n"
 5397|  78.9k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  78.9k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  78.9k|        "not supported.");
 5400|  78.9k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  78.9k|                  "\n"
 5402|  78.9k|                  "Unsupported range type given as input to a scanning "
 5403|  78.9k|                  "function.\n"
 5404|  78.9k|                  "file_marker_found cannot be used as an "
 5405|  78.9k|                  "source range type to scn::scan.\n"
 5406|  78.9k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  78.9k|                  "and do not provide an explicit source range, "
 5408|  78.9k|                  "or use scn::scan with a FILE* directly.");
 5409|  78.9k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  78.9k|                  "\n"
 5411|  78.9k|                  "Unsupported range type given as input to a scanning "
 5412|  78.9k|                  "function.\n"
 5413|  78.9k|                  "In order to be scannable, a range needs to satisfy "
 5414|  78.9k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  78.9k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  78.9k|                  "\n"
 5417|  78.9k|                  "Unsupported range type given as input to a scanning "
 5418|  78.9k|                  "function.\n"
 5419|  78.9k|                  "A range needs to model forward_range and have a valid "
 5420|  78.9k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  78.9k|                  "Examples of scannable ranges are std::string, "
 5422|  78.9k|                  "std::string_view, "
 5423|  78.9k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  78.9k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  78.9k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  78.9k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  78.9k|{
 5320|  78.9k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  78.9k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  78.9k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  78.9k|    {
 3000|  78.9k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  78.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  78.9k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  78.9k|    {
 2981|  78.9k|        return t.data();
 2982|  78.9k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|  78.9k|    {
 3383|  78.9k|        return detail::to_address(ranges::begin(derived()));
 3384|  78.9k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   310k|{
  316|   310k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   310k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   120k|    {
 2869|   120k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   120k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   120k|    {
 2850|   120k|        return decay_copy(t.begin());
 2851|   120k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  1.04M|    {
 3480|  1.04M|        return m_iterator;
 3481|  1.04M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|  78.9k|    {
 3339|  78.9k|        return static_cast<const D&>(*this);
 3340|  78.9k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  78.9k|    {
 3075|  78.9k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  78.9k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  78.9k|    {
 3041|  78.9k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  78.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  78.9k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|   676k|{
 2094|   676k|    return SCN_FWD(t);
  ------------------
  |  |  936|   676k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   676k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   352k|    {
 3496|   352k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   352k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|   554k|    {
 1740|   554k|        return has_value();
 1741|   554k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|   998k|    {
  490|   998k|        return m_has_value;
  491|   998k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   222k|    {
 1746|   222k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   222k|        return this->get_unexpected().error();
 1748|   222k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   222k|    {
  473|   222k|        return m_unexpected;
  474|   222k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  37.0k|        : base(unexpect, std::move(e.error())),
 1616|  37.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  37.0k|    {
 1618|  37.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  37.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  37.0k|          m_has_value(false)
  451|  37.0k|    {
  452|  37.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  78.9k|    {
 1316|  78.9k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|  41.8k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  41.8k|                      ranges::iterator_t<SourceRange>>) {
 6717|  41.8k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  41.8k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   349k|    {
 2869|   349k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   349k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   349k|    {
 2850|   349k|        return decay_copy(t.begin());
 2851|   349k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6701|  41.8k|{
 6702|  41.8k|    return ranges::end(source);
 6703|  41.8k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   111k|    {
 2926|   111k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   111k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   111k|    {
 2908|   111k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   111k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|   795k|    {
 3484|   795k|        return m_sentinel;
 3485|   795k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|   220k|    {
 1795|   220k|        return value();
 1796|   220k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|   220k|    {
 1769|   220k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   220k|        return this->get_value();
 1771|   220k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|   220k|    {
  456|   220k|        return m_value;
  457|   220k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  41.8k|        : base(std::in_place, std::forward<U>(val)),
 1570|  41.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  41.8k|    {
 1572|  41.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  41.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  41.8k|    {
  442|  41.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8782|  25.4k|    {
 8783|  25.4k|        return m_str;
 8784|  25.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  56.0k|{
 6115|  56.0k|    detail::check_scan_arg_types<Args...>();
 6116|  56.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  56.0k|}
_ZN3scn2v46detail20check_scan_arg_typesIJ2tmEEEbv:
 5829|   121k|{
 5830|   121k|    constexpr bool default_constructible_constraint =
 5831|   121k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   121k|    static_assert(default_constructible_constraint,
 5833|   121k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   121k|    constexpr bool destructible_constraint =
 5836|   121k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   121k|    static_assert(destructible_constraint,
 5838|   121k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   121k|    constexpr bool non_reference_constraint =
 5841|   121k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   121k|    static_assert(non_reference_constraint,
 5843|   121k|                  "Scan argument types must not be references");
 5844|       |
 5845|   121k|    constexpr bool movable_constraint =
 5846|   121k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   121k|    static_assert(movable_constraint,
 5848|   121k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   121k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   121k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   121k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  56.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  56.0k|    {
 6092|  56.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  56.0k|    {
 6100|  56.0k|        return {detail::make_arg<
 6101|  56.0k|            kind, Context,
 6102|  56.0k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  56.0k|                                 typename Context::char_type>::value>(args)...};
 6104|  56.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25E2tmvEENS1_9arg_valueERT2_:
 5888|  56.0k|{
 5889|  56.0k|    return make_value<Context>(value);
 5890|  56.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEEDaRT0_:
 5814|  57.7k|{
 5815|  57.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  57.7k|    else {
 5822|  57.7k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  57.7k|            value, context_tag<Context>{}));
 5824|  57.7k|    }
 5825|  57.7k|}
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  57.7k|    {
 5720|  57.7k|        return {};
 5721|  57.7k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5783|  57.7k|{
 5784|  57.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  57.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  57.7k|    constexpr bool scannable_char =
 5788|  57.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  57.7k|    static_assert(scannable_char,
 5790|  57.7k|                  "Cannot scan an argument of an unsupported character "
 5791|  57.7k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  57.7k|    constexpr bool scannable_const =
 5794|  57.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  57.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  57.7k|    constexpr bool scannable_disabled =
 5798|  57.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  57.7k|    static_assert(scannable_disabled,
 5800|  57.7k|                  "Cannot scan an argument that has been disabled by "
 5801|  57.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  57.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  57.7k|    static_assert(
 5805|  57.7k|        scannable,
 5806|  57.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  57.7k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  57.7k|    return arg_value{arg};
 5810|  57.7k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  57.7k|        : custom_value{static_cast<void*>(&val.val),
 5603|  57.7k|                       scan_custom_arg<T, Context>}
 5604|  57.7k|    {
 5605|  57.7k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  57.7k|    {
 5621|  57.7k|        static_assert(!is_type_disabled<T>,
 5622|  57.7k|                      "Scanning of custom types is disabled by "
 5623|  57.7k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  57.7k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  57.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  57.7k|        using context_type = Context;
 5627|  57.7k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  57.7k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  57.7k|        auto s = scanner_type{};
 5631|       |
 5632|  57.7k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  57.7k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  57.7k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  57.7k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  57.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.64k, False: 56.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.64k|    }
  ------------------
 5637|  56.0k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  56.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  56.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  56.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.0k, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.0k|    }                                                  \
  |  |  |  | 3939|  56.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  33.0k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  33.0k|    static_cast<    \
  |  |  935|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  33.0k|        return {};
 5641|  56.0k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  57.7k|{
 5555|  57.7k|#if SCN_HAS_EXCEPTIONS
 5556|  57.7k|    auto fmt_it = pctx.begin();
 5557|  57.7k|    try {
 5558|  57.7k|        fmt_it = s.parse(pctx);
 5559|  57.7k|    }
 5560|  57.7k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  57.7k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.64k, False: 56.0k]
  |  |  ------------------
  ------------------
 5580|  1.64k|        return e;
 5581|  1.64k|    }
 5582|  56.0k|    pctx.advance_to(fmt_it);
 5583|  56.0k|    return {};
 5584|  57.7k|}
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6298|   851k|    {
 6299|   851k|        return m_format.data();
 6300|   851k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE3endEv:
 6303|   173k|    {
 6304|   173k|        return m_format.data() + m_format.size();
 6305|   173k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6344|  4.94k|    {
 6345|  4.94k|        m_error = unexpected(detail::handle_error(
 6346|  4.94k|            scan_error{scan_error::invalid_format_string, msg}));
 6347|  4.94k|        return m_error.error();
 6348|  4.94k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   864k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   864k|    {
 3742|   864k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   864k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   864k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  14.8k|        : m_unexpected(std::forward<Err>(e))
  350|  14.8k|    {
  351|  14.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  14.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  14.8k|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  5.22M|    {
  572|  5.22M|        return m_has_value;
  573|  5.22M|    }
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|   559k|{
 4308|       |    // Pattern_White_Space property
 4309|   559k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 481k, False: 78.7k]
  |  Branch (4309:27): [True: 8.28k, False: 472k]
  ------------------
 4310|   559k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 262k, False: 289k]
  ------------------
 4311|   559k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 7.22k, False: 282k]
  ------------------
 4312|   559k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 660, False: 281k]
  ------------------
 4313|   559k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 1.00k, False: 280k]
  ------------------
 4314|   559k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 456, False: 280k]
  ------------------
 4315|   559k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 280k]
  ------------------
 4316|   559k|}
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   321k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   321k|    else {
 3981|   321k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   321k|    }
 3983|   321k|}
_ZN3scn2v424basic_scan_parse_contextIcE9get_errorEv:
 6351|   173k|    {
 6352|   173k|        return m_error;
 6353|   173k|    }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6309|   336k|    {
 6310|   336k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   336k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  3.71M|    {
 1740|  3.71M|        return has_value();
 1741|  3.71M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   663k|    {
 1746|   663k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   663k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   663k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   663k|        return this->get_unexpected().error();
 1748|   663k|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   663k|    {
  555|   663k|        return m_unexpected;
  556|   663k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   648k|        : base(unexpect, std::move(e.error())),
 1616|   648k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   648k|    {
 1618|   648k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   648k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   648k|          m_has_value(false)
  550|   648k|    {
  551|   648k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   648k|    {
 1316|   648k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   430k|    {
 1740|   430k|        return has_value();
 1741|   430k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   861k|    {
  490|   861k|        return m_has_value;
  491|   861k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   142k|    {
 1746|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   142k|        return this->get_unexpected().error();
 1748|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   142k|    {
  473|   142k|        return m_unexpected;
  474|   142k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   189k|    {
 1805|   189k|        return std::move(value());
 1806|   189k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   288k|    {
 1769|   288k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   288k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   288k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   288k|        return this->get_value();
 1771|   288k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   288k|    {
  456|   288k|        return m_value;
  457|   288k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8985|   246k|    {
 8986|   246k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   246k|    static_cast<    \
  |  |  935|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   246k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  1.90M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  1.90M|        : m_deferred_init(), m_has_value(true)
  529|  1.90M|    {
  530|  1.90M|    }
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  57.7k|    {
 5728|  57.7k|        return {val};
 5729|  57.7k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE6valuesEv:
 6393|   116k|    {
 6394|   116k|        return m_values;
 6395|   116k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  56.0k|        : basic_scan_args(store.desc, store.args.data())
 6141|  56.0k|    {
 6142|  56.0k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKNS3_9arg_valueE:
 6197|   168k|        : m_desc(desc), m_values(data)
 6198|   168k|    {
 6199|   168k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   581k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   581k|    static_cast<    \
  |  |  935|   581k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   581k|    static_cast<    \
  |  |  935|   581k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   581k|    {
 3466|   581k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8443|   168k|{
 8444|   168k|    return s;
 8445|   168k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8420|   168k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  25.4k|        : m_str(r.str)
 8778|  25.4k|    {
 8779|  25.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  26.3k|    {
 1740|  26.3k|        return has_value();
 1741|  26.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  54.2k|    {
 1815|  54.2k|        return &value();
 1816|  54.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  54.2k|    {
 1769|  54.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  54.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  54.2k|        return this->get_value();
 1771|  54.2k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6473|  41.8k|    {
 6474|  41.8k|        return ranges::begin(m_range);
 6475|  41.8k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9773|  12.7k|{
 9774|  12.7k|    auto result = make_scan_result<Source, Args...>();
 9775|  12.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  12.7k|                                   make_scan_args(result->values())));
 9777|  12.7k|    return result;
 9778|  12.7k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9502|  38.2k|{
 9503|  38.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  38.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|  38.2k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|  38.2k|{
 9438|  38.2k|#if !SCN_DISABLE_LOCALE
 9439|  38.2k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  38.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  38.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  38.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  38.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.3k, False: 20.9k]
  |  |  ------------------
  ------------------
 9446|  17.3k|        return unexpected(result.error());
 9447|  17.3k|    }
 9448|  20.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  20.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  38.2k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9814|    824|{
 9815|    824|    auto result = make_scan_result<Source, T>();
 9816|    824|    fill_scan_result(
 9817|    824|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    824|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    824|                            detail::make_arg<scan_context>(result->value())));
 9819|    824|    return result;
 9820|    824|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9515|  2.47k|{
 9516|  2.47k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  2.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  2.47k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  2.47k|{
 9462|  2.47k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  2.47k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  2.47k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.47k, False: 0]
  |  |  ------------------
  ------------------
 9466|  2.47k|        return unexpected(result.error());
 9467|  2.47k|    }
 9468|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  2.47k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5864|  1.64k|{
 5865|  1.64k|    check_scan_arg_types<T>();
 5866|       |
 5867|  1.64k|    basic_scan_arg<Context> arg;
 5868|  1.64k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  1.64k|    arg.m_value = make_value<Context>(value);
 5870|  1.64k|    return arg;
 5871|  1.64k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5959|   173k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5593|   364k|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  4.94k|    {
 6416|  4.94k|        return std::get<0>(m_values);
 6417|  4.94k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9704|  12.7k|{
 9705|  12.7k|    auto result = make_scan_result<Source, Args...>();
 9706|  12.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  12.7k|                                   make_scan_args(result->values())));
 9708|  12.7k|    return result;
 9709|  12.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEEDav:
 9660|  26.3k|{
 9661|  26.3k|    return scan_result_type<Source, Args...>();
 9662|  26.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  26.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  26.3k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  26.3k|    {
  613|  26.3k|        construct();
  614|  26.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  26.3k|    {
  694|  26.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  26.3k|        m_has_value = true;
  696|  26.3k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  26.3k|{
  396|  26.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  26.3k|        T(std::forward<Args>(args)...);
  398|  26.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6610|  26.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEEC2Ev:
 6384|   121k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   106k|    {
  718|   106k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   106k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   106k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  26.3k|{
 9646|  26.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 13.9k]
  |  |  ------------------
  ------------------
 9647|  12.3k|        out = unexpected(in.error());
 9648|  12.3k|    }
 9649|  13.9k|    else {
 9650|  13.9k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  13.9k|    static_cast<    \
  |  |  935|  13.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  13.9k|    }
 9652|  26.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  12.3k|        : base(unexpect, std::move(e.error())),
 1616|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.3k|    {
 1618|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  12.3k|        : m_has_value(false)
  637|  12.3k|    {
  638|  12.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|   148k|{
  396|   148k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   148k|        T(std::forward<Args>(args)...);
  398|   148k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  61.8k|    {
  730|  61.8k|        return reinterpret_cast<unexpected<E>*>(
  731|  61.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  61.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  61.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.3k|    {
 1316|  12.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1556|  12.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  902|  12.3k|    {
  903|  12.3k|        assign_common(std::move(other));
  904|  12.3k|        return *this;
  905|  12.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  12.3k|    {
  950|  12.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.3k, False: 0]
  ------------------
  951|  12.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   143k|    {
  687|   143k|        return m_has_value;
  688|   143k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  54.2k|    {
  653|  54.2k|        return *value_ptr();
  654|  54.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  12.3k|    {
 1046|  12.3k|        this->destroy_value();
 1047|  12.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  26.3k|    {
  708|  26.3k|        scn::detail::destroy_at(value_ptr());
  709|  26.3k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  26.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  26.3k|    else {
  408|  26.3k|        p->~T();
  409|  26.3k|    }
  410|  26.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEED2Ev:
 6617|  26.3k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.3k|    {
  678|  12.3k|        return std::move(*unexpected_ptr());
  679|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  24.7k|    {
  712|  24.7k|        scn::detail::destroy_at(unexpected_ptr());
  713|  24.7k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   296k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   296k|    else {
  408|   296k|        p->~T();
  409|   296k|    }
  410|   296k|}
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8782|  25.4k|    {
 8783|  25.4k|        return m_str;
 8784|  25.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  56.0k|{
 6115|  56.0k|    detail::check_scan_arg_types<Args...>();
 6116|  56.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  56.0k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_10tm_with_tzEEEEbv:
 5829|   121k|{
 5830|   121k|    constexpr bool default_constructible_constraint =
 5831|   121k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   121k|    static_assert(default_constructible_constraint,
 5833|   121k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   121k|    constexpr bool destructible_constraint =
 5836|   121k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   121k|    static_assert(destructible_constraint,
 5838|   121k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   121k|    constexpr bool non_reference_constraint =
 5841|   121k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   121k|    static_assert(non_reference_constraint,
 5843|   121k|                  "Scan argument types must not be references");
 5844|       |
 5845|   121k|    constexpr bool movable_constraint =
 5846|   121k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   121k|    static_assert(movable_constraint,
 5848|   121k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   121k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   121k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   121k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  56.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  56.0k|    {
 6092|  56.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  56.0k|    {
 6100|  56.0k|        return {detail::make_arg<
 6101|  56.0k|            kind, Context,
 6102|  56.0k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  56.0k|                                 typename Context::char_type>::value>(args)...};
 6104|  56.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5888|  56.0k|{
 5889|  56.0k|    return make_value<Context>(value);
 5890|  56.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEEDaRT0_:
 5814|  57.7k|{
 5815|  57.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  57.7k|    else {
 5822|  57.7k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  57.7k|            value, context_tag<Context>{}));
 5824|  57.7k|    }
 5825|  57.7k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  57.7k|    {
 5720|  57.7k|        return {};
 5721|  57.7k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5783|  57.7k|{
 5784|  57.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  57.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  57.7k|    constexpr bool scannable_char =
 5788|  57.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  57.7k|    static_assert(scannable_char,
 5790|  57.7k|                  "Cannot scan an argument of an unsupported character "
 5791|  57.7k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  57.7k|    constexpr bool scannable_const =
 5794|  57.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  57.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  57.7k|    constexpr bool scannable_disabled =
 5798|  57.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  57.7k|    static_assert(scannable_disabled,
 5800|  57.7k|                  "Cannot scan an argument that has been disabled by "
 5801|  57.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  57.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  57.7k|    static_assert(
 5805|  57.7k|        scannable,
 5806|  57.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  57.7k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  57.7k|    return arg_value{arg};
 5810|  57.7k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  57.7k|        : custom_value{static_cast<void*>(&val.val),
 5603|  57.7k|                       scan_custom_arg<T, Context>}
 5604|  57.7k|    {
 5605|  57.7k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  57.7k|    {
 5621|  57.7k|        static_assert(!is_type_disabled<T>,
 5622|  57.7k|                      "Scanning of custom types is disabled by "
 5623|  57.7k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  57.7k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  57.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  57.7k|        using context_type = Context;
 5627|  57.7k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  57.7k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  57.7k|        auto s = scanner_type{};
 5631|       |
 5632|  57.7k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  57.7k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  57.7k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  57.7k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  57.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.64k, False: 56.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.64k|    }
  ------------------
 5637|  56.0k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  56.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  56.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  56.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.0k, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.0k|    }                                                  \
  |  |  |  | 3939|  56.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  33.0k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  33.0k|    static_cast<    \
  |  |  935|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  33.0k|        return {};
 5641|  56.0k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  57.7k|{
 5555|  57.7k|#if SCN_HAS_EXCEPTIONS
 5556|  57.7k|    auto fmt_it = pctx.begin();
 5557|  57.7k|    try {
 5558|  57.7k|        fmt_it = s.parse(pctx);
 5559|  57.7k|    }
 5560|  57.7k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  57.7k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.64k, False: 56.0k]
  |  |  ------------------
  ------------------
 5580|  1.64k|        return e;
 5581|  1.64k|    }
 5582|  56.0k|    pctx.advance_to(fmt_it);
 5583|  56.0k|    return {};
 5584|  57.7k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  57.7k|    {
 5728|  57.7k|        return {val};
 5729|  57.7k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE6valuesEv:
 6393|   116k|    {
 6394|   116k|        return m_values;
 6395|   116k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  56.0k|        : basic_scan_args(store.desc, store.args.data())
 6141|  56.0k|    {
 6142|  56.0k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  25.4k|        : m_str(r.str)
 8778|  25.4k|    {
 8779|  25.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  26.3k|    {
 1740|  26.3k|        return has_value();
 1741|  26.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  54.2k|    {
 1815|  54.2k|        return &value();
 1816|  54.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  54.2k|    {
 1769|  54.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  54.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  54.2k|        return this->get_value();
 1771|  54.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  38.6k|    {
  643|  38.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 13.9k, False: 24.7k]
  ------------------
  644|  13.9k|            destroy_value();
  645|  13.9k|        }
  646|  24.7k|        else {
  647|  24.7k|            destroy_unexpected();
  648|  24.7k|        }
  649|  38.6k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9773|  12.7k|{
 9774|  12.7k|    auto result = make_scan_result<Source, Args...>();
 9775|  12.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  12.7k|                                   make_scan_args(result->values())));
 9777|  12.7k|    return result;
 9778|  12.7k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9814|    824|{
 9815|    824|    auto result = make_scan_result<Source, T>();
 9816|    824|    fill_scan_result(
 9817|    824|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    824|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    824|                            detail::make_arg<scan_context>(result->value())));
 9819|    824|    return result;
 9820|    824|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5864|  1.64k|{
 5865|  1.64k|    check_scan_arg_types<T>();
 5866|       |
 5867|  1.64k|    basic_scan_arg<Context> arg;
 5868|  1.64k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  1.64k|    arg.m_value = make_value<Context>(value);
 5870|  1.64k|    return arg;
 5871|  1.64k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  4.94k|    {
 6416|  4.94k|        return std::get<0>(m_values);
 6417|  4.94k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9704|  12.7k|{
 9705|  12.7k|    auto result = make_scan_result<Source, Args...>();
 9706|  12.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  12.7k|                                   make_scan_args(result->values())));
 9708|  12.7k|    return result;
 9709|  12.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEEDav:
 9660|  26.3k|{
 9661|  26.3k|    return scan_result_type<Source, Args...>();
 9662|  26.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  26.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  26.3k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  26.3k|    {
  613|  26.3k|        construct();
  614|  26.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  26.3k|    {
  694|  26.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  26.3k|        m_has_value = true;
  696|  26.3k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  26.3k|{
  396|  26.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  26.3k|        T(std::forward<Args>(args)...);
  398|  26.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6610|  26.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEEC2Ev:
 6384|   121k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   106k|    {
  718|   106k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   106k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   106k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  26.3k|{
 9646|  26.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 13.9k]
  |  |  ------------------
  ------------------
 9647|  12.3k|        out = unexpected(in.error());
 9648|  12.3k|    }
 9649|  13.9k|    else {
 9650|  13.9k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  13.9k|    static_cast<    \
  |  |  935|  13.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  13.9k|    }
 9652|  26.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  12.3k|        : base(unexpect, std::move(e.error())),
 1616|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.3k|    {
 1618|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  12.3k|        : m_has_value(false)
  637|  12.3k|    {
  638|  12.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  61.8k|    {
  730|  61.8k|        return reinterpret_cast<unexpected<E>*>(
  731|  61.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  61.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  61.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.3k|    {
 1316|  12.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1556|  12.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  902|  12.3k|    {
  903|  12.3k|        assign_common(std::move(other));
  904|  12.3k|        return *this;
  905|  12.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  12.3k|    {
  950|  12.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.3k, False: 0]
  ------------------
  951|  12.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   143k|    {
  687|   143k|        return m_has_value;
  688|   143k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  54.2k|    {
  653|  54.2k|        return *value_ptr();
  654|  54.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  12.3k|    {
 1046|  12.3k|        this->destroy_value();
 1047|  12.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  26.3k|    {
  708|  26.3k|        scn::detail::destroy_at(value_ptr());
  709|  26.3k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  26.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  26.3k|    else {
  408|  26.3k|        p->~T();
  409|  26.3k|    }
  410|  26.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEED2Ev:
 6617|  26.3k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.3k|    {
  678|  12.3k|        return std::move(*unexpected_ptr());
  679|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  24.7k|    {
  712|  24.7k|        scn::detail::destroy_at(unexpected_ptr());
  713|  24.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8782|  25.4k|    {
 8783|  25.4k|        return m_str;
 8784|  25.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  56.0k|{
 6115|  56.0k|    detail::check_scan_arg_types<Args...>();
 6116|  56.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  56.0k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_19datetime_componentsEEEEbv:
 5829|   121k|{
 5830|   121k|    constexpr bool default_constructible_constraint =
 5831|   121k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   121k|    static_assert(default_constructible_constraint,
 5833|   121k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   121k|    constexpr bool destructible_constraint =
 5836|   121k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   121k|    static_assert(destructible_constraint,
 5838|   121k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   121k|    constexpr bool non_reference_constraint =
 5841|   121k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   121k|    static_assert(non_reference_constraint,
 5843|   121k|                  "Scan argument types must not be references");
 5844|       |
 5845|   121k|    constexpr bool movable_constraint =
 5846|   121k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   121k|    static_assert(movable_constraint,
 5848|   121k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   121k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   121k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   121k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  56.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  56.0k|    {
 6092|  56.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  56.0k|    {
 6100|  56.0k|        return {detail::make_arg<
 6101|  56.0k|            kind, Context,
 6102|  56.0k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  56.0k|                                 typename Context::char_type>::value>(args)...};
 6104|  56.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5888|  56.0k|{
 5889|  56.0k|    return make_value<Context>(value);
 5890|  56.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEEDaRT0_:
 5814|  57.7k|{
 5815|  57.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  57.7k|    else {
 5822|  57.7k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  57.7k|            value, context_tag<Context>{}));
 5824|  57.7k|    }
 5825|  57.7k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  57.7k|    {
 5720|  57.7k|        return {};
 5721|  57.7k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5783|  57.7k|{
 5784|  57.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  57.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  57.7k|    constexpr bool scannable_char =
 5788|  57.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  57.7k|    static_assert(scannable_char,
 5790|  57.7k|                  "Cannot scan an argument of an unsupported character "
 5791|  57.7k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  57.7k|    constexpr bool scannable_const =
 5794|  57.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  57.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  57.7k|    constexpr bool scannable_disabled =
 5798|  57.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  57.7k|    static_assert(scannable_disabled,
 5800|  57.7k|                  "Cannot scan an argument that has been disabled by "
 5801|  57.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  57.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  57.7k|    static_assert(
 5805|  57.7k|        scannable,
 5806|  57.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  57.7k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  57.7k|    return arg_value{arg};
 5810|  57.7k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  57.7k|        : custom_value{static_cast<void*>(&val.val),
 5603|  57.7k|                       scan_custom_arg<T, Context>}
 5604|  57.7k|    {
 5605|  57.7k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  57.7k|    {
 5621|  57.7k|        static_assert(!is_type_disabled<T>,
 5622|  57.7k|                      "Scanning of custom types is disabled by "
 5623|  57.7k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  57.7k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  57.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  57.7k|        using context_type = Context;
 5627|  57.7k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  57.7k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  57.7k|        auto s = scanner_type{};
 5631|       |
 5632|  57.7k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  57.7k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  57.7k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  57.7k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  57.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.64k, False: 56.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.64k|    }
  ------------------
 5637|  56.0k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  56.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  56.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  56.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.0k, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.0k|    }                                                  \
  |  |  |  | 3939|  56.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  33.0k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  33.0k|    static_cast<    \
  |  |  935|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  33.0k|        return {};
 5641|  56.0k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  57.7k|{
 5555|  57.7k|#if SCN_HAS_EXCEPTIONS
 5556|  57.7k|    auto fmt_it = pctx.begin();
 5557|  57.7k|    try {
 5558|  57.7k|        fmt_it = s.parse(pctx);
 5559|  57.7k|    }
 5560|  57.7k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  57.7k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.64k, False: 56.0k]
  |  |  ------------------
  ------------------
 5580|  1.64k|        return e;
 5581|  1.64k|    }
 5582|  56.0k|    pctx.advance_to(fmt_it);
 5583|  56.0k|    return {};
 5584|  57.7k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  57.7k|    {
 5728|  57.7k|        return {val};
 5729|  57.7k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE6valuesEv:
 6393|   116k|    {
 6394|   116k|        return m_values;
 6395|   116k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  56.0k|        : basic_scan_args(store.desc, store.args.data())
 6141|  56.0k|    {
 6142|  56.0k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  25.4k|        : m_str(r.str)
 8778|  25.4k|    {
 8779|  25.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  26.3k|    {
 1740|  26.3k|        return has_value();
 1741|  26.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  54.2k|    {
 1815|  54.2k|        return &value();
 1816|  54.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  54.2k|    {
 1769|  54.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  54.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  54.2k|        return this->get_value();
 1771|  54.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  38.6k|    {
  643|  38.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 13.9k, False: 24.7k]
  ------------------
  644|  13.9k|            destroy_value();
  645|  13.9k|        }
  646|  24.7k|        else {
  647|  24.7k|            destroy_unexpected();
  648|  24.7k|        }
  649|  38.6k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9773|  12.7k|{
 9774|  12.7k|    auto result = make_scan_result<Source, Args...>();
 9775|  12.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  12.7k|                                   make_scan_args(result->values())));
 9777|  12.7k|    return result;
 9778|  12.7k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9814|    824|{
 9815|    824|    auto result = make_scan_result<Source, T>();
 9816|    824|    fill_scan_result(
 9817|    824|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    824|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    824|                            detail::make_arg<scan_context>(result->value())));
 9819|    824|    return result;
 9820|    824|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5864|  1.64k|{
 5865|  1.64k|    check_scan_arg_types<T>();
 5866|       |
 5867|  1.64k|    basic_scan_arg<Context> arg;
 5868|  1.64k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  1.64k|    arg.m_value = make_value<Context>(value);
 5870|  1.64k|    return arg;
 5871|  1.64k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  4.94k|    {
 6416|  4.94k|        return std::get<0>(m_values);
 6417|  4.94k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  37.0k|    {
 2869|  37.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  37.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  37.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  37.0k|    {
 2850|  37.0k|        return decay_copy(t.begin());
 2851|  37.0k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  2.66M|{
 2094|  2.66M|    return SCN_FWD(t);
  ------------------
  |  |  936|  2.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.66M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   188k|    {
 2926|   188k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   188k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   188k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   188k|    {
 2908|   188k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   188k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   188k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9704|  15.2k|{
 9705|  15.2k|    auto result = make_scan_result<Source, Args...>();
 9706|  15.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  15.2k|                                   make_scan_args(result->values())));
 9708|  15.2k|    return result;
 9709|  15.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEEDav:
 9660|  31.4k|{
 9661|  31.4k|    return scan_result_type<Source, Args...>();
 9662|  31.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  31.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  31.4k|        : m_value(T{}), m_has_value(true)
  427|  31.4k|    {
  428|  31.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2Ev:
 6610|  31.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6453|  94.2k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|  94.2k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  31.4k|{
 9646|  31.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  31.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 19.0k]
  |  |  ------------------
  ------------------
 9647|  12.3k|        out = unexpected(in.error());
 9648|  12.3k|    }
 9649|  19.0k|    else {
 9650|  19.0k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  19.0k|    static_cast<    \
  |  |  935|  19.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  19.0k|    }
 9652|  31.4k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  94.2k|    {
 1740|  94.2k|        return has_value();
 1741|  94.2k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   188k|    {
  490|   188k|        return m_has_value;
  491|   188k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  37.0k|    {
 1746|  37.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  37.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  37.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  37.0k|        return this->get_unexpected().error();
 1748|  37.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  37.0k|    {
  473|  37.0k|        return m_unexpected;
  474|  37.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  12.3k|        : base(unexpect, std::move(e.error())),
 1616|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.3k|    {
 1618|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  12.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.3k|          m_has_value(false)
  451|  12.3k|    {
  452|  12.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.3k|    {
 1316|  12.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1556|  12.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  902|  12.3k|    {
  903|  12.3k|        assign_common(std::move(other));
  904|  12.3k|        return *this;
  905|  12.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  12.3k|    {
  950|  12.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.3k, False: 0]
  ------------------
  951|  12.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   125k|    {
  490|   125k|        return m_has_value;
  491|   125k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  69.5k|    {
  456|  69.5k|        return m_value;
  457|  69.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  12.3k|    {
 1046|  12.3k|        this->destroy_value();
 1047|  12.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  12.3k|    {
  504|  12.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.3k|                                  std::forward<Args>(args)...);
  506|  12.3k|        m_has_value = false;
  507|  12.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.3k|    {
  473|  12.3k|        return m_unexpected;
  474|  12.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.3k|    {
  481|  12.3k|        return std::move(m_unexpected);
  482|  12.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6484|  57.1k|    {
 6485|  57.1k|        m_range = std::forward<Other>(r);
 6486|  57.1k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  57.1k|    {
 1795|  57.1k|        return value();
 1796|  57.1k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  57.1k|    {
 1769|  57.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  57.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  57.1k|        return this->get_value();
 1771|  57.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  57.1k|    {
  456|  57.1k|        return m_value;
  457|  57.1k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9484|  45.8k|{
 9485|  45.8k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|  45.8k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|  45.8k|{
 9422|  45.8k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  45.8k|    auto result = vscan_impl(buffer, format, args);
 9425|  45.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  45.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.3k, False: 28.5k]
  |  |  ------------------
  ------------------
 9426|  17.3k|        return unexpected(result.error());
 9427|  17.3k|    }
 9428|  28.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  45.8k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|  94.2k|{
 5381|  94.2k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  94.2k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  94.2k|                  "\n"
 5385|  94.2k|                  "Unsupported range type given as input to a scanning "
 5386|  94.2k|                  "function.\n"
 5387|  94.2k|                  "A range needs to have a character type (value type) "
 5388|  94.2k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  94.2k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  94.2k|                  "to be included.\n"
 5391|  94.2k|                  "See the scnlib documentation for more details.");
 5392|  94.2k|    static_assert(
 5393|  94.2k|        !std::is_same_v<T, custom_char_traits>,
 5394|  94.2k|        "\n"
 5395|  94.2k|        "Unsupported range type given as input to a scanning "
 5396|  94.2k|        "function.\n"
 5397|  94.2k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  94.2k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  94.2k|        "not supported.");
 5400|  94.2k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  94.2k|                  "\n"
 5402|  94.2k|                  "Unsupported range type given as input to a scanning "
 5403|  94.2k|                  "function.\n"
 5404|  94.2k|                  "file_marker_found cannot be used as an "
 5405|  94.2k|                  "source range type to scn::scan.\n"
 5406|  94.2k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  94.2k|                  "and do not provide an explicit source range, "
 5408|  94.2k|                  "or use scn::scan with a FILE* directly.");
 5409|  94.2k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  94.2k|                  "\n"
 5411|  94.2k|                  "Unsupported range type given as input to a scanning "
 5412|  94.2k|                  "function.\n"
 5413|  94.2k|                  "In order to be scannable, a range needs to satisfy "
 5414|  94.2k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  94.2k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  94.2k|                  "\n"
 5417|  94.2k|                  "Unsupported range type given as input to a scanning "
 5418|  94.2k|                  "function.\n"
 5419|  94.2k|                  "A range needs to model forward_range and have a valid "
 5420|  94.2k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  94.2k|                  "Examples of scannable ranges are std::string, "
 5422|  94.2k|                  "std::string_view, "
 5423|  94.2k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  94.2k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  94.2k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  94.2k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  94.2k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  94.2k|    else {
 5366|  94.2k|        return make_forward_scan_buffer(r);
 5367|  94.2k|    }
 5368|  94.2k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|  94.2k|{
 5185|  94.2k|    return basic_scan_forward_buffer_impl(range);
 5186|  94.2k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  94.2k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  94.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  94.2k|          m_cursor(ranges::begin(*m_range))
 4766|  94.2k|    {
 4767|  94.2k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|  94.2k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  94.2k|    {
 4738|  94.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|  94.2k|        : m_current_view(sv), m_is_contiguous(false)
 4428|  94.2k|    {
 4429|  94.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   170k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   151k|    {
 2869|   151k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   151k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   151k|    {
 2850|   151k|        return decay_copy(t.begin());
 2851|   151k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|   208k|    {
 3480|   208k|        return m_iterator;
 3481|   208k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|   732k|    {
 4771|   732k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 13.9k, False: 718k]
  ------------------
 4772|  13.9k|            return false;
 4773|  13.9k|        }
 4774|   718k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|   718k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|   718k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   718k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|   718k|        }
 4777|   718k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 627k, False: 91.5k]
  ------------------
 4778|   627k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|   627k|                                          this->m_current_view.begin(),
 4780|   627k|                                          this->m_current_view.end());
 4781|   627k|        }
 4782|   718k|        m_latest = *m_cursor;
 4783|   718k|        ++m_cursor;
 4784|   718k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|   718k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|   718k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|   718k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   718k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|   718k|        }
 4788|   718k|        return true;
 4789|   732k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.16M|    {
 2926|  2.16M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.16M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.16M|    {
 2908|  2.16M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.16M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  2.22M|    {
 3484|  2.22M|        return m_sentinel;
 3485|  2.22M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|  94.2k|    {
 4346|  94.2k|        SCN_UNUSED(position);
  ------------------
  |  |  915|  94.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  94.2k|        return true;
 4348|  94.2k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  37.0k|        : base(unexpect, std::move(e.error())),
 1616|  37.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  37.0k|    {
 1618|  37.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  37.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  37.0k|          m_has_value(false)
  451|  37.0k|    {
  452|  37.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  94.2k|    {
 1316|  94.2k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|  57.1k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  57.1k|                      ranges::iterator_t<SourceRange>>) {
 6717|  57.1k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  57.1k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  57.1k|    {
 2869|  57.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  57.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  57.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  57.1k|    {
 2850|  57.1k|        return decay_copy(t.begin());
 2851|  57.1k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6701|  57.1k|{
 6702|  57.1k|    return ranges::end(source);
 6703|  57.1k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  57.1k|    {
 2926|  57.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  57.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  57.1k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  57.1k|    {
 2908|  57.1k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  57.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  57.1k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  57.1k|        : base(std::in_place, std::forward<U>(val)),
 1570|  57.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  57.1k|    {
 1572|  57.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  57.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  57.1k|    {
  442|  57.1k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  30.5k|    {
 8783|  30.5k|        return m_str;
 8784|  30.5k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   151k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   151k|    static_cast<    \
  |  |  935|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   151k|    static_cast<    \
  |  |  935|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   151k|    {
 3466|   151k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  30.5k|        : m_str(r.str)
 8778|  30.5k|    {
 8779|  30.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  31.4k|    {
 1740|  31.4k|        return has_value();
 1741|  31.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  69.5k|    {
 1815|  69.5k|        return &value();
 1816|  69.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  69.5k|    {
 1769|  69.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  69.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  69.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  69.5k|        return this->get_value();
 1771|  69.5k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6473|  57.1k|    {
 6474|  57.1k|        return ranges::begin(m_range);
 6475|  57.1k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9773|  15.2k|{
 9774|  15.2k|    auto result = make_scan_result<Source, Args...>();
 9775|  15.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  15.2k|                                   make_scan_args(result->values())));
 9777|  15.2k|    return result;
 9778|  15.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9502|  45.8k|{
 9503|  45.8k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|  45.8k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|  45.8k|{
 9438|  45.8k|#if !SCN_DISABLE_LOCALE
 9439|  45.8k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  45.8k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  45.8k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  45.8k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  45.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  45.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.3k, False: 28.5k]
  |  |  ------------------
  ------------------
 9446|  17.3k|        return unexpected(result.error());
 9447|  17.3k|    }
 9448|  28.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  45.8k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9814|    824|{
 9815|    824|    auto result = make_scan_result<Source, T>();
 9816|    824|    fill_scan_result(
 9817|    824|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    824|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    824|                            detail::make_arg<scan_context>(result->value())));
 9819|    824|    return result;
 9820|    824|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9515|  2.47k|{
 9516|  2.47k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  2.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  2.47k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  2.47k|{
 9462|  2.47k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  2.47k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  2.47k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.47k, False: 0]
  |  |  ------------------
  ------------------
 9466|  2.47k|        return unexpected(result.error());
 9467|  2.47k|    }
 9468|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  2.47k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9704|  15.2k|{
 9705|  15.2k|    auto result = make_scan_result<Source, Args...>();
 9706|  15.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  15.2k|                                   make_scan_args(result->values())));
 9708|  15.2k|    return result;
 9709|  15.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9660|  31.4k|{
 9661|  31.4k|    return scan_result_type<Source, Args...>();
 9662|  31.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  31.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  31.4k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  31.4k|    {
  613|  31.4k|        construct();
  614|  31.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  31.4k|    {
  694|  31.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  31.4k|        m_has_value = true;
  696|  31.4k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  31.4k|{
  396|  31.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  31.4k|        T(std::forward<Args>(args)...);
  398|  31.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6610|  31.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   132k|    {
  718|   132k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   132k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   132k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  31.4k|{
 9646|  31.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  31.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 19.0k]
  |  |  ------------------
  ------------------
 9647|  12.3k|        out = unexpected(in.error());
 9648|  12.3k|    }
 9649|  19.0k|    else {
 9650|  19.0k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  19.0k|    static_cast<    \
  |  |  935|  19.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  19.0k|    }
 9652|  31.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  12.3k|        : base(unexpect, std::move(e.error())),
 1616|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.3k|    {
 1618|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  12.3k|        : m_has_value(false)
  637|  12.3k|    {
  638|  12.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  61.8k|    {
  730|  61.8k|        return reinterpret_cast<unexpected<E>*>(
  731|  61.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  61.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  61.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.3k|    {
 1316|  12.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  12.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  902|  12.3k|    {
  903|  12.3k|        assign_common(std::move(other));
  904|  12.3k|        return *this;
  905|  12.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  12.3k|    {
  950|  12.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.3k, False: 0]
  ------------------
  951|  12.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   169k|    {
  687|   169k|        return m_has_value;
  688|   169k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  69.5k|    {
  653|  69.5k|        return *value_ptr();
  654|  69.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  12.3k|    {
 1046|  12.3k|        this->destroy_value();
 1047|  12.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  31.4k|    {
  708|  31.4k|        scn::detail::destroy_at(value_ptr());
  709|  31.4k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  31.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  31.4k|    else {
  408|  31.4k|        p->~T();
  409|  31.4k|    }
  410|  31.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6617|  31.4k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.3k|    {
  678|  12.3k|        return std::move(*unexpected_ptr());
  679|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  24.7k|    {
  712|  24.7k|        scn::detail::destroy_at(unexpected_ptr());
  713|  24.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  30.5k|    {
 8783|  30.5k|        return m_str;
 8784|  30.5k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  30.5k|        : m_str(r.str)
 8778|  30.5k|    {
 8779|  30.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  31.4k|    {
 1740|  31.4k|        return has_value();
 1741|  31.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  69.5k|    {
 1815|  69.5k|        return &value();
 1816|  69.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  69.5k|    {
 1769|  69.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  69.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  69.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  69.5k|        return this->get_value();
 1771|  69.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  43.7k|    {
  643|  43.7k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 19.0k, False: 24.7k]
  ------------------
  644|  19.0k|            destroy_value();
  645|  19.0k|        }
  646|  24.7k|        else {
  647|  24.7k|            destroy_unexpected();
  648|  24.7k|        }
  649|  43.7k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9773|  15.2k|{
 9774|  15.2k|    auto result = make_scan_result<Source, Args...>();
 9775|  15.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  15.2k|                                   make_scan_args(result->values())));
 9777|  15.2k|    return result;
 9778|  15.2k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9814|    824|{
 9815|    824|    auto result = make_scan_result<Source, T>();
 9816|    824|    fill_scan_result(
 9817|    824|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    824|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    824|                            detail::make_arg<scan_context>(result->value())));
 9819|    824|    return result;
 9820|    824|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9704|  15.2k|{
 9705|  15.2k|    auto result = make_scan_result<Source, Args...>();
 9706|  15.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  15.2k|                                   make_scan_args(result->values())));
 9708|  15.2k|    return result;
 9709|  15.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9660|  31.4k|{
 9661|  31.4k|    return scan_result_type<Source, Args...>();
 9662|  31.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  31.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  31.4k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  31.4k|    {
  613|  31.4k|        construct();
  614|  31.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  31.4k|    {
  694|  31.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  31.4k|        m_has_value = true;
  696|  31.4k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  31.4k|{
  396|  31.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  31.4k|        T(std::forward<Args>(args)...);
  398|  31.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6610|  31.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   132k|    {
  718|   132k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   132k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   132k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  31.4k|{
 9646|  31.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  31.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 19.0k]
  |  |  ------------------
  ------------------
 9647|  12.3k|        out = unexpected(in.error());
 9648|  12.3k|    }
 9649|  19.0k|    else {
 9650|  19.0k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  19.0k|    static_cast<    \
  |  |  935|  19.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  19.0k|    }
 9652|  31.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  12.3k|        : base(unexpect, std::move(e.error())),
 1616|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.3k|    {
 1618|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  12.3k|        : m_has_value(false)
  637|  12.3k|    {
  638|  12.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  61.8k|    {
  730|  61.8k|        return reinterpret_cast<unexpected<E>*>(
  731|  61.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  61.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  61.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.3k|    {
 1316|  12.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  12.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  902|  12.3k|    {
  903|  12.3k|        assign_common(std::move(other));
  904|  12.3k|        return *this;
  905|  12.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  12.3k|    {
  950|  12.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.3k, False: 0]
  ------------------
  951|  12.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   169k|    {
  687|   169k|        return m_has_value;
  688|   169k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  69.5k|    {
  653|  69.5k|        return *value_ptr();
  654|  69.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  12.3k|    {
 1046|  12.3k|        this->destroy_value();
 1047|  12.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  31.4k|    {
  708|  31.4k|        scn::detail::destroy_at(value_ptr());
  709|  31.4k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  31.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  31.4k|    else {
  408|  31.4k|        p->~T();
  409|  31.4k|    }
  410|  31.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6617|  31.4k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.3k|    {
  678|  12.3k|        return std::move(*unexpected_ptr());
  679|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  24.7k|    {
  712|  24.7k|        scn::detail::destroy_at(unexpected_ptr());
  713|  24.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  30.5k|    {
 8783|  30.5k|        return m_str;
 8784|  30.5k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  30.5k|        : m_str(r.str)
 8778|  30.5k|    {
 8779|  30.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  31.4k|    {
 1740|  31.4k|        return has_value();
 1741|  31.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  69.5k|    {
 1815|  69.5k|        return &value();
 1816|  69.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  69.5k|    {
 1769|  69.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  69.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  69.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  69.5k|        return this->get_value();
 1771|  69.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  43.7k|    {
  643|  43.7k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 19.0k, False: 24.7k]
  ------------------
  644|  19.0k|            destroy_value();
  645|  19.0k|        }
  646|  24.7k|        else {
  647|  24.7k|            destroy_unexpected();
  648|  24.7k|        }
  649|  43.7k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9773|  15.2k|{
 9774|  15.2k|    auto result = make_scan_result<Source, Args...>();
 9775|  15.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  15.2k|                                   make_scan_args(result->values())));
 9777|  15.2k|    return result;
 9778|  15.2k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9814|    824|{
 9815|    824|    auto result = make_scan_result<Source, T>();
 9816|    824|    fill_scan_result(
 9817|    824|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    824|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    824|                            detail::make_arg<scan_context>(result->value())));
 9819|    824|    return result;
 9820|    824|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  75.8k|    {
 2869|  75.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  75.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  75.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  75.8k|    {
 2850|  75.8k|        return decay_copy(t.begin());
 2851|  75.8k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|   975k|{
 2094|   975k|    return SCN_FWD(t);
  ------------------
  |  |  936|   975k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   975k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   193k|    {
 2926|   193k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   193k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   193k|    {
 2908|   193k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   193k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEEDav:
 9660|  31.9k|{
 9661|  31.9k|    return scan_result_type<Source, Args...>();
 9662|  31.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  31.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  31.9k|        : m_value(T{}), m_has_value(true)
  427|  31.9k|    {
  428|  31.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2Ev:
 6610|  31.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6453|  95.7k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  95.7k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  31.9k|{
 9646|  31.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.7k, False: 7.19k]
  |  |  ------------------
  ------------------
 9647|  24.7k|        out = unexpected(in.error());
 9648|  24.7k|    }
 9649|  7.19k|    else {
 9650|  7.19k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  7.19k|    static_cast<    \
  |  |  935|  7.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  7.19k|    }
 9652|  31.9k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  95.7k|    {
 1740|  95.7k|        return has_value();
 1741|  95.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   191k|    {
  490|   191k|        return m_has_value;
  491|   191k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  74.1k|    {
 1746|  74.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  74.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  74.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  74.1k|        return this->get_unexpected().error();
 1748|  74.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  74.1k|    {
  473|  74.1k|        return m_unexpected;
  474|  74.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  24.7k|        : base(unexpect, std::move(e.error())),
 1616|  24.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  24.7k|    {
 1618|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  24.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  24.7k|          m_has_value(false)
  451|  24.7k|    {
  452|  24.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  24.7k|    {
 1316|  24.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1556|  24.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  902|  24.7k|    {
  903|  24.7k|        assign_common(std::move(other));
  904|  24.7k|        return *this;
  905|  24.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  24.7k|    {
  950|  24.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 24.7k, False: 0]
  ------------------
  951|  24.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 24.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  24.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  24.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   127k|    {
  490|   127k|        return m_has_value;
  491|   127k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  46.3k|    {
  456|  46.3k|        return m_value;
  457|  46.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  24.7k|    {
 1046|  24.7k|        this->destroy_value();
 1047|  24.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  24.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  24.7k|    {
  504|  24.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  24.7k|                                  std::forward<Args>(args)...);
  506|  24.7k|        m_has_value = false;
  507|  24.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  24.7k|    {
  473|  24.7k|        return m_unexpected;
  474|  24.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  24.7k|    {
  481|  24.7k|        return std::move(m_unexpected);
  482|  24.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6484|  21.5k|    {
 6485|  21.5k|        m_range = std::forward<Other>(r);
 6486|  21.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  21.5k|    {
 1795|  21.5k|        return value();
 1796|  21.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  21.5k|    {
 1769|  21.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  21.5k|        return this->get_value();
 1771|  21.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  21.5k|    {
  456|  21.5k|        return m_value;
  457|  21.5k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|  45.4k|{
 9422|  45.4k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  45.4k|    auto result = vscan_impl(buffer, format, args);
 9425|  45.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.6k, False: 10.7k]
  |  |  ------------------
  ------------------
 9426|  34.6k|        return unexpected(result.error());
 9427|  34.6k|    }
 9428|  10.7k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  45.4k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|  95.7k|{
 5381|  95.7k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  95.7k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  95.7k|                  "\n"
 5385|  95.7k|                  "Unsupported range type given as input to a scanning "
 5386|  95.7k|                  "function.\n"
 5387|  95.7k|                  "A range needs to have a character type (value type) "
 5388|  95.7k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  95.7k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  95.7k|                  "to be included.\n"
 5391|  95.7k|                  "See the scnlib documentation for more details.");
 5392|  95.7k|    static_assert(
 5393|  95.7k|        !std::is_same_v<T, custom_char_traits>,
 5394|  95.7k|        "\n"
 5395|  95.7k|        "Unsupported range type given as input to a scanning "
 5396|  95.7k|        "function.\n"
 5397|  95.7k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  95.7k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  95.7k|        "not supported.");
 5400|  95.7k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  95.7k|                  "\n"
 5402|  95.7k|                  "Unsupported range type given as input to a scanning "
 5403|  95.7k|                  "function.\n"
 5404|  95.7k|                  "file_marker_found cannot be used as an "
 5405|  95.7k|                  "source range type to scn::scan.\n"
 5406|  95.7k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  95.7k|                  "and do not provide an explicit source range, "
 5408|  95.7k|                  "or use scn::scan with a FILE* directly.");
 5409|  95.7k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  95.7k|                  "\n"
 5411|  95.7k|                  "Unsupported range type given as input to a scanning "
 5412|  95.7k|                  "function.\n"
 5413|  95.7k|                  "In order to be scannable, a range needs to satisfy "
 5414|  95.7k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  95.7k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  95.7k|                  "\n"
 5417|  95.7k|                  "Unsupported range type given as input to a scanning "
 5418|  95.7k|                  "function.\n"
 5419|  95.7k|                  "A range needs to model forward_range and have a valid "
 5420|  95.7k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  95.7k|                  "Examples of scannable ranges are std::string, "
 5422|  95.7k|                  "std::string_view, "
 5423|  95.7k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  95.7k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  95.7k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  95.7k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  95.7k|{
 5320|  95.7k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  95.7k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  95.7k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  95.7k|    {
 3000|  95.7k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  95.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  95.7k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  95.7k|    {
 2981|  95.7k|        return t.data();
 2982|  95.7k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|  95.7k|    {
 3383|  95.7k|        return detail::to_address(ranges::begin(derived()));
 3384|  95.7k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   282k|{
  316|   282k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   282k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   282k|{
  294|   282k|    return p;
  295|   282k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   117k|    {
 2869|   117k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   117k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   117k|    {
 2850|   117k|        return decay_copy(t.begin());
 2851|   117k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  1.68M|    {
 3480|  1.68M|        return m_iterator;
 3481|  1.68M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|  95.7k|    {
 3339|  95.7k|        return static_cast<const D&>(*this);
 3340|  95.7k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  95.7k|    {
 3075|  95.7k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  95.7k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  95.7k|    {
 3041|  95.7k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  95.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  95.7k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   303k|    {
 3496|   303k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   303k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  74.1k|        : base(unexpect, std::move(e.error())),
 1616|  74.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  74.1k|    {
 1618|  74.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  74.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  74.1k|          m_has_value(false)
  451|  74.1k|    {
  452|  74.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  95.7k|    {
 1316|  95.7k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|  21.5k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  21.5k|                      ranges::iterator_t<SourceRange>>) {
 6717|  21.5k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  21.5k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   297k|    {
 2869|   297k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   297k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   297k|    {
 2850|   297k|        return decay_copy(t.begin());
 2851|   297k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6701|  21.5k|{
 6702|  21.5k|    return ranges::end(source);
 6703|  21.5k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   110k|    {
 2926|   110k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   110k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   110k|    {
 2908|   110k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   110k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  1.34M|    {
 3484|  1.34M|        return m_sentinel;
 3485|  1.34M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  21.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  21.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  21.5k|    {
 1572|  21.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  21.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  21.5k|    {
  442|  21.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8782|  30.2k|    {
 8783|  30.2k|        return m_str;
 8784|  30.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  60.5k|{
 6115|  60.5k|    detail::check_scan_arg_types<Args...>();
 6116|  60.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  60.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  60.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  60.5k|    {
 6092|  60.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  60.5k|    {
 6100|  60.5k|        return {detail::make_arg<
 6101|  60.5k|            kind, Context,
 6102|  60.5k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  60.5k|                                 typename Context::char_type>::value>(args)...};
 6104|  60.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25E2tmvEENS1_9arg_valueERT2_:
 5888|  60.5k|{
 5889|  60.5k|    return make_value<Context>(value);
 5890|  60.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEEDaRT0_:
 5814|  63.8k|{
 5815|  63.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  63.8k|    else {
 5822|  63.8k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  63.8k|            value, context_tag<Context>{}));
 5824|  63.8k|    }
 5825|  63.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  63.8k|    {
 5720|  63.8k|        return {};
 5721|  63.8k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5783|  63.8k|{
 5784|  63.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  63.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  63.8k|    constexpr bool scannable_char =
 5788|  63.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  63.8k|    static_assert(scannable_char,
 5790|  63.8k|                  "Cannot scan an argument of an unsupported character "
 5791|  63.8k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  63.8k|    constexpr bool scannable_const =
 5794|  63.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  63.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  63.8k|    constexpr bool scannable_disabled =
 5798|  63.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  63.8k|    static_assert(scannable_disabled,
 5800|  63.8k|                  "Cannot scan an argument that has been disabled by "
 5801|  63.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  63.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  63.8k|    static_assert(
 5805|  63.8k|        scannable,
 5806|  63.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  63.8k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  63.8k|    return arg_value{arg};
 5810|  63.8k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  63.8k|        : custom_value{static_cast<void*>(&val.val),
 5603|  63.8k|                       scan_custom_arg<T, Context>}
 5604|  63.8k|    {
 5605|  63.8k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  63.8k|    {
 5621|  63.8k|        static_assert(!is_type_disabled<T>,
 5622|  63.8k|                      "Scanning of custom types is disabled by "
 5623|  63.8k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  63.8k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  63.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  63.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  63.8k|        using context_type = Context;
 5627|  63.8k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  63.8k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  63.8k|        auto s = scanner_type{};
 5631|       |
 5632|  63.8k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  63.8k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  63.8k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  63.8k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  63.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  63.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.29k, False: 60.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.29k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.29k|    }
  ------------------
 5637|  60.5k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  60.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  60.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  60.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46.1k, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  46.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  46.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  46.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  46.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  46.1k|    }                                                  \
  |  |  |  | 3939|  60.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  14.3k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  14.3k|    static_cast<    \
  |  |  935|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  14.3k|        return {};
 5641|  60.5k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  63.8k|{
 5555|  63.8k|#if SCN_HAS_EXCEPTIONS
 5556|  63.8k|    auto fmt_it = pctx.begin();
 5557|  63.8k|    try {
 5558|  63.8k|        fmt_it = s.parse(pctx);
 5559|  63.8k|    }
 5560|  63.8k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  63.8k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  63.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.29k, False: 60.5k]
  |  |  ------------------
  ------------------
 5580|  3.29k|        return e;
 5581|  3.29k|    }
 5582|  60.5k|    pctx.advance_to(fmt_it);
 5583|  60.5k|    return {};
 5584|  63.8k|}
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6298|   927k|    {
 6299|   927k|        return m_format.data();
 6300|   927k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE3endEv:
 6303|   191k|    {
 6304|   191k|        return m_format.data() + m_format.size();
 6305|   191k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6344|  9.88k|    {
 6345|  9.88k|        m_error = unexpected(detail::handle_error(
 6346|  9.88k|            scan_error{scan_error::invalid_format_string, msg}));
 6347|  9.88k|        return m_error.error();
 6348|  9.88k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   447k|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   447k|    else {
 4075|       |        // utf-32
 4076|   447k|        static_assert(sizeof(U) == 4);
 4077|   447k|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   447k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   447k|        return 1;
 4079|   447k|    }
 4080|   447k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   348k|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   348k|    else {
 4281|   348k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   348k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   348k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   348k|        auto cp = static_cast<char32_t>(input.front());
 4283|   348k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.4k, False: 304k]
  |  |  ------------------
  ------------------
 4284|  43.4k|            return invalid_code_point;
 4285|  43.4k|        }
 4286|   304k|        return cp;
 4287|   348k|    }
 4288|   348k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   363k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   363k|    else {
 3981|   363k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   363k|    }
 3983|   363k|}
_ZN3scn2v424basic_scan_parse_contextIwE9get_errorEv:
 6351|   191k|    {
 6352|   191k|        return m_error;
 6353|   191k|    }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6309|   363k|    {
 6310|   363k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   363k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   458k|    {
 1740|   458k|        return has_value();
 1741|   458k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   917k|    {
  490|   917k|        return m_has_value;
  491|   917k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   282k|    {
 1746|   282k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   282k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   282k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   282k|        return this->get_unexpected().error();
 1748|   282k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   282k|    {
  473|   282k|        return m_unexpected;
  474|   282k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   132k|    {
 1805|   132k|        return std::move(value());
 1806|   132k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   176k|    {
 1769|   176k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   176k|        return this->get_value();
 1771|   176k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   176k|    {
  456|   176k|        return m_value;
  457|   176k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8985|   154k|    {
 8986|   154k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   154k|    static_cast<    \
  |  |  935|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   154k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  63.8k|    {
 5728|  63.8k|        return {val};
 5729|  63.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  60.5k|        : basic_scan_args(store.desc, store.args.data())
 6141|  60.5k|    {
 6142|  60.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKNS3_9arg_valueE:
 6197|   181k|        : m_desc(desc), m_values(data)
 6198|   181k|    {
 6199|   181k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   840k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   840k|    static_cast<    \
  |  |  935|   840k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   840k|    static_cast<    \
  |  |  935|   840k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   840k|    {
 3466|   840k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8448|   181k|{
 8449|   181k|    return s;
 8450|   181k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8420|   181k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  30.2k|        : m_str(r.str)
 8778|  30.2k|    {
 8779|  30.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  31.9k|    {
 1740|  31.9k|        return has_value();
 1741|  31.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  46.3k|    {
 1815|  46.3k|        return &value();
 1816|  46.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  46.3k|    {
 1769|  46.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  46.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  46.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  46.3k|        return this->get_value();
 1771|  46.3k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6473|  21.5k|    {
 6474|  21.5k|        return ranges::begin(m_range);
 6475|  21.5k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|  45.4k|{
 9438|  45.4k|#if !SCN_DISABLE_LOCALE
 9439|  45.4k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  45.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  45.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  45.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  45.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.6k, False: 10.7k]
  |  |  ------------------
  ------------------
 9446|  34.6k|        return unexpected(result.error());
 9447|  34.6k|    }
 9448|  10.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  45.4k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  4.94k|{
 9462|  4.94k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  4.94k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  4.94k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.94k, False: 0]
  |  |  ------------------
  ------------------
 9466|  4.94k|        return unexpected(result.error());
 9467|  4.94k|    }
 9468|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  4.94k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5864|  3.29k|{
 5865|  3.29k|    check_scan_arg_types<T>();
 5866|       |
 5867|  3.29k|    basic_scan_arg<Context> arg;
 5868|  3.29k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  3.29k|    arg.m_value = make_value<Context>(value);
 5870|  3.29k|    return arg;
 5871|  3.29k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5959|   191k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEEDav:
 9660|  31.9k|{
 9661|  31.9k|    return scan_result_type<Source, Args...>();
 9662|  31.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  31.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  31.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  31.9k|    {
  613|  31.9k|        construct();
  614|  31.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  31.9k|    {
  694|  31.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  31.9k|        m_has_value = true;
  696|  31.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  31.9k|{
  396|  31.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  31.9k|        T(std::forward<Args>(args)...);
  398|  31.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6610|  31.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   110k|    {
  718|   110k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   110k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   110k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  31.9k|{
 9646|  31.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.7k, False: 7.19k]
  |  |  ------------------
  ------------------
 9647|  24.7k|        out = unexpected(in.error());
 9648|  24.7k|    }
 9649|  7.19k|    else {
 9650|  7.19k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  7.19k|    static_cast<    \
  |  |  935|  7.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  7.19k|    }
 9652|  31.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  24.7k|        : base(unexpect, std::move(e.error())),
 1616|  24.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  24.7k|    {
 1618|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  24.7k|        : m_has_value(false)
  637|  24.7k|    {
  638|  24.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  24.7k|    {
  701|  24.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.7k|                                  std::forward<Args>(args)...);
  703|  24.7k|        m_has_value = false;
  704|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   123k|    {
  730|   123k|        return reinterpret_cast<unexpected<E>*>(
  731|   123k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   123k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   123k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  24.7k|    {
 1316|  24.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1556|  24.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  902|  24.7k|    {
  903|  24.7k|        assign_common(std::move(other));
  904|  24.7k|        return *this;
  905|  24.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  24.7k|    {
  950|  24.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 24.7k, False: 0]
  ------------------
  951|  24.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 24.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  24.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  24.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   184k|    {
  687|   184k|        return m_has_value;
  688|   184k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  46.3k|    {
  653|  46.3k|        return *value_ptr();
  654|  46.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  24.7k|    {
 1046|  24.7k|        this->destroy_value();
 1047|  24.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  31.9k|    {
  708|  31.9k|        scn::detail::destroy_at(value_ptr());
  709|  31.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  31.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  31.9k|    else {
  408|  31.9k|        p->~T();
  409|  31.9k|    }
  410|  31.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEED2Ev:
 6617|  31.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  24.7k|    {
  701|  24.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.7k|                                  std::forward<Args>(args)...);
  703|  24.7k|        m_has_value = false;
  704|  24.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  24.7k|    {
  678|  24.7k|        return std::move(*unexpected_ptr());
  679|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  49.4k|    {
  712|  49.4k|        scn::detail::destroy_at(unexpected_ptr());
  713|  49.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8782|  30.2k|    {
 8783|  30.2k|        return m_str;
 8784|  30.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  60.5k|{
 6115|  60.5k|    detail::check_scan_arg_types<Args...>();
 6116|  60.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  60.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  60.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  60.5k|    {
 6092|  60.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  60.5k|    {
 6100|  60.5k|        return {detail::make_arg<
 6101|  60.5k|            kind, Context,
 6102|  60.5k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  60.5k|                                 typename Context::char_type>::value>(args)...};
 6104|  60.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5888|  60.5k|{
 5889|  60.5k|    return make_value<Context>(value);
 5890|  60.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEEDaRT0_:
 5814|  63.8k|{
 5815|  63.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  63.8k|    else {
 5822|  63.8k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  63.8k|            value, context_tag<Context>{}));
 5824|  63.8k|    }
 5825|  63.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  63.8k|    {
 5720|  63.8k|        return {};
 5721|  63.8k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5783|  63.8k|{
 5784|  63.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  63.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  63.8k|    constexpr bool scannable_char =
 5788|  63.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  63.8k|    static_assert(scannable_char,
 5790|  63.8k|                  "Cannot scan an argument of an unsupported character "
 5791|  63.8k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  63.8k|    constexpr bool scannable_const =
 5794|  63.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  63.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  63.8k|    constexpr bool scannable_disabled =
 5798|  63.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  63.8k|    static_assert(scannable_disabled,
 5800|  63.8k|                  "Cannot scan an argument that has been disabled by "
 5801|  63.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  63.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  63.8k|    static_assert(
 5805|  63.8k|        scannable,
 5806|  63.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  63.8k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  63.8k|    return arg_value{arg};
 5810|  63.8k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  63.8k|        : custom_value{static_cast<void*>(&val.val),
 5603|  63.8k|                       scan_custom_arg<T, Context>}
 5604|  63.8k|    {
 5605|  63.8k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  63.8k|    {
 5621|  63.8k|        static_assert(!is_type_disabled<T>,
 5622|  63.8k|                      "Scanning of custom types is disabled by "
 5623|  63.8k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  63.8k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  63.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  63.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  63.8k|        using context_type = Context;
 5627|  63.8k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  63.8k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  63.8k|        auto s = scanner_type{};
 5631|       |
 5632|  63.8k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  63.8k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  63.8k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  63.8k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  63.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  63.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.29k, False: 60.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.29k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.29k|    }
  ------------------
 5637|  60.5k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  60.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  60.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  60.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46.1k, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  46.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  46.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  46.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  46.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  46.1k|    }                                                  \
  |  |  |  | 3939|  60.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  14.3k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  14.3k|    static_cast<    \
  |  |  935|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  14.3k|        return {};
 5641|  60.5k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  63.8k|{
 5555|  63.8k|#if SCN_HAS_EXCEPTIONS
 5556|  63.8k|    auto fmt_it = pctx.begin();
 5557|  63.8k|    try {
 5558|  63.8k|        fmt_it = s.parse(pctx);
 5559|  63.8k|    }
 5560|  63.8k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  63.8k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  63.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.29k, False: 60.5k]
  |  |  ------------------
  ------------------
 5580|  3.29k|        return e;
 5581|  3.29k|    }
 5582|  60.5k|    pctx.advance_to(fmt_it);
 5583|  60.5k|    return {};
 5584|  63.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  63.8k|    {
 5728|  63.8k|        return {val};
 5729|  63.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  60.5k|        : basic_scan_args(store.desc, store.args.data())
 6141|  60.5k|    {
 6142|  60.5k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  30.2k|        : m_str(r.str)
 8778|  30.2k|    {
 8779|  30.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  31.9k|    {
 1740|  31.9k|        return has_value();
 1741|  31.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  46.3k|    {
 1815|  46.3k|        return &value();
 1816|  46.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  46.3k|    {
 1769|  46.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  46.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  46.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  46.3k|        return this->get_value();
 1771|  46.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  56.6k|    {
  643|  56.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.19k, False: 49.4k]
  ------------------
  644|  7.19k|            destroy_value();
  645|  7.19k|        }
  646|  49.4k|        else {
  647|  49.4k|            destroy_unexpected();
  648|  49.4k|        }
  649|  56.6k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5864|  3.29k|{
 5865|  3.29k|    check_scan_arg_types<T>();
 5866|       |
 5867|  3.29k|    basic_scan_arg<Context> arg;
 5868|  3.29k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  3.29k|    arg.m_value = make_value<Context>(value);
 5870|  3.29k|    return arg;
 5871|  3.29k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEEDav:
 9660|  31.9k|{
 9661|  31.9k|    return scan_result_type<Source, Args...>();
 9662|  31.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  31.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  31.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  31.9k|    {
  613|  31.9k|        construct();
  614|  31.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  31.9k|    {
  694|  31.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  31.9k|        m_has_value = true;
  696|  31.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  31.9k|{
  396|  31.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  31.9k|        T(std::forward<Args>(args)...);
  398|  31.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6610|  31.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   110k|    {
  718|   110k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   110k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   110k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  31.9k|{
 9646|  31.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.7k, False: 7.19k]
  |  |  ------------------
  ------------------
 9647|  24.7k|        out = unexpected(in.error());
 9648|  24.7k|    }
 9649|  7.19k|    else {
 9650|  7.19k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  7.19k|    static_cast<    \
  |  |  935|  7.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  7.19k|    }
 9652|  31.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  24.7k|        : base(unexpect, std::move(e.error())),
 1616|  24.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  24.7k|    {
 1618|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  24.7k|        : m_has_value(false)
  637|  24.7k|    {
  638|  24.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  24.7k|    {
  701|  24.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.7k|                                  std::forward<Args>(args)...);
  703|  24.7k|        m_has_value = false;
  704|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   123k|    {
  730|   123k|        return reinterpret_cast<unexpected<E>*>(
  731|   123k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   123k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   123k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  24.7k|    {
 1316|  24.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1556|  24.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  902|  24.7k|    {
  903|  24.7k|        assign_common(std::move(other));
  904|  24.7k|        return *this;
  905|  24.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  24.7k|    {
  950|  24.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 24.7k, False: 0]
  ------------------
  951|  24.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 24.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  24.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  24.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   184k|    {
  687|   184k|        return m_has_value;
  688|   184k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  46.3k|    {
  653|  46.3k|        return *value_ptr();
  654|  46.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  24.7k|    {
 1046|  24.7k|        this->destroy_value();
 1047|  24.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  31.9k|    {
  708|  31.9k|        scn::detail::destroy_at(value_ptr());
  709|  31.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  31.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  31.9k|    else {
  408|  31.9k|        p->~T();
  409|  31.9k|    }
  410|  31.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEED2Ev:
 6617|  31.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  24.7k|    {
  701|  24.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.7k|                                  std::forward<Args>(args)...);
  703|  24.7k|        m_has_value = false;
  704|  24.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  24.7k|    {
  678|  24.7k|        return std::move(*unexpected_ptr());
  679|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  49.4k|    {
  712|  49.4k|        scn::detail::destroy_at(unexpected_ptr());
  713|  49.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8782|  30.2k|    {
 8783|  30.2k|        return m_str;
 8784|  30.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  60.5k|{
 6115|  60.5k|    detail::check_scan_arg_types<Args...>();
 6116|  60.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  60.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  60.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  60.5k|    {
 6092|  60.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  60.5k|    {
 6100|  60.5k|        return {detail::make_arg<
 6101|  60.5k|            kind, Context,
 6102|  60.5k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  60.5k|                                 typename Context::char_type>::value>(args)...};
 6104|  60.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5888|  60.5k|{
 5889|  60.5k|    return make_value<Context>(value);
 5890|  60.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEEDaRT0_:
 5814|  63.8k|{
 5815|  63.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  63.8k|    else {
 5822|  63.8k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  63.8k|            value, context_tag<Context>{}));
 5824|  63.8k|    }
 5825|  63.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  63.8k|    {
 5720|  63.8k|        return {};
 5721|  63.8k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5783|  63.8k|{
 5784|  63.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  63.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  63.8k|    constexpr bool scannable_char =
 5788|  63.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  63.8k|    static_assert(scannable_char,
 5790|  63.8k|                  "Cannot scan an argument of an unsupported character "
 5791|  63.8k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  63.8k|    constexpr bool scannable_const =
 5794|  63.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  63.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  63.8k|    constexpr bool scannable_disabled =
 5798|  63.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  63.8k|    static_assert(scannable_disabled,
 5800|  63.8k|                  "Cannot scan an argument that has been disabled by "
 5801|  63.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  63.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  63.8k|    static_assert(
 5805|  63.8k|        scannable,
 5806|  63.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  63.8k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  63.8k|    return arg_value{arg};
 5810|  63.8k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  63.8k|        : custom_value{static_cast<void*>(&val.val),
 5603|  63.8k|                       scan_custom_arg<T, Context>}
 5604|  63.8k|    {
 5605|  63.8k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  63.8k|    {
 5621|  63.8k|        static_assert(!is_type_disabled<T>,
 5622|  63.8k|                      "Scanning of custom types is disabled by "
 5623|  63.8k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  63.8k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  63.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  63.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  63.8k|        using context_type = Context;
 5627|  63.8k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  63.8k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  63.8k|        auto s = scanner_type{};
 5631|       |
 5632|  63.8k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  63.8k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  63.8k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  63.8k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  63.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  63.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.29k, False: 60.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.29k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.29k|    }
  ------------------
 5637|  60.5k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  60.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  60.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  60.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46.1k, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  46.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  46.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  46.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  46.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  46.1k|    }                                                  \
  |  |  |  | 3939|  60.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  14.3k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  14.3k|    static_cast<    \
  |  |  935|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  14.3k|        return {};
 5641|  60.5k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  63.8k|{
 5555|  63.8k|#if SCN_HAS_EXCEPTIONS
 5556|  63.8k|    auto fmt_it = pctx.begin();
 5557|  63.8k|    try {
 5558|  63.8k|        fmt_it = s.parse(pctx);
 5559|  63.8k|    }
 5560|  63.8k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  63.8k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  63.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.29k, False: 60.5k]
  |  |  ------------------
  ------------------
 5580|  3.29k|        return e;
 5581|  3.29k|    }
 5582|  60.5k|    pctx.advance_to(fmt_it);
 5583|  60.5k|    return {};
 5584|  63.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  63.8k|    {
 5728|  63.8k|        return {val};
 5729|  63.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  60.5k|        : basic_scan_args(store.desc, store.args.data())
 6141|  60.5k|    {
 6142|  60.5k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  30.2k|        : m_str(r.str)
 8778|  30.2k|    {
 8779|  30.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  31.9k|    {
 1740|  31.9k|        return has_value();
 1741|  31.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  46.3k|    {
 1815|  46.3k|        return &value();
 1816|  46.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  46.3k|    {
 1769|  46.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  46.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  46.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  46.3k|        return this->get_value();
 1771|  46.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  56.6k|    {
  643|  56.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.19k, False: 49.4k]
  ------------------
  644|  7.19k|            destroy_value();
  645|  7.19k|        }
  646|  49.4k|        else {
  647|  49.4k|            destroy_unexpected();
  648|  49.4k|        }
  649|  56.6k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5864|  3.29k|{
 5865|  3.29k|    check_scan_arg_types<T>();
 5866|       |
 5867|  3.29k|    basic_scan_arg<Context> arg;
 5868|  3.29k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  3.29k|    arg.m_value = make_value<Context>(value);
 5870|  3.29k|    return arg;
 5871|  3.29k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  74.1k|    {
 2869|  74.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  74.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  74.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  74.1k|    {
 2850|  74.1k|        return decay_copy(t.begin());
 2851|  74.1k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  1.37M|{
 2094|  1.37M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.37M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   191k|    {
 2926|   191k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   191k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   191k|    {
 2908|   191k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   191k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEEDav:
 9660|  31.9k|{
 9661|  31.9k|    return scan_result_type<Source, Args...>();
 9662|  31.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  31.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  31.9k|        : m_value(T{}), m_has_value(true)
  427|  31.9k|    {
  428|  31.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2Ev:
 6610|  31.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6453|  95.7k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|  95.7k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  31.9k|{
 9646|  31.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.7k, False: 7.19k]
  |  |  ------------------
  ------------------
 9647|  24.7k|        out = unexpected(in.error());
 9648|  24.7k|    }
 9649|  7.19k|    else {
 9650|  7.19k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  7.19k|    static_cast<    \
  |  |  935|  7.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  7.19k|    }
 9652|  31.9k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  95.7k|    {
 1740|  95.7k|        return has_value();
 1741|  95.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   191k|    {
  490|   191k|        return m_has_value;
  491|   191k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  74.1k|    {
 1746|  74.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  74.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  74.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  74.1k|        return this->get_unexpected().error();
 1748|  74.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  74.1k|    {
  473|  74.1k|        return m_unexpected;
  474|  74.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  24.7k|        : base(unexpect, std::move(e.error())),
 1616|  24.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  24.7k|    {
 1618|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  24.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  24.7k|          m_has_value(false)
  451|  24.7k|    {
  452|  24.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  24.7k|    {
 1316|  24.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1556|  24.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  902|  24.7k|    {
  903|  24.7k|        assign_common(std::move(other));
  904|  24.7k|        return *this;
  905|  24.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  24.7k|    {
  950|  24.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 24.7k, False: 0]
  ------------------
  951|  24.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 24.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  24.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  24.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   127k|    {
  490|   127k|        return m_has_value;
  491|   127k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  46.3k|    {
  456|  46.3k|        return m_value;
  457|  46.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  24.7k|    {
 1046|  24.7k|        this->destroy_value();
 1047|  24.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  24.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  24.7k|    {
  504|  24.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  24.7k|                                  std::forward<Args>(args)...);
  506|  24.7k|        m_has_value = false;
  507|  24.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  24.7k|    {
  473|  24.7k|        return m_unexpected;
  474|  24.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  24.7k|    {
  481|  24.7k|        return std::move(m_unexpected);
  482|  24.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6484|  21.5k|    {
 6485|  21.5k|        m_range = std::forward<Other>(r);
 6486|  21.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  21.5k|    {
 1795|  21.5k|        return value();
 1796|  21.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  21.5k|    {
 1769|  21.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  21.5k|        return this->get_value();
 1771|  21.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  21.5k|    {
  456|  21.5k|        return m_value;
  457|  21.5k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|  45.4k|{
 9422|  45.4k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  45.4k|    auto result = vscan_impl(buffer, format, args);
 9425|  45.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.6k, False: 10.7k]
  |  |  ------------------
  ------------------
 9426|  34.6k|        return unexpected(result.error());
 9427|  34.6k|    }
 9428|  10.7k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  45.4k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|  95.7k|{
 5381|  95.7k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  95.7k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  95.7k|                  "\n"
 5385|  95.7k|                  "Unsupported range type given as input to a scanning "
 5386|  95.7k|                  "function.\n"
 5387|  95.7k|                  "A range needs to have a character type (value type) "
 5388|  95.7k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  95.7k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  95.7k|                  "to be included.\n"
 5391|  95.7k|                  "See the scnlib documentation for more details.");
 5392|  95.7k|    static_assert(
 5393|  95.7k|        !std::is_same_v<T, custom_char_traits>,
 5394|  95.7k|        "\n"
 5395|  95.7k|        "Unsupported range type given as input to a scanning "
 5396|  95.7k|        "function.\n"
 5397|  95.7k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  95.7k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  95.7k|        "not supported.");
 5400|  95.7k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  95.7k|                  "\n"
 5402|  95.7k|                  "Unsupported range type given as input to a scanning "
 5403|  95.7k|                  "function.\n"
 5404|  95.7k|                  "file_marker_found cannot be used as an "
 5405|  95.7k|                  "source range type to scn::scan.\n"
 5406|  95.7k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  95.7k|                  "and do not provide an explicit source range, "
 5408|  95.7k|                  "or use scn::scan with a FILE* directly.");
 5409|  95.7k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  95.7k|                  "\n"
 5411|  95.7k|                  "Unsupported range type given as input to a scanning "
 5412|  95.7k|                  "function.\n"
 5413|  95.7k|                  "In order to be scannable, a range needs to satisfy "
 5414|  95.7k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  95.7k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  95.7k|                  "\n"
 5417|  95.7k|                  "Unsupported range type given as input to a scanning "
 5418|  95.7k|                  "function.\n"
 5419|  95.7k|                  "A range needs to model forward_range and have a valid "
 5420|  95.7k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  95.7k|                  "Examples of scannable ranges are std::string, "
 5422|  95.7k|                  "std::string_view, "
 5423|  95.7k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  95.7k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  95.7k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  95.7k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  95.7k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  95.7k|    else {
 5366|  95.7k|        return make_forward_scan_buffer(r);
 5367|  95.7k|    }
 5368|  95.7k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|  95.7k|{
 5185|  95.7k|    return basic_scan_forward_buffer_impl(range);
 5186|  95.7k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  95.7k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  95.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  95.7k|          m_cursor(ranges::begin(*m_range))
 4766|  95.7k|    {
 4767|  95.7k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|  95.7k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  95.7k|    {
 4738|  95.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|  95.7k|        : m_current_view(sv), m_is_contiguous(false)
 4428|  95.7k|    {
 4429|  95.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   186k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   117k|    {
 2869|   117k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   117k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   117k|    {
 2850|   117k|        return decay_copy(t.begin());
 2851|   117k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|   138k|    {
 3480|   138k|        return m_iterator;
 3481|   138k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|   328k|    {
 4771|   328k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 17.5k, False: 311k]
  ------------------
 4772|  17.5k|            return false;
 4773|  17.5k|        }
 4774|   311k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|   311k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|   311k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   311k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|   311k|        }
 4777|   311k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 220k, False: 90.7k]
  ------------------
 4778|   220k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|   220k|                                          this->m_current_view.begin(),
 4780|   220k|                                          this->m_current_view.end());
 4781|   220k|        }
 4782|   311k|        m_latest = *m_cursor;
 4783|   311k|        ++m_cursor;
 4784|   311k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|   311k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|   311k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|   311k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   311k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|   311k|        }
 4788|   311k|        return true;
 4789|   328k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   951k|    {
 2926|   951k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   951k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   951k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   951k|    {
 2908|   951k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   951k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   951k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|   973k|    {
 3484|   973k|        return m_sentinel;
 3485|   973k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|  95.7k|    {
 4346|  95.7k|        SCN_UNUSED(position);
  ------------------
  |  |  915|  95.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  95.7k|        return true;
 4348|  95.7k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  74.1k|        : base(unexpect, std::move(e.error())),
 1616|  74.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  74.1k|    {
 1618|  74.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  74.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  74.1k|          m_has_value(false)
  451|  74.1k|    {
  452|  74.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  95.7k|    {
 1316|  95.7k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|  21.5k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  21.5k|                      ranges::iterator_t<SourceRange>>) {
 6717|  21.5k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  21.5k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  21.5k|    {
 2869|  21.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  21.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  21.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  21.5k|    {
 2850|  21.5k|        return decay_copy(t.begin());
 2851|  21.5k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6701|  21.5k|{
 6702|  21.5k|    return ranges::end(source);
 6703|  21.5k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  21.5k|    {
 2926|  21.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  21.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  21.5k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  21.5k|    {
 2908|  21.5k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  21.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  21.5k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  21.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  21.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  21.5k|    {
 1572|  21.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  21.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  21.5k|    {
  442|  21.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  30.2k|    {
 8783|  30.2k|        return m_str;
 8784|  30.2k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   117k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   117k|    static_cast<    \
  |  |  935|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   117k|    static_cast<    \
  |  |  935|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   117k|    {
 3466|   117k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  30.2k|        : m_str(r.str)
 8778|  30.2k|    {
 8779|  30.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  31.9k|    {
 1740|  31.9k|        return has_value();
 1741|  31.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  46.3k|    {
 1815|  46.3k|        return &value();
 1816|  46.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  46.3k|    {
 1769|  46.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  46.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  46.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  46.3k|        return this->get_value();
 1771|  46.3k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6473|  21.5k|    {
 6474|  21.5k|        return ranges::begin(m_range);
 6475|  21.5k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|  45.4k|{
 9438|  45.4k|#if !SCN_DISABLE_LOCALE
 9439|  45.4k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  45.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  45.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  45.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  45.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.6k, False: 10.7k]
  |  |  ------------------
  ------------------
 9446|  34.6k|        return unexpected(result.error());
 9447|  34.6k|    }
 9448|  10.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  45.4k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  4.94k|{
 9462|  4.94k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  4.94k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  4.94k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.94k, False: 0]
  |  |  ------------------
  ------------------
 9466|  4.94k|        return unexpected(result.error());
 9467|  4.94k|    }
 9468|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  4.94k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9660|  31.9k|{
 9661|  31.9k|    return scan_result_type<Source, Args...>();
 9662|  31.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  31.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  31.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  31.9k|    {
  613|  31.9k|        construct();
  614|  31.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  31.9k|    {
  694|  31.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  31.9k|        m_has_value = true;
  696|  31.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  31.9k|{
  396|  31.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  31.9k|        T(std::forward<Args>(args)...);
  398|  31.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6610|  31.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   110k|    {
  718|   110k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   110k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   110k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  31.9k|{
 9646|  31.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.7k, False: 7.19k]
  |  |  ------------------
  ------------------
 9647|  24.7k|        out = unexpected(in.error());
 9648|  24.7k|    }
 9649|  7.19k|    else {
 9650|  7.19k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  7.19k|    static_cast<    \
  |  |  935|  7.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  7.19k|    }
 9652|  31.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  24.7k|        : base(unexpect, std::move(e.error())),
 1616|  24.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  24.7k|    {
 1618|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  24.7k|        : m_has_value(false)
  637|  24.7k|    {
  638|  24.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  24.7k|    {
  701|  24.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.7k|                                  std::forward<Args>(args)...);
  703|  24.7k|        m_has_value = false;
  704|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   123k|    {
  730|   123k|        return reinterpret_cast<unexpected<E>*>(
  731|   123k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   123k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   123k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  24.7k|    {
 1316|  24.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  24.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  902|  24.7k|    {
  903|  24.7k|        assign_common(std::move(other));
  904|  24.7k|        return *this;
  905|  24.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  24.7k|    {
  950|  24.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 24.7k, False: 0]
  ------------------
  951|  24.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 24.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  24.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  24.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   184k|    {
  687|   184k|        return m_has_value;
  688|   184k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  46.3k|    {
  653|  46.3k|        return *value_ptr();
  654|  46.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  24.7k|    {
 1046|  24.7k|        this->destroy_value();
 1047|  24.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  31.9k|    {
  708|  31.9k|        scn::detail::destroy_at(value_ptr());
  709|  31.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  31.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  31.9k|    else {
  408|  31.9k|        p->~T();
  409|  31.9k|    }
  410|  31.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6617|  31.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  24.7k|    {
  701|  24.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.7k|                                  std::forward<Args>(args)...);
  703|  24.7k|        m_has_value = false;
  704|  24.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  24.7k|    {
  678|  24.7k|        return std::move(*unexpected_ptr());
  679|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  49.4k|    {
  712|  49.4k|        scn::detail::destroy_at(unexpected_ptr());
  713|  49.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  30.2k|    {
 8783|  30.2k|        return m_str;
 8784|  30.2k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  30.2k|        : m_str(r.str)
 8778|  30.2k|    {
 8779|  30.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  31.9k|    {
 1740|  31.9k|        return has_value();
 1741|  31.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  46.3k|    {
 1815|  46.3k|        return &value();
 1816|  46.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  46.3k|    {
 1769|  46.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  46.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  46.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  46.3k|        return this->get_value();
 1771|  46.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  56.6k|    {
  643|  56.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.19k, False: 49.4k]
  ------------------
  644|  7.19k|            destroy_value();
  645|  7.19k|        }
  646|  49.4k|        else {
  647|  49.4k|            destroy_unexpected();
  648|  49.4k|        }
  649|  56.6k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9660|  31.9k|{
 9661|  31.9k|    return scan_result_type<Source, Args...>();
 9662|  31.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  31.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  31.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  31.9k|    {
  613|  31.9k|        construct();
  614|  31.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  31.9k|    {
  694|  31.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  31.9k|        m_has_value = true;
  696|  31.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  31.9k|{
  396|  31.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  31.9k|        T(std::forward<Args>(args)...);
  398|  31.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6610|  31.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   110k|    {
  718|   110k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   110k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   110k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  31.9k|{
 9646|  31.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.7k, False: 7.19k]
  |  |  ------------------
  ------------------
 9647|  24.7k|        out = unexpected(in.error());
 9648|  24.7k|    }
 9649|  7.19k|    else {
 9650|  7.19k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  7.19k|    static_cast<    \
  |  |  935|  7.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  7.19k|    }
 9652|  31.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  24.7k|        : base(unexpect, std::move(e.error())),
 1616|  24.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  24.7k|    {
 1618|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  24.7k|        : m_has_value(false)
  637|  24.7k|    {
  638|  24.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  24.7k|    {
  701|  24.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.7k|                                  std::forward<Args>(args)...);
  703|  24.7k|        m_has_value = false;
  704|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   123k|    {
  730|   123k|        return reinterpret_cast<unexpected<E>*>(
  731|   123k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   123k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   123k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  24.7k|    {
 1316|  24.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  24.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  902|  24.7k|    {
  903|  24.7k|        assign_common(std::move(other));
  904|  24.7k|        return *this;
  905|  24.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  24.7k|    {
  950|  24.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 24.7k, False: 0]
  ------------------
  951|  24.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 24.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  24.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  24.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   184k|    {
  687|   184k|        return m_has_value;
  688|   184k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  46.3k|    {
  653|  46.3k|        return *value_ptr();
  654|  46.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  24.7k|    {
 1046|  24.7k|        this->destroy_value();
 1047|  24.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  31.9k|    {
  708|  31.9k|        scn::detail::destroy_at(value_ptr());
  709|  31.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  31.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  31.9k|    else {
  408|  31.9k|        p->~T();
  409|  31.9k|    }
  410|  31.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6617|  31.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  24.7k|    {
  701|  24.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.7k|                                  std::forward<Args>(args)...);
  703|  24.7k|        m_has_value = false;
  704|  24.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  24.7k|    {
  678|  24.7k|        return std::move(*unexpected_ptr());
  679|  24.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  49.4k|    {
  712|  49.4k|        scn::detail::destroy_at(unexpected_ptr());
  713|  49.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  30.2k|    {
 8783|  30.2k|        return m_str;
 8784|  30.2k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  30.2k|        : m_str(r.str)
 8778|  30.2k|    {
 8779|  30.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  31.9k|    {
 1740|  31.9k|        return has_value();
 1741|  31.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  46.3k|    {
 1815|  46.3k|        return &value();
 1816|  46.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  46.3k|    {
 1769|  46.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  46.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  46.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  46.3k|        return this->get_value();
 1771|  46.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  56.6k|    {
  643|  56.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.19k, False: 49.4k]
  ------------------
  644|  7.19k|            destroy_value();
  645|  7.19k|        }
  646|  49.4k|        else {
  647|  49.4k|            destroy_unexpected();
  648|  49.4k|        }
  649|  56.6k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  1.26M|    {
 3480|  1.26M|        return m_iterator;
 3481|  1.26M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  1.07M|    {
 3480|  1.07M|        return m_iterator;
 3481|  1.07M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  12.1M|    {
 4473|  12.1M|        assert(m_begin);
 4474|  12.1M|        return m_end == nullptr;
 4475|  12.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|   168k|    {
 4490|   168k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 76.4k, False: 91.7k]
  ------------------
 4491|  76.4k|            return make_string_view_from_pointers(
 4492|  76.4k|                static_cast<const CharT*>(m_begin) + position(),
 4493|  76.4k|                static_cast<const CharT*>(m_end));
 4494|  76.4k|        }
 4495|  91.7k|        return parent()->get_segment_starting_at(position());
 4496|   168k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  7.04M|    {
 4484|  7.04M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  7.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  7.04M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  7.04M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  91.7k|    {
 4377|  91.7k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 4378|  91.7k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|      0|        }
 4381|  91.7k|        const auto start = pos - m_putback_buffer.size();
 4382|  91.7k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  91.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  91.7k|        return m_current_view.substr(start);
 4384|  91.7k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|   252k|    {
 4468|   252k|        return m_position;
 4469|   252k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|   359k|    {
 4399|   359k|        return m_is_contiguous;
 4400|   359k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|  6.43M|    {
 4473|  6.43M|        assert(m_begin);
 4474|  6.43M|        return m_end == nullptr;
 4475|  6.43M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  90.8k|    {
 4490|  90.8k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 90.8k, False: 0]
  ------------------
 4491|  90.8k|            return make_string_view_from_pointers(
 4492|  90.8k|                static_cast<const CharT*>(m_begin) + position(),
 4493|  90.8k|                static_cast<const CharT*>(m_end));
 4494|  90.8k|        }
 4495|      0|        return parent()->get_segment_starting_at(position());
 4496|  90.8k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  3.56M|    {
 4484|  3.56M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  3.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  3.56M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  3.56M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|   133k|    {
 4468|   133k|        return m_position;
 4469|   133k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|   378k|    {
 4399|   378k|        return m_is_contiguous;
 4400|   378k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   231k|    {
 3334|   231k|        return static_cast<D&>(*this);
 3335|   231k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   231k|    {
 3375|   231k|        return detail::to_address(ranges::begin(derived()));
 3376|   231k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   186k|    {
 3334|   186k|        return static_cast<D&>(*this);
 3335|   186k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   186k|    {
 3375|   186k|        return detail::to_address(ranges::begin(derived()));
 3376|   186k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8979|   182k|    {
 8980|   182k|        return ranges::subrange{begin(), end()};
 8981|   182k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8971|   182k|    {
 8972|   182k|        return ranges::default_sentinel;
 8973|   182k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   676k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   676k|    static_cast<    \
  |  |  935|   676k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   676k|    static_cast<    \
  |  |  935|   676k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   676k|    {
 3466|   676k|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8798|   189k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  91.7k|    {
 1979|  91.7k|        return detail::transform_error_impl(std::move(*this),
 1980|  91.7k|                                            std::forward<F>(f));
 1981|  91.7k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  91.7k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  91.7k|    else {
 1472|  91.7k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  91.7k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  91.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 90.3k, False: 1.40k]
  |  |  ------------------
  ------------------
 1474|  91.7k|                   ? result(*std::forward<Exp>(exp))
 1475|  91.7k|                   : result(unexpect,
 1476|  1.40k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.40k|                                           std::forward<Exp>(exp).error()));
 1478|  91.7k|    }
 1479|  91.7k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   183k|    {
  490|   183k|        return m_has_value;
  491|   183k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  90.3k|    {
 1805|  90.3k|        return std::move(value());
 1806|  90.3k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  90.3k|    {
 1769|  90.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  90.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  90.3k|        return this->get_value();
 1771|  90.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  90.3k|    {
  456|  90.3k|        return m_value;
  457|  90.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   246k|        : base(std::in_place, std::forward<U>(val)),
 1570|   246k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   246k|    {
 1572|   246k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   246k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   246k|    {
  442|   246k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   430k|    {
 1316|   430k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  4.18k|{
 1350|  4.18k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  4.18k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  1.40k|    {
 1756|  1.40k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  1.40k|        return std::move(this->get_unexpected().error());
 1758|  1.40k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  1.40k|    {
  473|  1.40k|        return m_unexpected;
  474|  1.40k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  8.37k|    {
  365|  8.37k|        return m_unexpected;
  366|  8.37k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.40k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.40k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.40k|    {
 1628|  1.40k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   142k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   142k|          m_has_value(false)
  451|   142k|    {
  452|   142k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8979|   180k|    {
 8980|   180k|        return ranges::subrange{begin(), end()};
 8981|   180k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8971|   180k|    {
 8972|   180k|        return ranges::default_sentinel;
 8973|   180k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   631k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   631k|    static_cast<    \
  |  |  935|   631k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   631k|    static_cast<    \
  |  |  935|   631k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   631k|    {
 3466|   631k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  90.8k|    {
 1979|  90.8k|        return detail::transform_error_impl(std::move(*this),
 1980|  90.8k|                                            std::forward<F>(f));
 1981|  90.8k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  90.8k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  90.8k|    else {
 1472|  90.8k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  90.8k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  90.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 89.7k, False: 1.03k]
  |  |  ------------------
  ------------------
 1474|  90.8k|                   ? result(*std::forward<Exp>(exp))
 1475|  90.8k|                   : result(unexpect,
 1476|  1.03k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.03k|                                           std::forward<Exp>(exp).error()));
 1478|  90.8k|    }
 1479|  90.8k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   181k|    {
  490|   181k|        return m_has_value;
  491|   181k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  89.7k|    {
 1805|  89.7k|        return std::move(value());
 1806|  89.7k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  89.7k|    {
 1769|  89.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  89.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  89.7k|        return this->get_value();
 1771|  89.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  89.7k|    {
  456|  89.7k|        return m_value;
  457|  89.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   154k|        : base(std::in_place, std::forward<U>(val)),
 1570|   154k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   154k|    {
 1572|   154k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   154k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   154k|    {
  442|   154k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   458k|    {
 1316|   458k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  1.03k|    {
 1756|  1.03k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  1.03k|        return std::move(this->get_unexpected().error());
 1758|  1.03k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  1.03k|    {
  473|  1.03k|        return m_unexpected;
  474|  1.03k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.03k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.03k|    {
 1628|  1.03k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   282k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   282k|          m_has_value(false)
  451|   282k|    {
  452|   282k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   222k|        : base(unexpect, std::move(e.error())),
 1616|   222k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   222k|    {
 1618|   222k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   222k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   222k|          m_has_value(false)
  451|   222k|    {
  452|   222k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   364k|    {
 1316|   364k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  37.0k|        : base(unexpect, std::move(e.error())),
 1616|  37.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  37.0k|    {
 1618|  37.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  37.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  37.8k|          m_has_value(false)
  451|  37.8k|    {
  452|  37.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   155k|    {
 1316|   155k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   117k|        : base(std::in_place, std::forward<U>(val)),
 1570|   117k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   117k|    {
 1572|   117k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   117k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   117k|    {
  442|   117k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|   155k|    {
 1740|   155k|        return has_value();
 1741|   155k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   310k|    {
  490|   310k|        return m_has_value;
  491|   310k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  37.8k|    {
 1746|  37.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  37.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  37.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  37.8k|        return this->get_unexpected().error();
 1748|  37.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  37.8k|    {
  473|  37.8k|        return m_unexpected;
  474|  37.8k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   117k|    {
 1805|   117k|        return std::move(value());
 1806|   117k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   117k|    {
 1769|   117k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   117k|        return this->get_value();
 1771|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   117k|    {
  456|   117k|        return m_value;
  457|   117k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  74.1k|        : base(unexpect, std::move(e.error())),
 1616|  74.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  74.1k|    {
 1618|  74.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  75.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  75.1k|          m_has_value(false)
  451|  75.1k|    {
  452|  75.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   186k|    {
 1316|   186k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   111k|        : base(std::in_place, std::forward<U>(val)),
 1570|   111k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   111k|    {
 1572|   111k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   111k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   111k|    {
  442|   111k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|   186k|    {
 1740|   186k|        return has_value();
 1741|   186k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|   373k|    {
  490|   373k|        return m_has_value;
  491|   373k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  75.1k|    {
 1746|  75.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  75.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  75.1k|        return this->get_unexpected().error();
 1748|  75.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  75.1k|    {
  473|  75.1k|        return m_unexpected;
  474|  75.1k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   111k|    {
 1805|   111k|        return std::move(value());
 1806|   111k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   111k|    {
 1769|   111k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   111k|        return this->get_value();
 1771|   111k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|   111k|    {
  456|   111k|        return m_value;
  457|   111k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  76.4k|    {
 1979|  76.4k|        return detail::transform_error_impl(std::move(*this),
 1980|  76.4k|                                            std::forward<F>(f));
 1981|  76.4k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  76.4k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  76.4k|    else {
 1472|  76.4k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  76.4k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  76.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 75.7k, False: 720]
  |  |  ------------------
  ------------------
 1474|  76.4k|                   ? result(*std::forward<Exp>(exp))
 1475|  76.4k|                   : result(unexpect,
 1476|    720|                            trivial_invoke(std::forward<F>(f),
 1477|    720|                                           std::forward<Exp>(exp).error()));
 1478|  76.4k|    }
 1479|  76.4k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   152k|    {
  490|   152k|        return m_has_value;
  491|   152k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  75.7k|    {
 1805|  75.7k|        return std::move(value());
 1806|  75.7k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  75.7k|    {
 1769|  75.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  75.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  75.7k|        return this->get_value();
 1771|  75.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  75.7k|    {
  456|  75.7k|        return m_value;
  457|  75.7k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|    720|    {
 1756|    720|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    720|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    720|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    720|        return std::move(this->get_unexpected().error());
 1758|    720|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    720|    {
  473|    720|        return m_unexpected;
  474|    720|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    720|        : base(unexpect, std::forward<Args>(args)...),
 1626|    720|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    720|    {
 1628|    720|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8963|   716k|    {
 8964|   716k|        return m_current;
 8965|   716k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8851|   152k|    {
 8852|   152k|        return m_args;
 8853|   152k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8856|   319k|    {
 8857|   319k|        return m_locale;
 8858|   319k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8862|   326k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   326k|    static_cast<    \
  |  |  935|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   326k|    static_cast<    \
  |  |  935|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   326k|    {
 8864|   326k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   152k|    {
 3000|   152k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   152k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   152k|    {
 2981|   152k|        return t.data();
 2982|   152k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  76.4k|    {
 3075|  76.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  76.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  76.4k|    {
 3041|  76.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  76.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  76.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   140k|        : base(unexpect, std::move(e.error())),
 1616|   140k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   140k|    {
 1618|   140k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  41.8k|        : base(std::in_place, std::forward<U>(val)),
 1570|  41.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  41.8k|    {
 1572|  41.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  41.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  41.8k|    {
  442|  41.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8963|   630k|    {
 8964|   630k|        return m_current;
 8965|   630k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8851|   181k|    {
 8852|   181k|        return m_args;
 8853|   181k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8856|   361k|    {
 8857|   361k|        return m_locale;
 8858|   361k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8862|   373k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   373k|    static_cast<    \
  |  |  935|   373k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   373k|    static_cast<    \
  |  |  935|   373k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   373k|    {
 8864|   373k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   181k|    {
 3000|   181k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   181k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   181k|    {
 2981|   181k|        return t.data();
 2982|   181k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  90.8k|    {
 3075|  90.8k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  90.8k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  90.8k|    {
 3041|  90.8k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  90.8k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   281k|        : base(unexpect, std::move(e.error())),
 1616|   281k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   281k|    {
 1618|   281k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  21.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  21.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  21.5k|    {
 1572|  21.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  21.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  21.5k|    {
  442|  21.5k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   503k|    {
 4559|   503k|        return x.is_at_end();
 4560|   503k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  1.25M|    {
 4603|  1.25M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 1.25M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  1.25M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 1.25M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  1.25M|        return !read_at_position();
 4610|  1.25M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  3.63M|    {
 4583|  3.63M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  3.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  3.63M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 3.63M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  3.63M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  3.63M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.90M, False: 732k]
  |  |  ------------------
  ------------------
 4590|  2.90M|            return true;
 4591|  2.90M|        }
 4592|       |
 4593|  1.45M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 732k, False: 718k]
  ------------------
 4594|   732k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 13.9k, False: 718k]
  ------------------
 4595|  13.9k|                return false;
 4596|  13.9k|            }
 4597|   732k|        }
 4598|   718k|        return true;
 4599|   732k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  1.13M|    {
 4518|  1.13M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  1.13M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 1.13M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  1.13M|        auto res = read_at_position();
 4527|  1.13M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  1.13M|        return parent()->get_character_at(m_position);
 4529|  1.13M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  1.13M|    {
 4388|  1.13M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 367k, False: 767k]
  |  |  ------------------
  ------------------
 4389|  1.13M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   367k|            return m_putback_buffer[pos];
 4391|   367k|        }
 4392|   767k|        const auto start = pos - m_putback_buffer.size();
 4393|   767k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|   767k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   767k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|   767k|        return m_current_view[start];
 4395|   767k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  90.3k|        : base(std::in_place, std::forward<U>(val)),
 1570|  90.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  90.3k|    {
 1572|  90.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  90.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  90.3k|    {
  442|  90.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  91.7k|    {
 1316|  91.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  1.40k|        : base(unexpect, std::move(e.error())),
 1616|  1.40k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.40k|    {
 1618|  1.40k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.40k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.40k|          m_has_value(false)
  451|  1.40k|    {
  452|  1.40k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  4.18k|        : m_unexpected(std::forward<Args>(args)...)
  359|  4.18k|    {
  360|  4.18k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  4.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  4.18k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  1.24M|    {
 4504|  1.24M|        ++m_position;
 4505|  1.24M|        (void)read_at_position();
 4506|  1.24M|        return *this;
 4507|  1.24M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|   562k|    {
 4553|   562k|        return !(lhs == rhs);
 4554|   562k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|   562k|    {
 4548|   562k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 562k, False: 0]
  |  Branch (4548:46): [True: 67.0k, False: 495k]
  ------------------
 4549|   562k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  4.18k|        : m_unexpected(std::forward<Err>(e))
  350|  4.18k|    {
  351|  4.18k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  4.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  4.18k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  1.57M|    {
 3484|  1.57M|        return m_sentinel;
 3485|  1.57M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|   751k|    {
 4570|   751k|        return !x.is_at_end();
 4571|   751k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    720|        : base(unexpect, std::move(e.error())),
 1616|    720|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    720|    {
 1618|    720|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    720|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    720|          m_has_value(false)
  451|    720|    {
  452|    720|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  76.4k|    {
 1316|  76.4k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  75.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  75.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  75.7k|    {
 1572|  75.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  75.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  75.7k|    {
  442|  75.7k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   229k|    {
 3000|   229k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   229k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   229k|    {
 2981|   229k|        return t.data();
 2982|   229k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|   142k|        : base(std::in_place, std::forward<U>(val)),
 1570|   142k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   142k|    {
 1572|   142k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|   142k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   142k|    {
  442|   142k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  99.0k|    {
 1795|  99.0k|        return value();
 1796|  99.0k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|  90.3k|    {
 2869|  90.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  90.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  90.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|  90.3k|    {
 2850|  90.3k|        return decay_copy(t.begin());
 2851|  90.3k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|  90.3k|{
 2094|  90.3k|    return SCN_FWD(t);
  ------------------
  |  |  936|  90.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  90.3k|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  76.4k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  76.4k|    static_cast<    \
  |  |  935|  76.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  76.4k|    {
 3912|  76.4k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  91.7k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  91.7k|    static_cast<    \
  |  |  935|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  91.7k|    {
 3912|  91.7k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   405k|    {
 4559|   405k|        return x.is_at_end();
 4560|   405k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|   783k|    {
 4603|   783k|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 783k]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|   783k|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 783k]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|   783k|        return !read_at_position();
 4610|   783k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  1.90M|    {
 4583|  1.90M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  1.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  1.90M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 1.90M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  1.90M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  1.90M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.57M, False: 328k]
  |  |  ------------------
  ------------------
 4590|  1.57M|            return true;
 4591|  1.57M|        }
 4592|       |
 4593|   640k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 328k, False: 311k]
  ------------------
 4594|   328k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 17.5k, False: 311k]
  ------------------
 4595|  17.5k|                return false;
 4596|  17.5k|            }
 4597|   328k|        }
 4598|   311k|        return true;
 4599|   328k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  2.54M|    {
 4357|  2.54M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  2.54M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|   690k|    {
 4518|   690k|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   690k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   690k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|   690k|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 690k]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|   690k|        auto res = read_at_position();
 4527|   690k|        SCN_EXPECT(res);
  ------------------
  |  |  930|   690k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   690k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|   690k|        return parent()->get_character_at(m_position);
 4529|   690k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|   690k|    {
 4388|   690k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   690k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 376k, False: 313k]
  |  |  ------------------
  ------------------
 4389|   690k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   376k|            return m_putback_buffer[pos];
 4391|   376k|        }
 4392|   313k|        const auto start = pos - m_putback_buffer.size();
 4393|   313k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|   313k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   313k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|   313k|        return m_current_view[start];
 4395|   313k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  89.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  89.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  89.7k|    {
 1572|  89.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  89.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  89.7k|    {
  442|  89.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  90.8k|    {
 1316|  90.8k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  1.03k|        : base(unexpect, std::move(e.error())),
 1616|  1.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.03k|    {
 1618|  1.03k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.03k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.03k|          m_has_value(false)
  451|  1.03k|    {
  452|  1.03k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|   429k|    {
 4504|   429k|        ++m_position;
 4505|   429k|        (void)read_at_position();
 4506|   429k|        return *this;
 4507|   429k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|   150k|    {
 4553|   150k|        return !(lhs == rhs);
 4554|   150k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|   150k|    {
 4548|   150k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 150k, False: 0]
  |  Branch (4548:46): [True: 21.5k, False: 128k]
  ------------------
 4549|   150k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  1.04M|    {
 3484|  1.04M|        return m_sentinel;
 3485|  1.04M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|   378k|    {
 4570|   378k|        return !x.is_at_end();
 4571|   378k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  1.03k|        : base(unexpect, std::move(e.error())),
 1616|  1.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.03k|    {
 1618|  1.03k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.03k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.03k|          m_has_value(false)
  451|  1.03k|    {
  452|  1.03k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  90.8k|    {
 1316|  90.8k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  89.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  89.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  89.7k|    {
 1572|  89.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  89.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  89.7k|    {
  442|  89.7k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   181k|    {
  490|   181k|        return m_has_value;
  491|   181k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  89.7k|    {
 1769|  89.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  89.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  89.7k|        return this->get_value();
 1771|  89.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  89.7k|    {
  456|  89.7k|        return m_value;
  457|  89.7k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  90.8k|    {
 1979|  90.8k|        return detail::transform_error_impl(std::move(*this),
 1980|  90.8k|                                            std::forward<F>(f));
 1981|  90.8k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  90.8k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  90.8k|    else {
 1472|  90.8k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  90.8k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  90.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 89.7k, False: 1.03k]
  |  |  ------------------
  ------------------
 1474|  90.8k|                   ? result(*std::forward<Exp>(exp))
 1475|  90.8k|                   : result(unexpect,
 1476|  1.03k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.03k|                                           std::forward<Exp>(exp).error()));
 1478|  90.8k|    }
 1479|  90.8k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  89.7k|    {
 1805|  89.7k|        return std::move(value());
 1806|  89.7k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  1.03k|    {
 1756|  1.03k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  1.03k|        return std::move(this->get_unexpected().error());
 1758|  1.03k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  1.03k|    {
  473|  1.03k|        return m_unexpected;
  474|  1.03k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.03k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.03k|    {
 1628|  1.03k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   181k|    {
 3000|   181k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   181k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   181k|    {
 2981|   181k|        return t.data();
 2982|   181k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  43.1k|    {
 1795|  43.1k|        return value();
 1796|  43.1k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|  89.7k|    {
 2869|  89.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  89.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  89.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|  89.7k|    {
 2850|  89.7k|        return decay_copy(t.begin());
 2851|  89.7k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|  89.7k|{
 2094|  89.7k|    return SCN_FWD(t);
  ------------------
  |  |  936|  89.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  89.7k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  90.8k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  90.8k|    static_cast<    \
  |  |  935|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  90.8k|    {
 3912|  90.8k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  90.8k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  90.8k|    static_cast<    \
  |  |  935|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  90.8k|    {
 3912|  90.8k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  5.08M|    {
 4357|  5.08M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  5.08M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6181|   168k|    {
 6182|   168k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 168k]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|   168k|        return static_cast<std::size_t>(m_desc &
 6187|   168k|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|   168k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6207|   336k|    {
 6208|   336k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|   336k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6149|   168k|    {
 6150|   168k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 168k]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|   168k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 168k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   168k|        const auto t = type(id);
 6162|   168k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 168k]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|   168k|        basic_scan_arg<Context> arg;
 6167|   168k|        arg.m_type = t;
 6168|   168k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 168k]
  ------------------
 6169|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6170|      0|        }
 6171|   168k|        else {
 6172|   168k|            arg.m_value = m_values[id];
 6173|   168k|        }
 6174|   168k|        return arg;
 6175|   168k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6216|   168k|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|   168k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|   168k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|   168k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|   168k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6211|   168k|    {
 6212|   168k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|   168k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5965|   341k|    {
 5966|   341k|        return m_type != detail::arg_type::none_type;
 5967|   341k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|  2.47k|{
 9324|  2.47k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  2.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  2.47k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  2.47k|{
 9225|  2.47k|#define SCN_VISIT(Type)                                                \
 9226|  2.47k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  2.47k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  2.47k|    }                                                                  \
 9229|  2.47k|    else {                                                             \
 9230|  2.47k|        return vis(monostate_val);                                     \
 9231|  2.47k|    }
 9232|       |
 9233|  2.47k|    monostate monostate_val{};
 9234|       |
 9235|  2.47k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 2.47k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 2.47k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 2.47k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 2.47k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 2.47k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 2.47k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 2.47k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 2.47k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 2.47k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 2.47k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 2.47k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 2.47k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 2.47k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 2.47k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 2.47k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 2.47k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 2.47k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 2.47k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 2.47k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 2.47k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 2.47k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 2.47k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 2.47k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 2.47k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|  2.47k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 2.47k, False: 0]
  ------------------
 9286|  2.47k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  2.47k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  2.47k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 2.47k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 2.47k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  2.47k|            SCN_CLANG_POP
 9303|  2.47k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|   341k|{
 6011|   341k|    return arg.m_type;
 6012|   341k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|   173k|{
 6023|   173k|    return arg.m_value;
 6024|   173k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEi:
 6279|  2.47k|        : m_format{format},
 6280|  2.47k|          m_next_arg_id{next_arg_id},
 6281|  2.47k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  2.47k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  2.47k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  2.47k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  2.47k|    {
 6287|  2.47k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2ENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEl:
 4460|  78.9k|        : m_begin(const_cast<CharT*>(view.data())),
 4461|  78.9k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4462|  78.9k|          m_position(pos)
 4463|  78.9k|    {
 4464|  78.9k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   173k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   173k|    static_cast<    \
  |  |  935|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   173k|    {
 8949|   173k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handle4scanERNS0_24basic_scan_parse_contextIcEERS5_:
 5943|   173k|        {
 5944|   173k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5945|   173k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handleC2ENS3_17custom_value_typeE:
 5948|   173k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   170k|{
 4691|   170k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 76.4k, False: 94.2k]
  ------------------
 4692|  76.4k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|  76.4k|                                ranges::default_sentinel};
 4694|  76.4k|    }
 4695|  94.2k|    return ranges::subrange{forward_iterator{this, 0},
 4696|  94.2k|                            ranges::default_sentinel};
 4697|   170k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|  94.2k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  94.2k|    {
 4455|  94.2k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  94.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  94.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  94.2k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  94.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  94.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  94.2k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|  2.47k|{
 9324|  2.47k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  2.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  2.47k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  2.47k|{
 9225|  2.47k|#define SCN_VISIT(Type)                                                \
 9226|  2.47k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  2.47k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  2.47k|    }                                                                  \
 9229|  2.47k|    else {                                                             \
 9230|  2.47k|        return vis(monostate_val);                                     \
 9231|  2.47k|    }
 9232|       |
 9233|  2.47k|    monostate monostate_val{};
 9234|       |
 9235|  2.47k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 2.47k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 2.47k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 2.47k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 2.47k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 2.47k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 2.47k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 2.47k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 2.47k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 2.47k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 2.47k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 2.47k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 2.47k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 2.47k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 2.47k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 2.47k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 2.47k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 2.47k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 2.47k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 2.47k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 2.47k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 2.47k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 2.47k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 2.47k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 2.47k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|  2.47k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 2.47k, False: 0]
  ------------------
 9286|  2.47k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  2.47k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  2.47k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 2.47k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 2.47k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  2.47k|            SCN_CLANG_POP
 9303|  2.47k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSH_11char_traitsIcEEEEi:
 6279|  2.47k|        : m_format{format},
 6280|  2.47k|          m_next_arg_id{next_arg_id},
 6281|  2.47k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  2.47k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  2.47k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  2.47k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  2.47k|    {
 6287|  2.47k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6279|  76.4k|        : m_format{format},
 6280|  76.4k|          m_next_arg_id{next_arg_id},
 6281|  76.4k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  76.4k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  76.4k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  76.4k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  76.4k|    {
 6287|  76.4k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  76.4k|    {
 3075|  76.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  76.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  76.4k|    {
 3041|  76.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  76.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  76.4k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  76.4k|{
 7796|  76.4k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  76.4k|    handler.check_args_exhausted();
 7798|  76.4k|    return handler.get_error();
 7799|  76.4k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  76.4k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  76.4k|    auto begin = format.data();
 7764|  76.4k|    auto it = begin;
 7765|  76.4k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   118k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 76.4k, False: 41.8k]
  ------------------
 7768|  76.4k|        const auto ch = *it++;
 7769|  76.4k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 76.4k, False: 0]
  ------------------
 7770|  76.4k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  76.4k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  76.4k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 34.6k, False: 41.8k]
  ------------------
 7774|  34.6k|                return;
 7775|  34.6k|            }
 7776|  76.4k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  76.4k|    }
 7787|       |
 7788|  41.8k|    handler.on_literal_text(begin, end);
 7789|  41.8k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7692|  76.4k|{
 7693|  76.4k|    struct id_adapter {
 7694|  76.4k|        constexpr void operator()()
 7695|  76.4k|        {
 7696|  76.4k|            arg_id = handler.on_arg_id();
 7697|  76.4k|        }
 7698|  76.4k|        constexpr void operator()(std::size_t id)
 7699|  76.4k|        {
 7700|  76.4k|            arg_id = handler.on_arg_id(id);
 7701|  76.4k|        }
 7702|       |
 7703|  76.4k|        constexpr void on_error(const char* msg)
 7704|  76.4k|        {
 7705|  76.4k|            SCN_UNLIKELY_ATTR
 7706|  76.4k|            handler.on_error(msg);
 7707|  76.4k|        }
 7708|       |
 7709|  76.4k|        Handler& handler;
 7710|  76.4k|        std::size_t arg_id;
 7711|  76.4k|    };
 7712|       |
 7713|  76.4k|    ++begin;
 7714|  76.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  76.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.4k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  76.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 76.4k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  76.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 76.4k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  76.4k|    else {
 7726|  76.4k|        auto adapter = id_adapter{handler, 0};
 7727|  76.4k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  76.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  76.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.4k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  76.4k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 76.4k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  76.4k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 76.4k, False: 0]
  ------------------
 7738|  76.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  76.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.4k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  76.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  76.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.4k]
  |  |  |  Branch (865:45): [True: 0, False: 76.4k]
  |  |  |  Branch (865:45): [True: 0, False: 76.4k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|  76.4k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  76.4k|    }
 7754|  76.4k|    return begin + 1;
 7755|  76.4k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8846|   168k|    {
 8847|   168k|        return m_args.get(id);
 8848|   168k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6314|   168k|    {
 6315|   168k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 168k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   168k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   168k|        do_check_arg_id(id);
 6323|   168k|        return id;
 6324|   168k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6808|   168k|{
 6809|   168k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   168k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   168k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  76.4k|{
 7194|  76.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  76.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  76.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  76.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 76.4k, False: 0]
  |  Branch (7195:26): [True: 0, False: 76.4k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  76.4k|    handler();
 7200|  76.4k|    return begin;
 7201|  76.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  76.4k|        {
 7696|  76.4k|            arg_id = handler.on_arg_id();
 7697|  76.4k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9323|   168k|{
 9324|   168k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   168k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   168k|{
 9225|   168k|#define SCN_VISIT(Type)                                                \
 9226|   168k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   168k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   168k|    }                                                                  \
 9229|   168k|    else {                                                             \
 9230|   168k|        return vis(monostate_val);                                     \
 9231|   168k|    }
 9232|       |
 9233|   168k|    monostate monostate_val{};
 9234|       |
 9235|   168k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 168k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 168k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 168k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 168k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 168k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 168k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 168k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 168k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 168k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 168k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 168k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 168k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 168k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 168k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 168k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 168k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 168k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 168k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 168k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 168k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 168k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 168k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 168k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 168k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|   168k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 168k, False: 0]
  ------------------
 9286|   168k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   168k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   168k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 168k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 168k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   168k|            SCN_CLANG_POP
 9303|   168k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4716|  76.4k|        : base(typename base::contiguous_tag{}, sv)
 4717|  76.4k|    {
 4718|  76.4k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4421|  76.4k|        : m_current_view(sv), m_is_contiguous(true)
 4422|  76.4k|    {
 4423|  76.4k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   152k|    {
 3000|   152k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   152k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2990|   152k|    {
 2991|   152k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2992|   152k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   152k|    {
 2869|   152k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   152k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   152k|    {
 2850|   152k|        return decay_copy(t.begin());
 2851|   152k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3074|  76.4k|    {
 3075|  76.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  76.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  76.4k|    {
 3041|  76.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  76.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  76.4k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator16batch_advance_toEl:
 4539|  76.4k|    {
 4540|  76.4k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  |  930|  76.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  76.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|  76.4k|        m_position = i;
 4542|  76.4k|        return *this;
 4543|  76.4k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6279|  91.7k|        : m_format{format},
 6280|  91.7k|          m_next_arg_id{next_arg_id},
 6281|  91.7k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  91.7k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  91.7k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  91.7k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  91.7k|    {
 6287|  91.7k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  91.7k|{
 7796|  91.7k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  91.7k|    handler.check_args_exhausted();
 7798|  91.7k|    return handler.get_error();
 7799|  91.7k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  91.7k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  91.7k|    auto begin = format.data();
 7764|  91.7k|    auto it = begin;
 7765|  91.7k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   148k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 91.7k, False: 57.1k]
  ------------------
 7768|  91.7k|        const auto ch = *it++;
 7769|  91.7k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 91.7k, False: 0]
  ------------------
 7770|  91.7k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  91.7k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  91.7k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 34.6k, False: 57.1k]
  ------------------
 7774|  34.6k|                return;
 7775|  34.6k|            }
 7776|  91.7k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  91.7k|    }
 7787|       |
 7788|  57.1k|    handler.on_literal_text(begin, end);
 7789|  57.1k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7692|  91.7k|{
 7693|  91.7k|    struct id_adapter {
 7694|  91.7k|        constexpr void operator()()
 7695|  91.7k|        {
 7696|  91.7k|            arg_id = handler.on_arg_id();
 7697|  91.7k|        }
 7698|  91.7k|        constexpr void operator()(std::size_t id)
 7699|  91.7k|        {
 7700|  91.7k|            arg_id = handler.on_arg_id(id);
 7701|  91.7k|        }
 7702|       |
 7703|  91.7k|        constexpr void on_error(const char* msg)
 7704|  91.7k|        {
 7705|  91.7k|            SCN_UNLIKELY_ATTR
 7706|  91.7k|            handler.on_error(msg);
 7707|  91.7k|        }
 7708|       |
 7709|  91.7k|        Handler& handler;
 7710|  91.7k|        std::size_t arg_id;
 7711|  91.7k|    };
 7712|       |
 7713|  91.7k|    ++begin;
 7714|  91.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  91.7k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 91.7k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  91.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 91.7k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  91.7k|    else {
 7726|  91.7k|        auto adapter = id_adapter{handler, 0};
 7727|  91.7k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  91.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  91.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 91.7k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  91.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 91.7k, False: 0]
  ------------------
 7738|  91.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  91.7k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  91.7k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.7k]
  |  |  |  Branch (865:45): [True: 0, False: 91.7k]
  |  |  |  Branch (865:45): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|  91.7k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  91.7k|    }
 7754|  91.7k|    return begin + 1;
 7755|  91.7k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  91.7k|{
 7194|  91.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  91.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  91.7k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 91.7k, False: 0]
  |  Branch (7195:26): [True: 0, False: 91.7k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  91.7k|    handler();
 7200|  91.7k|    return begin;
 7201|  91.7k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  91.7k|        {
 7696|  91.7k|            arg_id = handler.on_arg_id();
 7697|  91.7k|        }
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  37.0k|    {
 4352|  37.0k|        return sync(0);
 4353|  37.0k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6181|   181k|    {
 6182|   181k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|   181k|        return static_cast<std::size_t>(m_desc &
 6187|   181k|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|   181k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6207|   363k|    {
 6208|   363k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|   363k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6149|   181k|    {
 6150|   181k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|   181k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   181k|        const auto t = type(id);
 6162|   181k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|   181k|        basic_scan_arg<Context> arg;
 6167|   181k|        arg.m_type = t;
 6168|   181k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 181k]
  ------------------
 6169|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6170|      0|        }
 6171|   181k|        else {
 6172|   181k|            arg.m_value = m_values[id];
 6173|   181k|        }
 6174|   181k|        return arg;
 6175|   181k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6216|   181k|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|   181k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|   181k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|   181k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|   181k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6211|   181k|    {
 6212|   181k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|   181k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5965|   373k|    {
 5966|   373k|        return m_type != detail::arg_type::none_type;
 5967|   373k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|  4.94k|{
 9324|  4.94k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  4.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  4.94k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  4.94k|{
 9225|  4.94k|#define SCN_VISIT(Type)                                                \
 9226|  4.94k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  4.94k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  4.94k|    }                                                                  \
 9229|  4.94k|    else {                                                             \
 9230|  4.94k|        return vis(monostate_val);                                     \
 9231|  4.94k|    }
 9232|       |
 9233|  4.94k|    monostate monostate_val{};
 9234|       |
 9235|  4.94k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 4.94k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 4.94k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 4.94k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 4.94k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 4.94k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 4.94k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 4.94k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 4.94k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 4.94k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 4.94k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 4.94k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 4.94k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 4.94k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 4.94k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 4.94k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 4.94k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 4.94k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 4.94k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 4.94k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 4.94k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 4.94k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 4.94k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 4.94k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 4.94k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|  4.94k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 4.94k, False: 0]
  ------------------
 9286|  4.94k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  4.94k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  4.94k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 4.94k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 4.94k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  4.94k|            SCN_CLANG_POP
 9303|  4.94k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|   373k|{
 6011|   373k|    return arg.m_type;
 6012|   373k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|   191k|{
 6023|   191k|    return arg.m_value;
 6024|   191k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEi:
 6279|  4.94k|        : m_format{format},
 6280|  4.94k|          m_next_arg_id{next_arg_id},
 6281|  4.94k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  4.94k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  4.94k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  4.94k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  4.94k|    {
 6287|  4.94k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2ENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEl:
 4460|  95.7k|        : m_begin(const_cast<CharT*>(view.data())),
 4461|  95.7k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4462|  95.7k|          m_position(pos)
 4463|  95.7k|    {
 4464|  95.7k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   191k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   191k|    static_cast<    \
  |  |  935|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   191k|    {
 8949|   191k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handle4scanERNS0_24basic_scan_parse_contextIwEERS5_:
 5943|   191k|        {
 5944|   191k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5945|   191k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handleC2ENS3_17custom_value_typeE:
 5948|   191k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6279|  90.8k|        : m_format{format},
 6280|  90.8k|          m_next_arg_id{next_arg_id},
 6281|  90.8k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  90.8k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  90.8k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  90.8k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  90.8k|    {
 6287|  90.8k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  90.8k|    {
 3075|  90.8k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  90.8k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  90.8k|    {
 3041|  90.8k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  90.8k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  90.8k|{
 7796|  90.8k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  90.8k|    handler.check_args_exhausted();
 7798|  90.8k|    return handler.get_error();
 7799|  90.8k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  90.8k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  90.8k|    auto begin = format.data();
 7764|  90.8k|    auto it = begin;
 7765|  90.8k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   112k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 90.8k, False: 21.5k]
  ------------------
 7768|  90.8k|        const auto ch = *it++;
 7769|  90.8k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 90.8k, False: 0]
  ------------------
 7770|  90.8k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  90.8k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  90.8k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 69.2k, False: 21.5k]
  ------------------
 7774|  69.2k|                return;
 7775|  69.2k|            }
 7776|  90.8k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  90.8k|    }
 7787|       |
 7788|  21.5k|    handler.on_literal_text(begin, end);
 7789|  21.5k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7692|  90.8k|{
 7693|  90.8k|    struct id_adapter {
 7694|  90.8k|        constexpr void operator()()
 7695|  90.8k|        {
 7696|  90.8k|            arg_id = handler.on_arg_id();
 7697|  90.8k|        }
 7698|  90.8k|        constexpr void operator()(std::size_t id)
 7699|  90.8k|        {
 7700|  90.8k|            arg_id = handler.on_arg_id(id);
 7701|  90.8k|        }
 7702|       |
 7703|  90.8k|        constexpr void on_error(const char* msg)
 7704|  90.8k|        {
 7705|  90.8k|            SCN_UNLIKELY_ATTR
 7706|  90.8k|            handler.on_error(msg);
 7707|  90.8k|        }
 7708|       |
 7709|  90.8k|        Handler& handler;
 7710|  90.8k|        std::size_t arg_id;
 7711|  90.8k|    };
 7712|       |
 7713|  90.8k|    ++begin;
 7714|  90.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  90.8k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 90.8k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  90.8k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 90.8k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  90.8k|    else {
 7726|  90.8k|        auto adapter = id_adapter{handler, 0};
 7727|  90.8k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  90.8k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  90.8k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 90.8k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  90.8k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 90.8k, False: 0]
  ------------------
 7738|  90.8k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  90.8k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  90.8k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.8k]
  |  |  |  Branch (865:45): [True: 0, False: 90.8k]
  |  |  |  Branch (865:45): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|  90.8k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  90.8k|    }
 7754|  90.8k|    return begin + 1;
 7755|  90.8k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8846|   181k|    {
 8847|   181k|        return m_args.get(id);
 8848|   181k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6314|   181k|    {
 6315|   181k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   181k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   181k|        do_check_arg_id(id);
 6323|   181k|        return id;
 6324|   181k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6808|   181k|{
 6809|   181k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   181k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   181k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  90.8k|{
 7194|  90.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  90.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  90.8k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 90.8k, False: 0]
  |  Branch (7195:26): [True: 0, False: 90.8k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  90.8k|    handler();
 7200|  90.8k|    return begin;
 7201|  90.8k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  90.8k|        {
 7696|  90.8k|            arg_id = handler.on_arg_id();
 7697|  90.8k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9323|   181k|{
 9324|   181k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   181k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   181k|{
 9225|   181k|#define SCN_VISIT(Type)                                                \
 9226|   181k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   181k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   181k|    }                                                                  \
 9229|   181k|    else {                                                             \
 9230|   181k|        return vis(monostate_val);                                     \
 9231|   181k|    }
 9232|       |
 9233|   181k|    monostate monostate_val{};
 9234|       |
 9235|   181k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 181k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 181k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 181k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 181k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 181k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 181k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 181k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 181k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 181k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 181k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 181k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 181k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 181k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 181k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 181k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 181k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 181k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 181k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 181k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 181k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 181k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 181k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 181k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 181k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|   181k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 181k, False: 0]
  ------------------
 9286|   181k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   181k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   181k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 181k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 181k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   181k|            SCN_CLANG_POP
 9303|   181k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4716|  90.8k|        : base(typename base::contiguous_tag{}, sv)
 4717|  90.8k|    {
 4718|  90.8k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4421|  90.8k|        : m_current_view(sv), m_is_contiguous(true)
 4422|  90.8k|    {
 4423|  90.8k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   181k|    {
 3000|   181k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   181k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2990|   181k|    {
 2991|   181k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2992|   181k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   181k|    {
 2869|   181k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   181k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   181k|    {
 2850|   181k|        return decay_copy(t.begin());
 2851|   181k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3074|  90.8k|    {
 3075|  90.8k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  90.8k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  90.8k|    {
 3041|  90.8k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  90.8k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   186k|{
 4691|   186k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 90.8k, False: 95.7k]
  ------------------
 4692|  90.8k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|  90.8k|                                ranges::default_sentinel};
 4694|  90.8k|    }
 4695|  95.7k|    return ranges::subrange{forward_iterator{this, 0},
 4696|  95.7k|                            ranges::default_sentinel};
 4697|   186k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|  95.7k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  95.7k|    {
 4455|  95.7k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  95.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  95.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  95.7k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  95.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  95.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  95.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator16batch_advance_toEl:
 4539|  90.8k|    {
 4540|  90.8k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  |  930|  90.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|  90.8k|        m_position = i;
 4542|  90.8k|        return *this;
 4543|  90.8k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|  4.94k|{
 9324|  4.94k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  4.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  4.94k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  4.94k|{
 9225|  4.94k|#define SCN_VISIT(Type)                                                \
 9226|  4.94k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  4.94k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  4.94k|    }                                                                  \
 9229|  4.94k|    else {                                                             \
 9230|  4.94k|        return vis(monostate_val);                                     \
 9231|  4.94k|    }
 9232|       |
 9233|  4.94k|    monostate monostate_val{};
 9234|       |
 9235|  4.94k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 4.94k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 4.94k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 4.94k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 4.94k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 4.94k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 4.94k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 4.94k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 4.94k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 4.94k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 4.94k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 4.94k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 4.94k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 4.94k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 4.94k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 4.94k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 4.94k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 4.94k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 4.94k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 4.94k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 4.94k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 4.94k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 4.94k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 4.94k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 4.94k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|  4.94k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 4.94k, False: 0]
  ------------------
 9286|  4.94k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  4.94k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  4.94k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 4.94k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 4.94k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  4.94k|            SCN_CLANG_POP
 9303|  4.94k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSH_11char_traitsIwEEEEi:
 6279|  4.94k|        : m_format{format},
 6280|  4.94k|          m_next_arg_id{next_arg_id},
 6281|  4.94k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  4.94k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  4.94k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  4.94k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  4.94k|    {
 6287|  4.94k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6279|  90.8k|        : m_format{format},
 6280|  90.8k|          m_next_arg_id{next_arg_id},
 6281|  90.8k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  90.8k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  90.8k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  90.8k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  90.8k|    {
 6287|  90.8k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  90.8k|{
 7796|  90.8k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  90.8k|    handler.check_args_exhausted();
 7798|  90.8k|    return handler.get_error();
 7799|  90.8k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  90.8k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  90.8k|    auto begin = format.data();
 7764|  90.8k|    auto it = begin;
 7765|  90.8k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   112k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 90.8k, False: 21.5k]
  ------------------
 7768|  90.8k|        const auto ch = *it++;
 7769|  90.8k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 90.8k, False: 0]
  ------------------
 7770|  90.8k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  90.8k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  90.8k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 69.2k, False: 21.5k]
  ------------------
 7774|  69.2k|                return;
 7775|  69.2k|            }
 7776|  90.8k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  90.8k|    }
 7787|       |
 7788|  21.5k|    handler.on_literal_text(begin, end);
 7789|  21.5k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7692|  90.8k|{
 7693|  90.8k|    struct id_adapter {
 7694|  90.8k|        constexpr void operator()()
 7695|  90.8k|        {
 7696|  90.8k|            arg_id = handler.on_arg_id();
 7697|  90.8k|        }
 7698|  90.8k|        constexpr void operator()(std::size_t id)
 7699|  90.8k|        {
 7700|  90.8k|            arg_id = handler.on_arg_id(id);
 7701|  90.8k|        }
 7702|       |
 7703|  90.8k|        constexpr void on_error(const char* msg)
 7704|  90.8k|        {
 7705|  90.8k|            SCN_UNLIKELY_ATTR
 7706|  90.8k|            handler.on_error(msg);
 7707|  90.8k|        }
 7708|       |
 7709|  90.8k|        Handler& handler;
 7710|  90.8k|        std::size_t arg_id;
 7711|  90.8k|    };
 7712|       |
 7713|  90.8k|    ++begin;
 7714|  90.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  90.8k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 90.8k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  90.8k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 90.8k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  90.8k|    else {
 7726|  90.8k|        auto adapter = id_adapter{handler, 0};
 7727|  90.8k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  90.8k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  90.8k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 90.8k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  90.8k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 90.8k, False: 0]
  ------------------
 7738|  90.8k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  90.8k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  90.8k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.8k]
  |  |  |  Branch (865:45): [True: 0, False: 90.8k]
  |  |  |  Branch (865:45): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|  90.8k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  90.8k|    }
 7754|  90.8k|    return begin + 1;
 7755|  90.8k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  90.8k|{
 7194|  90.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  90.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  90.8k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 90.8k, False: 0]
  |  Branch (7195:26): [True: 0, False: 90.8k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  90.8k|    handler();
 7200|  90.8k|    return begin;
 7201|  90.8k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  90.8k|        {
 7696|  90.8k|            arg_id = handler.on_arg_id();
 7697|  90.8k|        }
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|  74.1k|    {
 4352|  74.1k|        return sync(0);
 4353|  74.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6135|  4.94k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6135|  9.88k|    constexpr basic_scan_args() = default;
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2925|  97.1k|    {
 2926|  97.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  97.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  97.1k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2907|  97.1k|    {
 2908|  97.1k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  97.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  97.1k|    }
_ZN3scn2v46ranges6detail10decay_copyINS1_18default_sentinel_tEEEu7__decayIT_EOS5_:
 2093|   185k|{
 2094|   185k|    return SCN_FWD(t);
  ------------------
  |  |  936|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   185k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
 4532|  41.8k|    {
 4533|  41.8k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  930|  41.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4534|  41.8k|        m_position += n;
 4535|  41.8k|        return *this;
 4536|  41.8k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2925|  88.5k|    {
 2926|  88.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  88.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  88.5k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2907|  88.5k|    {
 2908|  88.5k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  88.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  88.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
 4532|  21.5k|    {
 4533|  21.5k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  930|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4534|  21.5k|        m_position += n;
 4535|  21.5k|        return *this;
 4536|  21.5k|    }

_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.1k|{
   89|  15.1k|    auto result = make_scan_result<Source, Args...>();
   90|  15.1k|    fill_scan_result(result,
   91|  15.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.1k|    return result;
   94|  15.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  45.4k|{
   44|  45.4k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  45.4k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.1k|{
  131|  15.1k|    auto result = make_scan_result<Source, Args...>();
  132|  15.1k|    fill_scan_result(result,
  133|  15.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.1k|    return result;
  136|  15.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  45.4k|{
   60|  45.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  45.4k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.64k|{
  171|  1.64k|    auto result = make_scan_result<Source, T>();
  172|  1.64k|    fill_scan_result(
  173|  1.64k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.64k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.64k|    return result;
  176|  1.64k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  4.94k|{
   72|  4.94k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  4.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  4.94k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.1k|{
   89|  15.1k|    auto result = make_scan_result<Source, Args...>();
   90|  15.1k|    fill_scan_result(result,
   91|  15.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.1k|    return result;
   94|  15.1k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.1k|{
  131|  15.1k|    auto result = make_scan_result<Source, Args...>();
  132|  15.1k|    fill_scan_result(result,
  133|  15.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.1k|    return result;
  136|  15.1k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.64k|{
  171|  1.64k|    auto result = make_scan_result<Source, T>();
  172|  1.64k|    fill_scan_result(
  173|  1.64k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.64k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.64k|    return result;
  176|  1.64k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.1k|{
   89|  15.1k|    auto result = make_scan_result<Source, Args...>();
   90|  15.1k|    fill_scan_result(result,
   91|  15.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.1k|    return result;
   94|  15.1k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.1k|{
  131|  15.1k|    auto result = make_scan_result<Source, Args...>();
  132|  15.1k|    fill_scan_result(result,
  133|  15.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.1k|    return result;
  136|  15.1k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.64k|{
  171|  1.64k|    auto result = make_scan_result<Source, T>();
  172|  1.64k|    fill_scan_result(
  173|  1.64k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.64k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.64k|    return result;
  176|  1.64k|}
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.1k|{
   89|  15.1k|    auto result = make_scan_result<Source, Args...>();
   90|  15.1k|    fill_scan_result(result,
   91|  15.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.1k|    return result;
   94|  15.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  45.4k|{
   44|  45.4k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  45.4k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.1k|{
  131|  15.1k|    auto result = make_scan_result<Source, Args...>();
  132|  15.1k|    fill_scan_result(result,
  133|  15.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.1k|    return result;
  136|  15.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  45.4k|{
   60|  45.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  45.4k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.64k|{
  171|  1.64k|    auto result = make_scan_result<Source, T>();
  172|  1.64k|    fill_scan_result(
  173|  1.64k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.64k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.64k|    return result;
  176|  1.64k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  4.94k|{
   72|  4.94k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  4.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  4.94k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.1k|{
   89|  15.1k|    auto result = make_scan_result<Source, Args...>();
   90|  15.1k|    fill_scan_result(result,
   91|  15.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.1k|    return result;
   94|  15.1k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.1k|{
  131|  15.1k|    auto result = make_scan_result<Source, Args...>();
  132|  15.1k|    fill_scan_result(result,
  133|  15.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.1k|    return result;
  136|  15.1k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.64k|{
  171|  1.64k|    auto result = make_scan_result<Source, T>();
  172|  1.64k|    fill_scan_result(
  173|  1.64k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.64k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.64k|    return result;
  176|  1.64k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.1k|{
   89|  15.1k|    auto result = make_scan_result<Source, Args...>();
   90|  15.1k|    fill_scan_result(result,
   91|  15.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.1k|    return result;
   94|  15.1k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.1k|{
  131|  15.1k|    auto result = make_scan_result<Source, Args...>();
  132|  15.1k|    fill_scan_result(result,
  133|  15.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.1k|    return result;
  136|  15.1k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.64k|{
  171|  1.64k|    auto result = make_scan_result<Source, T>();
  172|  1.64k|    fill_scan_result(
  173|  1.64k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.64k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.64k|    return result;
  176|  1.64k|}

_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  91.7k|{
  250|  91.7k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  91.7k|        .transform_error(impl::make_eof_scan_error);
  252|  91.7k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  90.8k|{
  250|  90.8k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  90.8k|        .transform_error(impl::make_eof_scan_error);
  252|  90.8k|}
_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   174k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   174k|{
  309|   174k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   174k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  38.2k|{
 1903|  38.2k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  38.2k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|  45.8k|{
 1911|  45.8k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|  45.8k|    return sync_after_vscan(source, n);
 1913|  45.8k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  45.4k|{
 1921|  45.4k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  45.4k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|  45.4k|{
 1929|  45.4k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|  45.4k|    return sync_after_vscan(source, n);
 1931|  45.4k|}
_ZN3scn2v46detail16chrono_scan_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  56.0k|{
 3582|  56.0k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 30.5k, False: 25.4k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  30.5k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  30.5k|    }
 3586|       |
 3587|  25.4k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  25.4k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  25.4k|    auto begin = contiguous_ctx.begin();
 3590|  25.4k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.5k, False: 13.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.5k|    }                                                  \
  |  |  |  | 3939|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  13.9k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  25.4k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  56.0k|{
 3582|  56.0k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 30.5k, False: 25.4k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  30.5k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  30.5k|    }
 3586|       |
 3587|  25.4k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  25.4k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  25.4k|    auto begin = contiguous_ctx.begin();
 3590|  25.4k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.5k, False: 13.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.5k|    }                                                  \
  |  |  |  | 3939|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  13.9k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  25.4k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  56.0k|{
 3582|  56.0k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 30.5k, False: 25.4k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  30.5k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  30.5k|    }
 3586|       |
 3587|  25.4k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  25.4k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  25.4k|    auto begin = contiguous_ctx.begin();
 3590|  25.4k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.5k, False: 13.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.5k|    }                                                  \
  |  |  |  | 3939|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  13.9k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  25.4k|}
_ZN3scn2v46detail16chrono_scan_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  60.5k|{
 3582|  60.5k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 30.2k, False: 30.2k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  30.2k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  30.2k|    }
 3586|       |
 3587|  30.2k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  30.2k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  30.2k|    auto begin = contiguous_ctx.begin();
 3590|  30.2k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  30.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.0k, False: 7.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.0k|    }                                                  \
  |  |  |  | 3939|  30.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  7.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  7.19k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  30.2k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  60.5k|{
 3582|  60.5k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 30.2k, False: 30.2k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  30.2k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  30.2k|    }
 3586|       |
 3587|  30.2k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  30.2k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  30.2k|    auto begin = contiguous_ctx.begin();
 3590|  30.2k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  30.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.0k, False: 7.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.0k|    }                                                  \
  |  |  |  | 3939|  30.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  7.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  7.19k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  30.2k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  60.5k|{
 3582|  60.5k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 30.2k, False: 30.2k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  30.2k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  30.2k|    }
 3586|       |
 3587|  30.2k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  30.2k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  30.2k|    auto begin = contiguous_ctx.begin();
 3590|  30.2k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  30.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.0k, False: 7.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.0k|    }                                                  \
  |  |  |  | 3939|  30.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  7.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  7.19k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  30.2k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   168k|{
  215|   168k|    return find_classic_impl(
  216|   168k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   168k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   168k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|  14.8k|{
  329|  14.8k|    SCN_UNLIKELY_ATTR
  330|  14.8k|    return e;
  331|  14.8k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  38.2k|{
 1872|  38.2k|    return vscan_internal(source, format, args);
 1873|  38.2k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|  45.8k|{
 1878|  45.8k|    auto n = vscan_internal(source, format, args);
 1879|  45.8k|    return sync_after_vscan(source, n);
 1880|  45.8k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  45.4k|{
 1886|  45.4k|    return vscan_internal(source, format, args);
 1887|  45.4k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|  45.4k|{
 1892|  45.4k|    auto n = vscan_internal(source, format, args);
 1893|  45.4k|    return sync_after_vscan(source, n);
 1894|  45.4k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  2.47k|{
 1958|  2.47k|    return vscan_value_internal(source, arg);
 1959|  2.47k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  2.47k|{
 1963|  2.47k|    auto n = vscan_value_internal(source, arg);
 1964|  2.47k|    return sync_after_vscan(source, n);
 1965|  2.47k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|  4.94k|{
 1971|  4.94k|    return vscan_value_internal(source, arg);
 1972|  4.94k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|  4.94k|{
 1977|  4.94k|    auto n = vscan_value_internal(source, arg);
 1978|  4.94k|    return sync_after_vscan(source, n);
 1979|  4.94k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  81.5k|{
  118|  81.5k|    static_assert(sizeof(*source.data()) == 1);
  119|  81.5k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  81.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  81.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  81.5k|    uint64_t word{};
  121|  81.5k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  81.5k|    return has_byte_greater(word, 127) != 0;
  124|  81.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   168k|{
  131|   168k|    auto it = source.begin();
  132|       |
  133|   174k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 81.5k, False: 92.5k]
  ------------------
  134|  81.5k|        auto sv =
  135|  81.5k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  81.5k|                .substr(0, 8);
  137|       |
  138|  81.5k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 69.8k, False: 11.7k]
  ------------------
  139|  69.8k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  69.8k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  69.8k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 65.5k, False: 4.35k]
  ------------------
  142|  65.5k|                break;
  143|  65.5k|            }
  144|  4.35k|            continue;
  145|  69.8k|        }
  146|       |
  147|  18.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 16.5k, False: 1.45k]
  ------------------
  148|  16.5k|            auto tmp =
  149|  16.5k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  16.5k|            auto res = get_next_code_point(tmp);
  151|  16.5k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 10.2k, False: 6.34k]
  ------------------
  152|  10.2k|                return it;
  153|  10.2k|            }
  154|  6.34k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  6.34k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  6.34k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  6.34k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  6.34k|        }
  158|  11.7k|    }
  159|       |
  160|   158k|    return detail::make_string_view_iterator(source, it);
  161|   168k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   155k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  16.5k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|  91.7k|{
 1769|  91.7k|    const auto argcount = args.size();
 1770|  91.7k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 91.7k]
  |  Branch (1770:60): [True: 0, False: 0]
  ------------------
 1771|      0|        auto arg = args.get(0);
 1772|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|      0|    }
 1774|       |
 1775|  91.7k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 91.7k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  91.7k|    SCN_UNLIKELY_ATTR
 1783|  91.7k|    {
 1784|  91.7k|        auto handler = format_handler<false, CharT>{
 1785|  91.7k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  91.7k|    static_cast<    \
  |  |  935|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  91.7k|    static_cast<    \
  |  |  935|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  91.7k|        return vscan_parse_format_string(format, handler);
 1787|  91.7k|    }
 1788|  91.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   168k|{
 1317|   168k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 168k, False: 0]
  ------------------
 1318|   168k|        return false;
 1319|   168k|    }
 1320|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 0, False: 0]
  |  Branch (1320:39): [True: 0, False: 0]
  ------------------
 1321|   168k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  2.47k|{
 1350|  2.47k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.47k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  2.47k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  2.47k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 2.47k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  2.47k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  2.47k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  2.47k|    static_cast<    \
  |  |  935|  2.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  2.47k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  2.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.47k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.47k|    }                                                  \
  |  |  |  | 3939|  2.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|      0|    return it.position();
 1367|  2.47k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|  76.4k|        : format_handler_base{argcount},
 1593|  76.4k|          parse_ctx{source_tag<Source&&>, format},
 1594|  76.4k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  76.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  76.4k|    static_cast<    \
  |  |  935|  76.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  76.4k|    static_cast<    \
  |  |  935|  76.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  76.4k|    {
 1596|  76.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|   349k|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|   349k|    {
 1412|   349k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 349k]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|   349k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|  76.4k|        : contiguous_ctx(source, args, loc)
 1544|  76.4k|    {
 1545|  76.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  76.4k|{
 1734|  76.4k|    const auto beg = handler.get_ctx().begin();
 1735|  76.4k|    detail::parse_format_string<false>(format, handler);
 1736|  76.4k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  76.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.6k, False: 41.8k]
  |  |  ------------------
  ------------------
 1737|  34.6k|        return unexpected(err.error());
 1738|  34.6k|    }
 1739|  41.8k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  76.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   236k|    {
 1718|   236k|        return ctx.get();
 1719|   236k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   236k|    {
 1549|   236k|        return contiguous_ctx;
 1550|   236k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   118k|    {
 1600|   118k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 118k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   118k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   207k|    {
 1460|   207k|        error = unexpected(err);
 1461|   207k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|  76.4k|{
 1372|  76.4k|    auto arg = ctx.arg(id);
 1373|  76.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  76.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.4k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  76.4k|    return arg;
 1377|  76.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|   349k|    {
 1486|   349k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 349k]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|   349k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 349k]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|   349k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   349k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 349k, False: 0]
  |  |  ------------------
  ------------------
 1498|   349k|            visited_args_lower64 |= (1ull << id);
 1499|   349k|            return;
 1500|   349k|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|   349k|    {
 1470|   349k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 349k]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|   349k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   349k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 349k, False: 0]
  |  |  ------------------
  ------------------
 1477|   349k|            return (visited_args_lower64 >> id) & 1ull;
 1478|   349k|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|   349k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|  76.4k|    {
 1640|  76.4k|        return parse_ctx.next_arg_id();
 1641|  76.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|  76.4k|    {
 1680|  76.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  76.4k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  76.4k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 76.4k, False: 0]
  ------------------
 1684|  76.4k|            parse_ctx.advance_to(begin);
 1685|  76.4k|            on_visit_scan_arg(
 1686|  76.4k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  76.4k|                    parse_ctx, get_custom_ctx()},
 1688|  76.4k|                arg);
 1689|  76.4k|            return parse_ctx.begin();
 1690|  76.4k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  76.4k|    {
 1651|  76.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 76.4k]
  |  Branch (1651:13): [True: 0, False: 76.4k]
  |  Branch (1651:29): [True: 0, False: 76.4k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  76.4k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  76.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  76.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  76.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.6k, False: 41.8k]
  |  |  ------------------
  ------------------
 1658|  34.6k|            on_error(r.error());
 1659|  34.6k|        }
 1660|  41.8k|        else {
 1661|  41.8k|            get_ctx().advance_to(*r);
 1662|  41.8k|        }
 1663|  76.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE14get_custom_ctxEv:
 1721|  76.4k|    {
 1722|  76.4k|        return ctx.get_custom();
 1723|  76.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE10get_customEv:
 1552|  76.4k|    {
 1553|  76.4k|        if (!buffer) {
  ------------------
  |  Branch (1553:13): [True: 76.4k, False: 0]
  ------------------
 1554|  76.4k|            buffer.emplace(detail::make_string_view_from_pointers(
 1555|  76.4k|                ranges::data(contiguous_ctx.underlying_range()),
 1556|  76.4k|                ranges::data(contiguous_ctx.underlying_range()) +
 1557|  76.4k|                    ranges::size(contiguous_ctx.underlying_range())));
 1558|  76.4k|        }
 1559|  76.4k|        auto it = buffer->get().begin();
 1560|  76.4k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1561|  76.4k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1562|  76.4k|        return *custom_ctx;
 1563|  76.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|   349k|    {
 1419|   349k|        {
 1420|   349k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 349k]
  ------------------
 1421|   349k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 349k]
  ------------------
 1422|   349k|                                      ? std::numeric_limits<uint64_t>::max()
 1423|   349k|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|   349k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 349k]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|   349k|        }
 1430|       |
 1431|   349k|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 349k, False: 0]
  ------------------
 1432|   349k|            return;
 1433|   349k|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  1.39M|    {
 1465|  1.39M|        return error;
 1466|  1.39M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|  91.7k|        : format_handler_base{argcount},
 1593|  91.7k|          parse_ctx{source_tag<Source&&>, format},
 1594|  91.7k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  91.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  91.7k|    static_cast<    \
  |  |  935|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  91.7k|    static_cast<    \
  |  |  935|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  91.7k|    {
 1596|  91.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|  91.7k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  91.7k|    static_cast<    \
  |  |  935|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  91.7k|    {
 1521|  91.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  91.7k|{
 1734|  91.7k|    const auto beg = handler.get_ctx().begin();
 1735|  91.7k|    detail::parse_format_string<false>(format, handler);
 1736|  91.7k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.6k, False: 57.1k]
  |  |  ------------------
  ------------------
 1737|  34.6k|        return unexpected(err.error());
 1738|  34.6k|    }
 1739|  57.1k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  91.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|   297k|    {
 1718|   297k|        return ctx.get();
 1719|   297k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|   297k|    {
 1525|   297k|        return ctx;
 1526|   297k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|   148k|    {
 1600|   148k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 148k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   148k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|  91.7k|{
 1372|  91.7k|    auto arg = ctx.arg(id);
 1373|  91.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  91.7k|    return arg;
 1377|  91.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|  91.7k|    {
 1640|  91.7k|        return parse_ctx.next_arg_id();
 1641|  91.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|  91.7k|    {
 1680|  91.7k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  91.7k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  91.7k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 91.7k, False: 0]
  ------------------
 1684|  91.7k|            parse_ctx.advance_to(begin);
 1685|  91.7k|            on_visit_scan_arg(
 1686|  91.7k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  91.7k|                    parse_ctx, get_custom_ctx()},
 1688|  91.7k|                arg);
 1689|  91.7k|            return parse_ctx.begin();
 1690|  91.7k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  91.7k|    {
 1651|  91.7k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 91.7k]
  |  Branch (1651:13): [True: 0, False: 91.7k]
  |  Branch (1651:29): [True: 0, False: 91.7k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  91.7k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  91.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  91.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.6k, False: 57.1k]
  |  |  ------------------
  ------------------
 1658|  34.6k|            on_error(r.error());
 1659|  34.6k|        }
 1660|  57.1k|        else {
 1661|  57.1k|            get_ctx().advance_to(*r);
 1662|  57.1k|        }
 1663|  91.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE14get_custom_ctxEv:
 1721|  91.7k|    {
 1722|  91.7k|        return ctx.get_custom();
 1723|  91.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE10get_customEv:
 1528|  91.7k|    {
 1529|  91.7k|        return ctx;
 1530|  91.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  76.4k|{
 1749|  76.4k|    const auto argcount = args.size();
 1750|  76.4k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 0, False: 76.4k]
  |  Branch (1750:60): [True: 0, False: 0]
  ------------------
 1751|      0|        auto arg = args.get(0);
 1752|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|      0|    }
 1754|       |
 1755|  76.4k|    auto handler = format_handler<true, CharT>{
 1756|  76.4k|        ranges::subrange<const CharT*>{source.data(),
 1757|  76.4k|                                       source.data() + source.size()},
 1758|  76.4k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  76.4k|    static_cast<    \
  |  |  935|  76.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  76.4k|    static_cast<    \
  |  |  935|  76.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  76.4k|    return vscan_parse_format_string(format, handler);
 1760|  76.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  2.47k|{
 1330|  2.47k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.47k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  2.47k|    auto reader =
 1336|  2.47k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  2.47k|            ranges::subrange<const CharT*>{source.data(),
 1338|  2.47k|                                           source.data() + source.size()},
 1339|  2.47k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  2.47k|    static_cast<    \
  |  |  935|  2.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  2.47k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  2.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.47k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.47k|    }                                                  \
  |  |  |  | 3939|  2.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      0|    return ranges::distance(source.data(), it);
 1342|  2.47k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  94.2k|{
 1849|  94.2k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  94.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 57.1k, False: 37.0k]
  |  |  ------------------
  ------------------
 1850|  57.1k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  57.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 57.1k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  57.1k|    }
 1856|  37.0k|    else {
 1857|  37.0k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 37.0k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  37.0k|    }
 1863|  94.2k|    return result;
 1864|  94.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  90.8k|{
 1749|  90.8k|    const auto argcount = args.size();
 1750|  90.8k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 0, False: 90.8k]
  |  Branch (1750:60): [True: 0, False: 0]
  ------------------
 1751|      0|        auto arg = args.get(0);
 1752|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|      0|    }
 1754|       |
 1755|  90.8k|    auto handler = format_handler<true, CharT>{
 1756|  90.8k|        ranges::subrange<const CharT*>{source.data(),
 1757|  90.8k|                                       source.data() + source.size()},
 1758|  90.8k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  90.8k|    static_cast<    \
  |  |  935|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  90.8k|    static_cast<    \
  |  |  935|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  90.8k|    return vscan_parse_format_string(format, handler);
 1760|  90.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   181k|{
 1317|   181k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 181k, False: 0]
  ------------------
 1318|   181k|        return false;
 1319|   181k|    }
 1320|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 0, False: 0]
  |  Branch (1320:39): [True: 0, False: 0]
  ------------------
 1321|   181k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  4.94k|{
 1330|  4.94k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.94k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  4.94k|    auto reader =
 1336|  4.94k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  4.94k|            ranges::subrange<const CharT*>{source.data(),
 1338|  4.94k|                                           source.data() + source.size()},
 1339|  4.94k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  4.94k|    static_cast<    \
  |  |  935|  4.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  4.94k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  4.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.94k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.94k|    }                                                  \
  |  |  |  | 3939|  4.94k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      0|    return ranges::distance(source.data(), it);
 1342|  4.94k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|  90.8k|        : format_handler_base{argcount},
 1593|  90.8k|          parse_ctx{source_tag<Source&&>, format},
 1594|  90.8k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  90.8k|    static_cast<    \
  |  |  935|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  90.8k|    static_cast<    \
  |  |  935|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  90.8k|    {
 1596|  90.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|  90.8k|        : contiguous_ctx(source, args, loc)
 1544|  90.8k|    {
 1545|  90.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  90.8k|{
 1734|  90.8k|    const auto beg = handler.get_ctx().begin();
 1735|  90.8k|    detail::parse_format_string<false>(format, handler);
 1736|  90.8k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.2k, False: 21.5k]
  |  |  ------------------
  ------------------
 1737|  69.2k|        return unexpected(err.error());
 1738|  69.2k|    }
 1739|  21.5k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  90.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   224k|    {
 1718|   224k|        return ctx.get();
 1719|   224k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   224k|    {
 1549|   224k|        return contiguous_ctx;
 1550|   224k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   112k|    {
 1600|   112k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 112k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   112k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|  90.8k|{
 1372|  90.8k|    auto arg = ctx.arg(id);
 1373|  90.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  90.8k|    return arg;
 1377|  90.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|  90.8k|    {
 1640|  90.8k|        return parse_ctx.next_arg_id();
 1641|  90.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|  90.8k|    {
 1680|  90.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  90.8k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  90.8k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 90.8k, False: 0]
  ------------------
 1684|  90.8k|            parse_ctx.advance_to(begin);
 1685|  90.8k|            on_visit_scan_arg(
 1686|  90.8k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  90.8k|                    parse_ctx, get_custom_ctx()},
 1688|  90.8k|                arg);
 1689|  90.8k|            return parse_ctx.begin();
 1690|  90.8k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  90.8k|    {
 1651|  90.8k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 90.8k]
  |  Branch (1651:13): [True: 0, False: 90.8k]
  |  Branch (1651:29): [True: 0, False: 90.8k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  90.8k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  90.8k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.2k, False: 21.5k]
  |  |  ------------------
  ------------------
 1658|  69.2k|            on_error(r.error());
 1659|  69.2k|        }
 1660|  21.5k|        else {
 1661|  21.5k|            get_ctx().advance_to(*r);
 1662|  21.5k|        }
 1663|  90.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE14get_custom_ctxEv:
 1721|  90.8k|    {
 1722|  90.8k|        return ctx.get_custom();
 1723|  90.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE10get_customEv:
 1552|  90.8k|    {
 1553|  90.8k|        if (!buffer) {
  ------------------
  |  Branch (1553:13): [True: 90.8k, False: 0]
  ------------------
 1554|  90.8k|            buffer.emplace(detail::make_string_view_from_pointers(
 1555|  90.8k|                ranges::data(contiguous_ctx.underlying_range()),
 1556|  90.8k|                ranges::data(contiguous_ctx.underlying_range()) +
 1557|  90.8k|                    ranges::size(contiguous_ctx.underlying_range())));
 1558|  90.8k|        }
 1559|  90.8k|        auto it = buffer->get().begin();
 1560|  90.8k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1561|  90.8k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1562|  90.8k|        return *custom_ctx;
 1563|  90.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|  90.8k|{
 1769|  90.8k|    const auto argcount = args.size();
 1770|  90.8k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 90.8k]
  |  Branch (1770:60): [True: 0, False: 0]
  ------------------
 1771|      0|        auto arg = args.get(0);
 1772|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|      0|    }
 1774|       |
 1775|  90.8k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 90.8k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  90.8k|    SCN_UNLIKELY_ATTR
 1783|  90.8k|    {
 1784|  90.8k|        auto handler = format_handler<false, CharT>{
 1785|  90.8k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  90.8k|    static_cast<    \
  |  |  935|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  90.8k|    static_cast<    \
  |  |  935|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  90.8k|        return vscan_parse_format_string(format, handler);
 1787|  90.8k|    }
 1788|  90.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  4.94k|{
 1350|  4.94k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.94k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  4.94k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  4.94k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 4.94k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  4.94k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  4.94k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  4.94k|    static_cast<    \
  |  |  935|  4.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  4.94k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  4.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.94k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.94k|    }                                                  \
  |  |  |  | 3939|  4.94k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|      0|    return it.position();
 1367|  4.94k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|  90.8k|        : format_handler_base{argcount},
 1593|  90.8k|          parse_ctx{source_tag<Source&&>, format},
 1594|  90.8k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  90.8k|    static_cast<    \
  |  |  935|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  90.8k|    static_cast<    \
  |  |  935|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  90.8k|    {
 1596|  90.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|  90.8k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  90.8k|    static_cast<    \
  |  |  935|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  90.8k|    {
 1521|  90.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  90.8k|{
 1734|  90.8k|    const auto beg = handler.get_ctx().begin();
 1735|  90.8k|    detail::parse_format_string<false>(format, handler);
 1736|  90.8k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.2k, False: 21.5k]
  |  |  ------------------
  ------------------
 1737|  69.2k|        return unexpected(err.error());
 1738|  69.2k|    }
 1739|  21.5k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  90.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|   224k|    {
 1718|   224k|        return ctx.get();
 1719|   224k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|   224k|    {
 1525|   224k|        return ctx;
 1526|   224k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   112k|    {
 1600|   112k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 112k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   112k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|  90.8k|{
 1372|  90.8k|    auto arg = ctx.arg(id);
 1373|  90.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  90.8k|    return arg;
 1377|  90.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|  90.8k|    {
 1640|  90.8k|        return parse_ctx.next_arg_id();
 1641|  90.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|  90.8k|    {
 1680|  90.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  90.8k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  90.8k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 90.8k, False: 0]
  ------------------
 1684|  90.8k|            parse_ctx.advance_to(begin);
 1685|  90.8k|            on_visit_scan_arg(
 1686|  90.8k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  90.8k|                    parse_ctx, get_custom_ctx()},
 1688|  90.8k|                arg);
 1689|  90.8k|            return parse_ctx.begin();
 1690|  90.8k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  90.8k|    {
 1651|  90.8k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 90.8k]
  |  Branch (1651:13): [True: 0, False: 90.8k]
  |  Branch (1651:29): [True: 0, False: 90.8k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  90.8k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  90.8k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.2k, False: 21.5k]
  |  |  ------------------
  ------------------
 1658|  69.2k|            on_error(r.error());
 1659|  69.2k|        }
 1660|  21.5k|        else {
 1661|  21.5k|            get_ctx().advance_to(*r);
 1662|  21.5k|        }
 1663|  90.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE14get_custom_ctxEv:
 1721|  90.8k|    {
 1722|  90.8k|        return ctx.get_custom();
 1723|  90.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE10get_customEv:
 1528|  90.8k|    {
 1529|  90.8k|        return ctx;
 1530|  90.8k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  95.7k|{
 1849|  95.7k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  95.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 21.5k, False: 74.1k]
  |  |  ------------------
  ------------------
 1850|  21.5k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  21.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 21.5k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  21.5k|    }
 1856|  74.1k|    else {
 1857|  74.1k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  74.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 74.1k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  74.1k|    }
 1863|  95.7k|    return result;
 1864|  95.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  2.47k|{
 1795|  2.47k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  2.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  2.47k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  2.47k|{
 1795|  2.47k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  2.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  2.47k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  4.94k|{
 1795|  4.94k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  4.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  4.94k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  4.94k|{
 1795|  4.94k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  4.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  4.94k|}
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  30.5k|{
 3563|  30.5k|    {
 3564|  30.5k|        SCN_TRY(it,
  ------------------
  |  | 3940|  30.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 468, False: 30.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    468|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    468|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    468|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    468|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    468|    }                                                  \
  |  |  |  | 3939|  30.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  30.1k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  30.1k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  30.1k|    static_cast<    \
  |  |  935|  30.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  30.1k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  30.1k|        ctx.range(), t, ctx.locale());
 3571|  30.1k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  30.1k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  30.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.0k, False: 19.0k]
  |  |  ------------------
  ------------------
 3573|  11.0k|        return unexpected(e.error());
 3574|  11.0k|    }
 3575|  19.0k|    return r.get_iterator();
 3576|  30.1k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  30.1k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  30.1k|    static_cast<    \
  |  |  935|  30.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  30.1k|          m_begin(ranges::begin(m_range)),
 2708|  30.1k|          m_tm(t),
 2709|  30.1k|          m_loc(loc)
 2710|  30.1k|    {
 2711|  30.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  10.3k|    {
 3358|  10.3k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  43.9k|    {
 3363|  43.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.0k, False: 32.9k]
  ------------------
 3364|  11.0k|            m_error = unexpected(e);
 3365|  11.0k|        }
 3366|  43.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  32.3k|    {
 2715|  54.2k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 32.3k, False: 21.8k]
  ------------------
 2716|  32.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 184, False: 32.1k]
  ------------------
 2717|    184|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    184|            }
 2719|  32.1k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.3k, False: 21.8k]
  ------------------
 2720|  10.3k|                return on_error("Invalid literal character");
 2721|  10.3k|            }
 2722|  21.8k|            ++beg;
 2723|  21.8k|            ++m_begin;
 2724|  21.8k|        }
 2725|  32.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.49k|    {
 2745|  3.49k|#if !SCN_DISABLE_LOCALE
 2746|  3.49k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.49k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.49k|#endif
 2753|       |
 2754|  3.49k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.49k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.49k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.49k|    {
 2218|  3.49k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.49k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.49k|        t.tm_year = y - 1900;
 2223|  3.49k|        st.set_full_year(h);
 2224|  3.49k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  55.5k|    {
 3381|  55.5k|        int digits_read = 0;
 3382|  55.5k|        int accumulator = 0;
 3383|  96.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 96.3k, False: 378]
  ------------------
 3384|  96.3k|            const auto ch = *m_begin;
 3385|  96.3k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 28.6k, False: 67.7k]
  |  Branch (3385:36): [True: 17.8k, False: 49.8k]
  ------------------
 3386|  46.5k|                break;
 3387|  46.5k|            }
 3388|  49.8k|            ++m_begin;
 3389|  49.8k|            ++digits_read;
 3390|  49.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  49.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 8.66k, False: 41.1k]
  ------------------
 3392|  8.66k|                break;
 3393|  8.66k|            }
 3394|  49.8k|        }
 3395|  55.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 16.4k, False: 39.0k]
  ------------------
 3396|  16.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  16.4k|                                 "Too few integer digits"});
 3398|  16.4k|            return -1;
 3399|  16.4k|        }
 3400|  39.0k|        return accumulator;
 3401|  55.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  6.04k|    {
 2759|  6.04k|#if !SCN_DISABLE_LOCALE
 2760|  6.04k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 6.04k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  6.04k|#endif
 2768|       |
 2769|  6.04k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  6.04k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  6.04k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  6.04k|    {
 2235|  6.04k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.56k, False: 4.48k]
  |  |  |  Branch (865:45): [True: 1.56k, False: 4.48k]
  |  |  |  Branch (865:45): [True: 0, False: 4.48k]
  |  |  ------------------
  ------------------
 2236|  1.56k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.56k|                                "Invalid value for tm_year"});
 2238|  1.56k|        }
 2239|  4.48k|        st.short_year_value = y;
 2240|  4.48k|        st.set_short_year(h);
 2241|  4.48k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  3.86k|    {
 2802|  3.86k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.86k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.86k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.86k|#endif
 2810|       |
 2811|  3.86k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.86k|            {"January", 1},
 2813|  3.86k|            {"February", 2},
 2814|  3.86k|            {"March", 3},
 2815|  3.86k|            {"April", 4},
 2816|  3.86k|            {"May", 5},
 2817|  3.86k|            {"June", 6},
 2818|  3.86k|            {"July", 7},
 2819|  3.86k|            {"August", 8},
 2820|  3.86k|            {"September", 9},
 2821|  3.86k|            {"October", 10},
 2822|  3.86k|            {"November", 11},
 2823|  3.86k|            {"December", 12},
 2824|  3.86k|        }};
 2825|  3.86k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 80, False: 3.78k]
  ------------------
 2826|     80|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     80|        }
 2828|  3.78k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.78k|            {"Jan", 1},
 2830|  3.78k|            {"Feb", 2},
 2831|  3.78k|            {"Mar", 3},
 2832|  3.78k|            {"Apr", 4},
 2833|  3.78k|            {"Jun", 6},
 2834|  3.78k|            {"Jul", 7},
 2835|  3.78k|            {"Aug", 8},
 2836|  3.78k|            {"Sep", 9},
 2837|  3.78k|            {"Oct", 10},
 2838|  3.78k|            {"Nov", 11},
 2839|  3.78k|            {"Dec", 12},
 2840|  3.78k|        }};
 2841|  3.78k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2.20k, False: 1.57k]
  ------------------
 2842|  2.20k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  2.20k|        }
 2844|  1.57k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.57k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  10.3k|    {
 2208|  10.3k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.68k, False: 7.62k]
  |  |  |  Branch (865:45): [True: 2.57k, False: 7.73k]
  |  |  |  Branch (865:45): [True: 110, False: 7.62k]
  |  |  ------------------
  ------------------
 2209|  2.68k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.68k|                                "Invalid value for tm_mon"});
 2211|  2.68k|        }
 2212|  7.62k|        t.tm_mon = m - 1;
 2213|  7.62k|        st.set_mon(h);
 2214|  7.62k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.86k|    {
 3419|  3.86k|        auto start_it = m_begin;
 3420|  3.86k|        std::size_t options_available = N;
 3421|  3.86k|        std::size_t chars_consumed = 0;
 3422|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 11.0k, False: 3.72k]
  ------------------
 3423|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 10.9k, False: 80]
  ------------------
 3424|  10.9k|            std::size_t i = 0;
 3425|  10.9k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 62, False: 10.8k]
  ------------------
 3426|     62|                options_available = 0;
 3427|     62|                break;
 3428|     62|            }
 3429|  10.8k|            const auto ch = *m_begin;
 3430|  10.8k|            ++m_begin;
 3431|  69.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 58.1k, False: 10.8k]
  ------------------
 3432|  58.1k|                const auto cmp = static_cast<unsigned>(
 3433|  58.1k|                    ch ^ options[i].first[chars_consumed]);
 3434|  58.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 58.1k]
  ------------------
 3435|  58.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 48.5k, False: 9.65k]
  |  Branch (3435:34): [True: 46.1k, False: 2.35k]
  ------------------
 3436|  46.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  46.1k|                                options.end());
 3438|  46.1k|                    --options_available;
 3439|  46.1k|                    continue;
 3440|  46.1k|                }
 3441|  12.0k|                ++i;
 3442|  12.0k|            }
 3443|  10.8k|            ++chars_consumed;
 3444|  10.8k|        }
 3445|  3.86k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.78k, False: 80]
  ------------------
 3446|  3.78k|            m_begin = start_it;
 3447|  3.78k|            return std::nullopt;
 3448|  3.78k|        }
 3449|     80|        return options.front().second;
 3450|  3.86k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.78k|    {
 3419|  3.78k|        auto start_it = m_begin;
 3420|  3.78k|        std::size_t options_available = N;
 3421|  3.78k|        std::size_t chars_consumed = 0;
 3422|  12.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.7k, False: 1.52k]
  ------------------
 3423|  12.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 8.49k, False: 2.20k]
  ------------------
 3424|  8.49k|            std::size_t i = 0;
 3425|  8.49k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 56, False: 8.43k]
  ------------------
 3426|     56|                options_available = 0;
 3427|     56|                break;
 3428|     56|            }
 3429|  8.43k|            const auto ch = *m_begin;
 3430|  8.43k|            ++m_begin;
 3431|  54.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 46.3k, False: 8.43k]
  ------------------
 3432|  46.3k|                const auto cmp = static_cast<unsigned>(
 3433|  46.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  46.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 46.3k]
  ------------------
 3435|  46.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.6k, False: 4.69k]
  |  Branch (3435:34): [True: 39.3k, False: 2.27k]
  ------------------
 3436|  39.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  39.3k|                                options.end());
 3438|  39.3k|                    --options_available;
 3439|  39.3k|                    continue;
 3440|  39.3k|                }
 3441|  6.96k|                ++i;
 3442|  6.96k|            }
 3443|  8.43k|            ++chars_consumed;
 3444|  8.43k|        }
 3445|  3.78k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.57k, False: 2.20k]
  ------------------
 3446|  1.57k|            m_begin = start_it;
 3447|  1.57k|            return std::nullopt;
 3448|  1.57k|        }
 3449|  2.20k|        return options.front().second;
 3450|  3.78k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  8.02k|    {
 2848|  8.02k|#if !SCN_DISABLE_LOCALE
 2849|  8.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 8.02k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  8.02k|#endif
 2856|       |
 2857|  8.02k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  8.02k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  8.02k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  7.99k|    {
 2880|  7.99k|#if !SCN_DISABLE_LOCALE
 2881|  7.99k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 7.99k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  7.99k|#endif
 2888|       |
 2889|  7.99k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  7.99k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  7.99k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  7.99k|    {
 2198|  7.99k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.12k, False: 4.87k]
  |  |  |  Branch (865:45): [True: 3.05k, False: 4.94k]
  |  |  |  Branch (865:45): [True: 74, False: 4.87k]
  |  |  ------------------
  ------------------
 2199|  3.12k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  3.12k|                                "Invalid value for tm_mday"});
 2201|  3.12k|        }
 2202|  4.87k|        t.tm_mday = d;
 2203|  4.87k|        st.set_mday(h);
 2204|  4.87k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  3.09k|    {
 2895|  3.09k|#if !SCN_DISABLE_LOCALE
 2896|  3.09k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.09k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.09k|#endif
 2903|       |
 2904|  3.09k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.09k|            {"Sunday", 0},
 2906|  3.09k|            {"Monday", 1},
 2907|  3.09k|            {"Tuesday", 2},
 2908|  3.09k|            {"Wednesday", 3},
 2909|  3.09k|            {"Thursday", 4},
 2910|  3.09k|            {"Friday", 5},
 2911|  3.09k|            {"Saturday", 6},
 2912|  3.09k|        }};
 2913|  3.09k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.09k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.09k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.09k|            {"Sun", 0},
 2918|  3.09k|            {"Mon", 1},
 2919|  3.09k|            {"Tue", 2},
 2920|  3.09k|            {"Wed", 3},
 2921|  3.09k|            {"Thu", 4},
 2922|  3.09k|            {"Fri", 5},
 2923|  3.09k|            {"Sat", 6},
 2924|  3.09k|        }};
 2925|  3.09k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 1.49k, False: 1.59k]
  ------------------
 2926|  1.49k|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|  1.49k|        }
 2928|  1.59k|        return set_error(
 2929|  1.59k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.09k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|  1.49k|    {
 2245|  1.49k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.49k]
  |  |  |  Branch (865:45): [True: 0, False: 1.49k]
  |  |  |  Branch (865:45): [True: 0, False: 1.49k]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|  1.49k|        t.tm_wday = d;
 2250|  1.49k|        st.set_wday(h);
 2251|  1.49k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.18k|    {
 3419|  6.18k|        auto start_it = m_begin;
 3420|  6.18k|        std::size_t options_available = N;
 3421|  6.18k|        std::size_t chars_consumed = 0;
 3422|  20.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 15.7k, False: 4.63k]
  ------------------
 3423|  20.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 14.2k, False: 1.49k]
  ------------------
 3424|  14.2k|            std::size_t i = 0;
 3425|  14.2k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 54, False: 14.1k]
  ------------------
 3426|     54|                options_available = 0;
 3427|     54|                break;
 3428|     54|            }
 3429|  14.1k|            const auto ch = *m_begin;
 3430|  14.1k|            ++m_begin;
 3431|  65.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 51.2k, False: 14.1k]
  ------------------
 3432|  51.2k|                const auto cmp = static_cast<unsigned>(
 3433|  51.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  51.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 51.2k]
  ------------------
 3435|  51.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.7k, False: 9.51k]
  |  Branch (3435:34): [True: 41.6k, False: 54]
  ------------------
 3436|  41.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.6k|                                options.end());
 3438|  41.6k|                    --options_available;
 3439|  41.6k|                    continue;
 3440|  41.6k|                }
 3441|  9.56k|                ++i;
 3442|  9.56k|            }
 3443|  14.1k|            ++chars_consumed;
 3444|  14.1k|        }
 3445|  6.18k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.68k, False: 1.49k]
  ------------------
 3446|  4.68k|            m_begin = start_it;
 3447|  4.68k|            return std::nullopt;
 3448|  4.68k|        }
 3449|  1.49k|        return options.front().second;
 3450|  6.18k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  13.6k|    {
 2969|  13.6k|#if !SCN_DISABLE_LOCALE
 2970|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.6k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.6k|#endif
 2977|       |
 2978|  13.6k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  13.6k|    {
 2178|  13.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.32k, False: 11.3k]
  |  |  |  Branch (865:45): [True: 2.14k, False: 11.5k]
  |  |  |  Branch (865:45): [True: 180, False: 11.3k]
  |  |  ------------------
  ------------------
 2179|  2.32k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.32k|                                  "Invalid value for tm_hour"});
 2181|  2.32k|        }
 2182|  11.3k|        t.tm_hour = h;
 2183|  11.3k|        st.set_hour24(hdl);
 2184|  11.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  13.6k|    {
 2997|  13.6k|#if !SCN_DISABLE_LOCALE
 2998|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.6k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.6k|#endif
 3005|       |
 3006|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  13.6k|    {
 2168|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.59k, False: 11.0k]
  |  |  |  Branch (865:45): [True: 2.57k, False: 11.0k]
  |  |  |  Branch (865:45): [True: 26, False: 11.0k]
  |  |  ------------------
  ------------------
 2169|  2.59k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.59k|                                "Invalid value for tm_min"});
 2171|  2.59k|        }
 2172|  11.0k|        t.tm_min = m;
 2173|  11.0k|        st.set_min(h);
 2174|  11.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.68k|    {
 3011|  2.68k|#if !SCN_DISABLE_LOCALE
 3012|  2.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.68k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.68k|#endif
 3019|       |
 3020|  2.68k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.68k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.68k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.68k|    {
 2158|  2.68k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.56k, False: 1.12k]
  |  |  |  Branch (865:45): [True: 1.55k, False: 1.12k]
  |  |  |  Branch (865:45): [True: 4, False: 1.12k]
  |  |  ------------------
  ------------------
 2159|  1.56k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.56k|                                "Invalid value for tm_sec"});
 2161|  1.56k|        }
 2162|  1.12k|        t.tm_sec = s;
 2163|  1.12k|        st.set_sec(h);
 2164|  1.12k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  6.04k|    {
 3253|       |        // %m/%d/%y
 3254|  6.04k|        constexpr CharT slash = '/';
 3255|  6.04k|        on_dec_month();
 3256|  6.04k|        on_text(&slash, &slash + 1);
 3257|  6.04k|        on_day_of_month();
 3258|  6.04k|        on_text(&slash, &slash + 1);
 3259|  6.04k|        on_short_year();
 3260|  6.04k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.89k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.89k|        constexpr CharT dash = '-';
 3265|  1.89k|        on_full_year();
 3266|  1.89k|        on_text(&dash, &dash + 1);
 3267|  1.89k|        on_dec_month();
 3268|  1.89k|        on_text(&dash, &dash + 1);
 3269|  1.89k|        on_day_of_month();
 3270|  1.89k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  10.9k|    {
 3295|       |        // %H:%M
 3296|  10.9k|        constexpr CharT colon = ':';
 3297|  10.9k|        on_24_hour();
 3298|  10.9k|        on_text(&colon, &colon + 1);
 3299|  10.9k|        on_minute();
 3300|  10.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.68k|    {
 3303|       |        // %H:%M:%S
 3304|  2.68k|        constexpr CharT colon = ':';
 3305|  2.68k|        on_24_hour();
 3306|  2.68k|        on_text(&colon, &colon + 1);
 3307|  2.68k|        on_minute();
 3308|  2.68k|        on_text(&colon, &colon + 1);
 3309|  2.68k|        on_second();
 3310|  2.68k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  19.0k|    {
 3342|  19.0k|        m_st.verify(*this);
 3343|  19.0k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 19.0k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  19.0k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 18.7k, False: 302]
  |  Branch (3346:37): [True: 4.46k, False: 14.2k]
  |  Branch (3346:60): [True: 0, False: 14.2k]
  ------------------
 3347|  4.46k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  4.46k|        }
 3349|  19.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2295|  9.23k|    {
 2296|  9.23k|        st.handle_short_year_and_century(t.tm_year, 1900);
 2297|  9.23k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  60.4k|    {
 3353|  60.4k|        return m_error;
 3354|  60.4k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  19.0k|    {
 3370|  19.0k|        return m_begin;
 3371|  19.0k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  25.4k|{
 3563|  25.4k|    {
 3564|  25.4k|        SCN_TRY(it,
  ------------------
  |  | 3940|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 240, False: 25.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    240|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    240|    }                                                  \
  |  |  |  | 3939|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  25.2k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  25.2k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  25.2k|    static_cast<    \
  |  |  935|  25.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  25.2k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  25.2k|        ctx.range(), t, ctx.locale());
 3571|  25.2k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  25.2k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 13.9k]
  |  |  ------------------
  ------------------
 3573|  11.2k|        return unexpected(e.error());
 3574|  11.2k|    }
 3575|  13.9k|    return r.get_iterator();
 3576|  25.2k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  76.4k|{
  250|  76.4k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  76.4k|        .transform_error(impl::make_eof_scan_error);
  252|  76.4k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  25.2k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  25.2k|    static_cast<    \
  |  |  935|  25.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  25.2k|          m_begin(ranges::begin(m_range)),
 2708|  25.2k|          m_tm(t),
 2709|  25.2k|          m_loc(loc)
 2710|  25.2k|    {
 2711|  25.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  10.6k|    {
 3358|  10.6k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  45.6k|    {
 3363|  45.6k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.2k, False: 34.3k]
  ------------------
 3364|  11.2k|            m_error = unexpected(e);
 3365|  11.2k|        }
 3366|  45.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  23.2k|    {
 2715|  35.6k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 23.2k, False: 12.4k]
  ------------------
 2716|  23.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 142, False: 23.0k]
  ------------------
 2717|    142|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    142|            }
 2719|  23.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.6k, False: 12.4k]
  ------------------
 2720|  10.6k|                return on_error("Invalid literal character");
 2721|  10.6k|            }
 2722|  12.4k|            ++beg;
 2723|  12.4k|            ++m_begin;
 2724|  12.4k|        }
 2725|  23.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.54k|    {
 2745|  3.54k|#if !SCN_DISABLE_LOCALE
 2746|  3.54k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.54k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.54k|#endif
 2753|       |
 2754|  3.54k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.54k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.54k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.54k|    {
 2218|  3.54k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.54k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.54k|        t.tm_year = y - 1900;
 2223|  3.54k|        st.set_full_year(h);
 2224|  3.54k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  41.5k|    {
 3381|  41.5k|        int digits_read = 0;
 3382|  41.5k|        int accumulator = 0;
 3383|  67.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 67.4k, False: 308]
  ------------------
 3384|  67.4k|            const auto ch = *m_begin;
 3385|  67.4k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 20.4k, False: 47.0k]
  |  Branch (3385:36): [True: 16.6k, False: 30.3k]
  ------------------
 3386|  37.1k|                break;
 3387|  37.1k|            }
 3388|  30.3k|            ++m_begin;
 3389|  30.3k|            ++digits_read;
 3390|  30.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  30.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 4.09k, False: 26.2k]
  ------------------
 3392|  4.09k|                break;
 3393|  4.09k|            }
 3394|  30.3k|        }
 3395|  41.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 17.1k, False: 24.3k]
  ------------------
 3396|  17.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  17.1k|                                 "Too few integer digits"});
 3398|  17.1k|            return -1;
 3399|  17.1k|        }
 3400|  24.3k|        return accumulator;
 3401|  41.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.74k|    {
 2759|  1.74k|#if !SCN_DISABLE_LOCALE
 2760|  1.74k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.74k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.74k|#endif
 2768|       |
 2769|  1.74k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.74k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.74k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  1.74k|    {
 2235|  1.74k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.60k, False: 138]
  |  |  |  Branch (865:45): [True: 1.60k, False: 138]
  |  |  |  Branch (865:45): [True: 0, False: 138]
  |  |  ------------------
  ------------------
 2236|  1.60k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.60k|                                "Invalid value for tm_year"});
 2238|  1.60k|        }
 2239|    138|        st.short_year_value = y;
 2240|    138|        st.set_short_year(h);
 2241|    138|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  3.89k|    {
 2802|  3.89k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.89k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.89k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.89k|#endif
 2810|       |
 2811|  3.89k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.89k|            {"January", 1},
 2813|  3.89k|            {"February", 2},
 2814|  3.89k|            {"March", 3},
 2815|  3.89k|            {"April", 4},
 2816|  3.89k|            {"May", 5},
 2817|  3.89k|            {"June", 6},
 2818|  3.89k|            {"July", 7},
 2819|  3.89k|            {"August", 8},
 2820|  3.89k|            {"September", 9},
 2821|  3.89k|            {"October", 10},
 2822|  3.89k|            {"November", 11},
 2823|  3.89k|            {"December", 12},
 2824|  3.89k|        }};
 2825|  3.89k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 80, False: 3.81k]
  ------------------
 2826|     80|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     80|        }
 2828|  3.81k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.81k|            {"Jan", 1},
 2830|  3.81k|            {"Feb", 2},
 2831|  3.81k|            {"Mar", 3},
 2832|  3.81k|            {"Apr", 4},
 2833|  3.81k|            {"Jun", 6},
 2834|  3.81k|            {"Jul", 7},
 2835|  3.81k|            {"Aug", 8},
 2836|  3.81k|            {"Sep", 9},
 2837|  3.81k|            {"Oct", 10},
 2838|  3.81k|            {"Nov", 11},
 2839|  3.81k|            {"Dec", 12},
 2840|  3.81k|        }};
 2841|  3.81k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2.20k, False: 1.61k]
  ------------------
 2842|  2.20k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  2.20k|        }
 2844|  1.61k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.61k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.02k|    {
 2208|  6.02k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  9.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.77k, False: 3.24k]
  |  |  |  Branch (865:45): [True: 2.68k, False: 3.34k]
  |  |  |  Branch (865:45): [True: 96, False: 3.24k]
  |  |  ------------------
  ------------------
 2209|  2.77k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.77k|                                "Invalid value for tm_mon"});
 2211|  2.77k|        }
 2212|  3.24k|        t.tm_mon = m - 1;
 2213|  3.24k|        st.set_mon(h);
 2214|  3.24k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.89k|    {
 3419|  3.89k|        auto start_it = m_begin;
 3420|  3.89k|        std::size_t options_available = N;
 3421|  3.89k|        std::size_t chars_consumed = 0;
 3422|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 11.0k, False: 3.75k]
  ------------------
 3423|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 10.9k, False: 80]
  ------------------
 3424|  10.9k|            std::size_t i = 0;
 3425|  10.9k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 58, False: 10.8k]
  ------------------
 3426|     58|                options_available = 0;
 3427|     58|                break;
 3428|     58|            }
 3429|  10.8k|            const auto ch = *m_begin;
 3430|  10.8k|            ++m_begin;
 3431|  69.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 58.5k, False: 10.8k]
  ------------------
 3432|  58.5k|                const auto cmp = static_cast<unsigned>(
 3433|  58.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  58.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 58.5k]
  ------------------
 3435|  58.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 48.9k, False: 9.63k]
  |  Branch (3435:34): [True: 46.5k, False: 2.33k]
  ------------------
 3436|  46.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  46.5k|                                options.end());
 3438|  46.5k|                    --options_available;
 3439|  46.5k|                    continue;
 3440|  46.5k|                }
 3441|  11.9k|                ++i;
 3442|  11.9k|            }
 3443|  10.8k|            ++chars_consumed;
 3444|  10.8k|        }
 3445|  3.89k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.81k, False: 80]
  ------------------
 3446|  3.81k|            m_begin = start_it;
 3447|  3.81k|            return std::nullopt;
 3448|  3.81k|        }
 3449|     80|        return options.front().second;
 3450|  3.89k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.81k|    {
 3419|  3.81k|        auto start_it = m_begin;
 3420|  3.81k|        std::size_t options_available = N;
 3421|  3.81k|        std::size_t chars_consumed = 0;
 3422|  12.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.7k, False: 1.55k]
  ------------------
 3423|  12.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 8.49k, False: 2.20k]
  ------------------
 3424|  8.49k|            std::size_t i = 0;
 3425|  8.49k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 52, False: 8.44k]
  ------------------
 3426|     52|                options_available = 0;
 3427|     52|                break;
 3428|     52|            }
 3429|  8.44k|            const auto ch = *m_begin;
 3430|  8.44k|            ++m_begin;
 3431|  55.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 46.6k, False: 8.44k]
  ------------------
 3432|  46.6k|                const auto cmp = static_cast<unsigned>(
 3433|  46.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  46.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 46.6k]
  ------------------
 3435|  46.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.9k, False: 4.67k]
  |  Branch (3435:34): [True: 39.7k, False: 2.24k]
  ------------------
 3436|  39.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  39.7k|                                options.end());
 3438|  39.7k|                    --options_available;
 3439|  39.7k|                    continue;
 3440|  39.7k|                }
 3441|  6.92k|                ++i;
 3442|  6.92k|            }
 3443|  8.44k|            ++chars_consumed;
 3444|  8.44k|        }
 3445|  3.81k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.61k, False: 2.20k]
  ------------------
 3446|  1.61k|            m_begin = start_it;
 3447|  1.61k|            return std::nullopt;
 3448|  1.61k|        }
 3449|  2.20k|        return options.front().second;
 3450|  3.81k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.74k|    {
 2848|  3.74k|#if !SCN_DISABLE_LOCALE
 2849|  3.74k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.74k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.74k|#endif
 2856|       |
 2857|  3.74k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.74k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.74k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.72k|    {
 2880|  3.72k|#if !SCN_DISABLE_LOCALE
 2881|  3.72k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.72k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.72k|#endif
 2888|       |
 2889|  3.72k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.72k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.72k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  3.72k|    {
 2198|  3.72k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.20k, False: 516]
  |  |  |  Branch (865:45): [True: 3.13k, False: 586]
  |  |  |  Branch (865:45): [True: 70, False: 516]
  |  |  ------------------
  ------------------
 2199|  3.20k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  3.20k|                                "Invalid value for tm_mday"});
 2201|  3.20k|        }
 2202|    516|        t.tm_mday = d;
 2203|    516|        st.set_mday(h);
 2204|    516|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  3.05k|    {
 2895|  3.05k|#if !SCN_DISABLE_LOCALE
 2896|  3.05k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.05k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.05k|#endif
 2903|       |
 2904|  3.05k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.05k|            {"Sunday", 0},
 2906|  3.05k|            {"Monday", 1},
 2907|  3.05k|            {"Tuesday", 2},
 2908|  3.05k|            {"Wednesday", 3},
 2909|  3.05k|            {"Thursday", 4},
 2910|  3.05k|            {"Friday", 5},
 2911|  3.05k|            {"Saturday", 6},
 2912|  3.05k|        }};
 2913|  3.05k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.05k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.05k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.05k|            {"Sun", 0},
 2918|  3.05k|            {"Mon", 1},
 2919|  3.05k|            {"Tue", 2},
 2920|  3.05k|            {"Wed", 3},
 2921|  3.05k|            {"Thu", 4},
 2922|  3.05k|            {"Fri", 5},
 2923|  3.05k|            {"Sat", 6},
 2924|  3.05k|        }};
 2925|  3.05k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 1.42k, False: 1.62k]
  ------------------
 2926|  1.42k|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|  1.42k|        }
 2928|  1.62k|        return set_error(
 2929|  1.62k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.05k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|  1.42k|    {
 2245|  1.42k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  2.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.42k]
  |  |  |  Branch (865:45): [True: 0, False: 1.42k]
  |  |  |  Branch (865:45): [True: 0, False: 1.42k]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|  1.42k|        t.tm_wday = d;
 2250|  1.42k|        st.set_wday(h);
 2251|  1.42k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.10k|    {
 3419|  6.10k|        auto start_it = m_begin;
 3420|  6.10k|        std::size_t options_available = N;
 3421|  6.10k|        std::size_t chars_consumed = 0;
 3422|  19.8k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 15.1k, False: 4.63k]
  ------------------
 3423|  19.8k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 13.7k, False: 1.42k]
  ------------------
 3424|  13.7k|            std::size_t i = 0;
 3425|  13.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 13.7k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  13.7k|            const auto ch = *m_begin;
 3430|  13.7k|            ++m_begin;
 3431|  64.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 50.3k, False: 13.7k]
  ------------------
 3432|  50.3k|                const auto cmp = static_cast<unsigned>(
 3433|  50.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  50.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 50.3k]
  ------------------
 3435|  50.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.2k, False: 9.06k]
  |  Branch (3435:34): [True: 41.2k, False: 26]
  ------------------
 3436|  41.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.2k|                                options.end());
 3438|  41.2k|                    --options_available;
 3439|  41.2k|                    continue;
 3440|  41.2k|                }
 3441|  9.09k|                ++i;
 3442|  9.09k|            }
 3443|  13.7k|            ++chars_consumed;
 3444|  13.7k|        }
 3445|  6.10k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.67k, False: 1.42k]
  ------------------
 3446|  4.67k|            m_begin = start_it;
 3447|  4.67k|            return std::nullopt;
 3448|  4.67k|        }
 3449|  1.42k|        return options.front().second;
 3450|  6.10k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  13.0k|    {
 2969|  13.0k|#if !SCN_DISABLE_LOCALE
 2970|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.0k|#endif
 2977|       |
 2978|  13.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  13.0k|    {
 2178|  13.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.56k, False: 10.4k]
  |  |  |  Branch (865:45): [True: 2.40k, False: 10.6k]
  |  |  |  Branch (865:45): [True: 164, False: 10.4k]
  |  |  ------------------
  ------------------
 2179|  2.56k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.56k|                                  "Invalid value for tm_hour"});
 2181|  2.56k|        }
 2182|  10.4k|        t.tm_hour = h;
 2183|  10.4k|        st.set_hour24(hdl);
 2184|  10.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  13.0k|    {
 2997|  13.0k|#if !SCN_DISABLE_LOCALE
 2998|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.0k|#endif
 3005|       |
 3006|  13.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  13.0k|    {
 2168|  13.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.69k, False: 10.3k]
  |  |  |  Branch (865:45): [True: 2.67k, False: 10.3k]
  |  |  |  Branch (865:45): [True: 18, False: 10.3k]
  |  |  ------------------
  ------------------
 2169|  2.69k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.69k|                                "Invalid value for tm_min"});
 2171|  2.69k|        }
 2172|  10.3k|        t.tm_min = m;
 2173|  10.3k|        st.set_min(h);
 2174|  10.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.70k|    {
 3011|  2.70k|#if !SCN_DISABLE_LOCALE
 3012|  2.70k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.70k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.70k|#endif
 3019|       |
 3020|  2.70k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.70k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.70k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.70k|    {
 2158|  2.70k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.59k, False: 1.11k]
  |  |  |  Branch (865:45): [True: 1.59k, False: 1.11k]
  |  |  |  Branch (865:45): [True: 2, False: 1.11k]
  |  |  ------------------
  ------------------
 2159|  1.59k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.59k|                                "Invalid value for tm_sec"});
 2161|  1.59k|        }
 2162|  1.11k|        t.tm_sec = s;
 2163|  1.11k|        st.set_sec(h);
 2164|  1.11k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.74k|    {
 3253|       |        // %m/%d/%y
 3254|  1.74k|        constexpr CharT slash = '/';
 3255|  1.74k|        on_dec_month();
 3256|  1.74k|        on_text(&slash, &slash + 1);
 3257|  1.74k|        on_day_of_month();
 3258|  1.74k|        on_text(&slash, &slash + 1);
 3259|  1.74k|        on_short_year();
 3260|  1.74k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.92k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.92k|        constexpr CharT dash = '-';
 3265|  1.92k|        on_full_year();
 3266|  1.92k|        on_text(&dash, &dash + 1);
 3267|  1.92k|        on_dec_month();
 3268|  1.92k|        on_text(&dash, &dash + 1);
 3269|  1.92k|        on_day_of_month();
 3270|  1.92k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  10.3k|    {
 3295|       |        // %H:%M
 3296|  10.3k|        constexpr CharT colon = ':';
 3297|  10.3k|        on_24_hour();
 3298|  10.3k|        on_text(&colon, &colon + 1);
 3299|  10.3k|        on_minute();
 3300|  10.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.70k|    {
 3303|       |        // %H:%M:%S
 3304|  2.70k|        constexpr CharT colon = ':';
 3305|  2.70k|        on_24_hour();
 3306|  2.70k|        on_text(&colon, &colon + 1);
 3307|  2.70k|        on_minute();
 3308|  2.70k|        on_text(&colon, &colon + 1);
 3309|  2.70k|        on_second();
 3310|  2.70k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  13.9k|    {
 3342|  13.9k|        m_st.verify(*this);
 3343|  13.9k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 13.9k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  13.9k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 13.6k, False: 302]
  |  Branch (3346:37): [True: 130, False: 13.5k]
  |  Branch (3346:60): [True: 0, False: 13.5k]
  ------------------
 3347|    130|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|    130|        }
 3349|  13.9k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  50.6k|    {
 3353|  50.6k|        return m_error;
 3354|  50.6k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  13.9k|    {
 3370|  13.9k|        return m_begin;
 3371|  13.9k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  30.5k|{
 3563|  30.5k|    {
 3564|  30.5k|        SCN_TRY(it,
  ------------------
  |  | 3940|  30.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 468, False: 30.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    468|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    468|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    468|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    468|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    468|    }                                                  \
  |  |  |  | 3939|  30.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  30.1k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  30.1k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  30.1k|    static_cast<    \
  |  |  935|  30.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  30.1k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  30.1k|        ctx.range(), t, ctx.locale());
 3571|  30.1k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  30.1k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  30.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.0k, False: 19.0k]
  |  |  ------------------
  ------------------
 3573|  11.0k|        return unexpected(e.error());
 3574|  11.0k|    }
 3575|  19.0k|    return r.get_iterator();
 3576|  30.1k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  30.1k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  30.1k|    static_cast<    \
  |  |  935|  30.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  30.1k|          m_begin(ranges::begin(m_range)),
 2708|  30.1k|          m_tm(t),
 2709|  30.1k|          m_loc(loc)
 2710|  30.1k|    {
 2711|  30.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  10.3k|    {
 3358|  10.3k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  43.9k|    {
 3363|  43.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.0k, False: 32.9k]
  ------------------
 3364|  11.0k|            m_error = unexpected(e);
 3365|  11.0k|        }
 3366|  43.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  32.3k|    {
 2715|  54.2k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 32.3k, False: 21.8k]
  ------------------
 2716|  32.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 184, False: 32.1k]
  ------------------
 2717|    184|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    184|            }
 2719|  32.1k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.3k, False: 21.8k]
  ------------------
 2720|  10.3k|                return on_error("Invalid literal character");
 2721|  10.3k|            }
 2722|  21.8k|            ++beg;
 2723|  21.8k|            ++m_begin;
 2724|  21.8k|        }
 2725|  32.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.49k|    {
 2745|  3.49k|#if !SCN_DISABLE_LOCALE
 2746|  3.49k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.49k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.49k|#endif
 2753|       |
 2754|  3.49k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.49k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.49k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.49k|    {
 2218|  3.49k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.49k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.49k|        t.tm_year = y - 1900;
 2223|  3.49k|        st.set_full_year(h);
 2224|  3.49k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  55.5k|    {
 3381|  55.5k|        int digits_read = 0;
 3382|  55.5k|        int accumulator = 0;
 3383|  96.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 96.3k, False: 378]
  ------------------
 3384|  96.3k|            const auto ch = *m_begin;
 3385|  96.3k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 28.6k, False: 67.7k]
  |  Branch (3385:36): [True: 17.8k, False: 49.8k]
  ------------------
 3386|  46.5k|                break;
 3387|  46.5k|            }
 3388|  49.8k|            ++m_begin;
 3389|  49.8k|            ++digits_read;
 3390|  49.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  49.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 8.66k, False: 41.1k]
  ------------------
 3392|  8.66k|                break;
 3393|  8.66k|            }
 3394|  49.8k|        }
 3395|  55.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 16.4k, False: 39.0k]
  ------------------
 3396|  16.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  16.4k|                                 "Too few integer digits"});
 3398|  16.4k|            return -1;
 3399|  16.4k|        }
 3400|  39.0k|        return accumulator;
 3401|  55.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  6.04k|    {
 2759|  6.04k|#if !SCN_DISABLE_LOCALE
 2760|  6.04k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 6.04k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  6.04k|#endif
 2768|       |
 2769|  6.04k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  6.04k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  6.04k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  6.04k|    {
 2235|  6.04k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.56k, False: 4.48k]
  |  |  |  Branch (865:45): [True: 1.56k, False: 4.48k]
  |  |  |  Branch (865:45): [True: 0, False: 4.48k]
  |  |  ------------------
  ------------------
 2236|  1.56k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.56k|                                "Invalid value for tm_year"});
 2238|  1.56k|        }
 2239|  4.48k|        st.short_year_value = y;
 2240|  4.48k|        st.set_short_year(h);
 2241|  4.48k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  3.86k|    {
 2802|  3.86k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.86k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.86k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.86k|#endif
 2810|       |
 2811|  3.86k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.86k|            {"January", 1},
 2813|  3.86k|            {"February", 2},
 2814|  3.86k|            {"March", 3},
 2815|  3.86k|            {"April", 4},
 2816|  3.86k|            {"May", 5},
 2817|  3.86k|            {"June", 6},
 2818|  3.86k|            {"July", 7},
 2819|  3.86k|            {"August", 8},
 2820|  3.86k|            {"September", 9},
 2821|  3.86k|            {"October", 10},
 2822|  3.86k|            {"November", 11},
 2823|  3.86k|            {"December", 12},
 2824|  3.86k|        }};
 2825|  3.86k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 80, False: 3.78k]
  ------------------
 2826|     80|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     80|        }
 2828|  3.78k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.78k|            {"Jan", 1},
 2830|  3.78k|            {"Feb", 2},
 2831|  3.78k|            {"Mar", 3},
 2832|  3.78k|            {"Apr", 4},
 2833|  3.78k|            {"Jun", 6},
 2834|  3.78k|            {"Jul", 7},
 2835|  3.78k|            {"Aug", 8},
 2836|  3.78k|            {"Sep", 9},
 2837|  3.78k|            {"Oct", 10},
 2838|  3.78k|            {"Nov", 11},
 2839|  3.78k|            {"Dec", 12},
 2840|  3.78k|        }};
 2841|  3.78k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2.20k, False: 1.57k]
  ------------------
 2842|  2.20k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  2.20k|        }
 2844|  1.57k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.57k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  10.3k|    {
 2208|  10.3k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.68k, False: 7.62k]
  |  |  |  Branch (865:45): [True: 2.57k, False: 7.73k]
  |  |  |  Branch (865:45): [True: 110, False: 7.62k]
  |  |  ------------------
  ------------------
 2209|  2.68k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.68k|                                "Invalid value for tm_mon"});
 2211|  2.68k|        }
 2212|  7.62k|        t.tm_mon = m - 1;
 2213|  7.62k|        st.set_mon(h);
 2214|  7.62k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.86k|    {
 3419|  3.86k|        auto start_it = m_begin;
 3420|  3.86k|        std::size_t options_available = N;
 3421|  3.86k|        std::size_t chars_consumed = 0;
 3422|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 11.0k, False: 3.72k]
  ------------------
 3423|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 10.9k, False: 80]
  ------------------
 3424|  10.9k|            std::size_t i = 0;
 3425|  10.9k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 62, False: 10.8k]
  ------------------
 3426|     62|                options_available = 0;
 3427|     62|                break;
 3428|     62|            }
 3429|  10.8k|            const auto ch = *m_begin;
 3430|  10.8k|            ++m_begin;
 3431|  69.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 58.1k, False: 10.8k]
  ------------------
 3432|  58.1k|                const auto cmp = static_cast<unsigned>(
 3433|  58.1k|                    ch ^ options[i].first[chars_consumed]);
 3434|  58.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 58.1k]
  ------------------
 3435|  58.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 48.5k, False: 9.65k]
  |  Branch (3435:34): [True: 46.1k, False: 2.35k]
  ------------------
 3436|  46.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  46.1k|                                options.end());
 3438|  46.1k|                    --options_available;
 3439|  46.1k|                    continue;
 3440|  46.1k|                }
 3441|  12.0k|                ++i;
 3442|  12.0k|            }
 3443|  10.8k|            ++chars_consumed;
 3444|  10.8k|        }
 3445|  3.86k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.78k, False: 80]
  ------------------
 3446|  3.78k|            m_begin = start_it;
 3447|  3.78k|            return std::nullopt;
 3448|  3.78k|        }
 3449|     80|        return options.front().second;
 3450|  3.86k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.78k|    {
 3419|  3.78k|        auto start_it = m_begin;
 3420|  3.78k|        std::size_t options_available = N;
 3421|  3.78k|        std::size_t chars_consumed = 0;
 3422|  12.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.7k, False: 1.52k]
  ------------------
 3423|  12.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 8.49k, False: 2.20k]
  ------------------
 3424|  8.49k|            std::size_t i = 0;
 3425|  8.49k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 56, False: 8.43k]
  ------------------
 3426|     56|                options_available = 0;
 3427|     56|                break;
 3428|     56|            }
 3429|  8.43k|            const auto ch = *m_begin;
 3430|  8.43k|            ++m_begin;
 3431|  54.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 46.3k, False: 8.43k]
  ------------------
 3432|  46.3k|                const auto cmp = static_cast<unsigned>(
 3433|  46.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  46.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 46.3k]
  ------------------
 3435|  46.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.6k, False: 4.69k]
  |  Branch (3435:34): [True: 39.3k, False: 2.27k]
  ------------------
 3436|  39.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  39.3k|                                options.end());
 3438|  39.3k|                    --options_available;
 3439|  39.3k|                    continue;
 3440|  39.3k|                }
 3441|  6.96k|                ++i;
 3442|  6.96k|            }
 3443|  8.43k|            ++chars_consumed;
 3444|  8.43k|        }
 3445|  3.78k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.57k, False: 2.20k]
  ------------------
 3446|  1.57k|            m_begin = start_it;
 3447|  1.57k|            return std::nullopt;
 3448|  1.57k|        }
 3449|  2.20k|        return options.front().second;
 3450|  3.78k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  8.02k|    {
 2848|  8.02k|#if !SCN_DISABLE_LOCALE
 2849|  8.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 8.02k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  8.02k|#endif
 2856|       |
 2857|  8.02k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  8.02k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  8.02k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  7.99k|    {
 2880|  7.99k|#if !SCN_DISABLE_LOCALE
 2881|  7.99k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 7.99k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  7.99k|#endif
 2888|       |
 2889|  7.99k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  7.99k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  7.99k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  7.99k|    {
 2198|  7.99k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.12k, False: 4.87k]
  |  |  |  Branch (865:45): [True: 3.05k, False: 4.94k]
  |  |  |  Branch (865:45): [True: 74, False: 4.87k]
  |  |  ------------------
  ------------------
 2199|  3.12k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  3.12k|                                "Invalid value for tm_mday"});
 2201|  3.12k|        }
 2202|  4.87k|        t.tm_mday = d;
 2203|  4.87k|        st.set_mday(h);
 2204|  4.87k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  3.09k|    {
 2895|  3.09k|#if !SCN_DISABLE_LOCALE
 2896|  3.09k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.09k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.09k|#endif
 2903|       |
 2904|  3.09k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.09k|            {"Sunday", 0},
 2906|  3.09k|            {"Monday", 1},
 2907|  3.09k|            {"Tuesday", 2},
 2908|  3.09k|            {"Wednesday", 3},
 2909|  3.09k|            {"Thursday", 4},
 2910|  3.09k|            {"Friday", 5},
 2911|  3.09k|            {"Saturday", 6},
 2912|  3.09k|        }};
 2913|  3.09k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.09k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.09k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.09k|            {"Sun", 0},
 2918|  3.09k|            {"Mon", 1},
 2919|  3.09k|            {"Tue", 2},
 2920|  3.09k|            {"Wed", 3},
 2921|  3.09k|            {"Thu", 4},
 2922|  3.09k|            {"Fri", 5},
 2923|  3.09k|            {"Sat", 6},
 2924|  3.09k|        }};
 2925|  3.09k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 1.49k, False: 1.59k]
  ------------------
 2926|  1.49k|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|  1.49k|        }
 2928|  1.59k|        return set_error(
 2929|  1.59k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.09k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|  1.49k|    {
 2245|  1.49k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.49k]
  |  |  |  Branch (865:45): [True: 0, False: 1.49k]
  |  |  |  Branch (865:45): [True: 0, False: 1.49k]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|  1.49k|        t.tm_wday = d;
 2250|  1.49k|        st.set_wday(h);
 2251|  1.49k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.18k|    {
 3419|  6.18k|        auto start_it = m_begin;
 3420|  6.18k|        std::size_t options_available = N;
 3421|  6.18k|        std::size_t chars_consumed = 0;
 3422|  20.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 15.7k, False: 4.63k]
  ------------------
 3423|  20.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 14.2k, False: 1.49k]
  ------------------
 3424|  14.2k|            std::size_t i = 0;
 3425|  14.2k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 54, False: 14.1k]
  ------------------
 3426|     54|                options_available = 0;
 3427|     54|                break;
 3428|     54|            }
 3429|  14.1k|            const auto ch = *m_begin;
 3430|  14.1k|            ++m_begin;
 3431|  65.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 51.2k, False: 14.1k]
  ------------------
 3432|  51.2k|                const auto cmp = static_cast<unsigned>(
 3433|  51.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  51.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 51.2k]
  ------------------
 3435|  51.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.7k, False: 9.51k]
  |  Branch (3435:34): [True: 41.6k, False: 54]
  ------------------
 3436|  41.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.6k|                                options.end());
 3438|  41.6k|                    --options_available;
 3439|  41.6k|                    continue;
 3440|  41.6k|                }
 3441|  9.56k|                ++i;
 3442|  9.56k|            }
 3443|  14.1k|            ++chars_consumed;
 3444|  14.1k|        }
 3445|  6.18k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.68k, False: 1.49k]
  ------------------
 3446|  4.68k|            m_begin = start_it;
 3447|  4.68k|            return std::nullopt;
 3448|  4.68k|        }
 3449|  1.49k|        return options.front().second;
 3450|  6.18k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  13.6k|    {
 2969|  13.6k|#if !SCN_DISABLE_LOCALE
 2970|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.6k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.6k|#endif
 2977|       |
 2978|  13.6k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  13.6k|    {
 2178|  13.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.32k, False: 11.3k]
  |  |  |  Branch (865:45): [True: 2.14k, False: 11.5k]
  |  |  |  Branch (865:45): [True: 180, False: 11.3k]
  |  |  ------------------
  ------------------
 2179|  2.32k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.32k|                                  "Invalid value for tm_hour"});
 2181|  2.32k|        }
 2182|  11.3k|        t.tm_hour = h;
 2183|  11.3k|        st.set_hour24(hdl);
 2184|  11.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  13.6k|    {
 2997|  13.6k|#if !SCN_DISABLE_LOCALE
 2998|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.6k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.6k|#endif
 3005|       |
 3006|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  13.6k|    {
 2168|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.59k, False: 11.0k]
  |  |  |  Branch (865:45): [True: 2.57k, False: 11.0k]
  |  |  |  Branch (865:45): [True: 26, False: 11.0k]
  |  |  ------------------
  ------------------
 2169|  2.59k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.59k|                                "Invalid value for tm_min"});
 2171|  2.59k|        }
 2172|  11.0k|        t.tm_min = m;
 2173|  11.0k|        st.set_min(h);
 2174|  11.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.68k|    {
 3011|  2.68k|#if !SCN_DISABLE_LOCALE
 3012|  2.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.68k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.68k|#endif
 3019|       |
 3020|  2.68k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.68k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.68k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.68k|    {
 2158|  2.68k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.56k, False: 1.12k]
  |  |  |  Branch (865:45): [True: 1.55k, False: 1.12k]
  |  |  |  Branch (865:45): [True: 4, False: 1.12k]
  |  |  ------------------
  ------------------
 2159|  1.56k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.56k|                                "Invalid value for tm_sec"});
 2161|  1.56k|        }
 2162|  1.12k|        t.tm_sec = s;
 2163|  1.12k|        st.set_sec(h);
 2164|  1.12k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  6.04k|    {
 3253|       |        // %m/%d/%y
 3254|  6.04k|        constexpr CharT slash = '/';
 3255|  6.04k|        on_dec_month();
 3256|  6.04k|        on_text(&slash, &slash + 1);
 3257|  6.04k|        on_day_of_month();
 3258|  6.04k|        on_text(&slash, &slash + 1);
 3259|  6.04k|        on_short_year();
 3260|  6.04k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.89k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.89k|        constexpr CharT dash = '-';
 3265|  1.89k|        on_full_year();
 3266|  1.89k|        on_text(&dash, &dash + 1);
 3267|  1.89k|        on_dec_month();
 3268|  1.89k|        on_text(&dash, &dash + 1);
 3269|  1.89k|        on_day_of_month();
 3270|  1.89k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  10.9k|    {
 3295|       |        // %H:%M
 3296|  10.9k|        constexpr CharT colon = ':';
 3297|  10.9k|        on_24_hour();
 3298|  10.9k|        on_text(&colon, &colon + 1);
 3299|  10.9k|        on_minute();
 3300|  10.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.68k|    {
 3303|       |        // %H:%M:%S
 3304|  2.68k|        constexpr CharT colon = ':';
 3305|  2.68k|        on_24_hour();
 3306|  2.68k|        on_text(&colon, &colon + 1);
 3307|  2.68k|        on_minute();
 3308|  2.68k|        on_text(&colon, &colon + 1);
 3309|  2.68k|        on_second();
 3310|  2.68k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  19.0k|    {
 3342|  19.0k|        m_st.verify(*this);
 3343|  19.0k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 19.0k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  19.0k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 18.7k, False: 302]
  |  Branch (3346:37): [True: 4.46k, False: 14.2k]
  |  Branch (3346:60): [True: 0, False: 14.2k]
  ------------------
 3347|  4.46k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  4.46k|        }
 3349|  19.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  60.4k|    {
 3353|  60.4k|        return m_error;
 3354|  60.4k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  19.0k|    {
 3370|  19.0k|        return m_begin;
 3371|  19.0k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  25.4k|{
 3563|  25.4k|    {
 3564|  25.4k|        SCN_TRY(it,
  ------------------
  |  | 3940|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 240, False: 25.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    240|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    240|    }                                                  \
  |  |  |  | 3939|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  25.2k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  25.2k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  25.2k|    static_cast<    \
  |  |  935|  25.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  25.2k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  25.2k|        ctx.range(), t, ctx.locale());
 3571|  25.2k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  25.2k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 13.9k]
  |  |  ------------------
  ------------------
 3573|  11.2k|        return unexpected(e.error());
 3574|  11.2k|    }
 3575|  13.9k|    return r.get_iterator();
 3576|  25.2k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  25.2k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  25.2k|    static_cast<    \
  |  |  935|  25.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  25.2k|          m_begin(ranges::begin(m_range)),
 2708|  25.2k|          m_tm(t),
 2709|  25.2k|          m_loc(loc)
 2710|  25.2k|    {
 2711|  25.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  10.6k|    {
 3358|  10.6k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  45.6k|    {
 3363|  45.6k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.2k, False: 34.3k]
  ------------------
 3364|  11.2k|            m_error = unexpected(e);
 3365|  11.2k|        }
 3366|  45.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  23.2k|    {
 2715|  35.6k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 23.2k, False: 12.4k]
  ------------------
 2716|  23.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 142, False: 23.0k]
  ------------------
 2717|    142|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    142|            }
 2719|  23.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.6k, False: 12.4k]
  ------------------
 2720|  10.6k|                return on_error("Invalid literal character");
 2721|  10.6k|            }
 2722|  12.4k|            ++beg;
 2723|  12.4k|            ++m_begin;
 2724|  12.4k|        }
 2725|  23.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.54k|    {
 2745|  3.54k|#if !SCN_DISABLE_LOCALE
 2746|  3.54k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.54k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.54k|#endif
 2753|       |
 2754|  3.54k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.54k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.54k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.54k|    {
 2218|  3.54k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.54k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.54k|        t.tm_year = y - 1900;
 2223|  3.54k|        st.set_full_year(h);
 2224|  3.54k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  41.5k|    {
 3381|  41.5k|        int digits_read = 0;
 3382|  41.5k|        int accumulator = 0;
 3383|  67.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 67.4k, False: 308]
  ------------------
 3384|  67.4k|            const auto ch = *m_begin;
 3385|  67.4k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 20.4k, False: 47.0k]
  |  Branch (3385:36): [True: 16.6k, False: 30.3k]
  ------------------
 3386|  37.1k|                break;
 3387|  37.1k|            }
 3388|  30.3k|            ++m_begin;
 3389|  30.3k|            ++digits_read;
 3390|  30.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  30.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 4.09k, False: 26.2k]
  ------------------
 3392|  4.09k|                break;
 3393|  4.09k|            }
 3394|  30.3k|        }
 3395|  41.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 17.1k, False: 24.3k]
  ------------------
 3396|  17.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  17.1k|                                 "Too few integer digits"});
 3398|  17.1k|            return -1;
 3399|  17.1k|        }
 3400|  24.3k|        return accumulator;
 3401|  41.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.74k|    {
 2759|  1.74k|#if !SCN_DISABLE_LOCALE
 2760|  1.74k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.74k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.74k|#endif
 2768|       |
 2769|  1.74k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.74k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.74k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  1.74k|    {
 2235|  1.74k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.60k, False: 138]
  |  |  |  Branch (865:45): [True: 1.60k, False: 138]
  |  |  |  Branch (865:45): [True: 0, False: 138]
  |  |  ------------------
  ------------------
 2236|  1.60k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.60k|                                "Invalid value for tm_year"});
 2238|  1.60k|        }
 2239|    138|        st.short_year_value = y;
 2240|    138|        st.set_short_year(h);
 2241|    138|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  3.89k|    {
 2802|  3.89k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.89k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.89k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.89k|#endif
 2810|       |
 2811|  3.89k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.89k|            {"January", 1},
 2813|  3.89k|            {"February", 2},
 2814|  3.89k|            {"March", 3},
 2815|  3.89k|            {"April", 4},
 2816|  3.89k|            {"May", 5},
 2817|  3.89k|            {"June", 6},
 2818|  3.89k|            {"July", 7},
 2819|  3.89k|            {"August", 8},
 2820|  3.89k|            {"September", 9},
 2821|  3.89k|            {"October", 10},
 2822|  3.89k|            {"November", 11},
 2823|  3.89k|            {"December", 12},
 2824|  3.89k|        }};
 2825|  3.89k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 80, False: 3.81k]
  ------------------
 2826|     80|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     80|        }
 2828|  3.81k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.81k|            {"Jan", 1},
 2830|  3.81k|            {"Feb", 2},
 2831|  3.81k|            {"Mar", 3},
 2832|  3.81k|            {"Apr", 4},
 2833|  3.81k|            {"Jun", 6},
 2834|  3.81k|            {"Jul", 7},
 2835|  3.81k|            {"Aug", 8},
 2836|  3.81k|            {"Sep", 9},
 2837|  3.81k|            {"Oct", 10},
 2838|  3.81k|            {"Nov", 11},
 2839|  3.81k|            {"Dec", 12},
 2840|  3.81k|        }};
 2841|  3.81k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2.20k, False: 1.61k]
  ------------------
 2842|  2.20k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  2.20k|        }
 2844|  1.61k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.61k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.02k|    {
 2208|  6.02k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  9.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.77k, False: 3.24k]
  |  |  |  Branch (865:45): [True: 2.68k, False: 3.34k]
  |  |  |  Branch (865:45): [True: 96, False: 3.24k]
  |  |  ------------------
  ------------------
 2209|  2.77k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.77k|                                "Invalid value for tm_mon"});
 2211|  2.77k|        }
 2212|  3.24k|        t.tm_mon = m - 1;
 2213|  3.24k|        st.set_mon(h);
 2214|  3.24k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.89k|    {
 3419|  3.89k|        auto start_it = m_begin;
 3420|  3.89k|        std::size_t options_available = N;
 3421|  3.89k|        std::size_t chars_consumed = 0;
 3422|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 11.0k, False: 3.75k]
  ------------------
 3423|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 10.9k, False: 80]
  ------------------
 3424|  10.9k|            std::size_t i = 0;
 3425|  10.9k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 58, False: 10.8k]
  ------------------
 3426|     58|                options_available = 0;
 3427|     58|                break;
 3428|     58|            }
 3429|  10.8k|            const auto ch = *m_begin;
 3430|  10.8k|            ++m_begin;
 3431|  69.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 58.5k, False: 10.8k]
  ------------------
 3432|  58.5k|                const auto cmp = static_cast<unsigned>(
 3433|  58.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  58.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 58.5k]
  ------------------
 3435|  58.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 48.9k, False: 9.63k]
  |  Branch (3435:34): [True: 46.5k, False: 2.33k]
  ------------------
 3436|  46.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  46.5k|                                options.end());
 3438|  46.5k|                    --options_available;
 3439|  46.5k|                    continue;
 3440|  46.5k|                }
 3441|  11.9k|                ++i;
 3442|  11.9k|            }
 3443|  10.8k|            ++chars_consumed;
 3444|  10.8k|        }
 3445|  3.89k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.81k, False: 80]
  ------------------
 3446|  3.81k|            m_begin = start_it;
 3447|  3.81k|            return std::nullopt;
 3448|  3.81k|        }
 3449|     80|        return options.front().second;
 3450|  3.89k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.81k|    {
 3419|  3.81k|        auto start_it = m_begin;
 3420|  3.81k|        std::size_t options_available = N;
 3421|  3.81k|        std::size_t chars_consumed = 0;
 3422|  12.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.7k, False: 1.55k]
  ------------------
 3423|  12.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 8.49k, False: 2.20k]
  ------------------
 3424|  8.49k|            std::size_t i = 0;
 3425|  8.49k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 52, False: 8.44k]
  ------------------
 3426|     52|                options_available = 0;
 3427|     52|                break;
 3428|     52|            }
 3429|  8.44k|            const auto ch = *m_begin;
 3430|  8.44k|            ++m_begin;
 3431|  55.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 46.6k, False: 8.44k]
  ------------------
 3432|  46.6k|                const auto cmp = static_cast<unsigned>(
 3433|  46.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  46.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 46.6k]
  ------------------
 3435|  46.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.9k, False: 4.67k]
  |  Branch (3435:34): [True: 39.7k, False: 2.24k]
  ------------------
 3436|  39.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  39.7k|                                options.end());
 3438|  39.7k|                    --options_available;
 3439|  39.7k|                    continue;
 3440|  39.7k|                }
 3441|  6.92k|                ++i;
 3442|  6.92k|            }
 3443|  8.44k|            ++chars_consumed;
 3444|  8.44k|        }
 3445|  3.81k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.61k, False: 2.20k]
  ------------------
 3446|  1.61k|            m_begin = start_it;
 3447|  1.61k|            return std::nullopt;
 3448|  1.61k|        }
 3449|  2.20k|        return options.front().second;
 3450|  3.81k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.74k|    {
 2848|  3.74k|#if !SCN_DISABLE_LOCALE
 2849|  3.74k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.74k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.74k|#endif
 2856|       |
 2857|  3.74k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.74k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.74k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.72k|    {
 2880|  3.72k|#if !SCN_DISABLE_LOCALE
 2881|  3.72k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.72k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.72k|#endif
 2888|       |
 2889|  3.72k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.72k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.72k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  3.72k|    {
 2198|  3.72k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.20k, False: 516]
  |  |  |  Branch (865:45): [True: 3.13k, False: 586]
  |  |  |  Branch (865:45): [True: 70, False: 516]
  |  |  ------------------
  ------------------
 2199|  3.20k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  3.20k|                                "Invalid value for tm_mday"});
 2201|  3.20k|        }
 2202|    516|        t.tm_mday = d;
 2203|    516|        st.set_mday(h);
 2204|    516|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  3.05k|    {
 2895|  3.05k|#if !SCN_DISABLE_LOCALE
 2896|  3.05k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.05k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.05k|#endif
 2903|       |
 2904|  3.05k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.05k|            {"Sunday", 0},
 2906|  3.05k|            {"Monday", 1},
 2907|  3.05k|            {"Tuesday", 2},
 2908|  3.05k|            {"Wednesday", 3},
 2909|  3.05k|            {"Thursday", 4},
 2910|  3.05k|            {"Friday", 5},
 2911|  3.05k|            {"Saturday", 6},
 2912|  3.05k|        }};
 2913|  3.05k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.05k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.05k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.05k|            {"Sun", 0},
 2918|  3.05k|            {"Mon", 1},
 2919|  3.05k|            {"Tue", 2},
 2920|  3.05k|            {"Wed", 3},
 2921|  3.05k|            {"Thu", 4},
 2922|  3.05k|            {"Fri", 5},
 2923|  3.05k|            {"Sat", 6},
 2924|  3.05k|        }};
 2925|  3.05k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 1.42k, False: 1.62k]
  ------------------
 2926|  1.42k|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|  1.42k|        }
 2928|  1.62k|        return set_error(
 2929|  1.62k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.05k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|  1.42k|    {
 2245|  1.42k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  2.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.42k]
  |  |  |  Branch (865:45): [True: 0, False: 1.42k]
  |  |  |  Branch (865:45): [True: 0, False: 1.42k]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|  1.42k|        t.tm_wday = d;
 2250|  1.42k|        st.set_wday(h);
 2251|  1.42k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.10k|    {
 3419|  6.10k|        auto start_it = m_begin;
 3420|  6.10k|        std::size_t options_available = N;
 3421|  6.10k|        std::size_t chars_consumed = 0;
 3422|  19.8k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 15.1k, False: 4.63k]
  ------------------
 3423|  19.8k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 13.7k, False: 1.42k]
  ------------------
 3424|  13.7k|            std::size_t i = 0;
 3425|  13.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 13.7k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  13.7k|            const auto ch = *m_begin;
 3430|  13.7k|            ++m_begin;
 3431|  64.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 50.3k, False: 13.7k]
  ------------------
 3432|  50.3k|                const auto cmp = static_cast<unsigned>(
 3433|  50.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  50.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 50.3k]
  ------------------
 3435|  50.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.2k, False: 9.06k]
  |  Branch (3435:34): [True: 41.2k, False: 26]
  ------------------
 3436|  41.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.2k|                                options.end());
 3438|  41.2k|                    --options_available;
 3439|  41.2k|                    continue;
 3440|  41.2k|                }
 3441|  9.09k|                ++i;
 3442|  9.09k|            }
 3443|  13.7k|            ++chars_consumed;
 3444|  13.7k|        }
 3445|  6.10k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.67k, False: 1.42k]
  ------------------
 3446|  4.67k|            m_begin = start_it;
 3447|  4.67k|            return std::nullopt;
 3448|  4.67k|        }
 3449|  1.42k|        return options.front().second;
 3450|  6.10k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  13.0k|    {
 2969|  13.0k|#if !SCN_DISABLE_LOCALE
 2970|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.0k|#endif
 2977|       |
 2978|  13.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  13.0k|    {
 2178|  13.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.56k, False: 10.4k]
  |  |  |  Branch (865:45): [True: 2.40k, False: 10.6k]
  |  |  |  Branch (865:45): [True: 164, False: 10.4k]
  |  |  ------------------
  ------------------
 2179|  2.56k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.56k|                                  "Invalid value for tm_hour"});
 2181|  2.56k|        }
 2182|  10.4k|        t.tm_hour = h;
 2183|  10.4k|        st.set_hour24(hdl);
 2184|  10.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  13.0k|    {
 2997|  13.0k|#if !SCN_DISABLE_LOCALE
 2998|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.0k|#endif
 3005|       |
 3006|  13.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  13.0k|    {
 2168|  13.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.69k, False: 10.3k]
  |  |  |  Branch (865:45): [True: 2.67k, False: 10.3k]
  |  |  |  Branch (865:45): [True: 18, False: 10.3k]
  |  |  ------------------
  ------------------
 2169|  2.69k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.69k|                                "Invalid value for tm_min"});
 2171|  2.69k|        }
 2172|  10.3k|        t.tm_min = m;
 2173|  10.3k|        st.set_min(h);
 2174|  10.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.70k|    {
 3011|  2.70k|#if !SCN_DISABLE_LOCALE
 3012|  2.70k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.70k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.70k|#endif
 3019|       |
 3020|  2.70k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.70k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.70k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.70k|    {
 2158|  2.70k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.59k, False: 1.11k]
  |  |  |  Branch (865:45): [True: 1.59k, False: 1.11k]
  |  |  |  Branch (865:45): [True: 2, False: 1.11k]
  |  |  ------------------
  ------------------
 2159|  1.59k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.59k|                                "Invalid value for tm_sec"});
 2161|  1.59k|        }
 2162|  1.11k|        t.tm_sec = s;
 2163|  1.11k|        st.set_sec(h);
 2164|  1.11k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.74k|    {
 3253|       |        // %m/%d/%y
 3254|  1.74k|        constexpr CharT slash = '/';
 3255|  1.74k|        on_dec_month();
 3256|  1.74k|        on_text(&slash, &slash + 1);
 3257|  1.74k|        on_day_of_month();
 3258|  1.74k|        on_text(&slash, &slash + 1);
 3259|  1.74k|        on_short_year();
 3260|  1.74k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.92k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.92k|        constexpr CharT dash = '-';
 3265|  1.92k|        on_full_year();
 3266|  1.92k|        on_text(&dash, &dash + 1);
 3267|  1.92k|        on_dec_month();
 3268|  1.92k|        on_text(&dash, &dash + 1);
 3269|  1.92k|        on_day_of_month();
 3270|  1.92k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  10.3k|    {
 3295|       |        // %H:%M
 3296|  10.3k|        constexpr CharT colon = ':';
 3297|  10.3k|        on_24_hour();
 3298|  10.3k|        on_text(&colon, &colon + 1);
 3299|  10.3k|        on_minute();
 3300|  10.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.70k|    {
 3303|       |        // %H:%M:%S
 3304|  2.70k|        constexpr CharT colon = ':';
 3305|  2.70k|        on_24_hour();
 3306|  2.70k|        on_text(&colon, &colon + 1);
 3307|  2.70k|        on_minute();
 3308|  2.70k|        on_text(&colon, &colon + 1);
 3309|  2.70k|        on_second();
 3310|  2.70k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  13.9k|    {
 3342|  13.9k|        m_st.verify(*this);
 3343|  13.9k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 13.9k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  13.9k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 13.6k, False: 302]
  |  Branch (3346:37): [True: 130, False: 13.5k]
  |  Branch (3346:60): [True: 0, False: 13.5k]
  ------------------
 3347|    130|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|    130|        }
 3349|  13.9k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  50.6k|    {
 3353|  50.6k|        return m_error;
 3354|  50.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  13.9k|    {
 3370|  13.9k|        return m_begin;
 3371|  13.9k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  30.5k|{
 3563|  30.5k|    {
 3564|  30.5k|        SCN_TRY(it,
  ------------------
  |  | 3940|  30.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 468, False: 30.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    468|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    468|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    468|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    468|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    468|    }                                                  \
  |  |  |  | 3939|  30.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  30.1k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  30.1k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  30.1k|    static_cast<    \
  |  |  935|  30.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  30.1k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  30.1k|        ctx.range(), t, ctx.locale());
 3571|  30.1k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  30.1k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  30.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.0k, False: 19.0k]
  |  |  ------------------
  ------------------
 3573|  11.0k|        return unexpected(e.error());
 3574|  11.0k|    }
 3575|  19.0k|    return r.get_iterator();
 3576|  30.1k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  30.1k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  30.1k|    static_cast<    \
  |  |  935|  30.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  30.1k|          m_begin(ranges::begin(m_range)),
 2708|  30.1k|          m_tm(t),
 2709|  30.1k|          m_loc(loc)
 2710|  30.1k|    {
 2711|  30.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  10.3k|    {
 3358|  10.3k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  42.4k|    {
 3363|  42.4k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.0k, False: 31.3k]
  ------------------
 3364|  11.0k|            m_error = unexpected(e);
 3365|  11.0k|        }
 3366|  42.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  32.3k|    {
 2715|  54.2k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 32.3k, False: 21.8k]
  ------------------
 2716|  32.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 184, False: 32.1k]
  ------------------
 2717|    184|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    184|            }
 2719|  32.1k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.3k, False: 21.8k]
  ------------------
 2720|  10.3k|                return on_error("Invalid literal character");
 2721|  10.3k|            }
 2722|  21.8k|            ++beg;
 2723|  21.8k|            ++m_begin;
 2724|  21.8k|        }
 2725|  32.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.49k|    {
 2745|  3.49k|#if !SCN_DISABLE_LOCALE
 2746|  3.49k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.49k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.49k|#endif
 2753|       |
 2754|  3.49k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.49k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.49k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  3.49k|    {
 2396|  3.49k|        t.year = y;
 2397|  3.49k|        st.set_full_year(h);
 2398|  3.49k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  55.5k|    {
 3381|  55.5k|        int digits_read = 0;
 3382|  55.5k|        int accumulator = 0;
 3383|  96.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 96.3k, False: 378]
  ------------------
 3384|  96.3k|            const auto ch = *m_begin;
 3385|  96.3k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 28.6k, False: 67.7k]
  |  Branch (3385:36): [True: 17.8k, False: 49.8k]
  ------------------
 3386|  46.5k|                break;
 3387|  46.5k|            }
 3388|  49.8k|            ++m_begin;
 3389|  49.8k|            ++digits_read;
 3390|  49.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  49.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 8.66k, False: 41.1k]
  ------------------
 3392|  8.66k|                break;
 3393|  8.66k|            }
 3394|  49.8k|        }
 3395|  55.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 16.4k, False: 39.0k]
  ------------------
 3396|  16.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  16.4k|                                 "Too few integer digits"});
 3398|  16.4k|            return -1;
 3399|  16.4k|        }
 3400|  39.0k|        return accumulator;
 3401|  55.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  6.04k|    {
 2759|  6.04k|#if !SCN_DISABLE_LOCALE
 2760|  6.04k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 6.04k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  6.04k|#endif
 2768|       |
 2769|  6.04k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  6.04k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  6.04k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  6.04k|    {
 2419|  6.04k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 6.04k, False: 0]
  ------------------
 2420|  6.04k|            t.year = y;
 2421|  6.04k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  6.04k|        st.set_short_year(h);
 2426|  6.04k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  3.86k|    {
 2802|  3.86k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.86k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.86k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.86k|#endif
 2810|       |
 2811|  3.86k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.86k|            {"January", 1},
 2813|  3.86k|            {"February", 2},
 2814|  3.86k|            {"March", 3},
 2815|  3.86k|            {"April", 4},
 2816|  3.86k|            {"May", 5},
 2817|  3.86k|            {"June", 6},
 2818|  3.86k|            {"July", 7},
 2819|  3.86k|            {"August", 8},
 2820|  3.86k|            {"September", 9},
 2821|  3.86k|            {"October", 10},
 2822|  3.86k|            {"November", 11},
 2823|  3.86k|            {"December", 12},
 2824|  3.86k|        }};
 2825|  3.86k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 80, False: 3.78k]
  ------------------
 2826|     80|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     80|        }
 2828|  3.78k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.78k|            {"Jan", 1},
 2830|  3.78k|            {"Feb", 2},
 2831|  3.78k|            {"Mar", 3},
 2832|  3.78k|            {"Apr", 4},
 2833|  3.78k|            {"Jun", 6},
 2834|  3.78k|            {"Jul", 7},
 2835|  3.78k|            {"Aug", 8},
 2836|  3.78k|            {"Sep", 9},
 2837|  3.78k|            {"Oct", 10},
 2838|  3.78k|            {"Nov", 11},
 2839|  3.78k|            {"Dec", 12},
 2840|  3.78k|        }};
 2841|  3.78k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2.20k, False: 1.57k]
  ------------------
 2842|  2.20k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  2.20k|        }
 2844|  1.57k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.57k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  10.3k|    {
 2383|  10.3k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.68k, False: 7.62k]
  |  |  |  Branch (865:45): [True: 2.57k, False: 7.73k]
  |  |  |  Branch (865:45): [True: 110, False: 7.62k]
  |  |  ------------------
  ------------------
 2384|  2.68k|            return h.set_error(
 2385|  2.68k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  2.68k|        }
 2387|  7.62k|        t.mon = month{static_cast<unsigned>(m)};
 2388|  7.62k|        st.set_mon(h);
 2389|  7.62k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.86k|    {
 3419|  3.86k|        auto start_it = m_begin;
 3420|  3.86k|        std::size_t options_available = N;
 3421|  3.86k|        std::size_t chars_consumed = 0;
 3422|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 11.0k, False: 3.72k]
  ------------------
 3423|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 10.9k, False: 80]
  ------------------
 3424|  10.9k|            std::size_t i = 0;
 3425|  10.9k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 62, False: 10.8k]
  ------------------
 3426|     62|                options_available = 0;
 3427|     62|                break;
 3428|     62|            }
 3429|  10.8k|            const auto ch = *m_begin;
 3430|  10.8k|            ++m_begin;
 3431|  69.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 58.1k, False: 10.8k]
  ------------------
 3432|  58.1k|                const auto cmp = static_cast<unsigned>(
 3433|  58.1k|                    ch ^ options[i].first[chars_consumed]);
 3434|  58.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 58.1k]
  ------------------
 3435|  58.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 48.5k, False: 9.65k]
  |  Branch (3435:34): [True: 46.1k, False: 2.35k]
  ------------------
 3436|  46.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  46.1k|                                options.end());
 3438|  46.1k|                    --options_available;
 3439|  46.1k|                    continue;
 3440|  46.1k|                }
 3441|  12.0k|                ++i;
 3442|  12.0k|            }
 3443|  10.8k|            ++chars_consumed;
 3444|  10.8k|        }
 3445|  3.86k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.78k, False: 80]
  ------------------
 3446|  3.78k|            m_begin = start_it;
 3447|  3.78k|            return std::nullopt;
 3448|  3.78k|        }
 3449|     80|        return options.front().second;
 3450|  3.86k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.78k|    {
 3419|  3.78k|        auto start_it = m_begin;
 3420|  3.78k|        std::size_t options_available = N;
 3421|  3.78k|        std::size_t chars_consumed = 0;
 3422|  12.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.7k, False: 1.52k]
  ------------------
 3423|  12.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 8.49k, False: 2.20k]
  ------------------
 3424|  8.49k|            std::size_t i = 0;
 3425|  8.49k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 56, False: 8.43k]
  ------------------
 3426|     56|                options_available = 0;
 3427|     56|                break;
 3428|     56|            }
 3429|  8.43k|            const auto ch = *m_begin;
 3430|  8.43k|            ++m_begin;
 3431|  54.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 46.3k, False: 8.43k]
  ------------------
 3432|  46.3k|                const auto cmp = static_cast<unsigned>(
 3433|  46.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  46.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 46.3k]
  ------------------
 3435|  46.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.6k, False: 4.69k]
  |  Branch (3435:34): [True: 39.3k, False: 2.27k]
  ------------------
 3436|  39.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  39.3k|                                options.end());
 3438|  39.3k|                    --options_available;
 3439|  39.3k|                    continue;
 3440|  39.3k|                }
 3441|  6.96k|                ++i;
 3442|  6.96k|            }
 3443|  8.43k|            ++chars_consumed;
 3444|  8.43k|        }
 3445|  3.78k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.57k, False: 2.20k]
  ------------------
 3446|  1.57k|            m_begin = start_it;
 3447|  1.57k|            return std::nullopt;
 3448|  1.57k|        }
 3449|  2.20k|        return options.front().second;
 3450|  3.78k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  8.02k|    {
 2848|  8.02k|#if !SCN_DISABLE_LOCALE
 2849|  8.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 8.02k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  8.02k|#endif
 2856|       |
 2857|  8.02k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  8.02k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  8.02k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  7.99k|    {
 2880|  7.99k|#if !SCN_DISABLE_LOCALE
 2881|  7.99k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 7.99k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  7.99k|#endif
 2888|       |
 2889|  7.99k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  7.99k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  7.99k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  7.99k|    {
 2370|  7.99k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.12k, False: 4.87k]
  |  |  |  Branch (865:45): [True: 3.05k, False: 4.94k]
  |  |  |  Branch (865:45): [True: 74, False: 4.87k]
  |  |  ------------------
  ------------------
 2371|  3.12k|            return h.set_error(
 2372|  3.12k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  3.12k|        }
 2374|  4.87k|        t.mday = d;
 2375|  4.87k|        st.set_mday(h);
 2376|  4.87k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  3.09k|    {
 2895|  3.09k|#if !SCN_DISABLE_LOCALE
 2896|  3.09k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.09k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.09k|#endif
 2903|       |
 2904|  3.09k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.09k|            {"Sunday", 0},
 2906|  3.09k|            {"Monday", 1},
 2907|  3.09k|            {"Tuesday", 2},
 2908|  3.09k|            {"Wednesday", 3},
 2909|  3.09k|            {"Thursday", 4},
 2910|  3.09k|            {"Friday", 5},
 2911|  3.09k|            {"Saturday", 6},
 2912|  3.09k|        }};
 2913|  3.09k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.09k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.09k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.09k|            {"Sun", 0},
 2918|  3.09k|            {"Mon", 1},
 2919|  3.09k|            {"Tue", 2},
 2920|  3.09k|            {"Wed", 3},
 2921|  3.09k|            {"Thu", 4},
 2922|  3.09k|            {"Fri", 5},
 2923|  3.09k|            {"Sat", 6},
 2924|  3.09k|        }};
 2925|  3.09k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 1.49k, False: 1.59k]
  ------------------
 2926|  1.49k|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|  1.49k|        }
 2928|  1.59k|        return set_error(
 2929|  1.59k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.09k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2432|  1.49k|    {
 2433|  1.49k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.49k]
  |  |  |  Branch (865:45): [True: 0, False: 1.49k]
  |  |  |  Branch (865:45): [True: 0, False: 1.49k]
  |  |  ------------------
  ------------------
 2434|      0|            return h.set_error(
 2435|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 2436|      0|        }
 2437|  1.49k|        t.wday = weekday{static_cast<unsigned>(d)};
 2438|  1.49k|        st.set_wday(h);
 2439|  1.49k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.18k|    {
 3419|  6.18k|        auto start_it = m_begin;
 3420|  6.18k|        std::size_t options_available = N;
 3421|  6.18k|        std::size_t chars_consumed = 0;
 3422|  20.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 15.7k, False: 4.63k]
  ------------------
 3423|  20.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 14.2k, False: 1.49k]
  ------------------
 3424|  14.2k|            std::size_t i = 0;
 3425|  14.2k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 54, False: 14.1k]
  ------------------
 3426|     54|                options_available = 0;
 3427|     54|                break;
 3428|     54|            }
 3429|  14.1k|            const auto ch = *m_begin;
 3430|  14.1k|            ++m_begin;
 3431|  65.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 51.2k, False: 14.1k]
  ------------------
 3432|  51.2k|                const auto cmp = static_cast<unsigned>(
 3433|  51.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  51.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 51.2k]
  ------------------
 3435|  51.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.7k, False: 9.51k]
  |  Branch (3435:34): [True: 41.6k, False: 54]
  ------------------
 3436|  41.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.6k|                                options.end());
 3438|  41.6k|                    --options_available;
 3439|  41.6k|                    continue;
 3440|  41.6k|                }
 3441|  9.56k|                ++i;
 3442|  9.56k|            }
 3443|  14.1k|            ++chars_consumed;
 3444|  14.1k|        }
 3445|  6.18k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.68k, False: 1.49k]
  ------------------
 3446|  4.68k|            m_begin = start_it;
 3447|  4.68k|            return std::nullopt;
 3448|  4.68k|        }
 3449|  1.49k|        return options.front().second;
 3450|  6.18k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  13.6k|    {
 2969|  13.6k|#if !SCN_DISABLE_LOCALE
 2970|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.6k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.6k|#endif
 2977|       |
 2978|  13.6k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.6k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  13.6k|    {
 2344|  13.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.32k, False: 11.3k]
  |  |  |  Branch (865:45): [True: 2.14k, False: 11.5k]
  |  |  |  Branch (865:45): [True: 180, False: 11.3k]
  |  |  ------------------
  ------------------
 2345|  2.32k|            return hdl.set_error(
 2346|  2.32k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  2.32k|        }
 2348|  11.3k|        t.hour = h;
 2349|  11.3k|        st.set_hour24(hdl);
 2350|  11.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  13.6k|    {
 2997|  13.6k|#if !SCN_DISABLE_LOCALE
 2998|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.6k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.6k|#endif
 3005|       |
 3006|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.6k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  13.6k|    {
 2331|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.59k, False: 11.0k]
  |  |  |  Branch (865:45): [True: 2.57k, False: 11.0k]
  |  |  |  Branch (865:45): [True: 26, False: 11.0k]
  |  |  ------------------
  ------------------
 2332|  2.59k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  2.59k|                                "Invalid value for minutes"});
 2334|  2.59k|        }
 2335|  11.0k|        t.min = m;
 2336|  11.0k|        st.set_min(h);
 2337|  11.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.68k|    {
 3011|  2.68k|#if !SCN_DISABLE_LOCALE
 3012|  2.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.68k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.68k|#endif
 3019|       |
 3020|  2.68k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.68k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.68k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  2.68k|    {
 2318|  2.68k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.56k, False: 1.12k]
  |  |  |  Branch (865:45): [True: 1.55k, False: 1.12k]
  |  |  |  Branch (865:45): [True: 4, False: 1.12k]
  |  |  ------------------
  ------------------
 2319|  1.56k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  1.56k|                                "Invalid value for seconds"});
 2321|  1.56k|        }
 2322|  1.12k|        t.sec = s;
 2323|  1.12k|        st.set_sec(h);
 2324|  1.12k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  6.04k|    {
 3253|       |        // %m/%d/%y
 3254|  6.04k|        constexpr CharT slash = '/';
 3255|  6.04k|        on_dec_month();
 3256|  6.04k|        on_text(&slash, &slash + 1);
 3257|  6.04k|        on_day_of_month();
 3258|  6.04k|        on_text(&slash, &slash + 1);
 3259|  6.04k|        on_short_year();
 3260|  6.04k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.89k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.89k|        constexpr CharT dash = '-';
 3265|  1.89k|        on_full_year();
 3266|  1.89k|        on_text(&dash, &dash + 1);
 3267|  1.89k|        on_dec_month();
 3268|  1.89k|        on_text(&dash, &dash + 1);
 3269|  1.89k|        on_day_of_month();
 3270|  1.89k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  10.9k|    {
 3295|       |        // %H:%M
 3296|  10.9k|        constexpr CharT colon = ':';
 3297|  10.9k|        on_24_hour();
 3298|  10.9k|        on_text(&colon, &colon + 1);
 3299|  10.9k|        on_minute();
 3300|  10.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.68k|    {
 3303|       |        // %H:%M:%S
 3304|  2.68k|        constexpr CharT colon = ':';
 3305|  2.68k|        on_24_hour();
 3306|  2.68k|        on_text(&colon, &colon + 1);
 3307|  2.68k|        on_minute();
 3308|  2.68k|        on_text(&colon, &colon + 1);
 3309|  2.68k|        on_second();
 3310|  2.68k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  19.0k|    {
 3342|  19.0k|        m_st.verify(*this);
 3343|  19.0k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 19.0k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  19.0k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 18.7k, False: 302]
  |  Branch (3346:37): [True: 4.46k, False: 14.2k]
  |  Branch (3346:60): [True: 0, False: 14.2k]
  ------------------
 3347|  4.46k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  4.46k|        }
 3349|  19.0k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2482|  4.61k|    {
 2483|  4.61k|        assert(t.year);
 2484|  4.61k|        st.handle_short_year_and_century(*t.year, 0);
 2485|  4.61k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  60.4k|    {
 3353|  60.4k|        return m_error;
 3354|  60.4k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  19.0k|    {
 3370|  19.0k|        return m_begin;
 3371|  19.0k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  25.4k|{
 3563|  25.4k|    {
 3564|  25.4k|        SCN_TRY(it,
  ------------------
  |  | 3940|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 240, False: 25.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    240|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    240|    }                                                  \
  |  |  |  | 3939|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  25.2k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  25.2k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  25.2k|    static_cast<    \
  |  |  935|  25.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  25.2k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  25.2k|        ctx.range(), t, ctx.locale());
 3571|  25.2k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  25.2k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 13.9k]
  |  |  ------------------
  ------------------
 3573|  11.2k|        return unexpected(e.error());
 3574|  11.2k|    }
 3575|  13.9k|    return r.get_iterator();
 3576|  25.2k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  25.2k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  25.2k|    static_cast<    \
  |  |  935|  25.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  25.2k|          m_begin(ranges::begin(m_range)),
 2708|  25.2k|          m_tm(t),
 2709|  25.2k|          m_loc(loc)
 2710|  25.2k|    {
 2711|  25.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  10.6k|    {
 3358|  10.6k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  44.0k|    {
 3363|  44.0k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.2k, False: 32.7k]
  ------------------
 3364|  11.2k|            m_error = unexpected(e);
 3365|  11.2k|        }
 3366|  44.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  23.2k|    {
 2715|  35.6k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 23.2k, False: 12.4k]
  ------------------
 2716|  23.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 142, False: 23.0k]
  ------------------
 2717|    142|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    142|            }
 2719|  23.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.6k, False: 12.4k]
  ------------------
 2720|  10.6k|                return on_error("Invalid literal character");
 2721|  10.6k|            }
 2722|  12.4k|            ++beg;
 2723|  12.4k|            ++m_begin;
 2724|  12.4k|        }
 2725|  23.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.54k|    {
 2745|  3.54k|#if !SCN_DISABLE_LOCALE
 2746|  3.54k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.54k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.54k|#endif
 2753|       |
 2754|  3.54k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.54k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.54k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  3.54k|    {
 2396|  3.54k|        t.year = y;
 2397|  3.54k|        st.set_full_year(h);
 2398|  3.54k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  41.5k|    {
 3381|  41.5k|        int digits_read = 0;
 3382|  41.5k|        int accumulator = 0;
 3383|  67.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 67.4k, False: 308]
  ------------------
 3384|  67.4k|            const auto ch = *m_begin;
 3385|  67.4k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 20.4k, False: 47.0k]
  |  Branch (3385:36): [True: 16.6k, False: 30.3k]
  ------------------
 3386|  37.1k|                break;
 3387|  37.1k|            }
 3388|  30.3k|            ++m_begin;
 3389|  30.3k|            ++digits_read;
 3390|  30.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  30.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 4.09k, False: 26.2k]
  ------------------
 3392|  4.09k|                break;
 3393|  4.09k|            }
 3394|  30.3k|        }
 3395|  41.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 17.1k, False: 24.3k]
  ------------------
 3396|  17.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  17.1k|                                 "Too few integer digits"});
 3398|  17.1k|            return -1;
 3399|  17.1k|        }
 3400|  24.3k|        return accumulator;
 3401|  41.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.74k|    {
 2759|  1.74k|#if !SCN_DISABLE_LOCALE
 2760|  1.74k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.74k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.74k|#endif
 2768|       |
 2769|  1.74k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.74k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.74k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  1.74k|    {
 2419|  1.74k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 1.74k, False: 0]
  ------------------
 2420|  1.74k|            t.year = y;
 2421|  1.74k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  1.74k|        st.set_short_year(h);
 2426|  1.74k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  3.89k|    {
 2802|  3.89k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.89k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.89k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.89k|#endif
 2810|       |
 2811|  3.89k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.89k|            {"January", 1},
 2813|  3.89k|            {"February", 2},
 2814|  3.89k|            {"March", 3},
 2815|  3.89k|            {"April", 4},
 2816|  3.89k|            {"May", 5},
 2817|  3.89k|            {"June", 6},
 2818|  3.89k|            {"July", 7},
 2819|  3.89k|            {"August", 8},
 2820|  3.89k|            {"September", 9},
 2821|  3.89k|            {"October", 10},
 2822|  3.89k|            {"November", 11},
 2823|  3.89k|            {"December", 12},
 2824|  3.89k|        }};
 2825|  3.89k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 80, False: 3.81k]
  ------------------
 2826|     80|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     80|        }
 2828|  3.81k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.81k|            {"Jan", 1},
 2830|  3.81k|            {"Feb", 2},
 2831|  3.81k|            {"Mar", 3},
 2832|  3.81k|            {"Apr", 4},
 2833|  3.81k|            {"Jun", 6},
 2834|  3.81k|            {"Jul", 7},
 2835|  3.81k|            {"Aug", 8},
 2836|  3.81k|            {"Sep", 9},
 2837|  3.81k|            {"Oct", 10},
 2838|  3.81k|            {"Nov", 11},
 2839|  3.81k|            {"Dec", 12},
 2840|  3.81k|        }};
 2841|  3.81k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2.20k, False: 1.61k]
  ------------------
 2842|  2.20k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  2.20k|        }
 2844|  1.61k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.61k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  6.02k|    {
 2383|  6.02k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  9.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.77k, False: 3.24k]
  |  |  |  Branch (865:45): [True: 2.68k, False: 3.34k]
  |  |  |  Branch (865:45): [True: 96, False: 3.24k]
  |  |  ------------------
  ------------------
 2384|  2.77k|            return h.set_error(
 2385|  2.77k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  2.77k|        }
 2387|  3.24k|        t.mon = month{static_cast<unsigned>(m)};
 2388|  3.24k|        st.set_mon(h);
 2389|  3.24k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.89k|    {
 3419|  3.89k|        auto start_it = m_begin;
 3420|  3.89k|        std::size_t options_available = N;
 3421|  3.89k|        std::size_t chars_consumed = 0;
 3422|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 11.0k, False: 3.75k]
  ------------------
 3423|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 10.9k, False: 80]
  ------------------
 3424|  10.9k|            std::size_t i = 0;
 3425|  10.9k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 58, False: 10.8k]
  ------------------
 3426|     58|                options_available = 0;
 3427|     58|                break;
 3428|     58|            }
 3429|  10.8k|            const auto ch = *m_begin;
 3430|  10.8k|            ++m_begin;
 3431|  69.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 58.5k, False: 10.8k]
  ------------------
 3432|  58.5k|                const auto cmp = static_cast<unsigned>(
 3433|  58.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  58.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 58.5k]
  ------------------
 3435|  58.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 48.9k, False: 9.63k]
  |  Branch (3435:34): [True: 46.5k, False: 2.33k]
  ------------------
 3436|  46.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  46.5k|                                options.end());
 3438|  46.5k|                    --options_available;
 3439|  46.5k|                    continue;
 3440|  46.5k|                }
 3441|  11.9k|                ++i;
 3442|  11.9k|            }
 3443|  10.8k|            ++chars_consumed;
 3444|  10.8k|        }
 3445|  3.89k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.81k, False: 80]
  ------------------
 3446|  3.81k|            m_begin = start_it;
 3447|  3.81k|            return std::nullopt;
 3448|  3.81k|        }
 3449|     80|        return options.front().second;
 3450|  3.89k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.81k|    {
 3419|  3.81k|        auto start_it = m_begin;
 3420|  3.81k|        std::size_t options_available = N;
 3421|  3.81k|        std::size_t chars_consumed = 0;
 3422|  12.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.7k, False: 1.55k]
  ------------------
 3423|  12.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 8.49k, False: 2.20k]
  ------------------
 3424|  8.49k|            std::size_t i = 0;
 3425|  8.49k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 52, False: 8.44k]
  ------------------
 3426|     52|                options_available = 0;
 3427|     52|                break;
 3428|     52|            }
 3429|  8.44k|            const auto ch = *m_begin;
 3430|  8.44k|            ++m_begin;
 3431|  55.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 46.6k, False: 8.44k]
  ------------------
 3432|  46.6k|                const auto cmp = static_cast<unsigned>(
 3433|  46.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  46.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 46.6k]
  ------------------
 3435|  46.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.9k, False: 4.67k]
  |  Branch (3435:34): [True: 39.7k, False: 2.24k]
  ------------------
 3436|  39.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  39.7k|                                options.end());
 3438|  39.7k|                    --options_available;
 3439|  39.7k|                    continue;
 3440|  39.7k|                }
 3441|  6.92k|                ++i;
 3442|  6.92k|            }
 3443|  8.44k|            ++chars_consumed;
 3444|  8.44k|        }
 3445|  3.81k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.61k, False: 2.20k]
  ------------------
 3446|  1.61k|            m_begin = start_it;
 3447|  1.61k|            return std::nullopt;
 3448|  1.61k|        }
 3449|  2.20k|        return options.front().second;
 3450|  3.81k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.74k|    {
 2848|  3.74k|#if !SCN_DISABLE_LOCALE
 2849|  3.74k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.74k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.74k|#endif
 2856|       |
 2857|  3.74k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.74k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.74k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.72k|    {
 2880|  3.72k|#if !SCN_DISABLE_LOCALE
 2881|  3.72k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.72k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.72k|#endif
 2888|       |
 2889|  3.72k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.72k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.72k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  3.72k|    {
 2370|  3.72k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.20k, False: 516]
  |  |  |  Branch (865:45): [True: 3.13k, False: 586]
  |  |  |  Branch (865:45): [True: 70, False: 516]
  |  |  ------------------
  ------------------
 2371|  3.20k|            return h.set_error(
 2372|  3.20k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  3.20k|        }
 2374|    516|        t.mday = d;
 2375|    516|        st.set_mday(h);
 2376|    516|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  3.05k|    {
 2895|  3.05k|#if !SCN_DISABLE_LOCALE
 2896|  3.05k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.05k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.05k|#endif
 2903|       |
 2904|  3.05k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.05k|            {"Sunday", 0},
 2906|  3.05k|            {"Monday", 1},
 2907|  3.05k|            {"Tuesday", 2},
 2908|  3.05k|            {"Wednesday", 3},
 2909|  3.05k|            {"Thursday", 4},
 2910|  3.05k|            {"Friday", 5},
 2911|  3.05k|            {"Saturday", 6},
 2912|  3.05k|        }};
 2913|  3.05k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.05k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.05k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.05k|            {"Sun", 0},
 2918|  3.05k|            {"Mon", 1},
 2919|  3.05k|            {"Tue", 2},
 2920|  3.05k|            {"Wed", 3},
 2921|  3.05k|            {"Thu", 4},
 2922|  3.05k|            {"Fri", 5},
 2923|  3.05k|            {"Sat", 6},
 2924|  3.05k|        }};
 2925|  3.05k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 1.42k, False: 1.62k]
  ------------------
 2926|  1.42k|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|  1.42k|        }
 2928|  1.62k|        return set_error(
 2929|  1.62k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.05k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2432|  1.42k|    {
 2433|  1.42k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  2.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.42k]
  |  |  |  Branch (865:45): [True: 0, False: 1.42k]
  |  |  |  Branch (865:45): [True: 0, False: 1.42k]
  |  |  ------------------
  ------------------
 2434|      0|            return h.set_error(
 2435|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 2436|      0|        }
 2437|  1.42k|        t.wday = weekday{static_cast<unsigned>(d)};
 2438|  1.42k|        st.set_wday(h);
 2439|  1.42k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.10k|    {
 3419|  6.10k|        auto start_it = m_begin;
 3420|  6.10k|        std::size_t options_available = N;
 3421|  6.10k|        std::size_t chars_consumed = 0;
 3422|  19.8k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 15.1k, False: 4.63k]
  ------------------
 3423|  19.8k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 13.7k, False: 1.42k]
  ------------------
 3424|  13.7k|            std::size_t i = 0;
 3425|  13.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 13.7k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  13.7k|            const auto ch = *m_begin;
 3430|  13.7k|            ++m_begin;
 3431|  64.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 50.3k, False: 13.7k]
  ------------------
 3432|  50.3k|                const auto cmp = static_cast<unsigned>(
 3433|  50.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  50.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 50.3k]
  ------------------
 3435|  50.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.2k, False: 9.06k]
  |  Branch (3435:34): [True: 41.2k, False: 26]
  ------------------
 3436|  41.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.2k|                                options.end());
 3438|  41.2k|                    --options_available;
 3439|  41.2k|                    continue;
 3440|  41.2k|                }
 3441|  9.09k|                ++i;
 3442|  9.09k|            }
 3443|  13.7k|            ++chars_consumed;
 3444|  13.7k|        }
 3445|  6.10k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.67k, False: 1.42k]
  ------------------
 3446|  4.67k|            m_begin = start_it;
 3447|  4.67k|            return std::nullopt;
 3448|  4.67k|        }
 3449|  1.42k|        return options.front().second;
 3450|  6.10k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  13.0k|    {
 2969|  13.0k|#if !SCN_DISABLE_LOCALE
 2970|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.0k|#endif
 2977|       |
 2978|  13.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.0k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  13.0k|    {
 2344|  13.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.56k, False: 10.4k]
  |  |  |  Branch (865:45): [True: 2.40k, False: 10.6k]
  |  |  |  Branch (865:45): [True: 164, False: 10.4k]
  |  |  ------------------
  ------------------
 2345|  2.56k|            return hdl.set_error(
 2346|  2.56k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  2.56k|        }
 2348|  10.4k|        t.hour = h;
 2349|  10.4k|        st.set_hour24(hdl);
 2350|  10.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  13.0k|    {
 2997|  13.0k|#if !SCN_DISABLE_LOCALE
 2998|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.0k|#endif
 3005|       |
 3006|  13.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.0k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  13.0k|    {
 2331|  13.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.69k, False: 10.3k]
  |  |  |  Branch (865:45): [True: 2.67k, False: 10.3k]
  |  |  |  Branch (865:45): [True: 18, False: 10.3k]
  |  |  ------------------
  ------------------
 2332|  2.69k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  2.69k|                                "Invalid value for minutes"});
 2334|  2.69k|        }
 2335|  10.3k|        t.min = m;
 2336|  10.3k|        st.set_min(h);
 2337|  10.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.70k|    {
 3011|  2.70k|#if !SCN_DISABLE_LOCALE
 3012|  2.70k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.70k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.70k|#endif
 3019|       |
 3020|  2.70k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.70k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.70k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  2.70k|    {
 2318|  2.70k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.59k, False: 1.11k]
  |  |  |  Branch (865:45): [True: 1.59k, False: 1.11k]
  |  |  |  Branch (865:45): [True: 2, False: 1.11k]
  |  |  ------------------
  ------------------
 2319|  1.59k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  1.59k|                                "Invalid value for seconds"});
 2321|  1.59k|        }
 2322|  1.11k|        t.sec = s;
 2323|  1.11k|        st.set_sec(h);
 2324|  1.11k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.74k|    {
 3253|       |        // %m/%d/%y
 3254|  1.74k|        constexpr CharT slash = '/';
 3255|  1.74k|        on_dec_month();
 3256|  1.74k|        on_text(&slash, &slash + 1);
 3257|  1.74k|        on_day_of_month();
 3258|  1.74k|        on_text(&slash, &slash + 1);
 3259|  1.74k|        on_short_year();
 3260|  1.74k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.92k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.92k|        constexpr CharT dash = '-';
 3265|  1.92k|        on_full_year();
 3266|  1.92k|        on_text(&dash, &dash + 1);
 3267|  1.92k|        on_dec_month();
 3268|  1.92k|        on_text(&dash, &dash + 1);
 3269|  1.92k|        on_day_of_month();
 3270|  1.92k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  10.3k|    {
 3295|       |        // %H:%M
 3296|  10.3k|        constexpr CharT colon = ':';
 3297|  10.3k|        on_24_hour();
 3298|  10.3k|        on_text(&colon, &colon + 1);
 3299|  10.3k|        on_minute();
 3300|  10.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.70k|    {
 3303|       |        // %H:%M:%S
 3304|  2.70k|        constexpr CharT colon = ':';
 3305|  2.70k|        on_24_hour();
 3306|  2.70k|        on_text(&colon, &colon + 1);
 3307|  2.70k|        on_minute();
 3308|  2.70k|        on_text(&colon, &colon + 1);
 3309|  2.70k|        on_second();
 3310|  2.70k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  13.9k|    {
 3342|  13.9k|        m_st.verify(*this);
 3343|  13.9k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 13.9k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  13.9k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 13.6k, False: 302]
  |  Branch (3346:37): [True: 130, False: 13.5k]
  |  Branch (3346:60): [True: 0, False: 13.5k]
  ------------------
 3347|    130|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|    130|        }
 3349|  13.9k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  50.6k|    {
 3353|  50.6k|        return m_error;
 3354|  50.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  13.9k|    {
 3370|  13.9k|        return m_begin;
 3371|  13.9k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  30.2k|{
 3563|  30.2k|    {
 3564|  30.2k|        SCN_TRY(it,
  ------------------
  |  | 3940|  30.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 344, False: 29.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    344|    }                                                  \
  |  |  |  | 3939|  30.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  29.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  29.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  29.9k|    static_cast<    \
  |  |  935|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  29.9k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  29.9k|        ctx.range(), t, ctx.locale());
 3571|  29.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  29.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.7k, False: 7.19k]
  |  |  ------------------
  ------------------
 3573|  22.7k|        return unexpected(e.error());
 3574|  22.7k|    }
 3575|  7.19k|    return r.get_iterator();
 3576|  29.9k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  29.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  29.9k|    static_cast<    \
  |  |  935|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  29.9k|          m_begin(ranges::begin(m_range)),
 2708|  29.9k|          m_tm(t),
 2709|  29.9k|          m_loc(loc)
 2710|  29.9k|    {
 2711|  29.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  22.1k|    {
 3358|  22.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  97.7k|    {
 3363|  97.7k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 22.7k, False: 75.0k]
  ------------------
 3364|  22.7k|            m_error = unexpected(e);
 3365|  22.7k|        }
 3366|  97.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  29.5k|    {
 2715|  36.7k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 29.5k, False: 7.21k]
  ------------------
 2716|  29.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 112, False: 29.3k]
  ------------------
 2717|    112|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    112|            }
 2719|  29.3k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.1k, False: 7.21k]
  ------------------
 2720|  22.1k|                return on_error("Invalid literal character");
 2721|  22.1k|            }
 2722|  7.21k|            ++beg;
 2723|  7.21k|            ++m_begin;
 2724|  7.21k|        }
 2725|  29.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.51k|    {
 2745|  6.51k|#if !SCN_DISABLE_LOCALE
 2746|  6.51k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.51k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.51k|#endif
 2753|       |
 2754|  6.51k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.51k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.51k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.51k|    {
 2218|  6.51k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.51k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.51k|        t.tm_year = y - 1900;
 2223|  6.51k|        st.set_full_year(h);
 2224|  6.51k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  52.3k|    {
 3381|  52.3k|        int digits_read = 0;
 3382|  52.3k|        int accumulator = 0;
 3383|  67.8k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 67.5k, False: 240]
  ------------------
 3384|  67.5k|            const auto ch = *m_begin;
 3385|  67.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.0k, False: 38.5k]
  |  Branch (3385:36): [True: 20.6k, False: 17.8k]
  ------------------
 3386|  49.7k|                break;
 3387|  49.7k|            }
 3388|  17.8k|            ++m_begin;
 3389|  17.8k|            ++digits_read;
 3390|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.39k, False: 15.4k]
  ------------------
 3392|  2.39k|                break;
 3393|  2.39k|            }
 3394|  17.8k|        }
 3395|  52.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 37.6k, False: 14.6k]
  ------------------
 3396|  37.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  37.6k|                                 "Too few integer digits"});
 3398|  37.6k|            return -1;
 3399|  37.6k|        }
 3400|  14.6k|        return accumulator;
 3401|  52.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.26k|    {
 2759|  3.26k|#if !SCN_DISABLE_LOCALE
 2760|  3.26k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.26k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.26k|#endif
 2768|       |
 2769|  3.26k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.26k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.26k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.26k|    {
 2235|  3.26k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.24k, False: 18]
  |  |  |  Branch (865:45): [True: 3.24k, False: 18]
  |  |  |  Branch (865:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2236|  3.24k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.24k|                                "Invalid value for tm_year"});
 2238|  3.24k|        }
 2239|     18|        st.short_year_value = y;
 2240|     18|        st.set_short_year(h);
 2241|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.81k|    {
 2802|  3.81k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.81k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.81k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.81k|#endif
 2810|       |
 2811|  3.81k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.81k|            {"January", 1},
 2813|  3.81k|            {"February", 2},
 2814|  3.81k|            {"March", 3},
 2815|  3.81k|            {"April", 4},
 2816|  3.81k|            {"May", 5},
 2817|  3.81k|            {"June", 6},
 2818|  3.81k|            {"July", 7},
 2819|  3.81k|            {"August", 8},
 2820|  3.81k|            {"September", 9},
 2821|  3.81k|            {"October", 10},
 2822|  3.81k|            {"November", 11},
 2823|  3.81k|            {"December", 12},
 2824|  3.81k|        }};
 2825|  3.81k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 22, False: 3.79k]
  ------------------
 2826|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     22|        }
 2828|  3.79k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.79k|            {"Jan", 1},
 2830|  3.79k|            {"Feb", 2},
 2831|  3.79k|            {"Mar", 3},
 2832|  3.79k|            {"Apr", 4},
 2833|  3.79k|            {"Jun", 6},
 2834|  3.79k|            {"Jul", 7},
 2835|  3.79k|            {"Aug", 8},
 2836|  3.79k|            {"Sep", 9},
 2837|  3.79k|            {"Oct", 10},
 2838|  3.79k|            {"Nov", 11},
 2839|  3.79k|            {"Dec", 12},
 2840|  3.79k|        }};
 2841|  3.79k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 554, False: 3.24k]
  ------------------
 2842|    554|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    554|        }
 2844|  3.24k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.24k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  7.11k|    {
 2208|  7.11k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.18k, False: 932]
  |  |  |  Branch (865:45): [True: 6.14k, False: 970]
  |  |  |  Branch (865:45): [True: 38, False: 932]
  |  |  ------------------
  ------------------
 2209|  6.18k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  6.18k|                                "Invalid value for tm_mon"});
 2211|  6.18k|        }
 2212|    932|        t.tm_mon = m - 1;
 2213|    932|        st.set_mon(h);
 2214|    932|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.81k|    {
 3419|  3.81k|        auto start_it = m_begin;
 3420|  3.81k|        std::size_t options_available = N;
 3421|  3.81k|        std::size_t chars_consumed = 0;
 3422|  9.39k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.63k, False: 3.75k]
  ------------------
 3423|  9.39k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.61k, False: 22]
  ------------------
 3424|  5.61k|            std::size_t i = 0;
 3425|  5.61k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 5.57k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  5.57k|            const auto ch = *m_begin;
 3430|  5.57k|            ++m_begin;
 3431|  54.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 48.7k, False: 5.57k]
  ------------------
 3432|  48.7k|                const auto cmp = static_cast<unsigned>(
 3433|  48.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  48.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 48.7k]
  ------------------
 3435|  48.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.4k, False: 2.35k]
  |  Branch (3435:34): [True: 45.7k, False: 688]
  ------------------
 3436|  45.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.7k|                                options.end());
 3438|  45.7k|                    --options_available;
 3439|  45.7k|                    continue;
 3440|  45.7k|                }
 3441|  3.04k|                ++i;
 3442|  3.04k|            }
 3443|  5.57k|            ++chars_consumed;
 3444|  5.57k|        }
 3445|  3.81k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.79k, False: 22]
  ------------------
 3446|  3.79k|            m_begin = start_it;
 3447|  3.79k|            return std::nullopt;
 3448|  3.79k|        }
 3449|     22|        return options.front().second;
 3450|  3.81k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.79k|    {
 3419|  3.79k|        auto start_it = m_begin;
 3420|  3.79k|        std::size_t options_available = N;
 3421|  3.79k|        std::size_t chars_consumed = 0;
 3422|  8.75k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.54k, False: 3.21k]
  ------------------
 3423|  8.75k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.99k, False: 554]
  ------------------
 3424|  4.99k|            std::size_t i = 0;
 3425|  4.99k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 4.96k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  4.96k|            const auto ch = *m_begin;
 3430|  4.96k|            ++m_begin;
 3431|  47.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.9k, False: 4.96k]
  ------------------
 3432|  42.9k|                const auto cmp = static_cast<unsigned>(
 3433|  42.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.9k]
  ------------------
 3435|  42.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.7k, False: 1.15k]
  |  Branch (3435:34): [True: 41.1k, False: 636]
  ------------------
 3436|  41.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.1k|                                options.end());
 3438|  41.1k|                    --options_available;
 3439|  41.1k|                    continue;
 3440|  41.1k|                }
 3441|  1.79k|                ++i;
 3442|  1.79k|            }
 3443|  4.96k|            ++chars_consumed;
 3444|  4.96k|        }
 3445|  3.79k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.24k, False: 554]
  ------------------
 3446|  3.24k|            m_begin = start_it;
 3447|  3.24k|            return std::nullopt;
 3448|  3.24k|        }
 3449|    554|        return options.front().second;
 3450|  3.79k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.54k|    {
 2848|  6.54k|#if !SCN_DISABLE_LOCALE
 2849|  6.54k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.54k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.54k|#endif
 2856|       |
 2857|  6.54k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.54k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.54k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.52k|    {
 2880|  6.52k|#if !SCN_DISABLE_LOCALE
 2881|  6.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.52k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.52k|#endif
 2888|       |
 2889|  6.52k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.52k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.52k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.52k|    {
 2198|  6.52k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.48k, False: 44]
  |  |  |  Branch (865:45): [True: 6.47k, False: 52]
  |  |  |  Branch (865:45): [True: 8, False: 44]
  |  |  ------------------
  ------------------
 2199|  6.48k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.48k|                                "Invalid value for tm_mday"});
 2201|  6.48k|        }
 2202|     44|        t.tm_mday = d;
 2203|     44|        st.set_mday(h);
 2204|     44|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.25k|    {
 2895|  3.25k|#if !SCN_DISABLE_LOCALE
 2896|  3.25k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.25k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.25k|#endif
 2903|       |
 2904|  3.25k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.25k|            {"Sunday", 0},
 2906|  3.25k|            {"Monday", 1},
 2907|  3.25k|            {"Tuesday", 2},
 2908|  3.25k|            {"Wednesday", 3},
 2909|  3.25k|            {"Thursday", 4},
 2910|  3.25k|            {"Friday", 5},
 2911|  3.25k|            {"Saturday", 6},
 2912|  3.25k|        }};
 2913|  3.25k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.25k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.25k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.25k|            {"Sun", 0},
 2918|  3.25k|            {"Mon", 1},
 2919|  3.25k|            {"Tue", 2},
 2920|  3.25k|            {"Wed", 3},
 2921|  3.25k|            {"Thu", 4},
 2922|  3.25k|            {"Fri", 5},
 2923|  3.25k|            {"Sat", 6},
 2924|  3.25k|        }};
 2925|  3.25k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.25k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.25k|        return set_error(
 2929|  3.25k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.51k|    {
 3419|  6.51k|        auto start_it = m_begin;
 3420|  6.51k|        std::size_t options_available = N;
 3421|  6.51k|        std::size_t chars_consumed = 0;
 3422|  13.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.68k, False: 6.49k]
  ------------------
 3423|  13.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.68k, False: 0]
  ------------------
 3424|  6.68k|            std::size_t i = 0;
 3425|  6.68k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.66k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.66k|            const auto ch = *m_begin;
 3430|  6.66k|            ++m_begin;
 3431|  52.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.7k, False: 6.66k]
  ------------------
 3432|  45.7k|                const auto cmp = static_cast<unsigned>(
 3433|  45.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.7k]
  ------------------
 3435|  45.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.5k, False: 184]
  |  Branch (3435:34): [True: 45.5k, False: 16]
  ------------------
 3436|  45.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.5k|                                options.end());
 3438|  45.5k|                    --options_available;
 3439|  45.5k|                    continue;
 3440|  45.5k|                }
 3441|    200|                ++i;
 3442|    200|            }
 3443|  6.66k|            ++chars_consumed;
 3444|  6.66k|        }
 3445|  6.51k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.51k, False: 0]
  ------------------
 3446|  6.51k|            m_begin = start_it;
 3447|  6.51k|            return std::nullopt;
 3448|  6.51k|        }
 3449|      0|        return options.front().second;
 3450|  6.51k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  13.0k|    {
 2969|  13.0k|#if !SCN_DISABLE_LOCALE
 2970|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.0k|#endif
 2977|       |
 2978|  13.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  13.0k|    {
 2178|  13.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.05k, False: 7.02k]
  |  |  |  Branch (865:45): [True: 6.00k, False: 7.07k]
  |  |  |  Branch (865:45): [True: 50, False: 7.02k]
  |  |  ------------------
  ------------------
 2179|  6.05k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  6.05k|                                  "Invalid value for tm_hour"});
 2181|  6.05k|        }
 2182|  7.02k|        t.tm_hour = h;
 2183|  7.02k|        st.set_hour24(hdl);
 2184|  7.02k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  13.0k|    {
 2997|  13.0k|#if !SCN_DISABLE_LOCALE
 2998|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.0k|#endif
 3005|       |
 3006|  13.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  13.0k|    {
 2168|  13.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.12k, False: 6.95k]
  |  |  |  Branch (865:45): [True: 6.11k, False: 6.96k]
  |  |  |  Branch (865:45): [True: 14, False: 6.95k]
  |  |  ------------------
  ------------------
 2169|  6.12k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  6.12k|                                "Invalid value for tm_min"});
 2171|  6.12k|        }
 2172|  6.95k|        t.tm_min = m;
 2173|  6.95k|        st.set_min(h);
 2174|  6.95k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.35k|    {
 3011|  3.35k|#if !SCN_DISABLE_LOCALE
 3012|  3.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.35k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.35k|#endif
 3019|       |
 3020|  3.35k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.35k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.35k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.35k|    {
 2158|  3.35k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.23k, False: 126]
  |  |  |  Branch (865:45): [True: 3.22k, False: 128]
  |  |  |  Branch (865:45): [True: 2, False: 126]
  |  |  ------------------
  ------------------
 2159|  3.23k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.23k|                                "Invalid value for tm_sec"});
 2161|  3.23k|        }
 2162|    126|        t.tm_sec = s;
 2163|    126|        st.set_sec(h);
 2164|    126|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.26k|    {
 3253|       |        // %m/%d/%y
 3254|  3.26k|        constexpr CharT slash = '/';
 3255|  3.26k|        on_dec_month();
 3256|  3.26k|        on_text(&slash, &slash + 1);
 3257|  3.26k|        on_day_of_month();
 3258|  3.26k|        on_text(&slash, &slash + 1);
 3259|  3.26k|        on_short_year();
 3260|  3.26k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.25k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.25k|        constexpr CharT dash = '-';
 3265|  3.25k|        on_full_year();
 3266|  3.25k|        on_text(&dash, &dash + 1);
 3267|  3.25k|        on_dec_month();
 3268|  3.25k|        on_text(&dash, &dash + 1);
 3269|  3.25k|        on_day_of_month();
 3270|  3.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  9.72k|    {
 3295|       |        // %H:%M
 3296|  9.72k|        constexpr CharT colon = ':';
 3297|  9.72k|        on_24_hour();
 3298|  9.72k|        on_text(&colon, &colon + 1);
 3299|  9.72k|        on_minute();
 3300|  9.72k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.35k|    {
 3303|       |        // %H:%M:%S
 3304|  3.35k|        constexpr CharT colon = ':';
 3305|  3.35k|        on_24_hour();
 3306|  3.35k|        on_text(&colon, &colon + 1);
 3307|  3.35k|        on_minute();
 3308|  3.35k|        on_text(&colon, &colon + 1);
 3309|  3.35k|        on_second();
 3310|  3.35k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  7.19k|    {
 3342|  7.19k|        m_st.verify(*this);
 3343|  7.19k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 7.19k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  7.19k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 7.19k, False: 2]
  |  Branch (3346:37): [True: 10, False: 7.18k]
  |  Branch (3346:60): [True: 0, False: 7.18k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  7.19k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  59.8k|    {
 3353|  59.8k|        return m_error;
 3354|  59.8k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  7.19k|    {
 3370|  7.19k|        return m_begin;
 3371|  7.19k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  30.2k|{
 3563|  30.2k|    {
 3564|  30.2k|        SCN_TRY(it,
  ------------------
  |  | 3940|  30.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 344, False: 29.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    344|    }                                                  \
  |  |  |  | 3939|  30.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  29.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  29.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  29.9k|    static_cast<    \
  |  |  935|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  29.9k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  29.9k|        ctx.range(), t, ctx.locale());
 3571|  29.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  29.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.7k, False: 7.19k]
  |  |  ------------------
  ------------------
 3573|  22.7k|        return unexpected(e.error());
 3574|  22.7k|    }
 3575|  7.19k|    return r.get_iterator();
 3576|  29.9k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  90.8k|{
  250|  90.8k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  90.8k|        .transform_error(impl::make_eof_scan_error);
  252|  90.8k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  29.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  29.9k|    static_cast<    \
  |  |  935|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  29.9k|          m_begin(ranges::begin(m_range)),
 2708|  29.9k|          m_tm(t),
 2709|  29.9k|          m_loc(loc)
 2710|  29.9k|    {
 2711|  29.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  22.1k|    {
 3358|  22.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  97.7k|    {
 3363|  97.7k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 22.7k, False: 75.0k]
  ------------------
 3364|  22.7k|            m_error = unexpected(e);
 3365|  22.7k|        }
 3366|  97.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  29.5k|    {
 2715|  36.7k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 29.5k, False: 7.21k]
  ------------------
 2716|  29.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 112, False: 29.3k]
  ------------------
 2717|    112|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    112|            }
 2719|  29.3k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.1k, False: 7.21k]
  ------------------
 2720|  22.1k|                return on_error("Invalid literal character");
 2721|  22.1k|            }
 2722|  7.21k|            ++beg;
 2723|  7.21k|            ++m_begin;
 2724|  7.21k|        }
 2725|  29.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.51k|    {
 2745|  6.51k|#if !SCN_DISABLE_LOCALE
 2746|  6.51k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.51k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.51k|#endif
 2753|       |
 2754|  6.51k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.51k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.51k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.51k|    {
 2218|  6.51k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.51k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.51k|        t.tm_year = y - 1900;
 2223|  6.51k|        st.set_full_year(h);
 2224|  6.51k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  52.3k|    {
 3381|  52.3k|        int digits_read = 0;
 3382|  52.3k|        int accumulator = 0;
 3383|  67.8k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 67.5k, False: 240]
  ------------------
 3384|  67.5k|            const auto ch = *m_begin;
 3385|  67.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.0k, False: 38.5k]
  |  Branch (3385:36): [True: 20.6k, False: 17.8k]
  ------------------
 3386|  49.7k|                break;
 3387|  49.7k|            }
 3388|  17.8k|            ++m_begin;
 3389|  17.8k|            ++digits_read;
 3390|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.39k, False: 15.4k]
  ------------------
 3392|  2.39k|                break;
 3393|  2.39k|            }
 3394|  17.8k|        }
 3395|  52.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 37.6k, False: 14.6k]
  ------------------
 3396|  37.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  37.6k|                                 "Too few integer digits"});
 3398|  37.6k|            return -1;
 3399|  37.6k|        }
 3400|  14.6k|        return accumulator;
 3401|  52.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.26k|    {
 2759|  3.26k|#if !SCN_DISABLE_LOCALE
 2760|  3.26k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.26k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.26k|#endif
 2768|       |
 2769|  3.26k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.26k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.26k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.26k|    {
 2235|  3.26k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.24k, False: 18]
  |  |  |  Branch (865:45): [True: 3.24k, False: 18]
  |  |  |  Branch (865:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2236|  3.24k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.24k|                                "Invalid value for tm_year"});
 2238|  3.24k|        }
 2239|     18|        st.short_year_value = y;
 2240|     18|        st.set_short_year(h);
 2241|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.81k|    {
 2802|  3.81k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.81k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.81k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.81k|#endif
 2810|       |
 2811|  3.81k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.81k|            {"January", 1},
 2813|  3.81k|            {"February", 2},
 2814|  3.81k|            {"March", 3},
 2815|  3.81k|            {"April", 4},
 2816|  3.81k|            {"May", 5},
 2817|  3.81k|            {"June", 6},
 2818|  3.81k|            {"July", 7},
 2819|  3.81k|            {"August", 8},
 2820|  3.81k|            {"September", 9},
 2821|  3.81k|            {"October", 10},
 2822|  3.81k|            {"November", 11},
 2823|  3.81k|            {"December", 12},
 2824|  3.81k|        }};
 2825|  3.81k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 22, False: 3.79k]
  ------------------
 2826|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     22|        }
 2828|  3.79k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.79k|            {"Jan", 1},
 2830|  3.79k|            {"Feb", 2},
 2831|  3.79k|            {"Mar", 3},
 2832|  3.79k|            {"Apr", 4},
 2833|  3.79k|            {"Jun", 6},
 2834|  3.79k|            {"Jul", 7},
 2835|  3.79k|            {"Aug", 8},
 2836|  3.79k|            {"Sep", 9},
 2837|  3.79k|            {"Oct", 10},
 2838|  3.79k|            {"Nov", 11},
 2839|  3.79k|            {"Dec", 12},
 2840|  3.79k|        }};
 2841|  3.79k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 554, False: 3.24k]
  ------------------
 2842|    554|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    554|        }
 2844|  3.24k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.24k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  7.11k|    {
 2208|  7.11k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.18k, False: 932]
  |  |  |  Branch (865:45): [True: 6.14k, False: 970]
  |  |  |  Branch (865:45): [True: 38, False: 932]
  |  |  ------------------
  ------------------
 2209|  6.18k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  6.18k|                                "Invalid value for tm_mon"});
 2211|  6.18k|        }
 2212|    932|        t.tm_mon = m - 1;
 2213|    932|        st.set_mon(h);
 2214|    932|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.81k|    {
 3419|  3.81k|        auto start_it = m_begin;
 3420|  3.81k|        std::size_t options_available = N;
 3421|  3.81k|        std::size_t chars_consumed = 0;
 3422|  9.39k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.63k, False: 3.75k]
  ------------------
 3423|  9.39k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.61k, False: 22]
  ------------------
 3424|  5.61k|            std::size_t i = 0;
 3425|  5.61k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 5.57k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  5.57k|            const auto ch = *m_begin;
 3430|  5.57k|            ++m_begin;
 3431|  54.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 48.7k, False: 5.57k]
  ------------------
 3432|  48.7k|                const auto cmp = static_cast<unsigned>(
 3433|  48.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  48.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 48.7k]
  ------------------
 3435|  48.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.4k, False: 2.35k]
  |  Branch (3435:34): [True: 45.7k, False: 688]
  ------------------
 3436|  45.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.7k|                                options.end());
 3438|  45.7k|                    --options_available;
 3439|  45.7k|                    continue;
 3440|  45.7k|                }
 3441|  3.04k|                ++i;
 3442|  3.04k|            }
 3443|  5.57k|            ++chars_consumed;
 3444|  5.57k|        }
 3445|  3.81k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.79k, False: 22]
  ------------------
 3446|  3.79k|            m_begin = start_it;
 3447|  3.79k|            return std::nullopt;
 3448|  3.79k|        }
 3449|     22|        return options.front().second;
 3450|  3.81k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.79k|    {
 3419|  3.79k|        auto start_it = m_begin;
 3420|  3.79k|        std::size_t options_available = N;
 3421|  3.79k|        std::size_t chars_consumed = 0;
 3422|  8.75k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.54k, False: 3.21k]
  ------------------
 3423|  8.75k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.99k, False: 554]
  ------------------
 3424|  4.99k|            std::size_t i = 0;
 3425|  4.99k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 4.96k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  4.96k|            const auto ch = *m_begin;
 3430|  4.96k|            ++m_begin;
 3431|  47.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.9k, False: 4.96k]
  ------------------
 3432|  42.9k|                const auto cmp = static_cast<unsigned>(
 3433|  42.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.9k]
  ------------------
 3435|  42.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.7k, False: 1.15k]
  |  Branch (3435:34): [True: 41.1k, False: 636]
  ------------------
 3436|  41.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.1k|                                options.end());
 3438|  41.1k|                    --options_available;
 3439|  41.1k|                    continue;
 3440|  41.1k|                }
 3441|  1.79k|                ++i;
 3442|  1.79k|            }
 3443|  4.96k|            ++chars_consumed;
 3444|  4.96k|        }
 3445|  3.79k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.24k, False: 554]
  ------------------
 3446|  3.24k|            m_begin = start_it;
 3447|  3.24k|            return std::nullopt;
 3448|  3.24k|        }
 3449|    554|        return options.front().second;
 3450|  3.79k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.54k|    {
 2848|  6.54k|#if !SCN_DISABLE_LOCALE
 2849|  6.54k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.54k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.54k|#endif
 2856|       |
 2857|  6.54k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.54k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.54k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.52k|    {
 2880|  6.52k|#if !SCN_DISABLE_LOCALE
 2881|  6.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.52k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.52k|#endif
 2888|       |
 2889|  6.52k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.52k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.52k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.52k|    {
 2198|  6.52k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.48k, False: 44]
  |  |  |  Branch (865:45): [True: 6.47k, False: 52]
  |  |  |  Branch (865:45): [True: 8, False: 44]
  |  |  ------------------
  ------------------
 2199|  6.48k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.48k|                                "Invalid value for tm_mday"});
 2201|  6.48k|        }
 2202|     44|        t.tm_mday = d;
 2203|     44|        st.set_mday(h);
 2204|     44|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.25k|    {
 2895|  3.25k|#if !SCN_DISABLE_LOCALE
 2896|  3.25k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.25k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.25k|#endif
 2903|       |
 2904|  3.25k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.25k|            {"Sunday", 0},
 2906|  3.25k|            {"Monday", 1},
 2907|  3.25k|            {"Tuesday", 2},
 2908|  3.25k|            {"Wednesday", 3},
 2909|  3.25k|            {"Thursday", 4},
 2910|  3.25k|            {"Friday", 5},
 2911|  3.25k|            {"Saturday", 6},
 2912|  3.25k|        }};
 2913|  3.25k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.25k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.25k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.25k|            {"Sun", 0},
 2918|  3.25k|            {"Mon", 1},
 2919|  3.25k|            {"Tue", 2},
 2920|  3.25k|            {"Wed", 3},
 2921|  3.25k|            {"Thu", 4},
 2922|  3.25k|            {"Fri", 5},
 2923|  3.25k|            {"Sat", 6},
 2924|  3.25k|        }};
 2925|  3.25k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.25k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.25k|        return set_error(
 2929|  3.25k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.51k|    {
 3419|  6.51k|        auto start_it = m_begin;
 3420|  6.51k|        std::size_t options_available = N;
 3421|  6.51k|        std::size_t chars_consumed = 0;
 3422|  13.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.68k, False: 6.49k]
  ------------------
 3423|  13.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.68k, False: 0]
  ------------------
 3424|  6.68k|            std::size_t i = 0;
 3425|  6.68k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.66k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.66k|            const auto ch = *m_begin;
 3430|  6.66k|            ++m_begin;
 3431|  52.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.7k, False: 6.66k]
  ------------------
 3432|  45.7k|                const auto cmp = static_cast<unsigned>(
 3433|  45.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.7k]
  ------------------
 3435|  45.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.5k, False: 184]
  |  Branch (3435:34): [True: 45.5k, False: 16]
  ------------------
 3436|  45.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.5k|                                options.end());
 3438|  45.5k|                    --options_available;
 3439|  45.5k|                    continue;
 3440|  45.5k|                }
 3441|    200|                ++i;
 3442|    200|            }
 3443|  6.66k|            ++chars_consumed;
 3444|  6.66k|        }
 3445|  6.51k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.51k, False: 0]
  ------------------
 3446|  6.51k|            m_begin = start_it;
 3447|  6.51k|            return std::nullopt;
 3448|  6.51k|        }
 3449|      0|        return options.front().second;
 3450|  6.51k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  13.0k|    {
 2969|  13.0k|#if !SCN_DISABLE_LOCALE
 2970|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.0k|#endif
 2977|       |
 2978|  13.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  13.0k|    {
 2178|  13.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.05k, False: 7.02k]
  |  |  |  Branch (865:45): [True: 6.00k, False: 7.07k]
  |  |  |  Branch (865:45): [True: 50, False: 7.02k]
  |  |  ------------------
  ------------------
 2179|  6.05k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  6.05k|                                  "Invalid value for tm_hour"});
 2181|  6.05k|        }
 2182|  7.02k|        t.tm_hour = h;
 2183|  7.02k|        st.set_hour24(hdl);
 2184|  7.02k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  13.0k|    {
 2997|  13.0k|#if !SCN_DISABLE_LOCALE
 2998|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.0k|#endif
 3005|       |
 3006|  13.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  13.0k|    {
 2168|  13.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.12k, False: 6.95k]
  |  |  |  Branch (865:45): [True: 6.11k, False: 6.96k]
  |  |  |  Branch (865:45): [True: 14, False: 6.95k]
  |  |  ------------------
  ------------------
 2169|  6.12k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  6.12k|                                "Invalid value for tm_min"});
 2171|  6.12k|        }
 2172|  6.95k|        t.tm_min = m;
 2173|  6.95k|        st.set_min(h);
 2174|  6.95k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.35k|    {
 3011|  3.35k|#if !SCN_DISABLE_LOCALE
 3012|  3.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.35k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.35k|#endif
 3019|       |
 3020|  3.35k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.35k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.35k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.35k|    {
 2158|  3.35k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.23k, False: 126]
  |  |  |  Branch (865:45): [True: 3.22k, False: 128]
  |  |  |  Branch (865:45): [True: 2, False: 126]
  |  |  ------------------
  ------------------
 2159|  3.23k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.23k|                                "Invalid value for tm_sec"});
 2161|  3.23k|        }
 2162|    126|        t.tm_sec = s;
 2163|    126|        st.set_sec(h);
 2164|    126|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.26k|    {
 3253|       |        // %m/%d/%y
 3254|  3.26k|        constexpr CharT slash = '/';
 3255|  3.26k|        on_dec_month();
 3256|  3.26k|        on_text(&slash, &slash + 1);
 3257|  3.26k|        on_day_of_month();
 3258|  3.26k|        on_text(&slash, &slash + 1);
 3259|  3.26k|        on_short_year();
 3260|  3.26k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.25k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.25k|        constexpr CharT dash = '-';
 3265|  3.25k|        on_full_year();
 3266|  3.25k|        on_text(&dash, &dash + 1);
 3267|  3.25k|        on_dec_month();
 3268|  3.25k|        on_text(&dash, &dash + 1);
 3269|  3.25k|        on_day_of_month();
 3270|  3.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  9.72k|    {
 3295|       |        // %H:%M
 3296|  9.72k|        constexpr CharT colon = ':';
 3297|  9.72k|        on_24_hour();
 3298|  9.72k|        on_text(&colon, &colon + 1);
 3299|  9.72k|        on_minute();
 3300|  9.72k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.35k|    {
 3303|       |        // %H:%M:%S
 3304|  3.35k|        constexpr CharT colon = ':';
 3305|  3.35k|        on_24_hour();
 3306|  3.35k|        on_text(&colon, &colon + 1);
 3307|  3.35k|        on_minute();
 3308|  3.35k|        on_text(&colon, &colon + 1);
 3309|  3.35k|        on_second();
 3310|  3.35k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  7.19k|    {
 3342|  7.19k|        m_st.verify(*this);
 3343|  7.19k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 7.19k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  7.19k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 7.19k, False: 2]
  |  Branch (3346:37): [True: 10, False: 7.18k]
  |  Branch (3346:60): [True: 0, False: 7.18k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  7.19k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  59.8k|    {
 3353|  59.8k|        return m_error;
 3354|  59.8k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  7.19k|    {
 3370|  7.19k|        return m_begin;
 3371|  7.19k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  30.2k|{
 3563|  30.2k|    {
 3564|  30.2k|        SCN_TRY(it,
  ------------------
  |  | 3940|  30.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 344, False: 29.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    344|    }                                                  \
  |  |  |  | 3939|  30.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  29.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  29.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  29.9k|    static_cast<    \
  |  |  935|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  29.9k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  29.9k|        ctx.range(), t, ctx.locale());
 3571|  29.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  29.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.7k, False: 7.19k]
  |  |  ------------------
  ------------------
 3573|  22.7k|        return unexpected(e.error());
 3574|  22.7k|    }
 3575|  7.19k|    return r.get_iterator();
 3576|  29.9k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  29.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  29.9k|    static_cast<    \
  |  |  935|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  29.9k|          m_begin(ranges::begin(m_range)),
 2708|  29.9k|          m_tm(t),
 2709|  29.9k|          m_loc(loc)
 2710|  29.9k|    {
 2711|  29.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  22.1k|    {
 3358|  22.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  97.7k|    {
 3363|  97.7k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 22.7k, False: 75.0k]
  ------------------
 3364|  22.7k|            m_error = unexpected(e);
 3365|  22.7k|        }
 3366|  97.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  29.5k|    {
 2715|  36.7k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 29.5k, False: 7.21k]
  ------------------
 2716|  29.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 112, False: 29.3k]
  ------------------
 2717|    112|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    112|            }
 2719|  29.3k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.1k, False: 7.21k]
  ------------------
 2720|  22.1k|                return on_error("Invalid literal character");
 2721|  22.1k|            }
 2722|  7.21k|            ++beg;
 2723|  7.21k|            ++m_begin;
 2724|  7.21k|        }
 2725|  29.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.51k|    {
 2745|  6.51k|#if !SCN_DISABLE_LOCALE
 2746|  6.51k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.51k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.51k|#endif
 2753|       |
 2754|  6.51k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.51k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.51k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.51k|    {
 2218|  6.51k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.51k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.51k|        t.tm_year = y - 1900;
 2223|  6.51k|        st.set_full_year(h);
 2224|  6.51k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  52.3k|    {
 3381|  52.3k|        int digits_read = 0;
 3382|  52.3k|        int accumulator = 0;
 3383|  67.8k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 67.5k, False: 240]
  ------------------
 3384|  67.5k|            const auto ch = *m_begin;
 3385|  67.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.0k, False: 38.5k]
  |  Branch (3385:36): [True: 20.6k, False: 17.8k]
  ------------------
 3386|  49.7k|                break;
 3387|  49.7k|            }
 3388|  17.8k|            ++m_begin;
 3389|  17.8k|            ++digits_read;
 3390|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.39k, False: 15.4k]
  ------------------
 3392|  2.39k|                break;
 3393|  2.39k|            }
 3394|  17.8k|        }
 3395|  52.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 37.6k, False: 14.6k]
  ------------------
 3396|  37.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  37.6k|                                 "Too few integer digits"});
 3398|  37.6k|            return -1;
 3399|  37.6k|        }
 3400|  14.6k|        return accumulator;
 3401|  52.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.26k|    {
 2759|  3.26k|#if !SCN_DISABLE_LOCALE
 2760|  3.26k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.26k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.26k|#endif
 2768|       |
 2769|  3.26k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.26k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.26k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.26k|    {
 2235|  3.26k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.24k, False: 18]
  |  |  |  Branch (865:45): [True: 3.24k, False: 18]
  |  |  |  Branch (865:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2236|  3.24k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.24k|                                "Invalid value for tm_year"});
 2238|  3.24k|        }
 2239|     18|        st.short_year_value = y;
 2240|     18|        st.set_short_year(h);
 2241|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.81k|    {
 2802|  3.81k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.81k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.81k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.81k|#endif
 2810|       |
 2811|  3.81k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.81k|            {"January", 1},
 2813|  3.81k|            {"February", 2},
 2814|  3.81k|            {"March", 3},
 2815|  3.81k|            {"April", 4},
 2816|  3.81k|            {"May", 5},
 2817|  3.81k|            {"June", 6},
 2818|  3.81k|            {"July", 7},
 2819|  3.81k|            {"August", 8},
 2820|  3.81k|            {"September", 9},
 2821|  3.81k|            {"October", 10},
 2822|  3.81k|            {"November", 11},
 2823|  3.81k|            {"December", 12},
 2824|  3.81k|        }};
 2825|  3.81k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 22, False: 3.79k]
  ------------------
 2826|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     22|        }
 2828|  3.79k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.79k|            {"Jan", 1},
 2830|  3.79k|            {"Feb", 2},
 2831|  3.79k|            {"Mar", 3},
 2832|  3.79k|            {"Apr", 4},
 2833|  3.79k|            {"Jun", 6},
 2834|  3.79k|            {"Jul", 7},
 2835|  3.79k|            {"Aug", 8},
 2836|  3.79k|            {"Sep", 9},
 2837|  3.79k|            {"Oct", 10},
 2838|  3.79k|            {"Nov", 11},
 2839|  3.79k|            {"Dec", 12},
 2840|  3.79k|        }};
 2841|  3.79k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 554, False: 3.24k]
  ------------------
 2842|    554|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    554|        }
 2844|  3.24k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.24k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  7.11k|    {
 2208|  7.11k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.18k, False: 932]
  |  |  |  Branch (865:45): [True: 6.14k, False: 970]
  |  |  |  Branch (865:45): [True: 38, False: 932]
  |  |  ------------------
  ------------------
 2209|  6.18k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  6.18k|                                "Invalid value for tm_mon"});
 2211|  6.18k|        }
 2212|    932|        t.tm_mon = m - 1;
 2213|    932|        st.set_mon(h);
 2214|    932|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.81k|    {
 3419|  3.81k|        auto start_it = m_begin;
 3420|  3.81k|        std::size_t options_available = N;
 3421|  3.81k|        std::size_t chars_consumed = 0;
 3422|  9.39k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.63k, False: 3.75k]
  ------------------
 3423|  9.39k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.61k, False: 22]
  ------------------
 3424|  5.61k|            std::size_t i = 0;
 3425|  5.61k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 5.57k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  5.57k|            const auto ch = *m_begin;
 3430|  5.57k|            ++m_begin;
 3431|  54.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 48.7k, False: 5.57k]
  ------------------
 3432|  48.7k|                const auto cmp = static_cast<unsigned>(
 3433|  48.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  48.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 48.7k]
  ------------------
 3435|  48.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.4k, False: 2.35k]
  |  Branch (3435:34): [True: 45.7k, False: 688]
  ------------------
 3436|  45.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.7k|                                options.end());
 3438|  45.7k|                    --options_available;
 3439|  45.7k|                    continue;
 3440|  45.7k|                }
 3441|  3.04k|                ++i;
 3442|  3.04k|            }
 3443|  5.57k|            ++chars_consumed;
 3444|  5.57k|        }
 3445|  3.81k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.79k, False: 22]
  ------------------
 3446|  3.79k|            m_begin = start_it;
 3447|  3.79k|            return std::nullopt;
 3448|  3.79k|        }
 3449|     22|        return options.front().second;
 3450|  3.81k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.79k|    {
 3419|  3.79k|        auto start_it = m_begin;
 3420|  3.79k|        std::size_t options_available = N;
 3421|  3.79k|        std::size_t chars_consumed = 0;
 3422|  8.75k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.54k, False: 3.21k]
  ------------------
 3423|  8.75k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.99k, False: 554]
  ------------------
 3424|  4.99k|            std::size_t i = 0;
 3425|  4.99k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 4.96k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  4.96k|            const auto ch = *m_begin;
 3430|  4.96k|            ++m_begin;
 3431|  47.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.9k, False: 4.96k]
  ------------------
 3432|  42.9k|                const auto cmp = static_cast<unsigned>(
 3433|  42.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.9k]
  ------------------
 3435|  42.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.7k, False: 1.15k]
  |  Branch (3435:34): [True: 41.1k, False: 636]
  ------------------
 3436|  41.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.1k|                                options.end());
 3438|  41.1k|                    --options_available;
 3439|  41.1k|                    continue;
 3440|  41.1k|                }
 3441|  1.79k|                ++i;
 3442|  1.79k|            }
 3443|  4.96k|            ++chars_consumed;
 3444|  4.96k|        }
 3445|  3.79k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.24k, False: 554]
  ------------------
 3446|  3.24k|            m_begin = start_it;
 3447|  3.24k|            return std::nullopt;
 3448|  3.24k|        }
 3449|    554|        return options.front().second;
 3450|  3.79k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.54k|    {
 2848|  6.54k|#if !SCN_DISABLE_LOCALE
 2849|  6.54k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.54k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.54k|#endif
 2856|       |
 2857|  6.54k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.54k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.54k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.52k|    {
 2880|  6.52k|#if !SCN_DISABLE_LOCALE
 2881|  6.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.52k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.52k|#endif
 2888|       |
 2889|  6.52k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.52k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.52k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.52k|    {
 2198|  6.52k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.48k, False: 44]
  |  |  |  Branch (865:45): [True: 6.47k, False: 52]
  |  |  |  Branch (865:45): [True: 8, False: 44]
  |  |  ------------------
  ------------------
 2199|  6.48k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.48k|                                "Invalid value for tm_mday"});
 2201|  6.48k|        }
 2202|     44|        t.tm_mday = d;
 2203|     44|        st.set_mday(h);
 2204|     44|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.25k|    {
 2895|  3.25k|#if !SCN_DISABLE_LOCALE
 2896|  3.25k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.25k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.25k|#endif
 2903|       |
 2904|  3.25k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.25k|            {"Sunday", 0},
 2906|  3.25k|            {"Monday", 1},
 2907|  3.25k|            {"Tuesday", 2},
 2908|  3.25k|            {"Wednesday", 3},
 2909|  3.25k|            {"Thursday", 4},
 2910|  3.25k|            {"Friday", 5},
 2911|  3.25k|            {"Saturday", 6},
 2912|  3.25k|        }};
 2913|  3.25k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.25k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.25k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.25k|            {"Sun", 0},
 2918|  3.25k|            {"Mon", 1},
 2919|  3.25k|            {"Tue", 2},
 2920|  3.25k|            {"Wed", 3},
 2921|  3.25k|            {"Thu", 4},
 2922|  3.25k|            {"Fri", 5},
 2923|  3.25k|            {"Sat", 6},
 2924|  3.25k|        }};
 2925|  3.25k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.25k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.25k|        return set_error(
 2929|  3.25k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.51k|    {
 3419|  6.51k|        auto start_it = m_begin;
 3420|  6.51k|        std::size_t options_available = N;
 3421|  6.51k|        std::size_t chars_consumed = 0;
 3422|  13.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.68k, False: 6.49k]
  ------------------
 3423|  13.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.68k, False: 0]
  ------------------
 3424|  6.68k|            std::size_t i = 0;
 3425|  6.68k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.66k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.66k|            const auto ch = *m_begin;
 3430|  6.66k|            ++m_begin;
 3431|  52.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.7k, False: 6.66k]
  ------------------
 3432|  45.7k|                const auto cmp = static_cast<unsigned>(
 3433|  45.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.7k]
  ------------------
 3435|  45.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.5k, False: 184]
  |  Branch (3435:34): [True: 45.5k, False: 16]
  ------------------
 3436|  45.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.5k|                                options.end());
 3438|  45.5k|                    --options_available;
 3439|  45.5k|                    continue;
 3440|  45.5k|                }
 3441|    200|                ++i;
 3442|    200|            }
 3443|  6.66k|            ++chars_consumed;
 3444|  6.66k|        }
 3445|  6.51k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.51k, False: 0]
  ------------------
 3446|  6.51k|            m_begin = start_it;
 3447|  6.51k|            return std::nullopt;
 3448|  6.51k|        }
 3449|      0|        return options.front().second;
 3450|  6.51k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  13.0k|    {
 2969|  13.0k|#if !SCN_DISABLE_LOCALE
 2970|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.0k|#endif
 2977|       |
 2978|  13.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  13.0k|    {
 2178|  13.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.05k, False: 7.02k]
  |  |  |  Branch (865:45): [True: 6.00k, False: 7.07k]
  |  |  |  Branch (865:45): [True: 50, False: 7.02k]
  |  |  ------------------
  ------------------
 2179|  6.05k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  6.05k|                                  "Invalid value for tm_hour"});
 2181|  6.05k|        }
 2182|  7.02k|        t.tm_hour = h;
 2183|  7.02k|        st.set_hour24(hdl);
 2184|  7.02k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  13.0k|    {
 2997|  13.0k|#if !SCN_DISABLE_LOCALE
 2998|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.0k|#endif
 3005|       |
 3006|  13.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  13.0k|    {
 2168|  13.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.12k, False: 6.95k]
  |  |  |  Branch (865:45): [True: 6.11k, False: 6.96k]
  |  |  |  Branch (865:45): [True: 14, False: 6.95k]
  |  |  ------------------
  ------------------
 2169|  6.12k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  6.12k|                                "Invalid value for tm_min"});
 2171|  6.12k|        }
 2172|  6.95k|        t.tm_min = m;
 2173|  6.95k|        st.set_min(h);
 2174|  6.95k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.35k|    {
 3011|  3.35k|#if !SCN_DISABLE_LOCALE
 3012|  3.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.35k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.35k|#endif
 3019|       |
 3020|  3.35k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.35k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.35k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.35k|    {
 2158|  3.35k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.23k, False: 126]
  |  |  |  Branch (865:45): [True: 3.22k, False: 128]
  |  |  |  Branch (865:45): [True: 2, False: 126]
  |  |  ------------------
  ------------------
 2159|  3.23k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.23k|                                "Invalid value for tm_sec"});
 2161|  3.23k|        }
 2162|    126|        t.tm_sec = s;
 2163|    126|        st.set_sec(h);
 2164|    126|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.26k|    {
 3253|       |        // %m/%d/%y
 3254|  3.26k|        constexpr CharT slash = '/';
 3255|  3.26k|        on_dec_month();
 3256|  3.26k|        on_text(&slash, &slash + 1);
 3257|  3.26k|        on_day_of_month();
 3258|  3.26k|        on_text(&slash, &slash + 1);
 3259|  3.26k|        on_short_year();
 3260|  3.26k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.25k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.25k|        constexpr CharT dash = '-';
 3265|  3.25k|        on_full_year();
 3266|  3.25k|        on_text(&dash, &dash + 1);
 3267|  3.25k|        on_dec_month();
 3268|  3.25k|        on_text(&dash, &dash + 1);
 3269|  3.25k|        on_day_of_month();
 3270|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  9.72k|    {
 3295|       |        // %H:%M
 3296|  9.72k|        constexpr CharT colon = ':';
 3297|  9.72k|        on_24_hour();
 3298|  9.72k|        on_text(&colon, &colon + 1);
 3299|  9.72k|        on_minute();
 3300|  9.72k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.35k|    {
 3303|       |        // %H:%M:%S
 3304|  3.35k|        constexpr CharT colon = ':';
 3305|  3.35k|        on_24_hour();
 3306|  3.35k|        on_text(&colon, &colon + 1);
 3307|  3.35k|        on_minute();
 3308|  3.35k|        on_text(&colon, &colon + 1);
 3309|  3.35k|        on_second();
 3310|  3.35k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  7.19k|    {
 3342|  7.19k|        m_st.verify(*this);
 3343|  7.19k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 7.19k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  7.19k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 7.19k, False: 2]
  |  Branch (3346:37): [True: 10, False: 7.18k]
  |  Branch (3346:60): [True: 0, False: 7.18k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  7.19k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  59.8k|    {
 3353|  59.8k|        return m_error;
 3354|  59.8k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  7.19k|    {
 3370|  7.19k|        return m_begin;
 3371|  7.19k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  30.2k|{
 3563|  30.2k|    {
 3564|  30.2k|        SCN_TRY(it,
  ------------------
  |  | 3940|  30.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 344, False: 29.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    344|    }                                                  \
  |  |  |  | 3939|  30.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  29.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  29.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  29.9k|    static_cast<    \
  |  |  935|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  29.9k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  29.9k|        ctx.range(), t, ctx.locale());
 3571|  29.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  29.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.7k, False: 7.19k]
  |  |  ------------------
  ------------------
 3573|  22.7k|        return unexpected(e.error());
 3574|  22.7k|    }
 3575|  7.19k|    return r.get_iterator();
 3576|  29.9k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  29.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  29.9k|    static_cast<    \
  |  |  935|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  29.9k|          m_begin(ranges::begin(m_range)),
 2708|  29.9k|          m_tm(t),
 2709|  29.9k|          m_loc(loc)
 2710|  29.9k|    {
 2711|  29.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  22.1k|    {
 3358|  22.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  97.7k|    {
 3363|  97.7k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 22.7k, False: 75.0k]
  ------------------
 3364|  22.7k|            m_error = unexpected(e);
 3365|  22.7k|        }
 3366|  97.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  29.5k|    {
 2715|  36.7k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 29.5k, False: 7.21k]
  ------------------
 2716|  29.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 112, False: 29.3k]
  ------------------
 2717|    112|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    112|            }
 2719|  29.3k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.1k, False: 7.21k]
  ------------------
 2720|  22.1k|                return on_error("Invalid literal character");
 2721|  22.1k|            }
 2722|  7.21k|            ++beg;
 2723|  7.21k|            ++m_begin;
 2724|  7.21k|        }
 2725|  29.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.51k|    {
 2745|  6.51k|#if !SCN_DISABLE_LOCALE
 2746|  6.51k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.51k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.51k|#endif
 2753|       |
 2754|  6.51k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.51k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.51k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.51k|    {
 2218|  6.51k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.51k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.51k|        t.tm_year = y - 1900;
 2223|  6.51k|        st.set_full_year(h);
 2224|  6.51k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  52.3k|    {
 3381|  52.3k|        int digits_read = 0;
 3382|  52.3k|        int accumulator = 0;
 3383|  67.8k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 67.5k, False: 240]
  ------------------
 3384|  67.5k|            const auto ch = *m_begin;
 3385|  67.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.0k, False: 38.5k]
  |  Branch (3385:36): [True: 20.6k, False: 17.8k]
  ------------------
 3386|  49.7k|                break;
 3387|  49.7k|            }
 3388|  17.8k|            ++m_begin;
 3389|  17.8k|            ++digits_read;
 3390|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.39k, False: 15.4k]
  ------------------
 3392|  2.39k|                break;
 3393|  2.39k|            }
 3394|  17.8k|        }
 3395|  52.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 37.6k, False: 14.6k]
  ------------------
 3396|  37.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  37.6k|                                 "Too few integer digits"});
 3398|  37.6k|            return -1;
 3399|  37.6k|        }
 3400|  14.6k|        return accumulator;
 3401|  52.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.26k|    {
 2759|  3.26k|#if !SCN_DISABLE_LOCALE
 2760|  3.26k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.26k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.26k|#endif
 2768|       |
 2769|  3.26k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.26k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.26k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.26k|    {
 2235|  3.26k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.24k, False: 18]
  |  |  |  Branch (865:45): [True: 3.24k, False: 18]
  |  |  |  Branch (865:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2236|  3.24k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.24k|                                "Invalid value for tm_year"});
 2238|  3.24k|        }
 2239|     18|        st.short_year_value = y;
 2240|     18|        st.set_short_year(h);
 2241|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.81k|    {
 2802|  3.81k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.81k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.81k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.81k|#endif
 2810|       |
 2811|  3.81k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.81k|            {"January", 1},
 2813|  3.81k|            {"February", 2},
 2814|  3.81k|            {"March", 3},
 2815|  3.81k|            {"April", 4},
 2816|  3.81k|            {"May", 5},
 2817|  3.81k|            {"June", 6},
 2818|  3.81k|            {"July", 7},
 2819|  3.81k|            {"August", 8},
 2820|  3.81k|            {"September", 9},
 2821|  3.81k|            {"October", 10},
 2822|  3.81k|            {"November", 11},
 2823|  3.81k|            {"December", 12},
 2824|  3.81k|        }};
 2825|  3.81k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 22, False: 3.79k]
  ------------------
 2826|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     22|        }
 2828|  3.79k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.79k|            {"Jan", 1},
 2830|  3.79k|            {"Feb", 2},
 2831|  3.79k|            {"Mar", 3},
 2832|  3.79k|            {"Apr", 4},
 2833|  3.79k|            {"Jun", 6},
 2834|  3.79k|            {"Jul", 7},
 2835|  3.79k|            {"Aug", 8},
 2836|  3.79k|            {"Sep", 9},
 2837|  3.79k|            {"Oct", 10},
 2838|  3.79k|            {"Nov", 11},
 2839|  3.79k|            {"Dec", 12},
 2840|  3.79k|        }};
 2841|  3.79k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 554, False: 3.24k]
  ------------------
 2842|    554|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    554|        }
 2844|  3.24k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.24k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  7.11k|    {
 2208|  7.11k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.18k, False: 932]
  |  |  |  Branch (865:45): [True: 6.14k, False: 970]
  |  |  |  Branch (865:45): [True: 38, False: 932]
  |  |  ------------------
  ------------------
 2209|  6.18k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  6.18k|                                "Invalid value for tm_mon"});
 2211|  6.18k|        }
 2212|    932|        t.tm_mon = m - 1;
 2213|    932|        st.set_mon(h);
 2214|    932|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.81k|    {
 3419|  3.81k|        auto start_it = m_begin;
 3420|  3.81k|        std::size_t options_available = N;
 3421|  3.81k|        std::size_t chars_consumed = 0;
 3422|  9.39k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.63k, False: 3.75k]
  ------------------
 3423|  9.39k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.61k, False: 22]
  ------------------
 3424|  5.61k|            std::size_t i = 0;
 3425|  5.61k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 5.57k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  5.57k|            const auto ch = *m_begin;
 3430|  5.57k|            ++m_begin;
 3431|  54.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 48.7k, False: 5.57k]
  ------------------
 3432|  48.7k|                const auto cmp = static_cast<unsigned>(
 3433|  48.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  48.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 48.7k]
  ------------------
 3435|  48.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.4k, False: 2.35k]
  |  Branch (3435:34): [True: 45.7k, False: 688]
  ------------------
 3436|  45.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.7k|                                options.end());
 3438|  45.7k|                    --options_available;
 3439|  45.7k|                    continue;
 3440|  45.7k|                }
 3441|  3.04k|                ++i;
 3442|  3.04k|            }
 3443|  5.57k|            ++chars_consumed;
 3444|  5.57k|        }
 3445|  3.81k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.79k, False: 22]
  ------------------
 3446|  3.79k|            m_begin = start_it;
 3447|  3.79k|            return std::nullopt;
 3448|  3.79k|        }
 3449|     22|        return options.front().second;
 3450|  3.81k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.79k|    {
 3419|  3.79k|        auto start_it = m_begin;
 3420|  3.79k|        std::size_t options_available = N;
 3421|  3.79k|        std::size_t chars_consumed = 0;
 3422|  8.75k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.54k, False: 3.21k]
  ------------------
 3423|  8.75k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.99k, False: 554]
  ------------------
 3424|  4.99k|            std::size_t i = 0;
 3425|  4.99k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 4.96k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  4.96k|            const auto ch = *m_begin;
 3430|  4.96k|            ++m_begin;
 3431|  47.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.9k, False: 4.96k]
  ------------------
 3432|  42.9k|                const auto cmp = static_cast<unsigned>(
 3433|  42.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.9k]
  ------------------
 3435|  42.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.7k, False: 1.15k]
  |  Branch (3435:34): [True: 41.1k, False: 636]
  ------------------
 3436|  41.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.1k|                                options.end());
 3438|  41.1k|                    --options_available;
 3439|  41.1k|                    continue;
 3440|  41.1k|                }
 3441|  1.79k|                ++i;
 3442|  1.79k|            }
 3443|  4.96k|            ++chars_consumed;
 3444|  4.96k|        }
 3445|  3.79k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.24k, False: 554]
  ------------------
 3446|  3.24k|            m_begin = start_it;
 3447|  3.24k|            return std::nullopt;
 3448|  3.24k|        }
 3449|    554|        return options.front().second;
 3450|  3.79k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.54k|    {
 2848|  6.54k|#if !SCN_DISABLE_LOCALE
 2849|  6.54k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.54k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.54k|#endif
 2856|       |
 2857|  6.54k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.54k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.54k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.52k|    {
 2880|  6.52k|#if !SCN_DISABLE_LOCALE
 2881|  6.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.52k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.52k|#endif
 2888|       |
 2889|  6.52k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.52k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.52k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.52k|    {
 2198|  6.52k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.48k, False: 44]
  |  |  |  Branch (865:45): [True: 6.47k, False: 52]
  |  |  |  Branch (865:45): [True: 8, False: 44]
  |  |  ------------------
  ------------------
 2199|  6.48k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.48k|                                "Invalid value for tm_mday"});
 2201|  6.48k|        }
 2202|     44|        t.tm_mday = d;
 2203|     44|        st.set_mday(h);
 2204|     44|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.25k|    {
 2895|  3.25k|#if !SCN_DISABLE_LOCALE
 2896|  3.25k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.25k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.25k|#endif
 2903|       |
 2904|  3.25k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.25k|            {"Sunday", 0},
 2906|  3.25k|            {"Monday", 1},
 2907|  3.25k|            {"Tuesday", 2},
 2908|  3.25k|            {"Wednesday", 3},
 2909|  3.25k|            {"Thursday", 4},
 2910|  3.25k|            {"Friday", 5},
 2911|  3.25k|            {"Saturday", 6},
 2912|  3.25k|        }};
 2913|  3.25k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.25k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.25k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.25k|            {"Sun", 0},
 2918|  3.25k|            {"Mon", 1},
 2919|  3.25k|            {"Tue", 2},
 2920|  3.25k|            {"Wed", 3},
 2921|  3.25k|            {"Thu", 4},
 2922|  3.25k|            {"Fri", 5},
 2923|  3.25k|            {"Sat", 6},
 2924|  3.25k|        }};
 2925|  3.25k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.25k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.25k|        return set_error(
 2929|  3.25k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.51k|    {
 3419|  6.51k|        auto start_it = m_begin;
 3420|  6.51k|        std::size_t options_available = N;
 3421|  6.51k|        std::size_t chars_consumed = 0;
 3422|  13.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.68k, False: 6.49k]
  ------------------
 3423|  13.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.68k, False: 0]
  ------------------
 3424|  6.68k|            std::size_t i = 0;
 3425|  6.68k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.66k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.66k|            const auto ch = *m_begin;
 3430|  6.66k|            ++m_begin;
 3431|  52.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.7k, False: 6.66k]
  ------------------
 3432|  45.7k|                const auto cmp = static_cast<unsigned>(
 3433|  45.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.7k]
  ------------------
 3435|  45.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.5k, False: 184]
  |  Branch (3435:34): [True: 45.5k, False: 16]
  ------------------
 3436|  45.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.5k|                                options.end());
 3438|  45.5k|                    --options_available;
 3439|  45.5k|                    continue;
 3440|  45.5k|                }
 3441|    200|                ++i;
 3442|    200|            }
 3443|  6.66k|            ++chars_consumed;
 3444|  6.66k|        }
 3445|  6.51k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.51k, False: 0]
  ------------------
 3446|  6.51k|            m_begin = start_it;
 3447|  6.51k|            return std::nullopt;
 3448|  6.51k|        }
 3449|      0|        return options.front().second;
 3450|  6.51k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  13.0k|    {
 2969|  13.0k|#if !SCN_DISABLE_LOCALE
 2970|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.0k|#endif
 2977|       |
 2978|  13.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  13.0k|    {
 2178|  13.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.05k, False: 7.02k]
  |  |  |  Branch (865:45): [True: 6.00k, False: 7.07k]
  |  |  |  Branch (865:45): [True: 50, False: 7.02k]
  |  |  ------------------
  ------------------
 2179|  6.05k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  6.05k|                                  "Invalid value for tm_hour"});
 2181|  6.05k|        }
 2182|  7.02k|        t.tm_hour = h;
 2183|  7.02k|        st.set_hour24(hdl);
 2184|  7.02k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  13.0k|    {
 2997|  13.0k|#if !SCN_DISABLE_LOCALE
 2998|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.0k|#endif
 3005|       |
 3006|  13.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  13.0k|    {
 2168|  13.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.12k, False: 6.95k]
  |  |  |  Branch (865:45): [True: 6.11k, False: 6.96k]
  |  |  |  Branch (865:45): [True: 14, False: 6.95k]
  |  |  ------------------
  ------------------
 2169|  6.12k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  6.12k|                                "Invalid value for tm_min"});
 2171|  6.12k|        }
 2172|  6.95k|        t.tm_min = m;
 2173|  6.95k|        st.set_min(h);
 2174|  6.95k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.35k|    {
 3011|  3.35k|#if !SCN_DISABLE_LOCALE
 3012|  3.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.35k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.35k|#endif
 3019|       |
 3020|  3.35k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.35k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.35k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.35k|    {
 2158|  3.35k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.23k, False: 126]
  |  |  |  Branch (865:45): [True: 3.22k, False: 128]
  |  |  |  Branch (865:45): [True: 2, False: 126]
  |  |  ------------------
  ------------------
 2159|  3.23k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.23k|                                "Invalid value for tm_sec"});
 2161|  3.23k|        }
 2162|    126|        t.tm_sec = s;
 2163|    126|        st.set_sec(h);
 2164|    126|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.26k|    {
 3253|       |        // %m/%d/%y
 3254|  3.26k|        constexpr CharT slash = '/';
 3255|  3.26k|        on_dec_month();
 3256|  3.26k|        on_text(&slash, &slash + 1);
 3257|  3.26k|        on_day_of_month();
 3258|  3.26k|        on_text(&slash, &slash + 1);
 3259|  3.26k|        on_short_year();
 3260|  3.26k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.25k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.25k|        constexpr CharT dash = '-';
 3265|  3.25k|        on_full_year();
 3266|  3.25k|        on_text(&dash, &dash + 1);
 3267|  3.25k|        on_dec_month();
 3268|  3.25k|        on_text(&dash, &dash + 1);
 3269|  3.25k|        on_day_of_month();
 3270|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  9.72k|    {
 3295|       |        // %H:%M
 3296|  9.72k|        constexpr CharT colon = ':';
 3297|  9.72k|        on_24_hour();
 3298|  9.72k|        on_text(&colon, &colon + 1);
 3299|  9.72k|        on_minute();
 3300|  9.72k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.35k|    {
 3303|       |        // %H:%M:%S
 3304|  3.35k|        constexpr CharT colon = ':';
 3305|  3.35k|        on_24_hour();
 3306|  3.35k|        on_text(&colon, &colon + 1);
 3307|  3.35k|        on_minute();
 3308|  3.35k|        on_text(&colon, &colon + 1);
 3309|  3.35k|        on_second();
 3310|  3.35k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  7.19k|    {
 3342|  7.19k|        m_st.verify(*this);
 3343|  7.19k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 7.19k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  7.19k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 7.19k, False: 2]
  |  Branch (3346:37): [True: 10, False: 7.18k]
  |  Branch (3346:60): [True: 0, False: 7.18k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  7.19k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  59.8k|    {
 3353|  59.8k|        return m_error;
 3354|  59.8k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  7.19k|    {
 3370|  7.19k|        return m_begin;
 3371|  7.19k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  30.2k|{
 3563|  30.2k|    {
 3564|  30.2k|        SCN_TRY(it,
  ------------------
  |  | 3940|  30.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 344, False: 29.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    344|    }                                                  \
  |  |  |  | 3939|  30.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  29.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  29.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  29.9k|    static_cast<    \
  |  |  935|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  29.9k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  29.9k|        ctx.range(), t, ctx.locale());
 3571|  29.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  29.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.7k, False: 7.19k]
  |  |  ------------------
  ------------------
 3573|  22.7k|        return unexpected(e.error());
 3574|  22.7k|    }
 3575|  7.19k|    return r.get_iterator();
 3576|  29.9k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  29.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  29.9k|    static_cast<    \
  |  |  935|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  29.9k|          m_begin(ranges::begin(m_range)),
 2708|  29.9k|          m_tm(t),
 2709|  29.9k|          m_loc(loc)
 2710|  29.9k|    {
 2711|  29.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  22.1k|    {
 3358|  22.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  94.5k|    {
 3363|  94.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 22.7k, False: 71.7k]
  ------------------
 3364|  22.7k|            m_error = unexpected(e);
 3365|  22.7k|        }
 3366|  94.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  29.5k|    {
 2715|  36.7k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 29.5k, False: 7.21k]
  ------------------
 2716|  29.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 112, False: 29.3k]
  ------------------
 2717|    112|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    112|            }
 2719|  29.3k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.1k, False: 7.21k]
  ------------------
 2720|  22.1k|                return on_error("Invalid literal character");
 2721|  22.1k|            }
 2722|  7.21k|            ++beg;
 2723|  7.21k|            ++m_begin;
 2724|  7.21k|        }
 2725|  29.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.51k|    {
 2745|  6.51k|#if !SCN_DISABLE_LOCALE
 2746|  6.51k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.51k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.51k|#endif
 2753|       |
 2754|  6.51k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.51k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.51k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  6.51k|    {
 2396|  6.51k|        t.year = y;
 2397|  6.51k|        st.set_full_year(h);
 2398|  6.51k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  52.3k|    {
 3381|  52.3k|        int digits_read = 0;
 3382|  52.3k|        int accumulator = 0;
 3383|  67.8k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 67.5k, False: 240]
  ------------------
 3384|  67.5k|            const auto ch = *m_begin;
 3385|  67.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.0k, False: 38.5k]
  |  Branch (3385:36): [True: 20.6k, False: 17.8k]
  ------------------
 3386|  49.7k|                break;
 3387|  49.7k|            }
 3388|  17.8k|            ++m_begin;
 3389|  17.8k|            ++digits_read;
 3390|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.39k, False: 15.4k]
  ------------------
 3392|  2.39k|                break;
 3393|  2.39k|            }
 3394|  17.8k|        }
 3395|  52.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 37.6k, False: 14.6k]
  ------------------
 3396|  37.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  37.6k|                                 "Too few integer digits"});
 3398|  37.6k|            return -1;
 3399|  37.6k|        }
 3400|  14.6k|        return accumulator;
 3401|  52.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.26k|    {
 2759|  3.26k|#if !SCN_DISABLE_LOCALE
 2760|  3.26k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.26k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.26k|#endif
 2768|       |
 2769|  3.26k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.26k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.26k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  3.26k|    {
 2419|  3.26k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 3.26k, False: 0]
  ------------------
 2420|  3.26k|            t.year = y;
 2421|  3.26k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  3.26k|        st.set_short_year(h);
 2426|  3.26k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.81k|    {
 2802|  3.81k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.81k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.81k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.81k|#endif
 2810|       |
 2811|  3.81k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.81k|            {"January", 1},
 2813|  3.81k|            {"February", 2},
 2814|  3.81k|            {"March", 3},
 2815|  3.81k|            {"April", 4},
 2816|  3.81k|            {"May", 5},
 2817|  3.81k|            {"June", 6},
 2818|  3.81k|            {"July", 7},
 2819|  3.81k|            {"August", 8},
 2820|  3.81k|            {"September", 9},
 2821|  3.81k|            {"October", 10},
 2822|  3.81k|            {"November", 11},
 2823|  3.81k|            {"December", 12},
 2824|  3.81k|        }};
 2825|  3.81k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 22, False: 3.79k]
  ------------------
 2826|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     22|        }
 2828|  3.79k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.79k|            {"Jan", 1},
 2830|  3.79k|            {"Feb", 2},
 2831|  3.79k|            {"Mar", 3},
 2832|  3.79k|            {"Apr", 4},
 2833|  3.79k|            {"Jun", 6},
 2834|  3.79k|            {"Jul", 7},
 2835|  3.79k|            {"Aug", 8},
 2836|  3.79k|            {"Sep", 9},
 2837|  3.79k|            {"Oct", 10},
 2838|  3.79k|            {"Nov", 11},
 2839|  3.79k|            {"Dec", 12},
 2840|  3.79k|        }};
 2841|  3.79k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 554, False: 3.24k]
  ------------------
 2842|    554|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    554|        }
 2844|  3.24k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.24k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  7.11k|    {
 2383|  7.11k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.18k, False: 932]
  |  |  |  Branch (865:45): [True: 6.14k, False: 970]
  |  |  |  Branch (865:45): [True: 38, False: 932]
  |  |  ------------------
  ------------------
 2384|  6.18k|            return h.set_error(
 2385|  6.18k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  6.18k|        }
 2387|    932|        t.mon = month{static_cast<unsigned>(m)};
 2388|    932|        st.set_mon(h);
 2389|    932|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.81k|    {
 3419|  3.81k|        auto start_it = m_begin;
 3420|  3.81k|        std::size_t options_available = N;
 3421|  3.81k|        std::size_t chars_consumed = 0;
 3422|  9.39k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.63k, False: 3.75k]
  ------------------
 3423|  9.39k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.61k, False: 22]
  ------------------
 3424|  5.61k|            std::size_t i = 0;
 3425|  5.61k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 5.57k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  5.57k|            const auto ch = *m_begin;
 3430|  5.57k|            ++m_begin;
 3431|  54.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 48.7k, False: 5.57k]
  ------------------
 3432|  48.7k|                const auto cmp = static_cast<unsigned>(
 3433|  48.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  48.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 48.7k]
  ------------------
 3435|  48.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.4k, False: 2.35k]
  |  Branch (3435:34): [True: 45.7k, False: 688]
  ------------------
 3436|  45.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.7k|                                options.end());
 3438|  45.7k|                    --options_available;
 3439|  45.7k|                    continue;
 3440|  45.7k|                }
 3441|  3.04k|                ++i;
 3442|  3.04k|            }
 3443|  5.57k|            ++chars_consumed;
 3444|  5.57k|        }
 3445|  3.81k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.79k, False: 22]
  ------------------
 3446|  3.79k|            m_begin = start_it;
 3447|  3.79k|            return std::nullopt;
 3448|  3.79k|        }
 3449|     22|        return options.front().second;
 3450|  3.81k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.79k|    {
 3419|  3.79k|        auto start_it = m_begin;
 3420|  3.79k|        std::size_t options_available = N;
 3421|  3.79k|        std::size_t chars_consumed = 0;
 3422|  8.75k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.54k, False: 3.21k]
  ------------------
 3423|  8.75k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.99k, False: 554]
  ------------------
 3424|  4.99k|            std::size_t i = 0;
 3425|  4.99k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 4.96k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  4.96k|            const auto ch = *m_begin;
 3430|  4.96k|            ++m_begin;
 3431|  47.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.9k, False: 4.96k]
  ------------------
 3432|  42.9k|                const auto cmp = static_cast<unsigned>(
 3433|  42.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.9k]
  ------------------
 3435|  42.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.7k, False: 1.15k]
  |  Branch (3435:34): [True: 41.1k, False: 636]
  ------------------
 3436|  41.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.1k|                                options.end());
 3438|  41.1k|                    --options_available;
 3439|  41.1k|                    continue;
 3440|  41.1k|                }
 3441|  1.79k|                ++i;
 3442|  1.79k|            }
 3443|  4.96k|            ++chars_consumed;
 3444|  4.96k|        }
 3445|  3.79k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.24k, False: 554]
  ------------------
 3446|  3.24k|            m_begin = start_it;
 3447|  3.24k|            return std::nullopt;
 3448|  3.24k|        }
 3449|    554|        return options.front().second;
 3450|  3.79k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.54k|    {
 2848|  6.54k|#if !SCN_DISABLE_LOCALE
 2849|  6.54k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.54k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.54k|#endif
 2856|       |
 2857|  6.54k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.54k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.54k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.52k|    {
 2880|  6.52k|#if !SCN_DISABLE_LOCALE
 2881|  6.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.52k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.52k|#endif
 2888|       |
 2889|  6.52k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.52k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.52k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  6.52k|    {
 2370|  6.52k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.48k, False: 44]
  |  |  |  Branch (865:45): [True: 6.47k, False: 52]
  |  |  |  Branch (865:45): [True: 8, False: 44]
  |  |  ------------------
  ------------------
 2371|  6.48k|            return h.set_error(
 2372|  6.48k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  6.48k|        }
 2374|     44|        t.mday = d;
 2375|     44|        st.set_mday(h);
 2376|     44|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.25k|    {
 2895|  3.25k|#if !SCN_DISABLE_LOCALE
 2896|  3.25k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.25k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.25k|#endif
 2903|       |
 2904|  3.25k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.25k|            {"Sunday", 0},
 2906|  3.25k|            {"Monday", 1},
 2907|  3.25k|            {"Tuesday", 2},
 2908|  3.25k|            {"Wednesday", 3},
 2909|  3.25k|            {"Thursday", 4},
 2910|  3.25k|            {"Friday", 5},
 2911|  3.25k|            {"Saturday", 6},
 2912|  3.25k|        }};
 2913|  3.25k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.25k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.25k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.25k|            {"Sun", 0},
 2918|  3.25k|            {"Mon", 1},
 2919|  3.25k|            {"Tue", 2},
 2920|  3.25k|            {"Wed", 3},
 2921|  3.25k|            {"Thu", 4},
 2922|  3.25k|            {"Fri", 5},
 2923|  3.25k|            {"Sat", 6},
 2924|  3.25k|        }};
 2925|  3.25k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.25k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.25k|        return set_error(
 2929|  3.25k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.51k|    {
 3419|  6.51k|        auto start_it = m_begin;
 3420|  6.51k|        std::size_t options_available = N;
 3421|  6.51k|        std::size_t chars_consumed = 0;
 3422|  13.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.68k, False: 6.49k]
  ------------------
 3423|  13.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.68k, False: 0]
  ------------------
 3424|  6.68k|            std::size_t i = 0;
 3425|  6.68k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.66k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.66k|            const auto ch = *m_begin;
 3430|  6.66k|            ++m_begin;
 3431|  52.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.7k, False: 6.66k]
  ------------------
 3432|  45.7k|                const auto cmp = static_cast<unsigned>(
 3433|  45.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.7k]
  ------------------
 3435|  45.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.5k, False: 184]
  |  Branch (3435:34): [True: 45.5k, False: 16]
  ------------------
 3436|  45.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.5k|                                options.end());
 3438|  45.5k|                    --options_available;
 3439|  45.5k|                    continue;
 3440|  45.5k|                }
 3441|    200|                ++i;
 3442|    200|            }
 3443|  6.66k|            ++chars_consumed;
 3444|  6.66k|        }
 3445|  6.51k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.51k, False: 0]
  ------------------
 3446|  6.51k|            m_begin = start_it;
 3447|  6.51k|            return std::nullopt;
 3448|  6.51k|        }
 3449|      0|        return options.front().second;
 3450|  6.51k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  13.0k|    {
 2969|  13.0k|#if !SCN_DISABLE_LOCALE
 2970|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.0k|#endif
 2977|       |
 2978|  13.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.0k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  13.0k|    {
 2344|  13.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.05k, False: 7.02k]
  |  |  |  Branch (865:45): [True: 6.00k, False: 7.07k]
  |  |  |  Branch (865:45): [True: 50, False: 7.02k]
  |  |  ------------------
  ------------------
 2345|  6.05k|            return hdl.set_error(
 2346|  6.05k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  6.05k|        }
 2348|  7.02k|        t.hour = h;
 2349|  7.02k|        st.set_hour24(hdl);
 2350|  7.02k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  13.0k|    {
 2997|  13.0k|#if !SCN_DISABLE_LOCALE
 2998|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.0k|#endif
 3005|       |
 3006|  13.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.0k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  13.0k|    {
 2331|  13.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.12k, False: 6.95k]
  |  |  |  Branch (865:45): [True: 6.11k, False: 6.96k]
  |  |  |  Branch (865:45): [True: 14, False: 6.95k]
  |  |  ------------------
  ------------------
 2332|  6.12k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  6.12k|                                "Invalid value for minutes"});
 2334|  6.12k|        }
 2335|  6.95k|        t.min = m;
 2336|  6.95k|        st.set_min(h);
 2337|  6.95k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.35k|    {
 3011|  3.35k|#if !SCN_DISABLE_LOCALE
 3012|  3.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.35k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.35k|#endif
 3019|       |
 3020|  3.35k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.35k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.35k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  3.35k|    {
 2318|  3.35k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.23k, False: 126]
  |  |  |  Branch (865:45): [True: 3.22k, False: 128]
  |  |  |  Branch (865:45): [True: 2, False: 126]
  |  |  ------------------
  ------------------
 2319|  3.23k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  3.23k|                                "Invalid value for seconds"});
 2321|  3.23k|        }
 2322|    126|        t.sec = s;
 2323|    126|        st.set_sec(h);
 2324|    126|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.26k|    {
 3253|       |        // %m/%d/%y
 3254|  3.26k|        constexpr CharT slash = '/';
 3255|  3.26k|        on_dec_month();
 3256|  3.26k|        on_text(&slash, &slash + 1);
 3257|  3.26k|        on_day_of_month();
 3258|  3.26k|        on_text(&slash, &slash + 1);
 3259|  3.26k|        on_short_year();
 3260|  3.26k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.25k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.25k|        constexpr CharT dash = '-';
 3265|  3.25k|        on_full_year();
 3266|  3.25k|        on_text(&dash, &dash + 1);
 3267|  3.25k|        on_dec_month();
 3268|  3.25k|        on_text(&dash, &dash + 1);
 3269|  3.25k|        on_day_of_month();
 3270|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  9.72k|    {
 3295|       |        // %H:%M
 3296|  9.72k|        constexpr CharT colon = ':';
 3297|  9.72k|        on_24_hour();
 3298|  9.72k|        on_text(&colon, &colon + 1);
 3299|  9.72k|        on_minute();
 3300|  9.72k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.35k|    {
 3303|       |        // %H:%M:%S
 3304|  3.35k|        constexpr CharT colon = ':';
 3305|  3.35k|        on_24_hour();
 3306|  3.35k|        on_text(&colon, &colon + 1);
 3307|  3.35k|        on_minute();
 3308|  3.35k|        on_text(&colon, &colon + 1);
 3309|  3.35k|        on_second();
 3310|  3.35k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  7.19k|    {
 3342|  7.19k|        m_st.verify(*this);
 3343|  7.19k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 7.19k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  7.19k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 7.19k, False: 2]
  |  Branch (3346:37): [True: 10, False: 7.18k]
  |  Branch (3346:60): [True: 0, False: 7.18k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  7.19k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  59.8k|    {
 3353|  59.8k|        return m_error;
 3354|  59.8k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  7.19k|    {
 3370|  7.19k|        return m_begin;
 3371|  7.19k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  30.2k|{
 3563|  30.2k|    {
 3564|  30.2k|        SCN_TRY(it,
  ------------------
  |  | 3940|  30.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 344, False: 29.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    344|    }                                                  \
  |  |  |  | 3939|  30.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  29.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  29.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  29.9k|    static_cast<    \
  |  |  935|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  29.9k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  29.9k|        ctx.range(), t, ctx.locale());
 3571|  29.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  29.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.7k, False: 7.19k]
  |  |  ------------------
  ------------------
 3573|  22.7k|        return unexpected(e.error());
 3574|  22.7k|    }
 3575|  7.19k|    return r.get_iterator();
 3576|  29.9k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  29.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  29.9k|    static_cast<    \
  |  |  935|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  29.9k|          m_begin(ranges::begin(m_range)),
 2708|  29.9k|          m_tm(t),
 2709|  29.9k|          m_loc(loc)
 2710|  29.9k|    {
 2711|  29.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  22.1k|    {
 3358|  22.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  94.5k|    {
 3363|  94.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 22.7k, False: 71.7k]
  ------------------
 3364|  22.7k|            m_error = unexpected(e);
 3365|  22.7k|        }
 3366|  94.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  29.5k|    {
 2715|  36.7k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 29.5k, False: 7.21k]
  ------------------
 2716|  29.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 112, False: 29.3k]
  ------------------
 2717|    112|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    112|            }
 2719|  29.3k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.1k, False: 7.21k]
  ------------------
 2720|  22.1k|                return on_error("Invalid literal character");
 2721|  22.1k|            }
 2722|  7.21k|            ++beg;
 2723|  7.21k|            ++m_begin;
 2724|  7.21k|        }
 2725|  29.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.51k|    {
 2745|  6.51k|#if !SCN_DISABLE_LOCALE
 2746|  6.51k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.51k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.51k|#endif
 2753|       |
 2754|  6.51k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.51k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.51k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  6.51k|    {
 2396|  6.51k|        t.year = y;
 2397|  6.51k|        st.set_full_year(h);
 2398|  6.51k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  52.3k|    {
 3381|  52.3k|        int digits_read = 0;
 3382|  52.3k|        int accumulator = 0;
 3383|  67.8k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 67.5k, False: 240]
  ------------------
 3384|  67.5k|            const auto ch = *m_begin;
 3385|  67.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.0k, False: 38.5k]
  |  Branch (3385:36): [True: 20.6k, False: 17.8k]
  ------------------
 3386|  49.7k|                break;
 3387|  49.7k|            }
 3388|  17.8k|            ++m_begin;
 3389|  17.8k|            ++digits_read;
 3390|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.39k, False: 15.4k]
  ------------------
 3392|  2.39k|                break;
 3393|  2.39k|            }
 3394|  17.8k|        }
 3395|  52.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 37.6k, False: 14.6k]
  ------------------
 3396|  37.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  37.6k|                                 "Too few integer digits"});
 3398|  37.6k|            return -1;
 3399|  37.6k|        }
 3400|  14.6k|        return accumulator;
 3401|  52.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.26k|    {
 2759|  3.26k|#if !SCN_DISABLE_LOCALE
 2760|  3.26k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.26k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.26k|#endif
 2768|       |
 2769|  3.26k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.26k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.26k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  3.26k|    {
 2419|  3.26k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 3.26k, False: 0]
  ------------------
 2420|  3.26k|            t.year = y;
 2421|  3.26k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  3.26k|        st.set_short_year(h);
 2426|  3.26k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.81k|    {
 2802|  3.81k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.81k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.81k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.81k|#endif
 2810|       |
 2811|  3.81k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.81k|            {"January", 1},
 2813|  3.81k|            {"February", 2},
 2814|  3.81k|            {"March", 3},
 2815|  3.81k|            {"April", 4},
 2816|  3.81k|            {"May", 5},
 2817|  3.81k|            {"June", 6},
 2818|  3.81k|            {"July", 7},
 2819|  3.81k|            {"August", 8},
 2820|  3.81k|            {"September", 9},
 2821|  3.81k|            {"October", 10},
 2822|  3.81k|            {"November", 11},
 2823|  3.81k|            {"December", 12},
 2824|  3.81k|        }};
 2825|  3.81k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 22, False: 3.79k]
  ------------------
 2826|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     22|        }
 2828|  3.79k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.79k|            {"Jan", 1},
 2830|  3.79k|            {"Feb", 2},
 2831|  3.79k|            {"Mar", 3},
 2832|  3.79k|            {"Apr", 4},
 2833|  3.79k|            {"Jun", 6},
 2834|  3.79k|            {"Jul", 7},
 2835|  3.79k|            {"Aug", 8},
 2836|  3.79k|            {"Sep", 9},
 2837|  3.79k|            {"Oct", 10},
 2838|  3.79k|            {"Nov", 11},
 2839|  3.79k|            {"Dec", 12},
 2840|  3.79k|        }};
 2841|  3.79k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 554, False: 3.24k]
  ------------------
 2842|    554|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    554|        }
 2844|  3.24k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.24k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  7.11k|    {
 2383|  7.11k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.18k, False: 932]
  |  |  |  Branch (865:45): [True: 6.14k, False: 970]
  |  |  |  Branch (865:45): [True: 38, False: 932]
  |  |  ------------------
  ------------------
 2384|  6.18k|            return h.set_error(
 2385|  6.18k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  6.18k|        }
 2387|    932|        t.mon = month{static_cast<unsigned>(m)};
 2388|    932|        st.set_mon(h);
 2389|    932|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.81k|    {
 3419|  3.81k|        auto start_it = m_begin;
 3420|  3.81k|        std::size_t options_available = N;
 3421|  3.81k|        std::size_t chars_consumed = 0;
 3422|  9.39k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.63k, False: 3.75k]
  ------------------
 3423|  9.39k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.61k, False: 22]
  ------------------
 3424|  5.61k|            std::size_t i = 0;
 3425|  5.61k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 5.57k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  5.57k|            const auto ch = *m_begin;
 3430|  5.57k|            ++m_begin;
 3431|  54.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 48.7k, False: 5.57k]
  ------------------
 3432|  48.7k|                const auto cmp = static_cast<unsigned>(
 3433|  48.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  48.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 48.7k]
  ------------------
 3435|  48.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.4k, False: 2.35k]
  |  Branch (3435:34): [True: 45.7k, False: 688]
  ------------------
 3436|  45.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.7k|                                options.end());
 3438|  45.7k|                    --options_available;
 3439|  45.7k|                    continue;
 3440|  45.7k|                }
 3441|  3.04k|                ++i;
 3442|  3.04k|            }
 3443|  5.57k|            ++chars_consumed;
 3444|  5.57k|        }
 3445|  3.81k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.79k, False: 22]
  ------------------
 3446|  3.79k|            m_begin = start_it;
 3447|  3.79k|            return std::nullopt;
 3448|  3.79k|        }
 3449|     22|        return options.front().second;
 3450|  3.81k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.79k|    {
 3419|  3.79k|        auto start_it = m_begin;
 3420|  3.79k|        std::size_t options_available = N;
 3421|  3.79k|        std::size_t chars_consumed = 0;
 3422|  8.75k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.54k, False: 3.21k]
  ------------------
 3423|  8.75k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.99k, False: 554]
  ------------------
 3424|  4.99k|            std::size_t i = 0;
 3425|  4.99k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 4.96k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  4.96k|            const auto ch = *m_begin;
 3430|  4.96k|            ++m_begin;
 3431|  47.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.9k, False: 4.96k]
  ------------------
 3432|  42.9k|                const auto cmp = static_cast<unsigned>(
 3433|  42.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.9k]
  ------------------
 3435|  42.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.7k, False: 1.15k]
  |  Branch (3435:34): [True: 41.1k, False: 636]
  ------------------
 3436|  41.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.1k|                                options.end());
 3438|  41.1k|                    --options_available;
 3439|  41.1k|                    continue;
 3440|  41.1k|                }
 3441|  1.79k|                ++i;
 3442|  1.79k|            }
 3443|  4.96k|            ++chars_consumed;
 3444|  4.96k|        }
 3445|  3.79k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.24k, False: 554]
  ------------------
 3446|  3.24k|            m_begin = start_it;
 3447|  3.24k|            return std::nullopt;
 3448|  3.24k|        }
 3449|    554|        return options.front().second;
 3450|  3.79k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.54k|    {
 2848|  6.54k|#if !SCN_DISABLE_LOCALE
 2849|  6.54k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.54k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.54k|#endif
 2856|       |
 2857|  6.54k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.54k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.54k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.52k|    {
 2880|  6.52k|#if !SCN_DISABLE_LOCALE
 2881|  6.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.52k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.52k|#endif
 2888|       |
 2889|  6.52k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.52k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.52k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  6.52k|    {
 2370|  6.52k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.48k, False: 44]
  |  |  |  Branch (865:45): [True: 6.47k, False: 52]
  |  |  |  Branch (865:45): [True: 8, False: 44]
  |  |  ------------------
  ------------------
 2371|  6.48k|            return h.set_error(
 2372|  6.48k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  6.48k|        }
 2374|     44|        t.mday = d;
 2375|     44|        st.set_mday(h);
 2376|     44|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.25k|    {
 2895|  3.25k|#if !SCN_DISABLE_LOCALE
 2896|  3.25k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.25k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.25k|#endif
 2903|       |
 2904|  3.25k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.25k|            {"Sunday", 0},
 2906|  3.25k|            {"Monday", 1},
 2907|  3.25k|            {"Tuesday", 2},
 2908|  3.25k|            {"Wednesday", 3},
 2909|  3.25k|            {"Thursday", 4},
 2910|  3.25k|            {"Friday", 5},
 2911|  3.25k|            {"Saturday", 6},
 2912|  3.25k|        }};
 2913|  3.25k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.25k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.25k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.25k|            {"Sun", 0},
 2918|  3.25k|            {"Mon", 1},
 2919|  3.25k|            {"Tue", 2},
 2920|  3.25k|            {"Wed", 3},
 2921|  3.25k|            {"Thu", 4},
 2922|  3.25k|            {"Fri", 5},
 2923|  3.25k|            {"Sat", 6},
 2924|  3.25k|        }};
 2925|  3.25k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.25k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.25k|        return set_error(
 2929|  3.25k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.51k|    {
 3419|  6.51k|        auto start_it = m_begin;
 3420|  6.51k|        std::size_t options_available = N;
 3421|  6.51k|        std::size_t chars_consumed = 0;
 3422|  13.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.68k, False: 6.49k]
  ------------------
 3423|  13.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.68k, False: 0]
  ------------------
 3424|  6.68k|            std::size_t i = 0;
 3425|  6.68k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.66k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.66k|            const auto ch = *m_begin;
 3430|  6.66k|            ++m_begin;
 3431|  52.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.7k, False: 6.66k]
  ------------------
 3432|  45.7k|                const auto cmp = static_cast<unsigned>(
 3433|  45.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.7k]
  ------------------
 3435|  45.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.5k, False: 184]
  |  Branch (3435:34): [True: 45.5k, False: 16]
  ------------------
 3436|  45.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.5k|                                options.end());
 3438|  45.5k|                    --options_available;
 3439|  45.5k|                    continue;
 3440|  45.5k|                }
 3441|    200|                ++i;
 3442|    200|            }
 3443|  6.66k|            ++chars_consumed;
 3444|  6.66k|        }
 3445|  6.51k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.51k, False: 0]
  ------------------
 3446|  6.51k|            m_begin = start_it;
 3447|  6.51k|            return std::nullopt;
 3448|  6.51k|        }
 3449|      0|        return options.front().second;
 3450|  6.51k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  13.0k|    {
 2969|  13.0k|#if !SCN_DISABLE_LOCALE
 2970|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.0k|#endif
 2977|       |
 2978|  13.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.0k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  13.0k|    {
 2344|  13.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.05k, False: 7.02k]
  |  |  |  Branch (865:45): [True: 6.00k, False: 7.07k]
  |  |  |  Branch (865:45): [True: 50, False: 7.02k]
  |  |  ------------------
  ------------------
 2345|  6.05k|            return hdl.set_error(
 2346|  6.05k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  6.05k|        }
 2348|  7.02k|        t.hour = h;
 2349|  7.02k|        st.set_hour24(hdl);
 2350|  7.02k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  13.0k|    {
 2997|  13.0k|#if !SCN_DISABLE_LOCALE
 2998|  13.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.0k|#endif
 3005|       |
 3006|  13.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.0k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  13.0k|    {
 2331|  13.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.12k, False: 6.95k]
  |  |  |  Branch (865:45): [True: 6.11k, False: 6.96k]
  |  |  |  Branch (865:45): [True: 14, False: 6.95k]
  |  |  ------------------
  ------------------
 2332|  6.12k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  6.12k|                                "Invalid value for minutes"});
 2334|  6.12k|        }
 2335|  6.95k|        t.min = m;
 2336|  6.95k|        st.set_min(h);
 2337|  6.95k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.35k|    {
 3011|  3.35k|#if !SCN_DISABLE_LOCALE
 3012|  3.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.35k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.35k|#endif
 3019|       |
 3020|  3.35k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.35k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.35k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  3.35k|    {
 2318|  3.35k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.23k, False: 126]
  |  |  |  Branch (865:45): [True: 3.22k, False: 128]
  |  |  |  Branch (865:45): [True: 2, False: 126]
  |  |  ------------------
  ------------------
 2319|  3.23k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  3.23k|                                "Invalid value for seconds"});
 2321|  3.23k|        }
 2322|    126|        t.sec = s;
 2323|    126|        st.set_sec(h);
 2324|    126|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.26k|    {
 3253|       |        // %m/%d/%y
 3254|  3.26k|        constexpr CharT slash = '/';
 3255|  3.26k|        on_dec_month();
 3256|  3.26k|        on_text(&slash, &slash + 1);
 3257|  3.26k|        on_day_of_month();
 3258|  3.26k|        on_text(&slash, &slash + 1);
 3259|  3.26k|        on_short_year();
 3260|  3.26k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.25k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.25k|        constexpr CharT dash = '-';
 3265|  3.25k|        on_full_year();
 3266|  3.25k|        on_text(&dash, &dash + 1);
 3267|  3.25k|        on_dec_month();
 3268|  3.25k|        on_text(&dash, &dash + 1);
 3269|  3.25k|        on_day_of_month();
 3270|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  9.72k|    {
 3295|       |        // %H:%M
 3296|  9.72k|        constexpr CharT colon = ':';
 3297|  9.72k|        on_24_hour();
 3298|  9.72k|        on_text(&colon, &colon + 1);
 3299|  9.72k|        on_minute();
 3300|  9.72k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.35k|    {
 3303|       |        // %H:%M:%S
 3304|  3.35k|        constexpr CharT colon = ':';
 3305|  3.35k|        on_24_hour();
 3306|  3.35k|        on_text(&colon, &colon + 1);
 3307|  3.35k|        on_minute();
 3308|  3.35k|        on_text(&colon, &colon + 1);
 3309|  3.35k|        on_second();
 3310|  3.35k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  7.19k|    {
 3342|  7.19k|        m_st.verify(*this);
 3343|  7.19k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 7.19k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  7.19k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 7.19k, False: 2]
  |  Branch (3346:37): [True: 10, False: 7.18k]
  |  Branch (3346:60): [True: 0, False: 7.18k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  7.19k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  59.8k|    {
 3353|  59.8k|        return m_error;
 3354|  59.8k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  7.19k|    {
 3370|  7.19k|        return m_begin;
 3371|  7.19k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    824|{
 1462|    824|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    824|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    824|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    824|            return transcode_to_string_impl_to32(src, dest);
 1473|    824|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    824|    SCN_EXPECT(false);
  ------------------
  |  |  930|    824|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    824|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    824|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    824|{
 1355|    824|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    824|    auto it = src.begin();
 1358|   225k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 224k, False: 824]
  ------------------
 1359|   224k|        auto res = get_next_code_point(
 1360|   224k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   224k|                                                                 src.end()));
 1362|   224k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.65k, False: 218k]
  |  |  ------------------
  ------------------
 1363|  5.65k|            dest.push_back(DestCharT{0xfffd});
 1364|  5.65k|        }
 1365|   218k|        else {
 1366|   218k|            dest.push_back(res.value);
 1367|   218k|        }
 1368|   224k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   224k|    }
 1370|    824|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   240k|{
 1279|   240k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   240k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   240k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   240k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   240k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.86k, False: 232k]
  |  |  ------------------
  ------------------
 1283|  8.86k|        return {get_start_for_next_code_point(input),
 1284|  8.86k|                detail::invalid_code_point};
 1285|  8.86k|    }
 1286|   232k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 277, False: 231k]
  |  |  ------------------
  ------------------
 1287|    277|        return {input.end(), detail::invalid_code_point};
 1288|    277|    }
 1289|       |
 1290|   231k|    return {input.begin() + len,
 1291|   231k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   232k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  8.86k|{
 1265|  8.86k|    auto it = input.begin();
 1266|   121k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 120k, False: 572]
  ------------------
 1267|   120k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 8.29k, False: 112k]
  ------------------
 1268|  8.29k|            break;
 1269|  8.29k|        }
 1270|   120k|    }
 1271|  8.86k|    return it;
 1272|  8.86k|}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   155k|{
  458|   155k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   155k|        static_cast<unsigned char>(ch))];
  460|   155k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  81.5k|{
  539|  81.5k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  81.5k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|   349k|{
  784|   349k|    return e != eof_error::good;
  785|   349k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  4.18k|{
  798|  4.18k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  4.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  4.18k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  4.18k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  76.4k|    {
  304|  76.4k|        ranges::advance(x, n);
  305|  76.4k|        return x;
  306|  76.4k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  76.4k|    {
  268|  76.4k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  76.4k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  76.4k|    {
  151|  76.4k|        i += n;
  152|  76.4k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   201k|    {
  108|   201k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   201k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   201k|    {
   87|   201k|        return s - i;
   88|   201k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   112k|    {
  108|   112k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   112k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   112k|    {
   87|   112k|        return s - i;
   88|   112k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2INSt3__117basic_string_viewIcNSB_11char_traitsIcEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSO_10locale_refE:
 2985|  76.4k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  76.4k|    static_cast<    \
  |  |  935|  76.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  76.4k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  76.4k|          m_current(m_range.begin())
 2988|  76.4k|    {
 2989|  76.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   423k|    {
 2993|   423k|        return m_current;
 2994|   423k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2INSt3__117basic_string_viewIwNSB_11char_traitsIwEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSO_10locale_refE:
 2985|  90.8k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  90.8k|    static_cast<    \
  |  |  935|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  90.8k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  90.8k|          m_current(m_range.begin())
 2988|  90.8k|    {
 2989|  90.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   474k|    {
 2993|   474k|        return m_current;
 2994|   474k|    }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  1.08M|    {
  763|  1.08M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.08M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   273k|        : m_fptr([](storage fn,
  743|   273k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   273k|              cvref<T> obj = *get<T>(fn);
  745|   273k|              if constexpr (std::is_void_v<R>) {
  746|   273k|                  obj(static_cast<decltype(args)>(args)...);
  747|   273k|              }
  748|   273k|              else {
  749|   273k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   273k|              }
  751|   273k|          }),
  752|   273k|          m_storage(std::addressof(f))
  753|   273k|    {
  754|   273k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   543k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   543k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   543k|              else {
  749|   543k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   543k|              }
  751|   543k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   543k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   543k|        else if constexpr (std::is_object_v<T>) {
  688|   543k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   543k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   273k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   273k|        {
  662|   273k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  57.1k|    {
  108|  57.1k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  57.1k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  57.1k|    {
   94|  57.1k|        iter_difference_t<I> counter{0};
   95|   531k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 474k, False: 57.1k]
  ------------------
   96|   474k|            ++i;
   97|   474k|            ++counter;
   98|   474k|        }
   99|  57.1k|        return counter;
  100|  57.1k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  91.7k|{
  951|  91.7k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.40k, False: 90.3k]
  |  |  ------------------
  ------------------
  952|  1.40k|        return eof_error::eof;
  953|  1.40k|    }
  954|  90.3k|    return eof_error::good;
  955|  91.7k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   305k|{
  945|   305k|    return is_range_eof(r.begin(), r.end());
  946|   305k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   305k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   305k|    {
  938|   305k|        return begin == end;
  939|   305k|    }
  940|   305k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  76.4k|{
  951|  76.4k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  76.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 720, False: 75.7k]
  |  |  ------------------
  ------------------
  952|    720|        return eof_error::eof;
  953|    720|    }
  954|  75.7k|    return eof_error::good;
  955|  76.4k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  76.4k|{
  945|  76.4k|    return is_range_eof(r.begin(), r.end());
  946|  76.4k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  76.4k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  76.4k|    {
  938|  76.4k|        return begin == end;
  939|  76.4k|    }
  940|  76.4k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|   152k|    {
 1602|   152k|        return sv;
 1603|   152k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  76.4k|{
 3066|  76.4k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 76.4k, False: 0]
  ------------------
 3067|  76.4k|        auto it = read_while_classic_space(range);
 3068|  76.4k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  76.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  76.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 720, False: 75.7k]
  |  |  ------------------
  ------------------
 3070|    720|            return unexpected(e);
 3071|    720|        }
 3072|       |
 3073|  75.7k|        return it;
 3074|  76.4k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  76.4k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  76.4k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  76.4k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  76.4k|        auto buf = make_contiguous_buffer(range);
 2220|  76.4k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  76.4k|        return ranges::next(range.begin(),
 2222|  76.4k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  76.4k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  76.4k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  76.4k|                  ranges::sized_range<Range>) {
 1785|  76.4k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  76.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  76.4k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  76.4k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  76.4k|    {
 1589|  76.4k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  91.7k|    {
  268|  91.7k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  91.7k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  91.7k|    {
  181|  91.7k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 0, False: 91.7k]
  ------------------
  182|      0|            ++i;
  183|      0|        }
  184|  91.7k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  91.7k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  91.7k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  91.7k|        else {
 1055|  91.7k|            return r.begin().contiguous_segment();
 1056|  91.7k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  91.7k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  91.7k|{
 2160|  91.7k|    auto it = range.begin();
 2161|   214k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 213k, False: 1.40k]
  ------------------
 2162|   213k|        const auto val =
 2163|   213k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   213k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   213k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 195k, False: 18.1k]
  |  |  ------------------
  ------------------
 2165|   195k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   195k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   195k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 90.3k, False: 104k]
  ------------------
 2168|  90.3k|                return it;
 2169|  90.3k|            }
 2170|   195k|        }
 2171|   122k|        it = val.iterator;
 2172|   122k|    }
 2173|       |
 2174|  1.40k|    return it;
 2175|  91.7k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   213k|{
 1998|   213k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   213k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   213k|    auto it = range.begin();
 2002|   213k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   213k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.1k, False: 195k]
  |  |  ------------------
  ------------------
 2005|  18.1k|        ++it;
 2006|  18.1k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  18.1k|        return {it, {}};
 2008|  18.1k|    }
 2009|       |
 2010|   195k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 190k, False: 4.92k]
  ------------------
 2011|   190k|        ++it;
 2012|   190k|        return {it, string_type(1, *range.begin())};
 2013|   190k|    }
 2014|       |
 2015|  4.92k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  4.92k|    return {it, string_type{range.begin(), it}};
 2017|   195k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  18.1k|{
 1265|  18.1k|    auto it = input.begin();
 1266|   235k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 234k, False: 534]
  ------------------
 1267|   234k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 17.5k, False: 217k]
  ------------------
 1268|  17.5k|            break;
 1269|  17.5k|        }
 1270|   234k|    }
 1271|  18.1k|    return it;
 1272|  18.1k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  4.92k|    {
  283|  4.92k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  4.92k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  4.92k|    {
  252|  4.92k|        constexpr iter_difference_t<I> zero{0};
  253|  4.92k|        iter_difference_t<I> counter{0};
  254|       |
  255|  15.5k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 10.8k, False: 4.64k]
  |  Branch (255:30): [True: 10.6k, False: 276]
  ------------------
  256|  10.6k|            ++i;
  257|  10.6k|            ++counter;
  258|  10.6k|        }
  259|       |
  260|  4.92k|        return counter;
  261|  4.92k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   213k|    {
 1989|   213k|        return !codepoint.empty();
 1990|   213k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  91.7k|{
 2181|  91.7k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  91.7k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  91.7k|{
 3066|  91.7k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 91.7k, False: 0]
  ------------------
 3067|  91.7k|        auto it = read_while_classic_space(range);
 3068|  91.7k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  91.7k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.40k, False: 90.3k]
  |  |  ------------------
  ------------------
 3070|  1.40k|            return unexpected(e);
 3071|  1.40k|        }
 3072|       |
 3073|  90.3k|        return it;
 3074|  91.7k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  91.7k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  91.7k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  91.7k|    else {
 2225|  91.7k|        auto it = range.begin();
 2226|       |
 2227|  91.7k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  91.7k|            auto seg = get_contiguous_beginning(range);
 2229|  91.7k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  91.7k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 91.7k]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|  91.7k|            ranges::advance(it, seg.size());
 2234|  91.7k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  91.7k|            return detail::is_cp_space(cp);
 2238|  91.7k|        });
 2239|  91.7k|    }
 2240|  91.7k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  91.7k|        : m_fptr([](storage fn,
  743|  91.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  91.7k|              cvref<T> obj = *get<T>(fn);
  745|  91.7k|              if constexpr (std::is_void_v<R>) {
  746|  91.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  91.7k|              }
  748|  91.7k|              else {
  749|  91.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  91.7k|              }
  751|  91.7k|          }),
  752|  91.7k|          m_storage(std::addressof(f))
  753|  91.7k|    {
  754|  91.7k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   195k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   195k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   195k|              else {
  749|   195k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   195k|              }
  751|   195k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   195k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   195k|        else if constexpr (std::is_object_v<T>) {
  688|   195k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   195k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   195k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   195k|            return detail::is_cp_space(cp);
 2238|   195k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  91.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  91.7k|        {
  662|  91.7k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  21.5k|    {
  108|  21.5k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  21.5k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  21.5k|    {
   94|  21.5k|        iter_difference_t<I> counter{0};
   95|   150k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 128k, False: 21.5k]
  ------------------
   96|   128k|            ++i;
   97|   128k|            ++counter;
   98|   128k|        }
   99|  21.5k|        return counter;
  100|  21.5k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  90.8k|{
  951|  90.8k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.03k, False: 89.7k]
  |  |  ------------------
  ------------------
  952|  1.03k|        return eof_error::eof;
  953|  1.03k|    }
  954|  89.7k|    return eof_error::good;
  955|  90.8k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   264k|{
  945|   264k|    return is_range_eof(r.begin(), r.end());
  946|   264k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   264k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   264k|    {
  938|   264k|        return begin == end;
  939|   264k|    }
  940|   264k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   174k|{
 1998|   174k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   174k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   174k|    auto it = range.begin();
 2002|   174k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   174k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 174k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   174k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 174k, False: 0]
  ------------------
 2011|   174k|        ++it;
 2012|   174k|        return {it, string_type(1, *range.begin())};
 2013|   174k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   174k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   264k|{
  945|   264k|    return is_range_eof(r.begin(), r.end());
  946|   264k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   264k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   264k|    {
  938|   264k|        return begin == end;
  939|   264k|    }
  940|   264k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   174k|    {
 1989|   174k|        return !codepoint.empty();
 1990|   174k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  90.8k|{
  951|  90.8k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.03k, False: 89.7k]
  |  |  ------------------
  ------------------
  952|  1.03k|        return eof_error::eof;
  953|  1.03k|    }
  954|  89.7k|    return eof_error::good;
  955|  90.8k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  90.8k|{
 3066|  90.8k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 90.8k, False: 0]
  ------------------
 3067|  90.8k|        auto it = read_while_classic_space(range);
 3068|  90.8k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  90.8k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.03k, False: 89.7k]
  |  |  ------------------
  ------------------
 3070|  1.03k|            return unexpected(e);
 3071|  1.03k|        }
 3072|       |
 3073|  89.7k|        return it;
 3074|  90.8k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  90.8k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  90.8k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  90.8k|    else {
 2225|  90.8k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  90.8k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  90.8k|            return detail::is_cp_space(cp);
 2238|  90.8k|        });
 2239|  90.8k|    }
 2240|  90.8k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  90.8k|{
 2181|  90.8k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  90.8k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  90.8k|{
 2160|  90.8k|    auto it = range.begin();
 2161|   175k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 174k, False: 1.03k]
  ------------------
 2162|   174k|        const auto val =
 2163|   174k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   174k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   174k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 174k, False: 0]
  |  |  ------------------
  ------------------
 2165|   174k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   174k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   174k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 89.7k, False: 84.2k]
  ------------------
 2168|  89.7k|                return it;
 2169|  89.7k|            }
 2170|   174k|        }
 2171|  84.2k|        it = val.iterator;
 2172|  84.2k|    }
 2173|       |
 2174|  1.03k|    return it;
 2175|  90.8k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  90.8k|        : m_fptr([](storage fn,
  743|  90.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  90.8k|              cvref<T> obj = *get<T>(fn);
  745|  90.8k|              if constexpr (std::is_void_v<R>) {
  746|  90.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  90.8k|              }
  748|  90.8k|              else {
  749|  90.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  90.8k|              }
  751|  90.8k|          }),
  752|  90.8k|          m_storage(std::addressof(f))
  753|  90.8k|    {
  754|  90.8k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   174k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   174k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   174k|              else {
  749|   174k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   174k|              }
  751|   174k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   174k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   174k|        else if constexpr (std::is_object_v<T>) {
  688|   174k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   174k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   174k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   174k|            return detail::is_cp_space(cp);
 2238|   174k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  90.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  90.8k|        {
  662|  90.8k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  90.8k|{
 2160|  90.8k|    auto it = range.begin();
 2161|   175k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 174k, False: 1.03k]
  ------------------
 2162|   174k|        const auto val =
 2163|   174k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   174k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   174k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 174k, False: 0]
  |  |  ------------------
  ------------------
 2165|   174k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   174k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   174k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 89.7k, False: 84.2k]
  ------------------
 2168|  89.7k|                return it;
 2169|  89.7k|            }
 2170|   174k|        }
 2171|  84.2k|        it = val.iterator;
 2172|  84.2k|    }
 2173|       |
 2174|  1.03k|    return it;
 2175|  90.8k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   174k|{
 1998|   174k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   174k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   174k|    auto it = range.begin();
 2002|   174k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   174k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 174k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   174k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 174k, False: 0]
  ------------------
 2011|   174k|        ++it;
 2012|   174k|        return {it, string_type(1, *range.begin())};
 2013|   174k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   174k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   174k|    {
 1989|   174k|        return !codepoint.empty();
 1990|   174k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  90.8k|{
 2181|  90.8k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  90.8k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  90.8k|{
 3066|  90.8k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 90.8k, False: 0]
  ------------------
 3067|  90.8k|        auto it = read_while_classic_space(range);
 3068|  90.8k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  90.8k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.03k, False: 89.7k]
  |  |  ------------------
  ------------------
 3070|  1.03k|            return unexpected(e);
 3071|  1.03k|        }
 3072|       |
 3073|  89.7k|        return it;
 3074|  90.8k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  90.8k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  90.8k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  90.8k|    else {
 2225|  90.8k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  90.8k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  90.8k|            return detail::is_cp_space(cp);
 2238|  90.8k|        });
 2239|  90.8k|    }
 2240|  90.8k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  90.8k|        : m_fptr([](storage fn,
  743|  90.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  90.8k|              cvref<T> obj = *get<T>(fn);
  745|  90.8k|              if constexpr (std::is_void_v<R>) {
  746|  90.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  90.8k|              }
  748|  90.8k|              else {
  749|  90.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  90.8k|              }
  751|  90.8k|          }),
  752|  90.8k|          m_storage(std::addressof(f))
  753|  90.8k|    {
  754|  90.8k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   174k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   174k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   174k|              else {
  749|   174k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   174k|              }
  751|   174k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   174k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   174k|        else if constexpr (std::is_object_v<T>) {
  688|   174k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   174k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   174k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   174k|            return detail::is_cp_space(cp);
 2238|   174k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  90.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  90.8k|        {
  662|  90.8k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEcEEE6handleE:
 5953|  2.47k|    {
 5954|  2.47k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.47k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  2.47k|                source_tag<range_type>, {}};
 5957|  2.47k|            auto ctx = make_custom_ctx();
 5958|  2.47k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  2.47k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.47k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.47k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.47k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|      0|                              basic_contiguous_scan_context<char_type>>) {
 5963|      0|                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|       |            else {
 5966|       |                return ctx.begin();
 5967|       |            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  2.47k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE15make_custom_ctxEv:
 5935|  2.47k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  2.47k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  2.47k|            auto it =
 5940|  2.47k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  2.47k|                    std::basic_string_view<char_type>(range.data(),
 5942|  2.47k|                                                      range.size()),
 5943|  2.47k|                    0};
 5944|  2.47k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  2.47k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  2.47k|    {
 5954|  2.47k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.47k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  2.47k|                source_tag<range_type>, {}};
 5957|  2.47k|            auto ctx = make_custom_ctx();
 5958|  2.47k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  2.47k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.47k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.47k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.47k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|       |                              basic_contiguous_scan_context<char_type>>) {
 5963|       |                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|      0|            else {
 5966|      0|                return ctx.begin();
 5967|      0|            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  2.47k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15make_custom_ctxEv:
 5935|  2.47k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  2.47k|        else {
 5947|  2.47k|            return {range.begin(), args, loc};
 5948|  2.47k|        }
 5949|  2.47k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  76.4k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  76.4k|    static_cast<    \
  |  |  935|  76.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  76.4k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  76.4k|          m_current(m_range.begin())
 2988|  76.4k|    {
 2989|  76.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   228k|    {
 2998|   228k|        return m_range.end();
 2999|   228k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  75.7k|    {
 3013|  75.7k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  75.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  75.7k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  75.7k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 75.7k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  75.7k|        }
 3019|  75.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  75.7k|    static_cast<    \
  |  |  935|  75.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  75.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   152k|    {
 3003|   152k|        return ranges::subrange{begin(), end()};
 3004|   152k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 6285|   168k|    {
 6286|   168k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|   168k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 69.2k, False: 99.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  69.2k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  69.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  69.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  69.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  69.2k|    }
  ------------------
 6287|  99.0k|        return {ctx.begin()};
 6288|   168k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toERKNS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 3023|  41.8k|    {
 3024|  41.8k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  |  930|  41.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  41.8k|        m_current = m_range.begin() + it.position();
 3026|  41.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE16underlying_rangeEv:
 3007|   229k|    {
 3008|   229k|        return m_range;
 3009|   229k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE14begin_positionEv:
 3029|  76.4k|    {
 3030|  76.4k|        return ranges::distance(m_range.begin(), begin());
 3031|  76.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEwEEE6handleE:
 5953|  4.94k|    {
 5954|  4.94k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  4.94k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  4.94k|                source_tag<range_type>, {}};
 5957|  4.94k|            auto ctx = make_custom_ctx();
 5958|  4.94k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  4.94k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.94k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.94k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.94k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|      0|                              basic_contiguous_scan_context<char_type>>) {
 5963|      0|                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|       |            else {
 5966|       |                return ctx.begin();
 5967|       |            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  4.94k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE15make_custom_ctxEv:
 5935|  4.94k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  4.94k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  4.94k|            auto it =
 5940|  4.94k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  4.94k|                    std::basic_string_view<char_type>(range.data(),
 5942|  4.94k|                                                      range.size()),
 5943|  4.94k|                    0};
 5944|  4.94k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  4.94k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|  90.8k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  90.8k|    static_cast<    \
  |  |  935|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  90.8k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  90.8k|          m_current(m_range.begin())
 2988|  90.8k|    {
 2989|  90.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   270k|    {
 2998|   270k|        return m_range.end();
 2999|   270k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|  89.7k|    {
 3013|  89.7k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  89.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  89.7k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  89.7k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 89.7k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  89.7k|        }
 3019|  89.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  89.7k|    static_cast<    \
  |  |  935|  89.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  89.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   180k|    {
 3003|   180k|        return ranges::subrange{begin(), end()};
 3004|   180k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 6285|   181k|    {
 6286|   181k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|   181k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 138k, False: 43.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|   138k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|   138k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|   138k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|   138k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|   138k|    }
  ------------------
 6287|  43.1k|        return {ctx.begin()};
 6288|   181k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toERKNS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 3023|  21.5k|    {
 3024|  21.5k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  |  930|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  21.5k|        m_current = m_range.begin() + it.position();
 3026|  21.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE16underlying_rangeEv:
 3007|   272k|    {
 3008|   272k|        return m_range;
 3009|   272k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE14begin_positionEv:
 3029|  90.8k|    {
 3030|  90.8k|        return ranges::distance(m_range.begin(), begin());
 3031|  90.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  4.94k|    {
 5954|  4.94k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  4.94k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  4.94k|                source_tag<range_type>, {}};
 5957|  4.94k|            auto ctx = make_custom_ctx();
 5958|  4.94k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  4.94k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.94k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.94k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.94k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|       |                              basic_contiguous_scan_context<char_type>>) {
 5963|       |                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|      0|            else {
 5966|      0|                return ctx.begin();
 5967|      0|            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  4.94k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15make_custom_ctxEv:
 5935|  4.94k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  4.94k|        else {
 5947|  4.94k|            return {range.begin(), args, loc};
 5948|  4.94k|        }
 5949|  4.94k|    }

LLVMFuzzerTestOneInput:
   58|    824|{
   59|    824|    scn::fuzz::run(data, size);
   60|    824|    return 0;
   61|    824|}
chrono_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   34|    824|{
   35|    824|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (35:9): [True: 0, False: 824]
  |  Branch (35:35): [True: 0, False: 824]
  ------------------
   36|      0|        return;
   37|      0|    }
   38|       |
   39|    824|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   40|       |
   41|    824|    const auto& f =
   42|    824|        get_format_strings<char>("{:%T}", "{:%R}", "{:%D}", "{:%F}",
   43|    824|                                 "{:%Y-%m-%dT%H:%M:%S%z}", "{:%a}", "{:%b}");
   44|    824|    do_basic_run(sv, f);
   45|       |
   46|    824|    const auto& wf = get_format_strings<wchar_t>(
   47|    824|        L"{:%T}", L"{:%R}", L"{:%D}", L"{:%F}", L"{:%Y-%m-%dT%H:%M:%S%z}",
   48|    824|        L"{:%a}", L"{:%b}");
   49|    824|    do_basic_run(wsv_reinterpret, wf);
   50|    824|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (50:9): [True: 824, False: 0]
  ------------------
   51|    824|        do_basic_run(wsv_transcode, wf);
   52|    824|    }
   53|    824|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|    824|{
   27|    824|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    824|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    824|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    824|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|    824|{
   27|    824|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    824|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    824|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    824|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|  1.64k|{
   27|  1.64k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.64k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.64k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.64k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|  1.64k|{
   27|  1.64k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.64k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.64k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.64k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    824|{
   53|    824|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|    824|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    824|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    824|    string_buffer.resize(size);
   57|    824|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    824|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    824|    const auto wsv_reinterpret_size =
   62|    824|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 70, False: 754]
  ------------------
   63|    824|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    824|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    824|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    824|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    824|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    824|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    824|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    824|{
  123|    824|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    824|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    824|    buf.resize(sizeof...(Args));
  126|    824|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    824|    return buf;
  128|    824|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    824|{
  109|    824|    if constexpr (std::is_same_v<CharT, char>) {
  110|    824|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    824|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    824|{
  186|    824|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    824|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    824|                                   format_strings);
  189|    824|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|    824|{
  134|       |    // Regular scan
  135|  5.76k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.76k, False: 824]
  ------------------
  136|  5.76k|        auto it = scn::ranges::begin(source);
  137|  12.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.7k|            auto result = scn::scan<T>(
  140|  12.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.7k|                scn::runtime_format(f));
  142|  12.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.76k, False: 6.97k]
  ------------------
  143|  5.76k|                break;
  144|  5.76k|            }
  145|  6.97k|            it = result->begin();
  146|  6.97k|        }
  147|  5.76k|    }
  148|       |
  149|       |    // scan localized
  150|  5.76k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.76k, False: 824]
  ------------------
  151|  5.76k|        auto it = scn::ranges::begin(source);
  152|  12.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.7k|            auto result = scn::scan<T>(
  155|  12.7k|                global_locale,
  156|  12.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.7k|                scn::runtime_format(f));
  158|  12.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.76k, False: 6.97k]
  ------------------
  159|  5.76k|                break;
  160|  5.76k|            }
  161|  6.97k|            it = result->begin();
  162|  6.97k|        }
  163|  5.76k|    }
  164|       |
  165|       |    // scan_value
  166|    824|    {
  167|    824|        auto it = scn::ranges::begin(source);
  168|    824|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    824|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    824|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    824|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    824|            auto result = scn::scan_value<T>(
  171|    824|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    824|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 824, False: 0]
  ------------------
  173|    824|                break;
  174|    824|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    824|    }
  178|    824|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    824|{
  134|       |    // Regular scan
  135|  5.76k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.76k, False: 824]
  ------------------
  136|  5.76k|        auto it = scn::ranges::begin(source);
  137|  12.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.7k|            auto result = scn::scan<T>(
  140|  12.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.7k|                scn::runtime_format(f));
  142|  12.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.76k, False: 6.97k]
  ------------------
  143|  5.76k|                break;
  144|  5.76k|            }
  145|  6.97k|            it = result->begin();
  146|  6.97k|        }
  147|  5.76k|    }
  148|       |
  149|       |    // scan localized
  150|  5.76k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.76k, False: 824]
  ------------------
  151|  5.76k|        auto it = scn::ranges::begin(source);
  152|  12.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.7k|            auto result = scn::scan<T>(
  155|  12.7k|                global_locale,
  156|  12.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.7k|                scn::runtime_format(f));
  158|  12.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.76k, False: 6.97k]
  ------------------
  159|  5.76k|                break;
  160|  5.76k|            }
  161|  6.97k|            it = result->begin();
  162|  6.97k|        }
  163|  5.76k|    }
  164|       |
  165|       |    // scan_value
  166|    824|    {
  167|    824|        auto it = scn::ranges::begin(source);
  168|    824|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    824|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    824|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    824|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    824|            auto result = scn::scan_value<T>(
  171|    824|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    824|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 824, False: 0]
  ------------------
  173|    824|                break;
  174|    824|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    824|    }
  178|    824|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    824|{
  134|       |    // Regular scan
  135|  5.76k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.76k, False: 824]
  ------------------
  136|  5.76k|        auto it = scn::ranges::begin(source);
  137|  12.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.7k|            auto result = scn::scan<T>(
  140|  12.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.7k|                scn::runtime_format(f));
  142|  12.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.76k, False: 6.97k]
  ------------------
  143|  5.76k|                break;
  144|  5.76k|            }
  145|  6.97k|            it = result->begin();
  146|  6.97k|        }
  147|  5.76k|    }
  148|       |
  149|       |    // scan localized
  150|  5.76k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.76k, False: 824]
  ------------------
  151|  5.76k|        auto it = scn::ranges::begin(source);
  152|  12.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.7k|            auto result = scn::scan<T>(
  155|  12.7k|                global_locale,
  156|  12.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.7k|                scn::runtime_format(f));
  158|  12.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.76k, False: 6.97k]
  ------------------
  159|  5.76k|                break;
  160|  5.76k|            }
  161|  6.97k|            it = result->begin();
  162|  6.97k|        }
  163|  5.76k|    }
  164|       |
  165|       |    // scan_value
  166|    824|    {
  167|    824|        auto it = scn::ranges::begin(source);
  168|    824|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    824|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    824|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    824|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    824|            auto result = scn::scan_value<T>(
  171|    824|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    824|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 824, False: 0]
  ------------------
  173|    824|                break;
  174|    824|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    824|    }
  178|    824|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmKNSt3__15dequeIcNS3_9allocatorIcEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|    824|{
  134|       |    // Regular scan
  135|  5.76k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.76k, False: 824]
  ------------------
  136|  5.76k|        auto it = scn::ranges::begin(source);
  137|  15.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.2k|            auto result = scn::scan<T>(
  140|  15.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.2k|                scn::runtime_format(f));
  142|  15.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.76k, False: 9.53k]
  ------------------
  143|  5.76k|                break;
  144|  5.76k|            }
  145|  9.53k|            it = result->begin();
  146|  9.53k|        }
  147|  5.76k|    }
  148|       |
  149|       |    // scan localized
  150|  5.76k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.76k, False: 824]
  ------------------
  151|  5.76k|        auto it = scn::ranges::begin(source);
  152|  15.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.2k|            auto result = scn::scan<T>(
  155|  15.2k|                global_locale,
  156|  15.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.2k|                scn::runtime_format(f));
  158|  15.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.76k, False: 9.53k]
  ------------------
  159|  5.76k|                break;
  160|  5.76k|            }
  161|  9.53k|            it = result->begin();
  162|  9.53k|        }
  163|  5.76k|    }
  164|       |
  165|       |    // scan_value
  166|    824|    {
  167|    824|        auto it = scn::ranges::begin(source);
  168|    824|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    824|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    824|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    824|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    824|            auto result = scn::scan_value<T>(
  171|    824|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    824|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 824, False: 0]
  ------------------
  173|    824|                break;
  174|    824|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    824|    }
  178|    824|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    824|{
  134|       |    // Regular scan
  135|  5.76k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.76k, False: 824]
  ------------------
  136|  5.76k|        auto it = scn::ranges::begin(source);
  137|  15.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.2k|            auto result = scn::scan<T>(
  140|  15.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.2k|                scn::runtime_format(f));
  142|  15.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.76k, False: 9.53k]
  ------------------
  143|  5.76k|                break;
  144|  5.76k|            }
  145|  9.53k|            it = result->begin();
  146|  9.53k|        }
  147|  5.76k|    }
  148|       |
  149|       |    // scan localized
  150|  5.76k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.76k, False: 824]
  ------------------
  151|  5.76k|        auto it = scn::ranges::begin(source);
  152|  15.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.2k|            auto result = scn::scan<T>(
  155|  15.2k|                global_locale,
  156|  15.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.2k|                scn::runtime_format(f));
  158|  15.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.76k, False: 9.53k]
  ------------------
  159|  5.76k|                break;
  160|  5.76k|            }
  161|  9.53k|            it = result->begin();
  162|  9.53k|        }
  163|  5.76k|    }
  164|       |
  165|       |    // scan_value
  166|    824|    {
  167|    824|        auto it = scn::ranges::begin(source);
  168|    824|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    824|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    824|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    824|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    824|            auto result = scn::scan_value<T>(
  171|    824|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    824|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 824, False: 0]
  ------------------
  173|    824|                break;
  174|    824|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    824|    }
  178|    824|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    824|{
  134|       |    // Regular scan
  135|  5.76k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.76k, False: 824]
  ------------------
  136|  5.76k|        auto it = scn::ranges::begin(source);
  137|  15.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.2k|            auto result = scn::scan<T>(
  140|  15.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.2k|                scn::runtime_format(f));
  142|  15.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.76k, False: 9.53k]
  ------------------
  143|  5.76k|                break;
  144|  5.76k|            }
  145|  9.53k|            it = result->begin();
  146|  9.53k|        }
  147|  5.76k|    }
  148|       |
  149|       |    // scan localized
  150|  5.76k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.76k, False: 824]
  ------------------
  151|  5.76k|        auto it = scn::ranges::begin(source);
  152|  15.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.2k|            auto result = scn::scan<T>(
  155|  15.2k|                global_locale,
  156|  15.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.2k|                scn::runtime_format(f));
  158|  15.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.76k, False: 9.53k]
  ------------------
  159|  5.76k|                break;
  160|  5.76k|            }
  161|  9.53k|            it = result->begin();
  162|  9.53k|        }
  163|  5.76k|    }
  164|       |
  165|       |    // scan_value
  166|    824|    {
  167|    824|        auto it = scn::ranges::begin(source);
  168|    824|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    824|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    824|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    824|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    824|            auto result = scn::scan_value<T>(
  171|    824|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    824|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 824, False: 0]
  ------------------
  173|    824|                break;
  174|    824|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    824|    }
  178|    824|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    824|{
   91|    824|    using char_type = ranges::range_value_t<Source>;
   92|    824|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    824|    deque.clear();
   94|    824|    std::copy(ranges::begin(source), ranges::end(source),
   95|    824|              std::back_inserter(deque));
   96|    824|    return deque;
   97|    824|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    824|{
   80|    824|    if constexpr (std::is_same_v<CharT, char>) {
   81|    824|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    824|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    824|{
  123|    824|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    824|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    824|    buf.resize(sizeof...(Args));
  126|    824|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    824|    return buf;
  128|    824|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    824|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    824|    else {
  113|    824|        return wformat_string_view_buffer;
  114|    824|    }
  115|    824|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.64k|{
  186|  1.64k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.64k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.64k|                                   format_strings);
  189|  1.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|  1.64k|{
  134|       |    // Regular scan
  135|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.5k, False: 1.64k]
  ------------------
  136|  11.5k|        auto it = scn::ranges::begin(source);
  137|  15.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.1k|            auto result = scn::scan<T>(
  140|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.1k|                scn::runtime_format(f));
  142|  15.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.5k, False: 3.59k]
  ------------------
  143|  11.5k|                break;
  144|  11.5k|            }
  145|  3.59k|            it = result->begin();
  146|  3.59k|        }
  147|  11.5k|    }
  148|       |
  149|       |    // scan localized
  150|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.5k, False: 1.64k]
  ------------------
  151|  11.5k|        auto it = scn::ranges::begin(source);
  152|  15.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.1k|            auto result = scn::scan<T>(
  155|  15.1k|                global_locale,
  156|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.1k|                scn::runtime_format(f));
  158|  15.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.5k, False: 3.59k]
  ------------------
  159|  11.5k|                break;
  160|  11.5k|            }
  161|  3.59k|            it = result->begin();
  162|  3.59k|        }
  163|  11.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.64k|    {
  167|  1.64k|        auto it = scn::ranges::begin(source);
  168|  1.64k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.64k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.64k|            auto result = scn::scan_value<T>(
  171|  1.64k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.64k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.64k, False: 0]
  ------------------
  173|  1.64k|                break;
  174|  1.64k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.64k|    }
  178|  1.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.64k|{
  134|       |    // Regular scan
  135|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.5k, False: 1.64k]
  ------------------
  136|  11.5k|        auto it = scn::ranges::begin(source);
  137|  15.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.1k|            auto result = scn::scan<T>(
  140|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.1k|                scn::runtime_format(f));
  142|  15.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.5k, False: 3.59k]
  ------------------
  143|  11.5k|                break;
  144|  11.5k|            }
  145|  3.59k|            it = result->begin();
  146|  3.59k|        }
  147|  11.5k|    }
  148|       |
  149|       |    // scan localized
  150|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.5k, False: 1.64k]
  ------------------
  151|  11.5k|        auto it = scn::ranges::begin(source);
  152|  15.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.1k|            auto result = scn::scan<T>(
  155|  15.1k|                global_locale,
  156|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.1k|                scn::runtime_format(f));
  158|  15.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.5k, False: 3.59k]
  ------------------
  159|  11.5k|                break;
  160|  11.5k|            }
  161|  3.59k|            it = result->begin();
  162|  3.59k|        }
  163|  11.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.64k|    {
  167|  1.64k|        auto it = scn::ranges::begin(source);
  168|  1.64k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.64k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.64k|            auto result = scn::scan_value<T>(
  171|  1.64k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.64k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.64k, False: 0]
  ------------------
  173|  1.64k|                break;
  174|  1.64k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.64k|    }
  178|  1.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.64k|{
  134|       |    // Regular scan
  135|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.5k, False: 1.64k]
  ------------------
  136|  11.5k|        auto it = scn::ranges::begin(source);
  137|  15.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.1k|            auto result = scn::scan<T>(
  140|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.1k|                scn::runtime_format(f));
  142|  15.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.5k, False: 3.59k]
  ------------------
  143|  11.5k|                break;
  144|  11.5k|            }
  145|  3.59k|            it = result->begin();
  146|  3.59k|        }
  147|  11.5k|    }
  148|       |
  149|       |    // scan localized
  150|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.5k, False: 1.64k]
  ------------------
  151|  11.5k|        auto it = scn::ranges::begin(source);
  152|  15.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.1k|            auto result = scn::scan<T>(
  155|  15.1k|                global_locale,
  156|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.1k|                scn::runtime_format(f));
  158|  15.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.5k, False: 3.59k]
  ------------------
  159|  11.5k|                break;
  160|  11.5k|            }
  161|  3.59k|            it = result->begin();
  162|  3.59k|        }
  163|  11.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.64k|    {
  167|  1.64k|        auto it = scn::ranges::begin(source);
  168|  1.64k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.64k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.64k|            auto result = scn::scan_value<T>(
  171|  1.64k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.64k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.64k, False: 0]
  ------------------
  173|  1.64k|                break;
  174|  1.64k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.64k|    }
  178|  1.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmKNSt3__15dequeIwNS3_9allocatorIwEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|  1.64k|{
  134|       |    // Regular scan
  135|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.5k, False: 1.64k]
  ------------------
  136|  11.5k|        auto it = scn::ranges::begin(source);
  137|  15.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.1k|            auto result = scn::scan<T>(
  140|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.1k|                scn::runtime_format(f));
  142|  15.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.5k, False: 3.59k]
  ------------------
  143|  11.5k|                break;
  144|  11.5k|            }
  145|  3.59k|            it = result->begin();
  146|  3.59k|        }
  147|  11.5k|    }
  148|       |
  149|       |    // scan localized
  150|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.5k, False: 1.64k]
  ------------------
  151|  11.5k|        auto it = scn::ranges::begin(source);
  152|  15.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.1k|            auto result = scn::scan<T>(
  155|  15.1k|                global_locale,
  156|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.1k|                scn::runtime_format(f));
  158|  15.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.5k, False: 3.59k]
  ------------------
  159|  11.5k|                break;
  160|  11.5k|            }
  161|  3.59k|            it = result->begin();
  162|  3.59k|        }
  163|  11.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.64k|    {
  167|  1.64k|        auto it = scn::ranges::begin(source);
  168|  1.64k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.64k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.64k|            auto result = scn::scan_value<T>(
  171|  1.64k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.64k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.64k, False: 0]
  ------------------
  173|  1.64k|                break;
  174|  1.64k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.64k|    }
  178|  1.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.64k|{
  134|       |    // Regular scan
  135|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.5k, False: 1.64k]
  ------------------
  136|  11.5k|        auto it = scn::ranges::begin(source);
  137|  15.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.1k|            auto result = scn::scan<T>(
  140|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.1k|                scn::runtime_format(f));
  142|  15.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.5k, False: 3.59k]
  ------------------
  143|  11.5k|                break;
  144|  11.5k|            }
  145|  3.59k|            it = result->begin();
  146|  3.59k|        }
  147|  11.5k|    }
  148|       |
  149|       |    // scan localized
  150|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.5k, False: 1.64k]
  ------------------
  151|  11.5k|        auto it = scn::ranges::begin(source);
  152|  15.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.1k|            auto result = scn::scan<T>(
  155|  15.1k|                global_locale,
  156|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.1k|                scn::runtime_format(f));
  158|  15.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.5k, False: 3.59k]
  ------------------
  159|  11.5k|                break;
  160|  11.5k|            }
  161|  3.59k|            it = result->begin();
  162|  3.59k|        }
  163|  11.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.64k|    {
  167|  1.64k|        auto it = scn::ranges::begin(source);
  168|  1.64k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.64k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.64k|            auto result = scn::scan_value<T>(
  171|  1.64k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.64k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.64k, False: 0]
  ------------------
  173|  1.64k|                break;
  174|  1.64k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.64k|    }
  178|  1.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.64k|{
  134|       |    // Regular scan
  135|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.5k, False: 1.64k]
  ------------------
  136|  11.5k|        auto it = scn::ranges::begin(source);
  137|  15.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.1k|            auto result = scn::scan<T>(
  140|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.1k|                scn::runtime_format(f));
  142|  15.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.5k, False: 3.59k]
  ------------------
  143|  11.5k|                break;
  144|  11.5k|            }
  145|  3.59k|            it = result->begin();
  146|  3.59k|        }
  147|  11.5k|    }
  148|       |
  149|       |    // scan localized
  150|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.5k, False: 1.64k]
  ------------------
  151|  11.5k|        auto it = scn::ranges::begin(source);
  152|  15.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.1k|            auto result = scn::scan<T>(
  155|  15.1k|                global_locale,
  156|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.1k|                scn::runtime_format(f));
  158|  15.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.5k, False: 3.59k]
  ------------------
  159|  11.5k|                break;
  160|  11.5k|            }
  161|  3.59k|            it = result->begin();
  162|  3.59k|        }
  163|  11.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.64k|    {
  167|  1.64k|        auto it = scn::ranges::begin(source);
  168|  1.64k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.64k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.64k|            auto result = scn::scan_value<T>(
  171|  1.64k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.64k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.64k, False: 0]
  ------------------
  173|  1.64k|                break;
  174|  1.64k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.64k|    }
  178|  1.64k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.64k|{
   91|  1.64k|    using char_type = ranges::range_value_t<Source>;
   92|  1.64k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.64k|    deque.clear();
   94|  1.64k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.64k|              std::back_inserter(deque));
   96|  1.64k|    return deque;
   97|  1.64k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.64k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.64k|    else {
   84|  1.64k|        return wnoncontiguous_buffer;
   85|  1.64k|    }
   86|  1.64k|}

