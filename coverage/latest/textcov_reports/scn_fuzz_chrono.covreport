_ZN3scn2v46detail23chrono_datetime_scannerIc2tmE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  65.5k|    {
 1523|  65.5k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  65.5k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  65.5k|{
 1494|  65.5k|    auto it = pctx.begin();
 1495|  65.5k|    auto end = pctx.end();
 1496|  65.5k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.84k, False: 63.7k]
  |  Branch (1496:22): [True: 0, False: 63.7k]
  ------------------
 1497|  1.84k|        pctx.on_error(
 1498|  1.84k|            "Format string without specifiers is not valid for this type");
 1499|  1.84k|        return it;
 1500|  1.84k|    }
 1501|       |
 1502|  63.7k|    auto checker = detail::tm_format_checker<T>{};
 1503|  63.7k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  63.7k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 63.7k, False: 0]
  ------------------
 1505|  63.7k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  63.7k|    }
 1507|  63.7k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 63.7k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  63.7k|    return end;
 1512|  63.7k|}
_ZN3scn2v46detail12setter_stateC2Ev:
  742|   781k|        : localized(0),
  743|   781k|          subsec_set(0),
  744|   781k|          sec_set(0),
  745|   781k|          min_set(0),
  746|   781k|          hour24_set(0),
  747|   781k|          hour12_set(0),
  748|   781k|          mday_set(0),
  749|   781k|          mon_set(0),
  750|   781k|          full_year_set(0),
  751|   781k|          century_set(0),
  752|   781k|          short_year_set(0),
  753|   781k|          wday_set(0),
  754|   781k|          yday_set(0),
  755|   781k|          tzoff_set(0),
  756|   781k|          tzname_set(0),
  757|   781k|          am_pm_set(0),
  758|   781k|          epoch_ticks_set(0),
  759|   781k|          duration_ticks_set(0),
  760|   781k|          duration_suffix_set(0),
  761|   781k|          is_pm(0)
  762|   781k|    {
  763|   781k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  63.7k|{
  377|  63.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 63.7k]
  |  Branch (377:25): [True: 0, False: 63.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  63.7k|    auto p = begin;
  383|  63.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 63.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  63.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 63.7k]
  |  Branch (392:21): [True: 0, False: 63.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   167k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 167k, False: 0]
  ------------------
  399|   167k|        auto ch = *p;
  400|   167k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 63.7k, False: 104k]
  ------------------
  401|  63.7k|            break;
  402|  63.7k|        }
  403|   104k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 18.4k, False: 85.8k]
  ------------------
  404|  18.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 18.4k]
  |  Branch (404:32): [True: 18.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 18.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  18.4k|            const auto cp_len =
  412|  18.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  18.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 18.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  18.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 18.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  18.4k|            ++p;
  439|  18.4k|            continue;
  440|  18.4k|        }
  441|  85.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 18.4k, False: 67.3k]
  ------------------
  442|  18.4k|            handler.on_text(begin, p);
  443|  18.4k|        }
  444|  85.8k|        ++p;  // Consume '%'
  445|  85.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 85.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  85.8k|        ch = *p;
  451|  85.8k|        ++p;
  452|       |
  453|  85.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 85.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 85.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 85.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.68k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.68k, False: 82.1k]
  ------------------
  463|  3.68k|                handler.on_full_year();
  464|  3.68k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 85.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 85.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 85.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 85.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  9.90k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 9.90k, False: 75.9k]
  ------------------
  479|  9.90k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 85.8k]
  ------------------
  480|  9.90k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 85.8k]
  ------------------
  481|  9.90k|                handler.on_month_name();
  482|  9.90k|                break;
  483|  3.68k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.68k, False: 82.1k]
  ------------------
  484|  3.68k|                handler.on_dec_month();
  485|  3.68k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 85.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 85.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 85.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 85.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.68k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.68k, False: 82.1k]
  ------------------
  502|  3.68k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 85.8k]
  ------------------
  503|  3.68k|                handler.on_day_of_month();
  504|  3.68k|                break;
  505|       |            // Day of week
  506|  7.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 7.38k, False: 78.4k]
  ------------------
  507|  7.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 85.8k]
  ------------------
  508|  7.38k|                handler.on_weekday_name();
  509|  7.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 85.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 85.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.68k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.68k, False: 82.1k]
  ------------------
  518|  3.68k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 85.8k]
  ------------------
  519|  3.68k|                handler.on_24_hour();
  520|  3.68k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 85.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 85.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.68k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.68k, False: 82.1k]
  ------------------
  527|  3.68k|                handler.on_minute();
  528|  3.68k|                break;
  529|       |            // Second
  530|  3.68k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.68k, False: 82.1k]
  ------------------
  531|  3.68k|                handler.on_second();
  532|  3.68k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 85.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.68k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.68k, False: 82.1k]
  ------------------
  563|  3.68k|                handler.on_tz_offset();
  564|  3.68k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 85.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 85.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 85.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 85.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.41k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.41k, False: 77.4k]
  ------------------
  579|  8.41k|                handler.on_us_date();
  580|  8.41k|                break;
  581|  4.34k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.34k, False: 81.4k]
  ------------------
  582|  4.34k|                handler.on_iso_date();
  583|  4.34k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 85.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  23.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 23.4k, False: 62.3k]
  ------------------
  588|  23.4k|                handler.on_24_hour_time();
  589|  23.4k|                break;
  590|  6.49k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.49k, False: 79.3k]
  ------------------
  591|  6.49k|                handler.on_iso_time();
  592|  6.49k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 85.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 85.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 85.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 85.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 85.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 85.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 85.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 85.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  85.8k|        }
  704|  85.8k|        begin = p;
  705|       |
  706|  85.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 85.8k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  85.8k|    }
  710|  63.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 63.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  63.7k|    handler.verify();
  714|  63.7k|    return p;
  715|  63.7k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIcEEvPKT_S8_:
 1176|  18.4k|    {
 1177|  18.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_full_yearENS1_14numeric_systemE:
 1188|  22.7k|    {
 1189|  22.7k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  22.7k|        st.set_full_year(*this);
 1193|  22.7k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  22.7k|    {                                                                \
  769|  22.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  22.7k|        field##_set = 1;                                             \
  774|  22.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_short_yearENS1_14numeric_systemE:
 1195|  15.7k|    {
 1196|  15.7k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  15.7k|        st.set_short_year(*this);
 1200|  15.7k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  15.7k|    {                                                                \
  769|  15.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.7k|        field##_set = 1;                                             \
  774|  15.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_month_nameEv:
 1231|  18.7k|    {
 1232|  18.7k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  18.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_dec_monthENS1_14numeric_systemE:
 1237|  38.5k|    {
 1238|  38.5k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  38.5k|        st.set_mon(*this);
 1242|  38.5k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  38.5k|    {                                                                \
  769|  38.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  38.5k|        field##_set = 1;                                             \
  774|  38.5k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_day_of_monthENS1_14numeric_systemE:
 1265|  38.5k|    {
 1266|  38.5k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  38.5k|        st.set_mday(*this);
 1270|  38.5k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  38.5k|    {                                                                \
  769|  38.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  38.5k|        field##_set = 1;                                             \
  774|  38.5k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_weekday_nameEv:
 1273|  14.7k|    {
 1274|  14.7k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  14.7k|        st.set_wday(*this);
 1278|  14.7k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  14.7k|    {                                                                \
  769|  14.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.7k|        field##_set = 1;                                             \
  774|  14.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_24_hourENS1_14numeric_systemE:
 1295|  69.9k|    {
 1296|  69.9k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  69.9k|        st.set_hour24(*this);
 1300|  69.9k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  69.9k|    {                                                                \
  769|  69.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  69.9k|        field##_set = 1;                                             \
  774|  69.9k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_minuteENS1_14numeric_systemE:
 1309|  69.9k|    {
 1310|  69.9k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  69.9k|        st.set_min(*this);
 1314|  69.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  69.9k|    {                                                                \
  769|  69.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  69.9k|        field##_set = 1;                                             \
  774|  69.9k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_secondENS1_14numeric_systemE:
 1316|  25.3k|    {
 1317|  25.3k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  25.3k|        st.set_sec(*this);
 1321|  25.3k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  25.3k|    {                                                                \
  769|  25.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  25.3k|        field##_set = 1;                                             \
  774|  25.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_tz_offsetENS1_14numeric_systemE:
 1335|  11.0k|    {
 1336|  11.0k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  11.0k|        st.set_tzoff(*this);
 1340|  11.0k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  11.0k|    {                                                                \
  769|  11.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.0k|        field##_set = 1;                                             \
  774|  11.0k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_us_dateEv:
 1368|  15.7k|    {
 1369|  15.7k|        on_dec_month();
 1370|  15.7k|        on_day_of_month();
 1371|  15.7k|        on_short_year();
 1372|  15.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_dateEv:
 1374|  11.7k|    {
 1375|  11.7k|        on_full_year();
 1376|  11.7k|        on_dec_month();
 1377|  11.7k|        on_day_of_month();
 1378|  11.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_24_hour_timeEv:
 1386|  44.6k|    {
 1387|  44.6k|        on_24_hour();
 1388|  44.6k|        on_minute();
 1389|  44.6k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_timeEv:
 1391|  14.2k|    {
 1392|  14.2k|        on_24_hour();
 1393|  14.2k|        on_minute();
 1394|  14.2k|        on_second();
 1395|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE6verifyEv:
 1418|   130k|    {
 1419|   130k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   130k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   130k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   130k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   130k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   130k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   130k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   130k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   130k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   130k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   130k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   130k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   130k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   130k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   130k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   130k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   130k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   130k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   130k|        st.verify(*this);
 1463|   130k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerI2tmEEEEvRT_:
  799|   130k|    {
  800|   130k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 69.9k, False: 61.0k]
  |  Branch (800:27): [True: 0, False: 69.9k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   130k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 130k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   130k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 22.7k, False: 108k]
  |  Branch (818:31): [True: 0, False: 22.7k]
  |  Branch (818:46): [True: 0, False: 22.7k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   130k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 11.0k, False: 119k]
  |  Branch (824:26): [True: 0, False: 11.0k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   130k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 14.7k, False: 116k]
  |  Branch (829:26): [True: 38.5k, False: 77.6k]
  |  Branch (829:38): [True: 0, False: 77.6k]
  ------------------
  830|   130k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 53.3k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   130k|    }
_ZNK3scn2v46detail17tm_format_checkerI2tmE9get_errorEv:
 1466|   328k|    {
 1467|   328k|        return err;
 1468|   328k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIc2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  63.7k|    {
 1530|  63.7k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  63.7k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  65.5k|    {
 1523|  65.5k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  65.5k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  65.5k|{
 1494|  65.5k|    auto it = pctx.begin();
 1495|  65.5k|    auto end = pctx.end();
 1496|  65.5k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.84k, False: 63.7k]
  |  Branch (1496:22): [True: 0, False: 63.7k]
  ------------------
 1497|  1.84k|        pctx.on_error(
 1498|  1.84k|            "Format string without specifiers is not valid for this type");
 1499|  1.84k|        return it;
 1500|  1.84k|    }
 1501|       |
 1502|  63.7k|    auto checker = detail::tm_format_checker<T>{};
 1503|  63.7k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  63.7k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 63.7k, False: 0]
  ------------------
 1505|  63.7k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  63.7k|    }
 1507|  63.7k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 63.7k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  63.7k|    return end;
 1512|  63.7k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  63.7k|{
  377|  63.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 63.7k]
  |  Branch (377:25): [True: 0, False: 63.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  63.7k|    auto p = begin;
  383|  63.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 63.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  63.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 63.7k]
  |  Branch (392:21): [True: 0, False: 63.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   167k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 167k, False: 0]
  ------------------
  399|   167k|        auto ch = *p;
  400|   167k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 63.7k, False: 104k]
  ------------------
  401|  63.7k|            break;
  402|  63.7k|        }
  403|   104k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 18.4k, False: 85.8k]
  ------------------
  404|  18.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 18.4k]
  |  Branch (404:32): [True: 18.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 18.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  18.4k|            const auto cp_len =
  412|  18.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  18.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 18.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  18.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 18.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  18.4k|            ++p;
  439|  18.4k|            continue;
  440|  18.4k|        }
  441|  85.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 18.4k, False: 67.3k]
  ------------------
  442|  18.4k|            handler.on_text(begin, p);
  443|  18.4k|        }
  444|  85.8k|        ++p;  // Consume '%'
  445|  85.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 85.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  85.8k|        ch = *p;
  451|  85.8k|        ++p;
  452|       |
  453|  85.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 85.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 85.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 85.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.68k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.68k, False: 82.1k]
  ------------------
  463|  3.68k|                handler.on_full_year();
  464|  3.68k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 85.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 85.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 85.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 85.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  9.90k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 9.90k, False: 75.9k]
  ------------------
  479|  9.90k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 85.8k]
  ------------------
  480|  9.90k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 85.8k]
  ------------------
  481|  9.90k|                handler.on_month_name();
  482|  9.90k|                break;
  483|  3.68k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.68k, False: 82.1k]
  ------------------
  484|  3.68k|                handler.on_dec_month();
  485|  3.68k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 85.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 85.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 85.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 85.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.68k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.68k, False: 82.1k]
  ------------------
  502|  3.68k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 85.8k]
  ------------------
  503|  3.68k|                handler.on_day_of_month();
  504|  3.68k|                break;
  505|       |            // Day of week
  506|  7.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 7.38k, False: 78.4k]
  ------------------
  507|  7.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 85.8k]
  ------------------
  508|  7.38k|                handler.on_weekday_name();
  509|  7.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 85.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 85.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.68k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.68k, False: 82.1k]
  ------------------
  518|  3.68k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 85.8k]
  ------------------
  519|  3.68k|                handler.on_24_hour();
  520|  3.68k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 85.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 85.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.68k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.68k, False: 82.1k]
  ------------------
  527|  3.68k|                handler.on_minute();
  528|  3.68k|                break;
  529|       |            // Second
  530|  3.68k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.68k, False: 82.1k]
  ------------------
  531|  3.68k|                handler.on_second();
  532|  3.68k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 85.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.68k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.68k, False: 82.1k]
  ------------------
  563|  3.68k|                handler.on_tz_offset();
  564|  3.68k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 85.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 85.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 85.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 85.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.41k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.41k, False: 77.4k]
  ------------------
  579|  8.41k|                handler.on_us_date();
  580|  8.41k|                break;
  581|  4.34k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.34k, False: 81.4k]
  ------------------
  582|  4.34k|                handler.on_iso_date();
  583|  4.34k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 85.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  23.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 23.4k, False: 62.3k]
  ------------------
  588|  23.4k|                handler.on_24_hour_time();
  589|  23.4k|                break;
  590|  6.49k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.49k, False: 79.3k]
  ------------------
  591|  6.49k|                handler.on_iso_time();
  592|  6.49k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 85.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 85.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 85.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 85.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 85.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 85.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 85.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 85.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  85.8k|        }
  704|  85.8k|        begin = p;
  705|       |
  706|  85.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 85.8k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  85.8k|    }
  710|  63.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 63.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  63.7k|    handler.verify();
  714|  63.7k|    return p;
  715|  63.7k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIcEEvPKT_S8_:
 1176|  18.4k|    {
 1177|  18.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_full_yearENS1_14numeric_systemE:
 1188|  22.7k|    {
 1189|  22.7k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  22.7k|        st.set_full_year(*this);
 1193|  22.7k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  22.7k|    {                                                                \
  769|  22.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  22.7k|        field##_set = 1;                                             \
  774|  22.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_short_yearENS1_14numeric_systemE:
 1195|  15.7k|    {
 1196|  15.7k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  15.7k|        st.set_short_year(*this);
 1200|  15.7k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  15.7k|    {                                                                \
  769|  15.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.7k|        field##_set = 1;                                             \
  774|  15.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_month_nameEv:
 1231|  18.7k|    {
 1232|  18.7k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  18.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_dec_monthENS1_14numeric_systemE:
 1237|  38.5k|    {
 1238|  38.5k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  38.5k|        st.set_mon(*this);
 1242|  38.5k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  38.5k|    {                                                                \
  769|  38.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  38.5k|        field##_set = 1;                                             \
  774|  38.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  38.5k|    {
 1266|  38.5k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  38.5k|        st.set_mday(*this);
 1270|  38.5k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  38.5k|    {                                                                \
  769|  38.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  38.5k|        field##_set = 1;                                             \
  774|  38.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_weekday_nameEv:
 1273|  14.7k|    {
 1274|  14.7k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  14.7k|        st.set_wday(*this);
 1278|  14.7k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  14.7k|    {                                                                \
  769|  14.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.7k|        field##_set = 1;                                             \
  774|  14.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_24_hourENS1_14numeric_systemE:
 1295|  69.9k|    {
 1296|  69.9k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  69.9k|        st.set_hour24(*this);
 1300|  69.9k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  69.9k|    {                                                                \
  769|  69.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  69.9k|        field##_set = 1;                                             \
  774|  69.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_minuteENS1_14numeric_systemE:
 1309|  69.9k|    {
 1310|  69.9k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  69.9k|        st.set_min(*this);
 1314|  69.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  69.9k|    {                                                                \
  769|  69.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  69.9k|        field##_set = 1;                                             \
  774|  69.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_secondENS1_14numeric_systemE:
 1316|  25.3k|    {
 1317|  25.3k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  25.3k|        st.set_sec(*this);
 1321|  25.3k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  25.3k|    {                                                                \
  769|  25.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  25.3k|        field##_set = 1;                                             \
  774|  25.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  11.0k|    {
 1336|  11.0k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  11.0k|        st.set_tzoff(*this);
 1340|  11.0k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  11.0k|    {                                                                \
  769|  11.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.0k|        field##_set = 1;                                             \
  774|  11.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_us_dateEv:
 1368|  15.7k|    {
 1369|  15.7k|        on_dec_month();
 1370|  15.7k|        on_day_of_month();
 1371|  15.7k|        on_short_year();
 1372|  15.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_dateEv:
 1374|  11.7k|    {
 1375|  11.7k|        on_full_year();
 1376|  11.7k|        on_dec_month();
 1377|  11.7k|        on_day_of_month();
 1378|  11.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_24_hour_timeEv:
 1386|  44.6k|    {
 1387|  44.6k|        on_24_hour();
 1388|  44.6k|        on_minute();
 1389|  44.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_timeEv:
 1391|  14.2k|    {
 1392|  14.2k|        on_24_hour();
 1393|  14.2k|        on_minute();
 1394|  14.2k|        on_second();
 1395|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE6verifyEv:
 1418|   130k|    {
 1419|   130k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   130k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   130k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   130k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   130k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   130k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   130k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   130k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   130k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   130k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   130k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   130k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   130k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   130k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   130k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   130k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   130k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   130k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   130k|        st.verify(*this);
 1463|   130k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  799|   130k|    {
  800|   130k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 69.9k, False: 61.0k]
  |  Branch (800:27): [True: 0, False: 69.9k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   130k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 130k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   130k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 22.7k, False: 108k]
  |  Branch (818:31): [True: 0, False: 22.7k]
  |  Branch (818:46): [True: 0, False: 22.7k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   130k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 11.0k, False: 119k]
  |  Branch (824:26): [True: 0, False: 11.0k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   130k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 14.7k, False: 116k]
  |  Branch (829:26): [True: 38.5k, False: 77.6k]
  |  Branch (829:38): [True: 0, False: 77.6k]
  ------------------
  830|   130k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 53.3k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   130k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9get_errorEv:
 1466|   328k|    {
 1467|   328k|        return err;
 1468|   328k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  63.7k|    {
 1530|  63.7k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  63.7k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  65.5k|    {
 1523|  65.5k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  65.5k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  65.5k|{
 1494|  65.5k|    auto it = pctx.begin();
 1495|  65.5k|    auto end = pctx.end();
 1496|  65.5k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.84k, False: 63.7k]
  |  Branch (1496:22): [True: 0, False: 63.7k]
  ------------------
 1497|  1.84k|        pctx.on_error(
 1498|  1.84k|            "Format string without specifiers is not valid for this type");
 1499|  1.84k|        return it;
 1500|  1.84k|    }
 1501|       |
 1502|  63.7k|    auto checker = detail::tm_format_checker<T>{};
 1503|  63.7k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  63.7k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 63.7k, False: 0]
  ------------------
 1505|  63.7k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  63.7k|    }
 1507|  63.7k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 63.7k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  63.7k|    return end;
 1512|  63.7k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  63.7k|{
  377|  63.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 63.7k]
  |  Branch (377:25): [True: 0, False: 63.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  63.7k|    auto p = begin;
  383|  63.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 63.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  63.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 63.7k]
  |  Branch (392:21): [True: 0, False: 63.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   167k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 167k, False: 0]
  ------------------
  399|   167k|        auto ch = *p;
  400|   167k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 63.7k, False: 104k]
  ------------------
  401|  63.7k|            break;
  402|  63.7k|        }
  403|   104k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 18.4k, False: 85.8k]
  ------------------
  404|  18.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 18.4k]
  |  Branch (404:32): [True: 18.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 18.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  18.4k|            const auto cp_len =
  412|  18.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  18.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 18.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  18.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 18.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  18.4k|            ++p;
  439|  18.4k|            continue;
  440|  18.4k|        }
  441|  85.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 18.4k, False: 67.3k]
  ------------------
  442|  18.4k|            handler.on_text(begin, p);
  443|  18.4k|        }
  444|  85.8k|        ++p;  // Consume '%'
  445|  85.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 85.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  85.8k|        ch = *p;
  451|  85.8k|        ++p;
  452|       |
  453|  85.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 85.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 85.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 85.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.68k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.68k, False: 82.1k]
  ------------------
  463|  3.68k|                handler.on_full_year();
  464|  3.68k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 85.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 85.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 85.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 85.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  9.90k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 9.90k, False: 75.9k]
  ------------------
  479|  9.90k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 85.8k]
  ------------------
  480|  9.90k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 85.8k]
  ------------------
  481|  9.90k|                handler.on_month_name();
  482|  9.90k|                break;
  483|  3.68k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.68k, False: 82.1k]
  ------------------
  484|  3.68k|                handler.on_dec_month();
  485|  3.68k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 85.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 85.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 85.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 85.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.68k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.68k, False: 82.1k]
  ------------------
  502|  3.68k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 85.8k]
  ------------------
  503|  3.68k|                handler.on_day_of_month();
  504|  3.68k|                break;
  505|       |            // Day of week
  506|  7.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 7.38k, False: 78.4k]
  ------------------
  507|  7.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 85.8k]
  ------------------
  508|  7.38k|                handler.on_weekday_name();
  509|  7.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 85.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 85.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.68k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.68k, False: 82.1k]
  ------------------
  518|  3.68k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 85.8k]
  ------------------
  519|  3.68k|                handler.on_24_hour();
  520|  3.68k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 85.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 85.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.68k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.68k, False: 82.1k]
  ------------------
  527|  3.68k|                handler.on_minute();
  528|  3.68k|                break;
  529|       |            // Second
  530|  3.68k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.68k, False: 82.1k]
  ------------------
  531|  3.68k|                handler.on_second();
  532|  3.68k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 85.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.68k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.68k, False: 82.1k]
  ------------------
  563|  3.68k|                handler.on_tz_offset();
  564|  3.68k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 85.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 85.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 85.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 85.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.41k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.41k, False: 77.4k]
  ------------------
  579|  8.41k|                handler.on_us_date();
  580|  8.41k|                break;
  581|  4.34k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.34k, False: 81.4k]
  ------------------
  582|  4.34k|                handler.on_iso_date();
  583|  4.34k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 85.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  23.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 23.4k, False: 62.3k]
  ------------------
  588|  23.4k|                handler.on_24_hour_time();
  589|  23.4k|                break;
  590|  6.49k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.49k, False: 79.3k]
  ------------------
  591|  6.49k|                handler.on_iso_time();
  592|  6.49k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 85.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 85.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 85.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 85.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 85.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 85.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 85.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 85.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  85.8k|        }
  704|  85.8k|        begin = p;
  705|       |
  706|  85.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 85.8k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  85.8k|    }
  710|  63.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 63.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  63.7k|    handler.verify();
  714|  63.7k|    return p;
  715|  63.7k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIcEEvPKT_S8_:
 1176|  18.4k|    {
 1177|  18.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_full_yearENS1_14numeric_systemE:
 1188|  22.7k|    {
 1189|  22.7k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  22.7k|        st.set_full_year(*this);
 1193|  22.7k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  22.7k|    {                                                                \
  769|  22.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  22.7k|        field##_set = 1;                                             \
  774|  22.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_short_yearENS1_14numeric_systemE:
 1195|  15.7k|    {
 1196|  15.7k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  15.7k|        st.set_short_year(*this);
 1200|  15.7k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  15.7k|    {                                                                \
  769|  15.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.7k|        field##_set = 1;                                             \
  774|  15.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_month_nameEv:
 1231|  18.7k|    {
 1232|  18.7k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  18.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_dec_monthENS1_14numeric_systemE:
 1237|  38.5k|    {
 1238|  38.5k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  38.5k|        st.set_mon(*this);
 1242|  38.5k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  38.5k|    {                                                                \
  769|  38.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  38.5k|        field##_set = 1;                                             \
  774|  38.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  38.5k|    {
 1266|  38.5k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  38.5k|        st.set_mday(*this);
 1270|  38.5k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  38.5k|    {                                                                \
  769|  38.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  38.5k|        field##_set = 1;                                             \
  774|  38.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_weekday_nameEv:
 1273|  14.7k|    {
 1274|  14.7k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  14.7k|        st.set_wday(*this);
 1278|  14.7k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  14.7k|    {                                                                \
  769|  14.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.7k|        field##_set = 1;                                             \
  774|  14.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_24_hourENS1_14numeric_systemE:
 1295|  69.9k|    {
 1296|  69.9k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  69.9k|        st.set_hour24(*this);
 1300|  69.9k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  69.9k|    {                                                                \
  769|  69.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  69.9k|        field##_set = 1;                                             \
  774|  69.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_minuteENS1_14numeric_systemE:
 1309|  69.9k|    {
 1310|  69.9k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  69.9k|        st.set_min(*this);
 1314|  69.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  69.9k|    {                                                                \
  769|  69.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  69.9k|        field##_set = 1;                                             \
  774|  69.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_secondENS1_14numeric_systemE:
 1316|  25.3k|    {
 1317|  25.3k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  25.3k|        st.set_sec(*this);
 1321|  25.3k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  25.3k|    {                                                                \
  769|  25.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  25.3k|        field##_set = 1;                                             \
  774|  25.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  11.0k|    {
 1336|  11.0k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  11.0k|        st.set_tzoff(*this);
 1340|  11.0k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  11.0k|    {                                                                \
  769|  11.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.0k|        field##_set = 1;                                             \
  774|  11.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_us_dateEv:
 1368|  15.7k|    {
 1369|  15.7k|        on_dec_month();
 1370|  15.7k|        on_day_of_month();
 1371|  15.7k|        on_short_year();
 1372|  15.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_dateEv:
 1374|  11.7k|    {
 1375|  11.7k|        on_full_year();
 1376|  11.7k|        on_dec_month();
 1377|  11.7k|        on_day_of_month();
 1378|  11.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_24_hour_timeEv:
 1386|  44.6k|    {
 1387|  44.6k|        on_24_hour();
 1388|  44.6k|        on_minute();
 1389|  44.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_timeEv:
 1391|  14.2k|    {
 1392|  14.2k|        on_24_hour();
 1393|  14.2k|        on_minute();
 1394|  14.2k|        on_second();
 1395|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE6verifyEv:
 1418|   130k|    {
 1419|   130k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   130k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   130k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   130k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   130k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   130k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   130k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   130k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   130k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   130k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   130k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   130k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   130k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   130k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   130k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   130k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   130k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   130k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   130k|        st.verify(*this);
 1463|   130k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  799|   130k|    {
  800|   130k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 69.9k, False: 61.0k]
  |  Branch (800:27): [True: 0, False: 69.9k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   130k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 130k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   130k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 22.7k, False: 108k]
  |  Branch (818:31): [True: 0, False: 22.7k]
  |  Branch (818:46): [True: 0, False: 22.7k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   130k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 11.0k, False: 119k]
  |  Branch (824:26): [True: 0, False: 11.0k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   130k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 14.7k, False: 116k]
  |  Branch (829:26): [True: 38.5k, False: 77.6k]
  |  Branch (829:38): [True: 0, False: 77.6k]
  ------------------
  830|   130k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 53.3k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   130k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9get_errorEv:
 1466|   328k|    {
 1467|   328k|        return err;
 1468|   328k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  63.7k|    {
 1530|  63.7k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  63.7k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIw2tmE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  70.9k|    {
 1523|  70.9k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  70.9k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  70.9k|{
 1494|  70.9k|    auto it = pctx.begin();
 1495|  70.9k|    auto end = pctx.end();
 1496|  70.9k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.68k, False: 67.2k]
  |  Branch (1496:22): [True: 0, False: 67.2k]
  ------------------
 1497|  3.68k|        pctx.on_error(
 1498|  3.68k|            "Format string without specifiers is not valid for this type");
 1499|  3.68k|        return it;
 1500|  3.68k|    }
 1501|       |
 1502|  67.2k|    auto checker = detail::tm_format_checker<T>{};
 1503|  67.2k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  67.2k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 67.2k, False: 0]
  ------------------
 1505|  67.2k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  67.2k|    }
 1507|  67.2k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 67.2k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  67.2k|    return end;
 1512|  67.2k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  67.2k|{
  377|  67.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 67.2k]
  |  Branch (377:25): [True: 0, False: 67.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  67.2k|    auto p = begin;
  383|  67.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 67.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  67.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 67.2k]
  |  Branch (392:21): [True: 0, False: 67.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   215k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 215k, False: 0]
  ------------------
  399|   215k|        auto ch = *p;
  400|   215k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 67.2k, False: 148k]
  ------------------
  401|  67.2k|            break;
  402|  67.2k|        }
  403|   148k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 36.8k, False: 111k]
  ------------------
  404|  36.8k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 36.8k]
  |  Branch (404:32): [True: 36.8k, False: 0]
  |  Branch (404:46): [True: 0, False: 36.8k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  36.8k|            const auto cp_len =
  412|  36.8k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  36.8k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 36.8k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  36.8k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 36.8k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  36.8k|            ++p;
  439|  36.8k|            continue;
  440|  36.8k|        }
  441|   111k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 36.8k, False: 74.6k]
  ------------------
  442|  36.8k|            handler.on_text(begin, p);
  443|  36.8k|        }
  444|   111k|        ++p;  // Consume '%'
  445|   111k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 111k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   111k|        ch = *p;
  451|   111k|        ++p;
  452|       |
  453|   111k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 111k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 111k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 111k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  7.36k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 7.36k, False: 104k]
  ------------------
  463|  7.36k|                handler.on_full_year();
  464|  7.36k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 111k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 111k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 111k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 111k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.82k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.82k, False: 102k]
  ------------------
  479|  8.82k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 111k]
  ------------------
  480|  8.82k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 111k]
  ------------------
  481|  8.82k|                handler.on_month_name();
  482|  8.82k|                break;
  483|  7.36k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 7.36k, False: 104k]
  ------------------
  484|  7.36k|                handler.on_dec_month();
  485|  7.36k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 111k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 111k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 111k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 111k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  7.36k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 7.36k, False: 104k]
  ------------------
  502|  7.36k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 111k]
  ------------------
  503|  7.36k|                handler.on_day_of_month();
  504|  7.36k|                break;
  505|       |            // Day of week
  506|  7.36k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 7.36k, False: 104k]
  ------------------
  507|  7.36k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 111k]
  ------------------
  508|  7.36k|                handler.on_weekday_name();
  509|  7.36k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 111k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 111k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  7.36k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 7.36k, False: 104k]
  ------------------
  518|  7.36k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 111k]
  ------------------
  519|  7.36k|                handler.on_24_hour();
  520|  7.36k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 111k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 111k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  7.36k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 7.36k, False: 104k]
  ------------------
  527|  7.36k|                handler.on_minute();
  528|  7.36k|                break;
  529|       |            // Second
  530|  7.36k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 7.36k, False: 104k]
  ------------------
  531|  7.36k|                handler.on_second();
  532|  7.36k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 111k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  7.36k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 7.36k, False: 104k]
  ------------------
  563|  7.36k|                handler.on_tz_offset();
  564|  7.36k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 111k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 111k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 111k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 111k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.38k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.38k, False: 104k]
  ------------------
  579|  7.38k|                handler.on_us_date();
  580|  7.38k|                break;
  581|  7.39k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 7.39k, False: 104k]
  ------------------
  582|  7.39k|                handler.on_iso_date();
  583|  7.39k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 111k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  21.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 21.1k, False: 90.3k]
  ------------------
  588|  21.1k|                handler.on_24_hour_time();
  589|  21.1k|                break;
  590|  7.78k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.78k, False: 103k]
  ------------------
  591|  7.78k|                handler.on_iso_time();
  592|  7.78k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 111k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 111k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 111k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 111k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 111k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 111k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 111k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 111k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   111k|        }
  704|   111k|        begin = p;
  705|       |
  706|   111k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 111k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   111k|    }
  710|  67.2k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 67.2k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  67.2k|    handler.verify();
  714|  67.2k|    return p;
  715|  67.2k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIwEEvPKT_S8_:
 1176|  36.8k|    {
 1177|  36.8k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIw2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  67.2k|    {
 1530|  67.2k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  67.2k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  70.9k|    {
 1523|  70.9k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  70.9k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  70.9k|{
 1494|  70.9k|    auto it = pctx.begin();
 1495|  70.9k|    auto end = pctx.end();
 1496|  70.9k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.68k, False: 67.2k]
  |  Branch (1496:22): [True: 0, False: 67.2k]
  ------------------
 1497|  3.68k|        pctx.on_error(
 1498|  3.68k|            "Format string without specifiers is not valid for this type");
 1499|  3.68k|        return it;
 1500|  3.68k|    }
 1501|       |
 1502|  67.2k|    auto checker = detail::tm_format_checker<T>{};
 1503|  67.2k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  67.2k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 67.2k, False: 0]
  ------------------
 1505|  67.2k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  67.2k|    }
 1507|  67.2k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 67.2k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  67.2k|    return end;
 1512|  67.2k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  67.2k|{
  377|  67.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 67.2k]
  |  Branch (377:25): [True: 0, False: 67.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  67.2k|    auto p = begin;
  383|  67.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 67.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  67.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 67.2k]
  |  Branch (392:21): [True: 0, False: 67.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   215k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 215k, False: 0]
  ------------------
  399|   215k|        auto ch = *p;
  400|   215k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 67.2k, False: 148k]
  ------------------
  401|  67.2k|            break;
  402|  67.2k|        }
  403|   148k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 36.8k, False: 111k]
  ------------------
  404|  36.8k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 36.8k]
  |  Branch (404:32): [True: 36.8k, False: 0]
  |  Branch (404:46): [True: 0, False: 36.8k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  36.8k|            const auto cp_len =
  412|  36.8k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  36.8k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 36.8k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  36.8k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 36.8k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  36.8k|            ++p;
  439|  36.8k|            continue;
  440|  36.8k|        }
  441|   111k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 36.8k, False: 74.6k]
  ------------------
  442|  36.8k|            handler.on_text(begin, p);
  443|  36.8k|        }
  444|   111k|        ++p;  // Consume '%'
  445|   111k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 111k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   111k|        ch = *p;
  451|   111k|        ++p;
  452|       |
  453|   111k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 111k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 111k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 111k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  7.36k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 7.36k, False: 104k]
  ------------------
  463|  7.36k|                handler.on_full_year();
  464|  7.36k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 111k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 111k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 111k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 111k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.82k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.82k, False: 102k]
  ------------------
  479|  8.82k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 111k]
  ------------------
  480|  8.82k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 111k]
  ------------------
  481|  8.82k|                handler.on_month_name();
  482|  8.82k|                break;
  483|  7.36k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 7.36k, False: 104k]
  ------------------
  484|  7.36k|                handler.on_dec_month();
  485|  7.36k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 111k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 111k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 111k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 111k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  7.36k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 7.36k, False: 104k]
  ------------------
  502|  7.36k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 111k]
  ------------------
  503|  7.36k|                handler.on_day_of_month();
  504|  7.36k|                break;
  505|       |            // Day of week
  506|  7.36k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 7.36k, False: 104k]
  ------------------
  507|  7.36k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 111k]
  ------------------
  508|  7.36k|                handler.on_weekday_name();
  509|  7.36k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 111k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 111k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  7.36k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 7.36k, False: 104k]
  ------------------
  518|  7.36k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 111k]
  ------------------
  519|  7.36k|                handler.on_24_hour();
  520|  7.36k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 111k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 111k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  7.36k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 7.36k, False: 104k]
  ------------------
  527|  7.36k|                handler.on_minute();
  528|  7.36k|                break;
  529|       |            // Second
  530|  7.36k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 7.36k, False: 104k]
  ------------------
  531|  7.36k|                handler.on_second();
  532|  7.36k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 111k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  7.36k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 7.36k, False: 104k]
  ------------------
  563|  7.36k|                handler.on_tz_offset();
  564|  7.36k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 111k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 111k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 111k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 111k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.38k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.38k, False: 104k]
  ------------------
  579|  7.38k|                handler.on_us_date();
  580|  7.38k|                break;
  581|  7.39k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 7.39k, False: 104k]
  ------------------
  582|  7.39k|                handler.on_iso_date();
  583|  7.39k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 111k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  21.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 21.1k, False: 90.3k]
  ------------------
  588|  21.1k|                handler.on_24_hour_time();
  589|  21.1k|                break;
  590|  7.78k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.78k, False: 103k]
  ------------------
  591|  7.78k|                handler.on_iso_time();
  592|  7.78k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 111k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 111k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 111k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 111k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 111k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 111k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 111k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 111k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   111k|        }
  704|   111k|        begin = p;
  705|       |
  706|   111k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 111k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   111k|    }
  710|  67.2k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 67.2k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  67.2k|    handler.verify();
  714|  67.2k|    return p;
  715|  67.2k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIwEEvPKT_S8_:
 1176|  36.8k|    {
 1177|  36.8k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  67.2k|    {
 1530|  67.2k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  67.2k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  70.9k|    {
 1523|  70.9k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  70.9k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  70.9k|{
 1494|  70.9k|    auto it = pctx.begin();
 1495|  70.9k|    auto end = pctx.end();
 1496|  70.9k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.68k, False: 67.2k]
  |  Branch (1496:22): [True: 0, False: 67.2k]
  ------------------
 1497|  3.68k|        pctx.on_error(
 1498|  3.68k|            "Format string without specifiers is not valid for this type");
 1499|  3.68k|        return it;
 1500|  3.68k|    }
 1501|       |
 1502|  67.2k|    auto checker = detail::tm_format_checker<T>{};
 1503|  67.2k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  67.2k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 67.2k, False: 0]
  ------------------
 1505|  67.2k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  67.2k|    }
 1507|  67.2k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 67.2k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  67.2k|    return end;
 1512|  67.2k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  67.2k|{
  377|  67.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 67.2k]
  |  Branch (377:25): [True: 0, False: 67.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  67.2k|    auto p = begin;
  383|  67.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 67.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  67.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 67.2k]
  |  Branch (392:21): [True: 0, False: 67.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   215k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 215k, False: 0]
  ------------------
  399|   215k|        auto ch = *p;
  400|   215k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 67.2k, False: 148k]
  ------------------
  401|  67.2k|            break;
  402|  67.2k|        }
  403|   148k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 36.8k, False: 111k]
  ------------------
  404|  36.8k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 36.8k]
  |  Branch (404:32): [True: 36.8k, False: 0]
  |  Branch (404:46): [True: 0, False: 36.8k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  36.8k|            const auto cp_len =
  412|  36.8k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  36.8k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 36.8k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  36.8k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 36.8k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  36.8k|            ++p;
  439|  36.8k|            continue;
  440|  36.8k|        }
  441|   111k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 36.8k, False: 74.6k]
  ------------------
  442|  36.8k|            handler.on_text(begin, p);
  443|  36.8k|        }
  444|   111k|        ++p;  // Consume '%'
  445|   111k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 111k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   111k|        ch = *p;
  451|   111k|        ++p;
  452|       |
  453|   111k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 111k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 111k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 111k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  7.36k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 7.36k, False: 104k]
  ------------------
  463|  7.36k|                handler.on_full_year();
  464|  7.36k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 111k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 111k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 111k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 111k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.82k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.82k, False: 102k]
  ------------------
  479|  8.82k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 111k]
  ------------------
  480|  8.82k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 111k]
  ------------------
  481|  8.82k|                handler.on_month_name();
  482|  8.82k|                break;
  483|  7.36k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 7.36k, False: 104k]
  ------------------
  484|  7.36k|                handler.on_dec_month();
  485|  7.36k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 111k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 111k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 111k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 111k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  7.36k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 7.36k, False: 104k]
  ------------------
  502|  7.36k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 111k]
  ------------------
  503|  7.36k|                handler.on_day_of_month();
  504|  7.36k|                break;
  505|       |            // Day of week
  506|  7.36k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 7.36k, False: 104k]
  ------------------
  507|  7.36k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 111k]
  ------------------
  508|  7.36k|                handler.on_weekday_name();
  509|  7.36k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 111k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 111k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  7.36k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 7.36k, False: 104k]
  ------------------
  518|  7.36k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 111k]
  ------------------
  519|  7.36k|                handler.on_24_hour();
  520|  7.36k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 111k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 111k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  7.36k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 7.36k, False: 104k]
  ------------------
  527|  7.36k|                handler.on_minute();
  528|  7.36k|                break;
  529|       |            // Second
  530|  7.36k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 7.36k, False: 104k]
  ------------------
  531|  7.36k|                handler.on_second();
  532|  7.36k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 111k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  7.36k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 7.36k, False: 104k]
  ------------------
  563|  7.36k|                handler.on_tz_offset();
  564|  7.36k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 111k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 111k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 111k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 111k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.38k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.38k, False: 104k]
  ------------------
  579|  7.38k|                handler.on_us_date();
  580|  7.38k|                break;
  581|  7.39k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 7.39k, False: 104k]
  ------------------
  582|  7.39k|                handler.on_iso_date();
  583|  7.39k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 111k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  21.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 21.1k, False: 90.3k]
  ------------------
  588|  21.1k|                handler.on_24_hour_time();
  589|  21.1k|                break;
  590|  7.78k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.78k, False: 103k]
  ------------------
  591|  7.78k|                handler.on_iso_time();
  592|  7.78k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 111k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 111k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 111k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 111k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 111k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 111k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 111k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 111k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   111k|        }
  704|   111k|        begin = p;
  705|       |
  706|   111k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 111k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   111k|    }
  710|  67.2k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 67.2k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  67.2k|    handler.verify();
  714|  67.2k|    return p;
  715|  67.2k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIwEEvPKT_S8_:
 1176|  36.8k|    {
 1177|  36.8k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  67.2k|    {
 1530|  67.2k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  67.2k|    }
_ZN3scn2v47weekdayC2Ej:
   71|  3.69k|        : m_value(static_cast<unsigned char>(wd != 7 ? wd : 0))
  ------------------
  |  Branch (71:46): [True: 3.69k, False: 0]
  ------------------
   72|  3.69k|    {
   73|  3.69k|    }
_ZN3scn2v45monthC2Ej:
  119|  15.1k|        : m_value(static_cast<unsigned char>(d))
  120|  15.1k|    {
  121|  15.1k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  34.0k|{
  377|  34.0k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 34.0k]
  |  Branch (377:25): [True: 0, False: 34.0k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  34.0k|    auto p = begin;
  383|  34.0k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 34.0k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  34.0k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 34.0k]
  |  Branch (392:21): [True: 0, False: 34.0k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  56.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 34.4k, False: 21.6k]
  ------------------
  399|  34.4k|        auto ch = *p;
  400|  34.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 34.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  34.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 194, False: 34.2k]
  ------------------
  404|    194|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 194]
  |  Branch (404:32): [True: 194, False: 0]
  |  Branch (404:46): [True: 0, False: 194]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    194|            const auto cp_len =
  412|    194|                detail::code_point_length_by_starting_code_unit(ch);
  413|    194|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 194]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    194|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 194]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    194|            ++p;
  439|    194|            continue;
  440|    194|        }
  441|  34.2k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 194, False: 34.0k]
  ------------------
  442|    194|            handler.on_text(begin, p);
  443|    194|        }
  444|  34.2k|        ++p;  // Consume '%'
  445|  34.2k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 34.2k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  34.2k|        ch = *p;
  451|  34.2k|        ++p;
  452|       |
  453|  34.2k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 34.2k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 34.2k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 34.2k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.78k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.78k, False: 32.4k]
  ------------------
  463|  1.78k|                handler.on_full_year();
  464|  1.78k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 34.2k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 34.2k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 34.2k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 34.2k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.88k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.88k, False: 29.3k]
  ------------------
  479|  4.88k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 34.2k]
  ------------------
  480|  4.88k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 34.2k]
  ------------------
  481|  4.88k|                handler.on_month_name();
  482|  4.88k|                break;
  483|     82|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 82, False: 34.1k]
  ------------------
  484|     82|                handler.on_dec_month();
  485|     82|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 34.2k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 34.2k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 34.2k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 34.2k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     60|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 60, False: 34.1k]
  ------------------
  502|     60|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 34.2k]
  ------------------
  503|     60|                handler.on_day_of_month();
  504|     60|                break;
  505|       |            // Day of week
  506|  3.71k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.71k, False: 30.5k]
  ------------------
  507|  3.71k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 34.2k]
  ------------------
  508|  3.71k|                handler.on_weekday_name();
  509|  3.71k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 34.2k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 34.2k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     52|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 52, False: 34.1k]
  ------------------
  518|     52|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 34.2k]
  ------------------
  519|     52|                handler.on_24_hour();
  520|     52|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 34.2k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 34.2k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 34.2k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 34.2k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 34.2k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 34.2k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 34.2k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 34.2k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 34.2k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 34.2k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.35k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.35k, False: 27.8k]
  ------------------
  579|  6.35k|                handler.on_us_date();
  580|  6.35k|                break;
  581|  2.11k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.11k, False: 32.1k]
  ------------------
  582|  2.11k|                handler.on_iso_date();
  583|  2.11k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 34.2k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.9k, False: 22.2k]
  ------------------
  588|  11.9k|                handler.on_24_hour_time();
  589|  11.9k|                break;
  590|  3.18k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.18k, False: 31.0k]
  ------------------
  591|  3.18k|                handler.on_iso_time();
  592|  3.18k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 34.2k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 34.2k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 34.2k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 34.2k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 34.2k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 34.2k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 34.2k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 34.2k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  34.2k|        }
  704|  34.2k|        begin = p;
  705|       |
  706|  34.2k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 12.3k, False: 21.8k]
  ------------------
  707|  12.3k|            return p;
  708|  12.3k|        }
  709|  34.2k|    }
  710|  21.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 21.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  21.6k|    handler.verify();
  714|  21.6k|    return p;
  715|  34.0k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.90k|    {                                                                \
  769|  3.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.90k|        field##_set = 1;                                             \
  774|  3.90k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.61k|    {                                                                \
  769|  4.61k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.61k|        field##_set = 1;                                             \
  774|  4.61k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  8.68k|    {                                                                \
  769|  8.68k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.68k|        field##_set = 1;                                             \
  774|  8.68k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.02k|    {                                                                \
  769|  5.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.02k|        field##_set = 1;                                             \
  774|  5.02k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.92k|    {                                                                \
  769|  1.92k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.92k|        field##_set = 1;                                             \
  774|  1.92k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  12.6k|    {                                                                \
  769|  12.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.6k|        field##_set = 1;                                             \
  774|  12.6k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  12.2k|    {                                                                \
  769|  12.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.2k|        field##_set = 1;                                             \
  774|  12.2k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.44k|    {                                                                \
  769|  1.44k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.44k|        field##_set = 1;                                             \
  774|  1.44k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  21.6k|    {
  800|  21.6k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.6k, False: 9.97k]
  |  Branch (800:27): [True: 0, False: 11.6k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  21.6k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 21.6k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  21.6k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 330, False: 21.3k]
  |  Branch (818:31): [True: 0, False: 330]
  |  Branch (818:46): [True: 0, False: 330]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  21.6k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 21.6k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  21.6k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.92k, False: 19.7k]
  |  Branch (829:26): [True: 4.92k, False: 14.7k]
  |  Branch (829:38): [True: 0, False: 14.7k]
  ------------------
  830|  21.6k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.85k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  21.6k|    }
_ZN3scn2v46detail12setter_state29handle_short_year_and_centuryIiEEvRT_S4_:
  866|  14.2k|    {
  867|  14.2k|        assert(!full_year_set);
  868|  14.2k|        if (short_year_set && century_set) {
  ------------------
  |  Branch (868:13): [True: 14.2k, False: 0]
  |  Branch (868:31): [True: 0, False: 14.2k]
  ------------------
  869|      0|            year = century_value * 100 + short_year_value - offset;
  870|      0|        }
  871|  14.2k|        else if (short_year_set) {
  ------------------
  |  Branch (871:18): [True: 14.2k, False: 0]
  ------------------
  872|  14.2k|            if (short_year_value >= 69) {
  ------------------
  |  Branch (872:17): [True: 164, False: 14.0k]
  ------------------
  873|    164|                year = 1900 + short_year_value - offset;
  874|    164|            }
  875|  14.0k|            else {
  876|  14.0k|                year = 2000 + short_year_value - offset;
  877|  14.0k|            }
  878|  14.2k|        }
  879|      0|        else if (century_set) {
  ------------------
  |  Branch (879:18): [True: 0, False: 0]
  ------------------
  880|      0|            year = 100 * century_value - offset;
  881|      0|        }
  882|  14.2k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  28.9k|{
  377|  28.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 28.9k]
  |  Branch (377:25): [True: 0, False: 28.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  28.9k|    auto p = begin;
  383|  28.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 28.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  28.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 28.9k]
  |  Branch (392:21): [True: 0, False: 28.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  45.5k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 29.2k, False: 16.2k]
  ------------------
  399|  29.2k|        auto ch = *p;
  400|  29.2k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 29.2k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  29.2k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 188, False: 29.0k]
  ------------------
  404|    188|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 188]
  |  Branch (404:32): [True: 188, False: 0]
  |  Branch (404:46): [True: 0, False: 188]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    188|            const auto cp_len =
  412|    188|                detail::code_point_length_by_starting_code_unit(ch);
  413|    188|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 188]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    188|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 188]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    188|            ++p;
  439|    188|            continue;
  440|    188|        }
  441|  29.0k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 188, False: 28.9k]
  ------------------
  442|    188|            handler.on_text(begin, p);
  443|    188|        }
  444|  29.0k|        ++p;  // Consume '%'
  445|  29.0k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 29.0k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  29.0k|        ch = *p;
  451|  29.0k|        ++p;
  452|       |
  453|  29.0k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 29.0k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 29.0k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 29.0k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.81k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.81k, False: 27.2k]
  ------------------
  463|  1.81k|                handler.on_full_year();
  464|  1.81k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 29.0k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 29.0k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 29.0k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 29.0k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.90k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.90k, False: 24.1k]
  ------------------
  479|  4.90k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 29.0k]
  ------------------
  480|  4.90k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 29.0k]
  ------------------
  481|  4.90k|                handler.on_month_name();
  482|  4.90k|                break;
  483|     76|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 76, False: 29.0k]
  ------------------
  484|     76|                handler.on_dec_month();
  485|     76|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 29.0k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 29.0k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 29.0k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 29.0k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     60|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 60, False: 29.0k]
  ------------------
  502|     60|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 29.0k]
  ------------------
  503|     60|                handler.on_day_of_month();
  504|     60|                break;
  505|       |            // Day of week
  506|  3.58k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.58k, False: 25.5k]
  ------------------
  507|  3.58k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 29.0k]
  ------------------
  508|  3.58k|                handler.on_weekday_name();
  509|  3.58k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 29.0k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 29.0k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     52|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 52, False: 29.0k]
  ------------------
  518|     52|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 29.0k]
  ------------------
  519|     52|                handler.on_24_hour();
  520|     52|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 29.0k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 29.0k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 29.0k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 29.0k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 29.0k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 29.0k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 29.0k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 29.0k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 29.0k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 29.0k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.93k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.93k, False: 27.1k]
  ------------------
  579|  1.93k|                handler.on_us_date();
  580|  1.93k|                break;
  581|  2.14k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.14k, False: 26.9k]
  ------------------
  582|  2.14k|                handler.on_iso_date();
  583|  2.14k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 29.0k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.3k, False: 17.7k]
  ------------------
  588|  11.3k|                handler.on_24_hour_time();
  589|  11.3k|                break;
  590|  3.21k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.21k, False: 25.8k]
  ------------------
  591|  3.21k|                handler.on_iso_time();
  592|  3.21k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 29.0k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 29.0k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 29.0k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 29.0k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 29.0k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 29.0k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 29.0k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 29.0k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  29.0k|        }
  704|  29.0k|        begin = p;
  705|       |
  706|  29.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 12.6k, False: 16.4k]
  ------------------
  707|  12.6k|            return p;
  708|  12.6k|        }
  709|  29.0k|    }
  710|  16.2k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 16.2k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  16.2k|    handler.verify();
  714|  16.2k|    return p;
  715|  28.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.96k|    {                                                                \
  769|  3.96k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.96k|        field##_set = 1;                                             \
  774|  3.96k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    140|    {                                                                \
  769|    140|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    140|        field##_set = 1;                                             \
  774|    140|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  4.16k|    {                                                                \
  769|  4.16k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.16k|        field##_set = 1;                                             \
  774|  4.16k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    548|    {                                                                \
  769|    548|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    548|        field##_set = 1;                                             \
  774|    548|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.77k|    {                                                                \
  769|  1.77k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.77k|        field##_set = 1;                                             \
  774|  1.77k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.7k|    {                                                                \
  769|  11.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.7k|        field##_set = 1;                                             \
  774|  11.7k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.4k|    {                                                                \
  769|  11.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.4k|        field##_set = 1;                                             \
  774|  11.4k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.42k|    {                                                                \
  769|  1.42k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.42k|        field##_set = 1;                                             \
  774|  1.42k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  16.2k|    {
  800|  16.2k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.9k, False: 5.33k]
  |  Branch (800:27): [True: 0, False: 10.9k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  16.2k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 16.2k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  16.2k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 330, False: 15.9k]
  |  Branch (818:31): [True: 0, False: 330]
  |  Branch (818:46): [True: 0, False: 330]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  16.2k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 16.2k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  16.2k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.77k, False: 14.5k]
  |  Branch (829:26): [True: 460, False: 14.0k]
  |  Branch (829:38): [True: 0, False: 14.0k]
  ------------------
  830|  16.2k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 2.23k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  16.2k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  34.0k|{
  377|  34.0k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 34.0k]
  |  Branch (377:25): [True: 0, False: 34.0k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  34.0k|    auto p = begin;
  383|  34.0k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 34.0k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  34.0k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 34.0k]
  |  Branch (392:21): [True: 0, False: 34.0k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  56.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 34.4k, False: 21.6k]
  ------------------
  399|  34.4k|        auto ch = *p;
  400|  34.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 34.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  34.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 194, False: 34.2k]
  ------------------
  404|    194|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 194]
  |  Branch (404:32): [True: 194, False: 0]
  |  Branch (404:46): [True: 0, False: 194]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    194|            const auto cp_len =
  412|    194|                detail::code_point_length_by_starting_code_unit(ch);
  413|    194|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 194]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    194|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 194]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    194|            ++p;
  439|    194|            continue;
  440|    194|        }
  441|  34.2k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 194, False: 34.0k]
  ------------------
  442|    194|            handler.on_text(begin, p);
  443|    194|        }
  444|  34.2k|        ++p;  // Consume '%'
  445|  34.2k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 34.2k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  34.2k|        ch = *p;
  451|  34.2k|        ++p;
  452|       |
  453|  34.2k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 34.2k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 34.2k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 34.2k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.78k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.78k, False: 32.4k]
  ------------------
  463|  1.78k|                handler.on_full_year();
  464|  1.78k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 34.2k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 34.2k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 34.2k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 34.2k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.88k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.88k, False: 29.3k]
  ------------------
  479|  4.88k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 34.2k]
  ------------------
  480|  4.88k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 34.2k]
  ------------------
  481|  4.88k|                handler.on_month_name();
  482|  4.88k|                break;
  483|     82|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 82, False: 34.1k]
  ------------------
  484|     82|                handler.on_dec_month();
  485|     82|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 34.2k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 34.2k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 34.2k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 34.2k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     60|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 60, False: 34.1k]
  ------------------
  502|     60|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 34.2k]
  ------------------
  503|     60|                handler.on_day_of_month();
  504|     60|                break;
  505|       |            // Day of week
  506|  3.71k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.71k, False: 30.5k]
  ------------------
  507|  3.71k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 34.2k]
  ------------------
  508|  3.71k|                handler.on_weekday_name();
  509|  3.71k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 34.2k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 34.2k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     52|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 52, False: 34.1k]
  ------------------
  518|     52|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 34.2k]
  ------------------
  519|     52|                handler.on_24_hour();
  520|     52|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 34.2k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 34.2k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 34.2k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 34.2k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 34.2k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 34.2k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 34.2k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 34.2k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 34.2k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 34.2k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.35k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.35k, False: 27.8k]
  ------------------
  579|  6.35k|                handler.on_us_date();
  580|  6.35k|                break;
  581|  2.11k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.11k, False: 32.1k]
  ------------------
  582|  2.11k|                handler.on_iso_date();
  583|  2.11k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 34.2k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.9k, False: 22.2k]
  ------------------
  588|  11.9k|                handler.on_24_hour_time();
  589|  11.9k|                break;
  590|  3.18k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.18k, False: 31.0k]
  ------------------
  591|  3.18k|                handler.on_iso_time();
  592|  3.18k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 34.2k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 34.2k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 34.2k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 34.2k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 34.2k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 34.2k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 34.2k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 34.2k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  34.2k|        }
  704|  34.2k|        begin = p;
  705|       |
  706|  34.2k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 12.3k, False: 21.8k]
  ------------------
  707|  12.3k|            return p;
  708|  12.3k|        }
  709|  34.2k|    }
  710|  21.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 21.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  21.6k|    handler.verify();
  714|  21.6k|    return p;
  715|  34.0k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.90k|    {                                                                \
  769|  3.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.90k|        field##_set = 1;                                             \
  774|  3.90k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.61k|    {                                                                \
  769|  4.61k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.61k|        field##_set = 1;                                             \
  774|  4.61k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  8.68k|    {                                                                \
  769|  8.68k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.68k|        field##_set = 1;                                             \
  774|  8.68k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.02k|    {                                                                \
  769|  5.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.02k|        field##_set = 1;                                             \
  774|  5.02k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.92k|    {                                                                \
  769|  1.92k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.92k|        field##_set = 1;                                             \
  774|  1.92k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  12.6k|    {                                                                \
  769|  12.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.6k|        field##_set = 1;                                             \
  774|  12.6k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  12.2k|    {                                                                \
  769|  12.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.2k|        field##_set = 1;                                             \
  774|  12.2k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.44k|    {                                                                \
  769|  1.44k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.44k|        field##_set = 1;                                             \
  774|  1.44k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  21.6k|    {
  800|  21.6k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.6k, False: 9.97k]
  |  Branch (800:27): [True: 0, False: 11.6k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  21.6k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 21.6k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  21.6k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 330, False: 21.3k]
  |  Branch (818:31): [True: 0, False: 330]
  |  Branch (818:46): [True: 0, False: 330]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  21.6k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 21.6k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  21.6k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.92k, False: 19.7k]
  |  Branch (829:26): [True: 4.92k, False: 14.7k]
  |  Branch (829:38): [True: 0, False: 14.7k]
  ------------------
  830|  21.6k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.85k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  21.6k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  28.9k|{
  377|  28.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 28.9k]
  |  Branch (377:25): [True: 0, False: 28.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  28.9k|    auto p = begin;
  383|  28.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 28.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  28.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 28.9k]
  |  Branch (392:21): [True: 0, False: 28.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  45.5k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 29.2k, False: 16.2k]
  ------------------
  399|  29.2k|        auto ch = *p;
  400|  29.2k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 29.2k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  29.2k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 188, False: 29.0k]
  ------------------
  404|    188|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 188]
  |  Branch (404:32): [True: 188, False: 0]
  |  Branch (404:46): [True: 0, False: 188]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    188|            const auto cp_len =
  412|    188|                detail::code_point_length_by_starting_code_unit(ch);
  413|    188|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 188]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    188|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 188]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    188|            ++p;
  439|    188|            continue;
  440|    188|        }
  441|  29.0k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 188, False: 28.9k]
  ------------------
  442|    188|            handler.on_text(begin, p);
  443|    188|        }
  444|  29.0k|        ++p;  // Consume '%'
  445|  29.0k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 29.0k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  29.0k|        ch = *p;
  451|  29.0k|        ++p;
  452|       |
  453|  29.0k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 29.0k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 29.0k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 29.0k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.81k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.81k, False: 27.2k]
  ------------------
  463|  1.81k|                handler.on_full_year();
  464|  1.81k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 29.0k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 29.0k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 29.0k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 29.0k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.90k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.90k, False: 24.1k]
  ------------------
  479|  4.90k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 29.0k]
  ------------------
  480|  4.90k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 29.0k]
  ------------------
  481|  4.90k|                handler.on_month_name();
  482|  4.90k|                break;
  483|     76|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 76, False: 29.0k]
  ------------------
  484|     76|                handler.on_dec_month();
  485|     76|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 29.0k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 29.0k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 29.0k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 29.0k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     60|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 60, False: 29.0k]
  ------------------
  502|     60|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 29.0k]
  ------------------
  503|     60|                handler.on_day_of_month();
  504|     60|                break;
  505|       |            // Day of week
  506|  3.58k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.58k, False: 25.5k]
  ------------------
  507|  3.58k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 29.0k]
  ------------------
  508|  3.58k|                handler.on_weekday_name();
  509|  3.58k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 29.0k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 29.0k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     52|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 52, False: 29.0k]
  ------------------
  518|     52|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 29.0k]
  ------------------
  519|     52|                handler.on_24_hour();
  520|     52|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 29.0k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 29.0k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 29.0k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 29.0k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 29.0k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 29.0k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 29.0k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 29.0k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 29.0k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 29.0k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.93k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.93k, False: 27.1k]
  ------------------
  579|  1.93k|                handler.on_us_date();
  580|  1.93k|                break;
  581|  2.14k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.14k, False: 26.9k]
  ------------------
  582|  2.14k|                handler.on_iso_date();
  583|  2.14k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 29.0k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.3k, False: 17.7k]
  ------------------
  588|  11.3k|                handler.on_24_hour_time();
  589|  11.3k|                break;
  590|  3.21k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.21k, False: 25.8k]
  ------------------
  591|  3.21k|                handler.on_iso_time();
  592|  3.21k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 29.0k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 29.0k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 29.0k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 29.0k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 29.0k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 29.0k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 29.0k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 29.0k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  29.0k|        }
  704|  29.0k|        begin = p;
  705|       |
  706|  29.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 12.6k, False: 16.4k]
  ------------------
  707|  12.6k|            return p;
  708|  12.6k|        }
  709|  29.0k|    }
  710|  16.2k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 16.2k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  16.2k|    handler.verify();
  714|  16.2k|    return p;
  715|  28.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.96k|    {                                                                \
  769|  3.96k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.96k|        field##_set = 1;                                             \
  774|  3.96k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    140|    {                                                                \
  769|    140|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    140|        field##_set = 1;                                             \
  774|    140|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  4.16k|    {                                                                \
  769|  4.16k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.16k|        field##_set = 1;                                             \
  774|  4.16k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    548|    {                                                                \
  769|    548|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    548|        field##_set = 1;                                             \
  774|    548|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.77k|    {                                                                \
  769|  1.77k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.77k|        field##_set = 1;                                             \
  774|  1.77k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.7k|    {                                                                \
  769|  11.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.7k|        field##_set = 1;                                             \
  774|  11.7k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.4k|    {                                                                \
  769|  11.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.4k|        field##_set = 1;                                             \
  774|  11.4k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.42k|    {                                                                \
  769|  1.42k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.42k|        field##_set = 1;                                             \
  774|  1.42k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  16.2k|    {
  800|  16.2k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.9k, False: 5.33k]
  |  Branch (800:27): [True: 0, False: 10.9k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  16.2k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 16.2k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  16.2k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 330, False: 15.9k]
  |  Branch (818:31): [True: 0, False: 330]
  |  Branch (818:46): [True: 0, False: 330]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  16.2k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 16.2k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  16.2k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.77k, False: 14.5k]
  |  Branch (829:26): [True: 460, False: 14.0k]
  |  Branch (829:38): [True: 0, False: 14.0k]
  ------------------
  830|  16.2k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 2.23k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  16.2k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  34.0k|{
  377|  34.0k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 34.0k]
  |  Branch (377:25): [True: 0, False: 34.0k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  34.0k|    auto p = begin;
  383|  34.0k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 34.0k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  34.0k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 34.0k]
  |  Branch (392:21): [True: 0, False: 34.0k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  56.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 34.4k, False: 21.6k]
  ------------------
  399|  34.4k|        auto ch = *p;
  400|  34.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 34.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  34.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 194, False: 34.2k]
  ------------------
  404|    194|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 194]
  |  Branch (404:32): [True: 194, False: 0]
  |  Branch (404:46): [True: 0, False: 194]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    194|            const auto cp_len =
  412|    194|                detail::code_point_length_by_starting_code_unit(ch);
  413|    194|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 194]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    194|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 194]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    194|            ++p;
  439|    194|            continue;
  440|    194|        }
  441|  34.2k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 194, False: 34.0k]
  ------------------
  442|    194|            handler.on_text(begin, p);
  443|    194|        }
  444|  34.2k|        ++p;  // Consume '%'
  445|  34.2k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 34.2k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  34.2k|        ch = *p;
  451|  34.2k|        ++p;
  452|       |
  453|  34.2k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 34.2k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 34.2k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 34.2k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.78k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.78k, False: 32.4k]
  ------------------
  463|  1.78k|                handler.on_full_year();
  464|  1.78k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 34.2k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 34.2k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 34.2k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 34.2k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.88k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.88k, False: 29.3k]
  ------------------
  479|  4.88k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 34.2k]
  ------------------
  480|  4.88k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 34.2k]
  ------------------
  481|  4.88k|                handler.on_month_name();
  482|  4.88k|                break;
  483|     82|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 82, False: 34.1k]
  ------------------
  484|     82|                handler.on_dec_month();
  485|     82|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 34.2k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 34.2k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 34.2k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 34.2k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     60|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 60, False: 34.1k]
  ------------------
  502|     60|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 34.2k]
  ------------------
  503|     60|                handler.on_day_of_month();
  504|     60|                break;
  505|       |            // Day of week
  506|  3.71k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.71k, False: 30.5k]
  ------------------
  507|  3.71k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 34.2k]
  ------------------
  508|  3.71k|                handler.on_weekday_name();
  509|  3.71k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 34.2k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 34.2k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     52|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 52, False: 34.1k]
  ------------------
  518|     52|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 34.2k]
  ------------------
  519|     52|                handler.on_24_hour();
  520|     52|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 34.2k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 34.2k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 34.2k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 34.2k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 34.2k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 34.2k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 34.2k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 34.2k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 34.2k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 34.2k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.35k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.35k, False: 27.8k]
  ------------------
  579|  6.35k|                handler.on_us_date();
  580|  6.35k|                break;
  581|  2.11k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.11k, False: 32.1k]
  ------------------
  582|  2.11k|                handler.on_iso_date();
  583|  2.11k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 34.2k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.9k, False: 22.2k]
  ------------------
  588|  11.9k|                handler.on_24_hour_time();
  589|  11.9k|                break;
  590|  3.18k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.18k, False: 31.0k]
  ------------------
  591|  3.18k|                handler.on_iso_time();
  592|  3.18k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 34.2k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 34.2k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 34.2k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 34.2k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 34.2k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 34.2k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 34.2k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 34.2k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  34.2k|        }
  704|  34.2k|        begin = p;
  705|       |
  706|  34.2k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 12.3k, False: 21.8k]
  ------------------
  707|  12.3k|            return p;
  708|  12.3k|        }
  709|  34.2k|    }
  710|  21.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 21.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  21.6k|    handler.verify();
  714|  21.6k|    return p;
  715|  34.0k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.90k|    {                                                                \
  769|  3.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.90k|        field##_set = 1;                                             \
  774|  3.90k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  6.35k|    {                                                                \
  769|  6.35k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.35k|        field##_set = 1;                                             \
  774|  6.35k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  8.68k|    {                                                                \
  769|  8.68k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.68k|        field##_set = 1;                                             \
  774|  8.68k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.02k|    {                                                                \
  769|  5.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.02k|        field##_set = 1;                                             \
  774|  5.02k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.92k|    {                                                                \
  769|  1.92k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.92k|        field##_set = 1;                                             \
  774|  1.92k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  12.6k|    {                                                                \
  769|  12.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.6k|        field##_set = 1;                                             \
  774|  12.6k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  12.2k|    {                                                                \
  769|  12.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.2k|        field##_set = 1;                                             \
  774|  12.2k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.44k|    {                                                                \
  769|  1.44k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.44k|        field##_set = 1;                                             \
  774|  1.44k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  21.6k|    {
  800|  21.6k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.6k, False: 9.97k]
  |  Branch (800:27): [True: 0, False: 11.6k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  21.6k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 21.6k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  21.6k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 330, False: 21.3k]
  |  Branch (818:31): [True: 0, False: 330]
  |  Branch (818:46): [True: 0, False: 330]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  21.6k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 21.6k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  21.6k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.92k, False: 19.7k]
  |  Branch (829:26): [True: 4.92k, False: 14.7k]
  |  Branch (829:38): [True: 0, False: 14.7k]
  ------------------
  830|  21.6k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.85k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  21.6k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  28.9k|{
  377|  28.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 28.9k]
  |  Branch (377:25): [True: 0, False: 28.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  28.9k|    auto p = begin;
  383|  28.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 28.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  28.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 28.9k]
  |  Branch (392:21): [True: 0, False: 28.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  45.5k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 29.2k, False: 16.2k]
  ------------------
  399|  29.2k|        auto ch = *p;
  400|  29.2k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 29.2k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  29.2k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 188, False: 29.0k]
  ------------------
  404|    188|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 188]
  |  Branch (404:32): [True: 188, False: 0]
  |  Branch (404:46): [True: 0, False: 188]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    188|            const auto cp_len =
  412|    188|                detail::code_point_length_by_starting_code_unit(ch);
  413|    188|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 188]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    188|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 188]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    188|            ++p;
  439|    188|            continue;
  440|    188|        }
  441|  29.0k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 188, False: 28.9k]
  ------------------
  442|    188|            handler.on_text(begin, p);
  443|    188|        }
  444|  29.0k|        ++p;  // Consume '%'
  445|  29.0k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 29.0k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  29.0k|        ch = *p;
  451|  29.0k|        ++p;
  452|       |
  453|  29.0k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 29.0k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 29.0k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 29.0k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.81k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.81k, False: 27.2k]
  ------------------
  463|  1.81k|                handler.on_full_year();
  464|  1.81k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 29.0k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 29.0k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 29.0k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 29.0k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.90k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.90k, False: 24.1k]
  ------------------
  479|  4.90k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 29.0k]
  ------------------
  480|  4.90k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 29.0k]
  ------------------
  481|  4.90k|                handler.on_month_name();
  482|  4.90k|                break;
  483|     76|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 76, False: 29.0k]
  ------------------
  484|     76|                handler.on_dec_month();
  485|     76|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 29.0k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 29.0k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 29.0k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 29.0k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     60|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 60, False: 29.0k]
  ------------------
  502|     60|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 29.0k]
  ------------------
  503|     60|                handler.on_day_of_month();
  504|     60|                break;
  505|       |            // Day of week
  506|  3.58k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.58k, False: 25.5k]
  ------------------
  507|  3.58k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 29.0k]
  ------------------
  508|  3.58k|                handler.on_weekday_name();
  509|  3.58k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 29.0k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 29.0k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     52|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 52, False: 29.0k]
  ------------------
  518|     52|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 29.0k]
  ------------------
  519|     52|                handler.on_24_hour();
  520|     52|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 29.0k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 29.0k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 29.0k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 29.0k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 29.0k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 29.0k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 29.0k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 29.0k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 29.0k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 29.0k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.93k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.93k, False: 27.1k]
  ------------------
  579|  1.93k|                handler.on_us_date();
  580|  1.93k|                break;
  581|  2.14k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.14k, False: 26.9k]
  ------------------
  582|  2.14k|                handler.on_iso_date();
  583|  2.14k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 29.0k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.3k, False: 17.7k]
  ------------------
  588|  11.3k|                handler.on_24_hour_time();
  589|  11.3k|                break;
  590|  3.21k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.21k, False: 25.8k]
  ------------------
  591|  3.21k|                handler.on_iso_time();
  592|  3.21k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 29.0k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 29.0k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 29.0k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 29.0k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 29.0k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 29.0k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 29.0k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 29.0k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  29.0k|        }
  704|  29.0k|        begin = p;
  705|       |
  706|  29.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 12.6k, False: 16.4k]
  ------------------
  707|  12.6k|            return p;
  708|  12.6k|        }
  709|  29.0k|    }
  710|  16.2k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 16.2k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  16.2k|    handler.verify();
  714|  16.2k|    return p;
  715|  28.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.96k|    {                                                                \
  769|  3.96k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.96k|        field##_set = 1;                                             \
  774|  3.96k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.93k|    {                                                                \
  769|  1.93k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.93k|        field##_set = 1;                                             \
  774|  1.93k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  4.16k|    {                                                                \
  769|  4.16k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.16k|        field##_set = 1;                                             \
  774|  4.16k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    548|    {                                                                \
  769|    548|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    548|        field##_set = 1;                                             \
  774|    548|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.77k|    {                                                                \
  769|  1.77k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.77k|        field##_set = 1;                                             \
  774|  1.77k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.7k|    {                                                                \
  769|  11.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.7k|        field##_set = 1;                                             \
  774|  11.7k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.4k|    {                                                                \
  769|  11.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.4k|        field##_set = 1;                                             \
  774|  11.4k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.42k|    {                                                                \
  769|  1.42k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.42k|        field##_set = 1;                                             \
  774|  1.42k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  16.2k|    {
  800|  16.2k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.9k, False: 5.33k]
  |  Branch (800:27): [True: 0, False: 10.9k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  16.2k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 16.2k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  16.2k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 330, False: 15.9k]
  |  Branch (818:31): [True: 0, False: 330]
  |  Branch (818:46): [True: 0, False: 330]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  16.2k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 16.2k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  16.2k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.77k, False: 14.5k]
  |  Branch (829:26): [True: 460, False: 14.0k]
  |  Branch (829:38): [True: 0, False: 14.0k]
  ------------------
  830|  16.2k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 2.23k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  16.2k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  33.2k|{
  377|  33.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 33.2k]
  |  Branch (377:25): [True: 0, False: 33.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  33.2k|    auto p = begin;
  383|  33.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 33.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  33.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 33.2k]
  |  Branch (392:21): [True: 0, False: 33.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  41.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 33.4k, False: 7.83k]
  ------------------
  399|  33.4k|        auto ch = *p;
  400|  33.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 33.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  33.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 74, False: 33.3k]
  ------------------
  404|     74|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 74]
  |  Branch (404:32): [True: 74, False: 0]
  |  Branch (404:46): [True: 0, False: 74]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     74|            const auto cp_len =
  412|     74|                detail::code_point_length_by_starting_code_unit(ch);
  413|     74|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 74]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     74|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 74]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     74|            ++p;
  439|     74|            continue;
  440|     74|        }
  441|  33.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 74, False: 33.2k]
  ------------------
  442|     74|            handler.on_text(begin, p);
  443|     74|        }
  444|  33.3k|        ++p;  // Consume '%'
  445|  33.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 33.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  33.3k|        ch = *p;
  451|  33.3k|        ++p;
  452|       |
  453|  33.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 33.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 33.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 33.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.64k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.64k, False: 29.6k]
  ------------------
  463|  3.64k|                handler.on_full_year();
  464|  3.64k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 33.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 33.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 33.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 33.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.35k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.35k, False: 28.9k]
  ------------------
  479|  4.35k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 33.3k]
  ------------------
  480|  4.35k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 33.3k]
  ------------------
  481|  4.35k|                handler.on_month_name();
  482|  4.35k|                break;
  483|     40|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 40, False: 33.2k]
  ------------------
  484|     40|                handler.on_dec_month();
  485|     40|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 33.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 33.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 33.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 33.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     22|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 22, False: 33.3k]
  ------------------
  502|     22|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 33.3k]
  ------------------
  503|     22|                handler.on_day_of_month();
  504|     22|                break;
  505|       |            // Day of week
  506|  3.64k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.64k, False: 29.6k]
  ------------------
  507|  3.64k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 33.3k]
  ------------------
  508|  3.64k|                handler.on_weekday_name();
  509|  3.64k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 33.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 33.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     12|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 12, False: 33.3k]
  ------------------
  518|     12|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 33.3k]
  ------------------
  519|     12|                handler.on_24_hour();
  520|     12|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 33.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 33.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 33.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 33.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 33.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 33.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 33.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 33.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 33.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 33.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.64k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.64k, False: 29.6k]
  ------------------
  579|  3.64k|                handler.on_us_date();
  580|  3.64k|                break;
  581|  3.65k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.65k, False: 29.6k]
  ------------------
  582|  3.65k|                handler.on_iso_date();
  583|  3.65k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 33.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.4k, False: 22.8k]
  ------------------
  588|  10.4k|                handler.on_24_hour_time();
  589|  10.4k|                break;
  590|  3.84k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.84k, False: 29.4k]
  ------------------
  591|  3.84k|                handler.on_iso_time();
  592|  3.84k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 33.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 33.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 33.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 33.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 33.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 33.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 33.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 33.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  33.3k|        }
  704|  33.3k|        begin = p;
  705|       |
  706|  33.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 25.4k, False: 7.90k]
  ------------------
  707|  25.4k|            return p;
  708|  25.4k|        }
  709|  33.3k|    }
  710|  7.83k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.83k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.83k|    handler.verify();
  714|  7.83k|    return p;
  715|  33.2k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.29k|    {                                                                \
  769|  7.29k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.29k|        field##_set = 1;                                             \
  774|  7.29k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.13k|    {                                                                \
  769|  1.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.13k|        field##_set = 1;                                             \
  774|  1.13k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     82|    {                                                                \
  769|     82|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     82|        field##_set = 1;                                             \
  774|     82|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.51k|    {                                                                \
  769|  7.51k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.51k|        field##_set = 1;                                             \
  774|  7.51k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.48k|    {                                                                \
  769|  7.48k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.48k|        field##_set = 1;                                             \
  774|  7.48k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    236|    {                                                                \
  769|    236|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    236|        field##_set = 1;                                             \
  774|    236|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.83k|    {
  800|  7.83k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.08k, False: 750]
  |  Branch (800:27): [True: 0, False: 7.08k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.83k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.83k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.83k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 12, False: 7.82k]
  |  Branch (818:31): [True: 0, False: 12]
  |  Branch (818:46): [True: 0, False: 12]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.83k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.83k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.83k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.83k]
  |  Branch (829:26): [True: 22, False: 7.81k]
  |  Branch (829:38): [True: 0, False: 7.81k]
  ------------------
  830|  7.83k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 22]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.83k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  33.2k|{
  377|  33.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 33.2k]
  |  Branch (377:25): [True: 0, False: 33.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  33.2k|    auto p = begin;
  383|  33.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 33.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  33.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 33.2k]
  |  Branch (392:21): [True: 0, False: 33.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  41.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 33.4k, False: 7.83k]
  ------------------
  399|  33.4k|        auto ch = *p;
  400|  33.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 33.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  33.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 74, False: 33.3k]
  ------------------
  404|     74|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 74]
  |  Branch (404:32): [True: 74, False: 0]
  |  Branch (404:46): [True: 0, False: 74]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     74|            const auto cp_len =
  412|     74|                detail::code_point_length_by_starting_code_unit(ch);
  413|     74|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 74]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     74|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 74]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     74|            ++p;
  439|     74|            continue;
  440|     74|        }
  441|  33.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 74, False: 33.2k]
  ------------------
  442|     74|            handler.on_text(begin, p);
  443|     74|        }
  444|  33.3k|        ++p;  // Consume '%'
  445|  33.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 33.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  33.3k|        ch = *p;
  451|  33.3k|        ++p;
  452|       |
  453|  33.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 33.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 33.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 33.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.64k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.64k, False: 29.6k]
  ------------------
  463|  3.64k|                handler.on_full_year();
  464|  3.64k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 33.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 33.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 33.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 33.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.35k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.35k, False: 28.9k]
  ------------------
  479|  4.35k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 33.3k]
  ------------------
  480|  4.35k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 33.3k]
  ------------------
  481|  4.35k|                handler.on_month_name();
  482|  4.35k|                break;
  483|     40|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 40, False: 33.2k]
  ------------------
  484|     40|                handler.on_dec_month();
  485|     40|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 33.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 33.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 33.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 33.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     22|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 22, False: 33.3k]
  ------------------
  502|     22|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 33.3k]
  ------------------
  503|     22|                handler.on_day_of_month();
  504|     22|                break;
  505|       |            // Day of week
  506|  3.64k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.64k, False: 29.6k]
  ------------------
  507|  3.64k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 33.3k]
  ------------------
  508|  3.64k|                handler.on_weekday_name();
  509|  3.64k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 33.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 33.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     12|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 12, False: 33.3k]
  ------------------
  518|     12|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 33.3k]
  ------------------
  519|     12|                handler.on_24_hour();
  520|     12|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 33.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 33.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 33.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 33.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 33.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 33.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 33.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 33.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 33.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 33.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.64k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.64k, False: 29.6k]
  ------------------
  579|  3.64k|                handler.on_us_date();
  580|  3.64k|                break;
  581|  3.65k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.65k, False: 29.6k]
  ------------------
  582|  3.65k|                handler.on_iso_date();
  583|  3.65k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 33.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.4k, False: 22.8k]
  ------------------
  588|  10.4k|                handler.on_24_hour_time();
  589|  10.4k|                break;
  590|  3.84k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.84k, False: 29.4k]
  ------------------
  591|  3.84k|                handler.on_iso_time();
  592|  3.84k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 33.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 33.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 33.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 33.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 33.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 33.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 33.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 33.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  33.3k|        }
  704|  33.3k|        begin = p;
  705|       |
  706|  33.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 25.4k, False: 7.90k]
  ------------------
  707|  25.4k|            return p;
  708|  25.4k|        }
  709|  33.3k|    }
  710|  7.83k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.83k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.83k|    handler.verify();
  714|  7.83k|    return p;
  715|  33.2k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.29k|    {                                                                \
  769|  7.29k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.29k|        field##_set = 1;                                             \
  774|  7.29k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.13k|    {                                                                \
  769|  1.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.13k|        field##_set = 1;                                             \
  774|  1.13k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     82|    {                                                                \
  769|     82|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     82|        field##_set = 1;                                             \
  774|     82|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.51k|    {                                                                \
  769|  7.51k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.51k|        field##_set = 1;                                             \
  774|  7.51k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.48k|    {                                                                \
  769|  7.48k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.48k|        field##_set = 1;                                             \
  774|  7.48k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    236|    {                                                                \
  769|    236|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    236|        field##_set = 1;                                             \
  774|    236|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.83k|    {
  800|  7.83k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.08k, False: 750]
  |  Branch (800:27): [True: 0, False: 7.08k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.83k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.83k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.83k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 12, False: 7.82k]
  |  Branch (818:31): [True: 0, False: 12]
  |  Branch (818:46): [True: 0, False: 12]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.83k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.83k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.83k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.83k]
  |  Branch (829:26): [True: 22, False: 7.81k]
  |  Branch (829:38): [True: 0, False: 7.81k]
  ------------------
  830|  7.83k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 22]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.83k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  33.2k|{
  377|  33.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 33.2k]
  |  Branch (377:25): [True: 0, False: 33.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  33.2k|    auto p = begin;
  383|  33.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 33.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  33.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 33.2k]
  |  Branch (392:21): [True: 0, False: 33.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  41.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 33.4k, False: 7.83k]
  ------------------
  399|  33.4k|        auto ch = *p;
  400|  33.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 33.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  33.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 74, False: 33.3k]
  ------------------
  404|     74|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 74]
  |  Branch (404:32): [True: 74, False: 0]
  |  Branch (404:46): [True: 0, False: 74]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     74|            const auto cp_len =
  412|     74|                detail::code_point_length_by_starting_code_unit(ch);
  413|     74|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 74]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     74|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 74]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     74|            ++p;
  439|     74|            continue;
  440|     74|        }
  441|  33.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 74, False: 33.2k]
  ------------------
  442|     74|            handler.on_text(begin, p);
  443|     74|        }
  444|  33.3k|        ++p;  // Consume '%'
  445|  33.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 33.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  33.3k|        ch = *p;
  451|  33.3k|        ++p;
  452|       |
  453|  33.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 33.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 33.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 33.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.64k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.64k, False: 29.6k]
  ------------------
  463|  3.64k|                handler.on_full_year();
  464|  3.64k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 33.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 33.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 33.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 33.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.35k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.35k, False: 28.9k]
  ------------------
  479|  4.35k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 33.3k]
  ------------------
  480|  4.35k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 33.3k]
  ------------------
  481|  4.35k|                handler.on_month_name();
  482|  4.35k|                break;
  483|     40|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 40, False: 33.2k]
  ------------------
  484|     40|                handler.on_dec_month();
  485|     40|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 33.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 33.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 33.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 33.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     22|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 22, False: 33.3k]
  ------------------
  502|     22|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 33.3k]
  ------------------
  503|     22|                handler.on_day_of_month();
  504|     22|                break;
  505|       |            // Day of week
  506|  3.64k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.64k, False: 29.6k]
  ------------------
  507|  3.64k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 33.3k]
  ------------------
  508|  3.64k|                handler.on_weekday_name();
  509|  3.64k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 33.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 33.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     12|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 12, False: 33.3k]
  ------------------
  518|     12|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 33.3k]
  ------------------
  519|     12|                handler.on_24_hour();
  520|     12|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 33.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 33.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 33.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 33.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 33.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 33.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 33.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 33.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 33.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 33.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.64k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.64k, False: 29.6k]
  ------------------
  579|  3.64k|                handler.on_us_date();
  580|  3.64k|                break;
  581|  3.65k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.65k, False: 29.6k]
  ------------------
  582|  3.65k|                handler.on_iso_date();
  583|  3.65k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 33.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.4k, False: 22.8k]
  ------------------
  588|  10.4k|                handler.on_24_hour_time();
  589|  10.4k|                break;
  590|  3.84k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.84k, False: 29.4k]
  ------------------
  591|  3.84k|                handler.on_iso_time();
  592|  3.84k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 33.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 33.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 33.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 33.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 33.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 33.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 33.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 33.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  33.3k|        }
  704|  33.3k|        begin = p;
  705|       |
  706|  33.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 25.4k, False: 7.90k]
  ------------------
  707|  25.4k|            return p;
  708|  25.4k|        }
  709|  33.3k|    }
  710|  7.83k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.83k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.83k|    handler.verify();
  714|  7.83k|    return p;
  715|  33.2k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.29k|    {                                                                \
  769|  7.29k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.29k|        field##_set = 1;                                             \
  774|  7.29k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.13k|    {                                                                \
  769|  1.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.13k|        field##_set = 1;                                             \
  774|  1.13k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     82|    {                                                                \
  769|     82|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     82|        field##_set = 1;                                             \
  774|     82|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.51k|    {                                                                \
  769|  7.51k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.51k|        field##_set = 1;                                             \
  774|  7.51k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.48k|    {                                                                \
  769|  7.48k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.48k|        field##_set = 1;                                             \
  774|  7.48k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    236|    {                                                                \
  769|    236|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    236|        field##_set = 1;                                             \
  774|    236|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.83k|    {
  800|  7.83k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.08k, False: 750]
  |  Branch (800:27): [True: 0, False: 7.08k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.83k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.83k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.83k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 12, False: 7.82k]
  |  Branch (818:31): [True: 0, False: 12]
  |  Branch (818:46): [True: 0, False: 12]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.83k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.83k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.83k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.83k]
  |  Branch (829:26): [True: 22, False: 7.81k]
  |  Branch (829:38): [True: 0, False: 7.81k]
  ------------------
  830|  7.83k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 22]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.83k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  33.2k|{
  377|  33.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 33.2k]
  |  Branch (377:25): [True: 0, False: 33.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  33.2k|    auto p = begin;
  383|  33.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 33.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  33.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 33.2k]
  |  Branch (392:21): [True: 0, False: 33.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  41.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 33.4k, False: 7.83k]
  ------------------
  399|  33.4k|        auto ch = *p;
  400|  33.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 33.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  33.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 74, False: 33.3k]
  ------------------
  404|     74|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 74]
  |  Branch (404:32): [True: 74, False: 0]
  |  Branch (404:46): [True: 0, False: 74]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     74|            const auto cp_len =
  412|     74|                detail::code_point_length_by_starting_code_unit(ch);
  413|     74|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 74]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     74|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 74]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     74|            ++p;
  439|     74|            continue;
  440|     74|        }
  441|  33.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 74, False: 33.2k]
  ------------------
  442|     74|            handler.on_text(begin, p);
  443|     74|        }
  444|  33.3k|        ++p;  // Consume '%'
  445|  33.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 33.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  33.3k|        ch = *p;
  451|  33.3k|        ++p;
  452|       |
  453|  33.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 33.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 33.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 33.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.64k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.64k, False: 29.6k]
  ------------------
  463|  3.64k|                handler.on_full_year();
  464|  3.64k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 33.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 33.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 33.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 33.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.35k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.35k, False: 28.9k]
  ------------------
  479|  4.35k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 33.3k]
  ------------------
  480|  4.35k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 33.3k]
  ------------------
  481|  4.35k|                handler.on_month_name();
  482|  4.35k|                break;
  483|     40|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 40, False: 33.2k]
  ------------------
  484|     40|                handler.on_dec_month();
  485|     40|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 33.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 33.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 33.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 33.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     22|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 22, False: 33.3k]
  ------------------
  502|     22|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 33.3k]
  ------------------
  503|     22|                handler.on_day_of_month();
  504|     22|                break;
  505|       |            // Day of week
  506|  3.64k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.64k, False: 29.6k]
  ------------------
  507|  3.64k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 33.3k]
  ------------------
  508|  3.64k|                handler.on_weekday_name();
  509|  3.64k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 33.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 33.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     12|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 12, False: 33.3k]
  ------------------
  518|     12|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 33.3k]
  ------------------
  519|     12|                handler.on_24_hour();
  520|     12|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 33.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 33.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 33.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 33.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 33.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 33.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 33.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 33.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 33.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 33.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.64k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.64k, False: 29.6k]
  ------------------
  579|  3.64k|                handler.on_us_date();
  580|  3.64k|                break;
  581|  3.65k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.65k, False: 29.6k]
  ------------------
  582|  3.65k|                handler.on_iso_date();
  583|  3.65k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 33.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.4k, False: 22.8k]
  ------------------
  588|  10.4k|                handler.on_24_hour_time();
  589|  10.4k|                break;
  590|  3.84k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.84k, False: 29.4k]
  ------------------
  591|  3.84k|                handler.on_iso_time();
  592|  3.84k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 33.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 33.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 33.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 33.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 33.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 33.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 33.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 33.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  33.3k|        }
  704|  33.3k|        begin = p;
  705|       |
  706|  33.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 25.4k, False: 7.90k]
  ------------------
  707|  25.4k|            return p;
  708|  25.4k|        }
  709|  33.3k|    }
  710|  7.83k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.83k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.83k|    handler.verify();
  714|  7.83k|    return p;
  715|  33.2k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.29k|    {                                                                \
  769|  7.29k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.29k|        field##_set = 1;                                             \
  774|  7.29k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.13k|    {                                                                \
  769|  1.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.13k|        field##_set = 1;                                             \
  774|  1.13k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     82|    {                                                                \
  769|     82|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     82|        field##_set = 1;                                             \
  774|     82|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.51k|    {                                                                \
  769|  7.51k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.51k|        field##_set = 1;                                             \
  774|  7.51k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.48k|    {                                                                \
  769|  7.48k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.48k|        field##_set = 1;                                             \
  774|  7.48k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    236|    {                                                                \
  769|    236|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    236|        field##_set = 1;                                             \
  774|    236|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.83k|    {
  800|  7.83k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.08k, False: 750]
  |  Branch (800:27): [True: 0, False: 7.08k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.83k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.83k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.83k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 12, False: 7.82k]
  |  Branch (818:31): [True: 0, False: 12]
  |  Branch (818:46): [True: 0, False: 12]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.83k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.83k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.83k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.83k]
  |  Branch (829:26): [True: 22, False: 7.81k]
  |  Branch (829:38): [True: 0, False: 7.81k]
  ------------------
  830|  7.83k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 22]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.83k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  33.2k|{
  377|  33.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 33.2k]
  |  Branch (377:25): [True: 0, False: 33.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  33.2k|    auto p = begin;
  383|  33.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 33.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  33.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 33.2k]
  |  Branch (392:21): [True: 0, False: 33.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  41.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 33.4k, False: 7.83k]
  ------------------
  399|  33.4k|        auto ch = *p;
  400|  33.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 33.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  33.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 74, False: 33.3k]
  ------------------
  404|     74|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 74]
  |  Branch (404:32): [True: 74, False: 0]
  |  Branch (404:46): [True: 0, False: 74]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     74|            const auto cp_len =
  412|     74|                detail::code_point_length_by_starting_code_unit(ch);
  413|     74|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 74]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     74|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 74]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     74|            ++p;
  439|     74|            continue;
  440|     74|        }
  441|  33.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 74, False: 33.2k]
  ------------------
  442|     74|            handler.on_text(begin, p);
  443|     74|        }
  444|  33.3k|        ++p;  // Consume '%'
  445|  33.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 33.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  33.3k|        ch = *p;
  451|  33.3k|        ++p;
  452|       |
  453|  33.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 33.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 33.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 33.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.64k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.64k, False: 29.6k]
  ------------------
  463|  3.64k|                handler.on_full_year();
  464|  3.64k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 33.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 33.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 33.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 33.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.35k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.35k, False: 28.9k]
  ------------------
  479|  4.35k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 33.3k]
  ------------------
  480|  4.35k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 33.3k]
  ------------------
  481|  4.35k|                handler.on_month_name();
  482|  4.35k|                break;
  483|     40|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 40, False: 33.2k]
  ------------------
  484|     40|                handler.on_dec_month();
  485|     40|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 33.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 33.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 33.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 33.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     22|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 22, False: 33.3k]
  ------------------
  502|     22|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 33.3k]
  ------------------
  503|     22|                handler.on_day_of_month();
  504|     22|                break;
  505|       |            // Day of week
  506|  3.64k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.64k, False: 29.6k]
  ------------------
  507|  3.64k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 33.3k]
  ------------------
  508|  3.64k|                handler.on_weekday_name();
  509|  3.64k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 33.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 33.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     12|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 12, False: 33.3k]
  ------------------
  518|     12|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 33.3k]
  ------------------
  519|     12|                handler.on_24_hour();
  520|     12|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 33.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 33.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 33.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 33.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 33.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 33.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 33.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 33.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 33.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 33.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.64k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.64k, False: 29.6k]
  ------------------
  579|  3.64k|                handler.on_us_date();
  580|  3.64k|                break;
  581|  3.65k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.65k, False: 29.6k]
  ------------------
  582|  3.65k|                handler.on_iso_date();
  583|  3.65k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 33.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.4k, False: 22.8k]
  ------------------
  588|  10.4k|                handler.on_24_hour_time();
  589|  10.4k|                break;
  590|  3.84k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.84k, False: 29.4k]
  ------------------
  591|  3.84k|                handler.on_iso_time();
  592|  3.84k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 33.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 33.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 33.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 33.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 33.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 33.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 33.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 33.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  33.3k|        }
  704|  33.3k|        begin = p;
  705|       |
  706|  33.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 25.4k, False: 7.90k]
  ------------------
  707|  25.4k|            return p;
  708|  25.4k|        }
  709|  33.3k|    }
  710|  7.83k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.83k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.83k|    handler.verify();
  714|  7.83k|    return p;
  715|  33.2k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.29k|    {                                                                \
  769|  7.29k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.29k|        field##_set = 1;                                             \
  774|  7.29k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  3.64k|    {                                                                \
  769|  3.64k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.64k|        field##_set = 1;                                             \
  774|  3.64k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.13k|    {                                                                \
  769|  1.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.13k|        field##_set = 1;                                             \
  774|  1.13k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     82|    {                                                                \
  769|     82|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     82|        field##_set = 1;                                             \
  774|     82|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.51k|    {                                                                \
  769|  7.51k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.51k|        field##_set = 1;                                             \
  774|  7.51k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.48k|    {                                                                \
  769|  7.48k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.48k|        field##_set = 1;                                             \
  774|  7.48k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    236|    {                                                                \
  769|    236|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    236|        field##_set = 1;                                             \
  774|    236|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.83k|    {
  800|  7.83k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.08k, False: 750]
  |  Branch (800:27): [True: 0, False: 7.08k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.83k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.83k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.83k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 12, False: 7.82k]
  |  Branch (818:31): [True: 0, False: 12]
  |  Branch (818:46): [True: 0, False: 12]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.83k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.83k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.83k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.83k]
  |  Branch (829:26): [True: 22, False: 7.81k]
  |  Branch (829:38): [True: 0, False: 7.81k]
  ------------------
  830|  7.83k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 22]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.83k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  33.2k|{
  377|  33.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 33.2k]
  |  Branch (377:25): [True: 0, False: 33.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  33.2k|    auto p = begin;
  383|  33.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 33.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  33.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 33.2k]
  |  Branch (392:21): [True: 0, False: 33.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  41.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 33.4k, False: 7.83k]
  ------------------
  399|  33.4k|        auto ch = *p;
  400|  33.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 33.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  33.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 74, False: 33.3k]
  ------------------
  404|     74|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 74]
  |  Branch (404:32): [True: 74, False: 0]
  |  Branch (404:46): [True: 0, False: 74]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     74|            const auto cp_len =
  412|     74|                detail::code_point_length_by_starting_code_unit(ch);
  413|     74|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 74]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     74|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 74]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     74|            ++p;
  439|     74|            continue;
  440|     74|        }
  441|  33.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 74, False: 33.2k]
  ------------------
  442|     74|            handler.on_text(begin, p);
  443|     74|        }
  444|  33.3k|        ++p;  // Consume '%'
  445|  33.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 33.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  33.3k|        ch = *p;
  451|  33.3k|        ++p;
  452|       |
  453|  33.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 33.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 33.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 33.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.64k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.64k, False: 29.6k]
  ------------------
  463|  3.64k|                handler.on_full_year();
  464|  3.64k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 33.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 33.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 33.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 33.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.35k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.35k, False: 28.9k]
  ------------------
  479|  4.35k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 33.3k]
  ------------------
  480|  4.35k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 33.3k]
  ------------------
  481|  4.35k|                handler.on_month_name();
  482|  4.35k|                break;
  483|     40|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 40, False: 33.2k]
  ------------------
  484|     40|                handler.on_dec_month();
  485|     40|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 33.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 33.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 33.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 33.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     22|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 22, False: 33.3k]
  ------------------
  502|     22|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 33.3k]
  ------------------
  503|     22|                handler.on_day_of_month();
  504|     22|                break;
  505|       |            // Day of week
  506|  3.64k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.64k, False: 29.6k]
  ------------------
  507|  3.64k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 33.3k]
  ------------------
  508|  3.64k|                handler.on_weekday_name();
  509|  3.64k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 33.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 33.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     12|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 12, False: 33.3k]
  ------------------
  518|     12|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 33.3k]
  ------------------
  519|     12|                handler.on_24_hour();
  520|     12|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 33.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 33.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 33.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 33.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 33.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 33.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 33.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 33.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 33.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 33.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.64k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.64k, False: 29.6k]
  ------------------
  579|  3.64k|                handler.on_us_date();
  580|  3.64k|                break;
  581|  3.65k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.65k, False: 29.6k]
  ------------------
  582|  3.65k|                handler.on_iso_date();
  583|  3.65k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 33.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.4k, False: 22.8k]
  ------------------
  588|  10.4k|                handler.on_24_hour_time();
  589|  10.4k|                break;
  590|  3.84k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.84k, False: 29.4k]
  ------------------
  591|  3.84k|                handler.on_iso_time();
  592|  3.84k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 33.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 33.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 33.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 33.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 33.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 33.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 33.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 33.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  33.3k|        }
  704|  33.3k|        begin = p;
  705|       |
  706|  33.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 25.4k, False: 7.90k]
  ------------------
  707|  25.4k|            return p;
  708|  25.4k|        }
  709|  33.3k|    }
  710|  7.83k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.83k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.83k|    handler.verify();
  714|  7.83k|    return p;
  715|  33.2k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.29k|    {                                                                \
  769|  7.29k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.29k|        field##_set = 1;                                             \
  774|  7.29k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  3.64k|    {                                                                \
  769|  3.64k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.64k|        field##_set = 1;                                             \
  774|  3.64k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.13k|    {                                                                \
  769|  1.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.13k|        field##_set = 1;                                             \
  774|  1.13k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     82|    {                                                                \
  769|     82|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     82|        field##_set = 1;                                             \
  774|     82|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.51k|    {                                                                \
  769|  7.51k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.51k|        field##_set = 1;                                             \
  774|  7.51k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.48k|    {                                                                \
  769|  7.48k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.48k|        field##_set = 1;                                             \
  774|  7.48k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    236|    {                                                                \
  769|    236|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    236|        field##_set = 1;                                             \
  774|    236|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.83k|    {
  800|  7.83k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.08k, False: 750]
  |  Branch (800:27): [True: 0, False: 7.08k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.83k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.83k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.83k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 12, False: 7.82k]
  |  Branch (818:31): [True: 0, False: 12]
  |  Branch (818:46): [True: 0, False: 12]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.83k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.83k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.83k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.83k]
  |  Branch (829:26): [True: 22, False: 7.81k]
  |  Branch (829:38): [True: 0, False: 7.81k]
  ------------------
  830|  7.83k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 22]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.83k|    }

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4066|   965k|{
 4067|   965k|    if constexpr (sizeof(U) == 1) {
 4068|   965k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4069|       |    }
 4070|       |    else if constexpr (sizeof(U) == 2) {
 4071|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4072|       |    }
 4073|       |    else {
 4074|       |        // utf-32
 4075|       |        static_assert(sizeof(U) == 4);
 4076|       |        SCN_UNUSED(ch);
 4077|       |        return 1;
 4078|       |    }
 4079|   965k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4030|   965k|{
 4031|   965k|    static_assert(sizeof(U8) == 1);
 4032|       |
 4033|   965k|    SCN_GCC_COMPAT_PUSH
 4034|   965k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4035|   965k|    constexpr char lengths[] =
 4036|   965k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4037|   965k|        "\1\1\1\1\1\1\1\1"
 4038|   965k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4039|       |                            // byte
 4040|   965k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4041|   965k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4042|   965k|        "\4";               // highest bits 11110 -> 4-byte cp
 4043|   965k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4044|   965k|    SCN_GCC_COMPAT_POP
 4045|   965k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4272|   483k|{
 4273|   483k|    if constexpr (sizeof(CharT) == 1) {
 4274|   483k|        return decode_utf8_code_point_exhaustive(input);
 4275|       |    }
 4276|       |    else if constexpr (sizeof(CharT) == 2) {
 4277|       |        return decode_utf16_code_point_exhaustive(input);
 4278|       |    }
 4279|       |    else {
 4280|       |        SCN_EXPECT(input.size() == 1);
 4281|       |        auto cp = static_cast<char32_t>(input.front());
 4282|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4283|       |            return invalid_code_point;
 4284|       |        }
 4285|       |        return cp;
 4286|       |    }
 4287|   483k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4085|   483k|{
 4086|   483k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1051|   483k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   483k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4087|       |
 4088|   483k|    const auto is_trailing_code_unit = [](char ch) {
 4089|   483k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4090|   483k|    };
 4091|       |
 4092|   483k|    if (input.size() == 1) {
  ------------------
  |  Branch (4092:9): [True: 472k, False: 10.6k]
  ------------------
 4093|   472k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4093:13): [True: 216, False: 472k]
  ------------------
 4094|    216|            SCN_UNLIKELY_ATTR
 4095|    216|            return invalid_code_point;
 4096|    216|        }
 4097|   472k|        return static_cast<char32_t>(input[0]);
 4098|   472k|    }
 4099|       |
 4100|  10.6k|    if (input.size() == 2) {
  ------------------
  |  Branch (4100:9): [True: 8.78k, False: 1.87k]
  ------------------
 4101|  8.78k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4101:13): [True: 60, False: 8.72k]
  ------------------
 4102|     60|            SCN_UNLIKELY_ATTR
 4103|     60|            return invalid_code_point;
 4104|     60|        }
 4105|  8.72k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4105:13): [True: 2.66k, False: 6.06k]
  ------------------
 4106|  2.66k|            SCN_UNLIKELY_ATTR
 4107|  2.66k|            return invalid_code_point;
 4108|  2.66k|        }
 4109|       |
 4110|  6.06k|        char32_t cp{};
 4111|  6.06k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4112|  6.06k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4113|  6.06k|        return cp;
 4114|  8.72k|    }
 4115|       |
 4116|  1.87k|    if (input.size() == 3) {
  ------------------
  |  Branch (4116:9): [True: 841, False: 1.03k]
  ------------------
 4117|    841|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4117:13): [True: 48, False: 793]
  ------------------
 4118|     48|            SCN_UNLIKELY_ATTR
 4119|     48|            return invalid_code_point;
 4120|     48|        }
 4121|    793|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4121:13): [True: 532, False: 261]
  ------------------
 4122|    793|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4122:13): [True: 133, False: 128]
  ------------------
 4123|    665|            SCN_UNLIKELY_ATTR
 4124|    665|            return invalid_code_point;
 4125|    665|        }
 4126|       |
 4127|    128|        char32_t cp{};
 4128|    128|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4129|    128|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4130|    128|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4131|    128|        return cp;
 4132|    793|    }
 4133|       |
 4134|  1.03k|    if (input.size() == 4) {
  ------------------
  |  Branch (4134:9): [True: 1.03k, False: 0]
  ------------------
 4135|  1.03k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4135:13): [True: 0, False: 1.03k]
  ------------------
 4136|      0|            SCN_UNLIKELY_ATTR
 4137|      0|            return invalid_code_point;
 4138|      0|        }
 4139|  1.03k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4139:13): [True: 290, False: 740]
  ------------------
 4140|    290|            SCN_UNLIKELY_ATTR
 4141|    290|            return invalid_code_point;
 4142|    290|        }
 4143|    740|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4143:13): [True: 328, False: 412]
  ------------------
 4144|    740|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4144:13): [True: 136, False: 276]
  ------------------
 4145|    740|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4145:13): [True: 129, False: 147]
  ------------------
 4146|    593|            SCN_UNLIKELY_ATTR
 4147|    593|            return invalid_code_point;
 4148|    593|        }
 4149|       |
 4150|    147|        char32_t cp{};
 4151|    147|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4152|    147|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4153|    147|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4154|    147|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4155|    147|        return cp;
 4156|    740|    }
 4157|       |
 4158|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4159|       |    // gcc 7 thinks we'll get here, even when we won't
 4160|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4161|      0|#endif
 4162|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4163|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4088|  11.2k|    const auto is_trailing_code_unit = [](char ch) {
 4089|  11.2k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4090|  11.2k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3958|   369k|{
 3959|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3960|       |                                          decltype(first), decltype(last)> &&
 3961|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3962|       |        return {first, last};
 3963|       |    }
 3964|   369k|    else {
 3965|   369k|        return {to_address(first), static_cast<size_t>(std::distance(
 3966|   369k|                                       to_address(first), to_address(last)))};
 3967|   369k|    }
 3968|   369k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.11M|{
  316|  1.11M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.11M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  1.46M|{
  294|  1.46M|    return p;
  295|  1.46M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3989|   524k|{
 3990|       |    if constexpr (std::is_constructible_v<
 3991|       |                      typename std::basic_string_view<CharT>::iterator,
 3992|       |                      decltype(it)> &&
 3993|   524k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3994|   524k|        SCN_UNUSED(sv);
  ------------------
  |  | 1036|   524k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3995|   524k|        return it;
 3996|       |    }
 3997|       |    else {
 3998|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3999|       |    }
 4000|   524k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  42.3k|    {
 2868|  42.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  42.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  42.3k|    {
 2849|  42.3k|        return decay_copy(t.begin());
 2850|  42.3k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2092|  1.06M|{
 2093|  1.06M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  1.06M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   181k|    {
 2925|   181k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   181k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   181k|    {
 2907|   181k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   181k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9760|  14.5k|{
 9761|  14.5k|    auto result = make_scan_result<Source, Args...>();
 9762|  14.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  14.5k|                                   make_scan_args(result->values())));
 9764|  14.5k|    return result;
 9765|  14.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEEDav:
 9716|  30.0k|{
 9717|  30.0k|    return scan_result_type<Source, Args...>();
 9718|  30.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1550|  30.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.0k|        : m_value(T{}), m_has_value(true)
  427|  30.0k|    {
  428|  30.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2Ev:
 6623|  30.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6466|  90.2k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3458|  90.2k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJ2tmEEC2Ev:
 6397|   136k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9701|  30.0k|{
 9702|  30.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 13.8k, False: 16.2k]
  |  |  ------------------
  ------------------
 9703|  13.8k|        out = unexpected(in.error());
 9704|  13.8k|    }
 9705|  16.2k|    else {
 9706|  16.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  16.2k|    static_cast<    \
  |  | 1056|  16.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  16.2k|    }
 9708|  30.0k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1738|  90.2k|    {
 1739|  90.2k|        return has_value();
 1740|  90.2k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   180k|    {
  490|   180k|        return m_has_value;
  491|   180k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1744|  41.4k|    {
 1745|  41.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  41.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  41.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  41.4k|        return this->get_unexpected().error();
 1747|  41.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  41.4k|    {
  473|  41.4k|        return m_unexpected;
  474|  41.4k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  3.90M|    {
  365|  3.90M|        return m_unexpected;
  366|  3.90M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  2.05M|        : m_unexpected(std::forward<Err>(e))
  350|  2.05M|    {
  351|  2.05M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  2.05M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  2.05M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1614|  13.8k|        : base(unexpect, std::move(e.error())),
 1615|  13.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  13.8k|    {
 1617|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  13.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  13.8k|          m_has_value(false)
  451|  13.8k|    {
  452|  13.8k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  2.07M|        : m_unexpected(std::forward<Args>(args)...)
  359|  2.07M|    {
  360|  2.07M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  2.07M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  2.07M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  13.8k|    {
 1315|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1555|  13.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  901|  13.8k|    {
  902|  13.8k|        assign_common(std::move(other));
  903|  13.8k|        return *this;
  904|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  948|  13.8k|    {
  949|  13.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 13.8k, False: 0]
  ------------------
  950|  13.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 13.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  13.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  13.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   120k|    {
  490|   120k|        return m_has_value;
  491|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  62.6k|    {
  456|  62.6k|        return m_value;
  457|  62.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1044|  13.8k|    {
 1045|  13.8k|        this->destroy_value();
 1046|  13.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  13.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  13.8k|    {
  504|  13.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  13.8k|                                  std::forward<Args>(args)...);
  506|  13.8k|        m_has_value = false;
  507|  13.8k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   248k|{
  396|   248k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   248k|        T(std::forward<Args>(args)...);
  398|   248k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  13.8k|    {
  473|  13.8k|        return m_unexpected;
  474|  13.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  13.8k|    {
  481|  13.8k|        return std::move(m_unexpected);
  482|  13.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6497|  48.8k|    {
 6498|  48.8k|        m_range = std::forward<Other>(r);
 6499|  48.8k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1793|  48.8k|    {
 1794|  48.8k|        return value();
 1795|  48.8k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|  48.8k|    {
 1768|  48.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  48.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  48.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  48.8k|        return this->get_value();
 1770|  48.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  48.8k|    {
  456|  48.8k|        return m_value;
  457|  48.8k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9522|  43.7k|{
 9523|  43.7k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1057|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9524|  43.7k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9459|  43.7k|{
 9460|  43.7k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|  43.7k|    auto result = vscan_impl(buffer, format, args);
 9463|  43.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 19.3k, False: 24.4k]
  |  |  ------------------
  ------------------
 9464|  19.3k|        return unexpected(result.error());
 9465|  19.3k|    }
 9466|  24.4k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  24.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|  43.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5379|  90.2k|{
 5380|  90.2k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|  90.2k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|  90.2k|                  "\n"
 5384|  90.2k|                  "Unsupported range type given as input to a scanning "
 5385|  90.2k|                  "function.\n"
 5386|  90.2k|                  "A range needs to have a character type (value type) "
 5387|  90.2k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|  90.2k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|  90.2k|                  "to be included.\n"
 5390|  90.2k|                  "See the scnlib documentation for more details.");
 5391|  90.2k|    static_assert(
 5392|  90.2k|        !std::is_same_v<T, custom_char_traits>,
 5393|  90.2k|        "\n"
 5394|  90.2k|        "Unsupported range type given as input to a scanning "
 5395|  90.2k|        "function.\n"
 5396|  90.2k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|  90.2k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|  90.2k|        "not supported.");
 5399|  90.2k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|  90.2k|                  "\n"
 5401|  90.2k|                  "Unsupported range type given as input to a scanning "
 5402|  90.2k|                  "function.\n"
 5403|  90.2k|                  "file_marker_found cannot be used as an "
 5404|  90.2k|                  "source range type to scn::scan.\n"
 5405|  90.2k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|  90.2k|                  "and do not provide an explicit source range, "
 5407|  90.2k|                  "or use scn::scan with a FILE* directly.");
 5408|  90.2k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|  90.2k|                  "\n"
 5410|  90.2k|                  "Unsupported range type given as input to a scanning "
 5411|  90.2k|                  "function.\n"
 5412|  90.2k|                  "In order to be scannable, a range needs to satisfy "
 5413|  90.2k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|  90.2k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|  90.2k|                  "\n"
 5416|  90.2k|                  "Unsupported range type given as input to a scanning "
 5417|  90.2k|                  "function.\n"
 5418|  90.2k|                  "A range needs to model forward_range and have a valid "
 5419|  90.2k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|  90.2k|                  "Examples of scannable ranges are std::string, "
 5421|  90.2k|                  "std::string_view, "
 5422|  90.2k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|  90.2k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|  90.2k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|  90.2k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5318|  90.2k|{
 5319|  90.2k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5320|  90.2k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5321|       |    }
 5322|       |    else {
 5323|       |        return invalid_char_type{};
 5324|       |    }
 5325|  90.2k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|  90.2k|    {
 2999|  90.2k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|  90.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|  90.2k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|  90.2k|    {
 2980|  90.2k|        return t.data();
 2981|  90.2k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3381|  90.2k|    {
 3382|  90.2k|        return detail::to_address(ranges::begin(derived()));
 3383|  90.2k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   355k|{
  316|   355k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   355k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   139k|    {
 2868|   139k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   139k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   139k|    {
 2849|   139k|        return decay_copy(t.begin());
 2850|   139k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3478|  1.20M|    {
 3479|  1.20M|        return m_iterator;
 3480|  1.20M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3337|  90.2k|    {
 3338|  90.2k|        return static_cast<const D&>(*this);
 3339|  90.2k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3073|  90.2k|    {
 3074|  90.2k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  90.2k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3039|  90.2k|    {
 3040|  90.2k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  90.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  90.2k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2092|   761k|{
 2093|   761k|    return SCN_FWD(t);
  ------------------
  |  | 1057|   761k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|   761k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3494|   404k|    {
 3495|   404k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3496|   404k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1738|   622k|    {
 1739|   622k|        return has_value();
 1740|   622k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  1.12M|    {
  490|  1.12M|        return m_has_value;
  491|  1.12M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1744|   248k|    {
 1745|   248k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   248k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   248k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   248k|        return this->get_unexpected().error();
 1747|   248k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   248k|    {
  473|   248k|        return m_unexpected;
  474|   248k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1614|  41.4k|        : base(unexpect, std::move(e.error())),
 1615|  41.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  41.4k|    {
 1617|  41.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  41.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  41.4k|          m_has_value(false)
  451|  41.4k|    {
  452|  41.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  90.2k|    {
 1315|  90.2k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6727|  48.8k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|  48.8k|                      ranges::iterator_t<SourceRange>>) {
 6730|  48.8k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|  48.8k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   400k|    {
 2868|   400k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   400k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   400k|    {
 2849|   400k|        return decay_copy(t.begin());
 2850|   400k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6714|  48.8k|{
 6715|  48.8k|    return ranges::end(source);
 6716|  48.8k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   127k|    {
 2925|   127k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   127k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   127k|    {
 2907|   127k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   127k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3482|   917k|    {
 3483|   917k|        return m_sentinel;
 3484|   917k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1793|   249k|    {
 1794|   249k|        return value();
 1795|   249k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1767|   249k|    {
 1768|   249k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   249k|        return this->get_value();
 1770|   249k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|   249k|    {
  456|   249k|        return m_value;
  457|   249k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|  48.8k|        : base(std::in_place, std::forward<U>(val)),
 1569|  48.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  48.8k|    {
 1571|  48.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  48.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  48.8k|    {
  442|  48.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8797|  29.1k|    {
 8798|  29.1k|        return m_str;
 8799|  29.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  63.7k|{
 6127|  63.7k|    detail::check_scan_arg_types<Args...>();
 6128|  63.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  63.7k|}
_ZN3scn2v46detail20check_scan_arg_typesIJ2tmEEEbv:
 5841|   136k|{
 5842|   136k|    constexpr bool default_constructible_constraint =
 5843|   136k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   136k|    static_assert(default_constructible_constraint,
 5845|   136k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   136k|    constexpr bool destructible_constraint =
 5848|   136k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   136k|    static_assert(destructible_constraint,
 5850|   136k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   136k|    constexpr bool non_reference_constraint =
 5853|   136k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   136k|    static_assert(non_reference_constraint,
 5855|   136k|                  "Scan argument types must not be references");
 5856|       |
 5857|   136k|    constexpr bool movable_constraint =
 5858|   136k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   136k|    static_assert(movable_constraint,
 5860|   136k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   136k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   136k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   136k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6102|  63.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  63.7k|    {
 6104|  63.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6111|  63.7k|    {
 6112|  63.7k|        return {detail::make_arg<
 6113|  63.7k|            kind, Context,
 6114|  63.7k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  63.7k|                                 typename Context::char_type>::value>(args)...};
 6116|  63.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE27E2tmvEENS1_9arg_valueERT2_:
 5900|  63.7k|{
 5901|  63.7k|    return make_value<Context>(value);
 5902|  63.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEEDaRT0_:
 5826|  65.5k|{
 5827|  65.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|       |                                  needs_context_tag>) {
 5831|       |        return make_value_impl<T>(SCN_FWD(arg));
 5832|       |    }
 5833|  65.5k|    else {
 5834|  65.5k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|  65.5k|            value, context_tag<Context>{}));
 5836|  65.5k|    }
 5837|  65.5k|}
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5731|  65.5k|    {
 5732|  65.5k|        return {};
 5733|  65.5k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5795|  65.5k|{
 5796|  65.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  65.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  65.5k|    constexpr bool scannable_char =
 5800|  65.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  65.5k|    static_assert(scannable_char,
 5802|  65.5k|                  "Cannot scan an argument of an unsupported character "
 5803|  65.5k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  65.5k|    constexpr bool scannable_const =
 5806|  65.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  65.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  65.5k|    constexpr bool scannable_disabled =
 5810|  65.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  65.5k|    static_assert(scannable_disabled,
 5812|  65.5k|                  "Cannot scan an argument that has been disabled by "
 5813|  65.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  65.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  65.5k|    static_assert(
 5817|  65.5k|        scannable,
 5818|  65.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  65.5k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  65.5k|    return arg_value{arg};
 5822|  65.5k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5609|  65.5k|        : custom_value{static_cast<void*>(&val.val),
 5610|  65.5k|                       scan_custom_arg<T, Context>}
 5611|  65.5k|    {
 5612|  65.5k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5627|  65.5k|    {
 5628|  65.5k|        static_assert(!is_type_disabled<T>,
 5629|  65.5k|                      "Scanning of custom types is disabled by "
 5630|  65.5k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5631|  65.5k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1051|  65.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  65.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5632|       |
 5633|  65.5k|        using context_type = Context;
 5634|  65.5k|        using parse_context_type = typename context_type::parse_context_type;
 5635|  65.5k|        using scanner_type = typename context_type::template scanner_type<T>;
 5636|       |
 5637|  65.5k|        auto s = scanner_type{};
 5638|       |
 5639|  65.5k|        auto& arg_ref = *static_cast<T*>(arg);
 5640|  65.5k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5641|  65.5k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5642|       |
 5643|  65.5k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3929|  65.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 1.84k, False: 63.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  1.84k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  1.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  1.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  1.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.84k|    }
  ------------------
 5644|  63.7k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3939|  63.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  63.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  63.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 25.7k, False: 37.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  25.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  25.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  25.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  25.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  25.7k|    }                                                  \
  |  |  |  | 3938|  63.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5645|  37.9k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  37.9k|    static_cast<    \
  |  | 1056|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5646|       |
 5647|  37.9k|        return {};
 5648|  63.7k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5560|  65.5k|{
 5561|  65.5k|#if SCN_HAS_EXCEPTIONS
 5562|  65.5k|    auto fmt_it = pctx.begin();
 5563|  65.5k|    try {
 5564|  65.5k|        fmt_it = s.parse(pctx);
 5565|  65.5k|    }
 5566|  65.5k|    catch (const detail::scan_format_string_error_base& ex) {
 5567|       |        // scan_error takes a const char*.
 5568|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5569|       |        // stores a reference-counted string,
 5570|       |        // that will go out of scope here.
 5571|       |        // We need to provide a const char* that will stay in scope.
 5572|       |        // If scan_format_string_error was thrown with a string literal,
 5573|       |        // use that, otherwise refer to a thread_local std::string
 5574|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5574:25): [True: 0, False: 0]
  ------------------
 5575|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5576|      0|        }
 5577|      0|        thread_local std::string err_msg{};
 5578|      0|        err_msg = ex.what();
 5579|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5580|      0|                                     err_msg.c_str());
 5581|      0|    }
 5582|       |#else
 5583|       |    auto fmt_it = s.parse(pctx_ref);
 5584|       |#endif
 5585|  65.5k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.84k, False: 63.7k]
  |  |  ------------------
  ------------------
 5586|  1.84k|        return e;
 5587|  1.84k|    }
 5588|  63.7k|    pctx.advance_to(fmt_it);
 5589|  63.7k|    return {};
 5590|  65.5k|}
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6311|   966k|    {
 6312|   966k|        return m_format.data();
 6313|   966k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE3endEv:
 6316|   196k|    {
 6317|   196k|        return m_format.data() + m_format.size();
 6318|   196k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6357|  5.52k|    {
 6358|  5.52k|        m_error = unexpected(detail::handle_error(
 6359|  5.52k|            scan_error{scan_error::invalid_format_string, msg}));
 6360|  5.52k|        return m_error.error();
 6361|  5.52k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3739|   967k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3740|   967k|    {
 3741|   967k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1036|   967k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3742|   967k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  16.5k|        : m_unexpected(std::forward<Err>(e))
  350|  16.5k|    {
  351|  16.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  16.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  16.5k|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  5.85M|    {
  572|  5.85M|        return m_has_value;
  573|  5.85M|    }
_ZN3scn2v46detail11is_cp_spaceEDi:
 4306|   611k|{
 4307|       |    // Pattern_White_Space property
 4308|   611k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4308:13): [True: 525k, False: 86.6k]
  |  Branch (4308:27): [True: 7.71k, False: 517k]
  ------------------
 4309|   611k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4309:12): [True: 282k, False: 322k]
  ------------------
 4310|   611k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4310:12): [True: 6.79k, False: 315k]
  ------------------
 4311|   611k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4311:12): [True: 660, False: 314k]
  ------------------
 4312|   611k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4312:12): [True: 1.00k, False: 313k]
  ------------------
 4313|   611k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4313:12): [True: 288, False: 313k]
  ------------------
 4314|   611k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 0, False: 313k]
  ------------------
 4315|   611k|}
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3974|   366k|{
 3975|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3976|       |                                          const CharT*, const CharT*>) {
 3977|       |        return {first, last};
 3978|       |    }
 3979|   366k|    else {
 3980|   366k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3981|   366k|    }
 3982|   366k|}
_ZN3scn2v424basic_scan_parse_contextIcE9get_errorEv:
 6364|   196k|    {
 6365|   196k|        return m_error;
 6366|   196k|    }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6322|   382k|    {
 6323|   382k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6324|   382k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1738|  4.16M|    {
 1739|  4.16M|        return has_value();
 1740|  4.16M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1744|   741k|    {
 1745|   741k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   741k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   741k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   741k|        return this->get_unexpected().error();
 1747|   741k|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   741k|    {
  555|   741k|        return m_unexpected;
  556|   741k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1614|   724k|        : base(unexpect, std::move(e.error())),
 1615|   724k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   724k|    {
 1617|   724k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   724k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   724k|          m_has_value(false)
  550|   724k|    {
  551|   724k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   724k|    {
 1315|   724k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1738|   488k|    {
 1739|   488k|        return has_value();
 1740|   488k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   977k|    {
  490|   977k|        return m_has_value;
  491|   977k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1744|   159k|    {
 1745|   159k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   159k|        return this->get_unexpected().error();
 1747|   159k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   159k|    {
  473|   159k|        return m_unexpected;
  474|   159k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|   215k|    {
 1804|   215k|        return std::move(value());
 1805|   215k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|   329k|    {
 1768|   329k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   329k|        return this->get_value();
 1770|   329k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   329k|    {
  456|   329k|        return m_value;
  457|   329k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9000|   280k|    {
 9001|   280k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|   280k|    static_cast<    \
  |  | 1056|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9002|   280k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1550|  2.13M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  2.13M|        : m_deferred_init(), m_has_value(true)
  529|  2.13M|    {
  530|  2.13M|    }
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5739|  65.5k|    {
 5740|  65.5k|        return {val};
 5741|  65.5k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE6valuesEv:
 6406|   130k|    {
 6407|   130k|        return m_values;
 6408|   130k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  63.7k|        : basic_scan_args(store.desc, store.args.data())
 6153|  63.7k|    {
 6154|  63.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKNS3_9arg_valueE:
 6209|   191k|        : m_desc(desc), m_values(data)
 6210|   191k|    {
 6211|   191k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3463|   666k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   666k|    static_cast<    \
  |  | 1056|   666k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   666k|    static_cast<    \
  |  | 1056|   666k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   666k|    {
 3465|   666k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8458|   191k|{
 8459|   191k|    return s;
 8460|   191k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8435|   191k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  29.1k|        : m_str(r.str)
 8793|  29.1k|    {
 8794|  29.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1738|  30.0k|    {
 1739|  30.0k|        return has_value();
 1740|  30.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1813|  62.6k|    {
 1814|  62.6k|        return &value();
 1815|  62.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1767|  62.6k|    {
 1768|  62.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  62.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  62.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  62.6k|        return this->get_value();
 1770|  62.6k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6486|  48.8k|    {
 6487|  48.8k|        return ranges::begin(m_range);
 6488|  48.8k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9829|  14.5k|{
 9830|  14.5k|    auto result = make_scan_result<Source, Args...>();
 9831|  14.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  14.5k|                                   make_scan_args(result->values())));
 9833|  14.5k|    return result;
 9834|  14.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9540|  43.7k|{
 9541|  43.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1057|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9542|  43.7k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9475|  43.7k|{
 9476|  43.7k|#if !SCN_DISABLE_LOCALE
 9477|  43.7k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|  43.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|  43.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|  43.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|  43.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 19.3k, False: 24.4k]
  |  |  ------------------
  ------------------
 9484|  19.3k|        return unexpected(result.error());
 9485|  19.3k|    }
 9486|  24.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  24.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|  43.7k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9870|    921|{
 9871|    921|    auto result = make_scan_result<Source, T>();
 9872|    921|    fill_scan_result(
 9873|    921|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|    921|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|    921|                            detail::make_arg<scan_context>(result->value())));
 9875|    921|    return result;
 9876|    921|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9553|  2.76k|{
 9554|  2.76k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1057|  2.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9555|  2.76k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  2.76k|{
 9500|  2.76k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  2.76k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  2.76k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.76k, False: 0]
  |  |  ------------------
  ------------------
 9504|  2.76k|        return unexpected(result.error());
 9505|  2.76k|    }
 9506|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  2.76k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5876|  1.84k|{
 5877|  1.84k|    check_scan_arg_types<T>();
 5878|       |
 5879|  1.84k|    basic_scan_arg<Context> arg;
 5880|  1.84k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  1.84k|    arg.m_value = make_value<Context>(value);
 5882|  1.84k|    return arg;
 5883|  1.84k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5971|   196k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5599|   409k|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  5.52k|    {
 6429|  5.52k|        return std::get<0>(m_values);
 6430|  5.52k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9760|  14.5k|{
 9761|  14.5k|    auto result = make_scan_result<Source, Args...>();
 9762|  14.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  14.5k|                                   make_scan_args(result->values())));
 9764|  14.5k|    return result;
 9765|  14.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEEDav:
 9716|  30.0k|{
 9717|  30.0k|    return scan_result_type<Source, Args...>();
 9718|  30.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1550|  30.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  30.0k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  30.0k|    {
  613|  30.0k|        construct();
  614|  30.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  30.0k|    {
  694|  30.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  30.0k|        m_has_value = true;
  696|  30.0k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  30.0k|{
  396|  30.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  30.0k|        T(std::forward<Args>(args)...);
  398|  30.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6623|  30.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEEC2Ev:
 6397|   136k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   122k|    {
  718|   122k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   122k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   122k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9701|  30.0k|{
 9702|  30.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 13.8k, False: 16.2k]
  |  |  ------------------
  ------------------
 9703|  13.8k|        out = unexpected(in.error());
 9704|  13.8k|    }
 9705|  16.2k|    else {
 9706|  16.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  16.2k|    static_cast<    \
  |  | 1056|  16.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  16.2k|    }
 9708|  30.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1614|  13.8k|        : base(unexpect, std::move(e.error())),
 1615|  13.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  13.8k|    {
 1617|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  13.8k|        : m_has_value(false)
  637|  13.8k|    {
  638|  13.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  13.8k|    {
  701|  13.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.8k|                                  std::forward<Args>(args)...);
  703|  13.8k|        m_has_value = false;
  704|  13.8k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|   165k|{
  396|   165k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   165k|        T(std::forward<Args>(args)...);
  398|   165k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  69.0k|    {
  730|  69.0k|        return reinterpret_cast<unexpected<E>*>(
  731|  69.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  69.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  69.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  13.8k|    {
 1315|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1555|  13.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  901|  13.8k|    {
  902|  13.8k|        assign_common(std::move(other));
  903|  13.8k|        return *this;
  904|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  948|  13.8k|    {
  949|  13.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 13.8k, False: 0]
  ------------------
  950|  13.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 13.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  13.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  13.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   164k|    {
  687|   164k|        return m_has_value;
  688|   164k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  62.6k|    {
  653|  62.6k|        return *value_ptr();
  654|  62.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1044|  13.8k|    {
 1045|  13.8k|        this->destroy_value();
 1046|  13.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  30.0k|    {
  708|  30.0k|        scn::detail::destroy_at(value_ptr());
  709|  30.0k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  30.0k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  30.0k|    else {
  408|  30.0k|        p->~T();
  409|  30.0k|    }
  410|  30.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEED2Ev:
 6630|  30.0k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  13.8k|    {
  701|  13.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.8k|                                  std::forward<Args>(args)...);
  703|  13.8k|        m_has_value = false;
  704|  13.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  13.8k|    {
  678|  13.8k|        return std::move(*unexpected_ptr());
  679|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  27.6k|    {
  712|  27.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  27.6k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   331k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   331k|    else {
  408|   331k|        p->~T();
  409|   331k|    }
  410|   331k|}
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8797|  29.1k|    {
 8798|  29.1k|        return m_str;
 8799|  29.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  63.7k|{
 6127|  63.7k|    detail::check_scan_arg_types<Args...>();
 6128|  63.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  63.7k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_10tm_with_tzEEEEbv:
 5841|   136k|{
 5842|   136k|    constexpr bool default_constructible_constraint =
 5843|   136k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   136k|    static_assert(default_constructible_constraint,
 5845|   136k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   136k|    constexpr bool destructible_constraint =
 5848|   136k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   136k|    static_assert(destructible_constraint,
 5850|   136k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   136k|    constexpr bool non_reference_constraint =
 5853|   136k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   136k|    static_assert(non_reference_constraint,
 5855|   136k|                  "Scan argument types must not be references");
 5856|       |
 5857|   136k|    constexpr bool movable_constraint =
 5858|   136k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   136k|    static_assert(movable_constraint,
 5860|   136k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   136k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   136k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   136k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6102|  63.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  63.7k|    {
 6104|  63.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6111|  63.7k|    {
 6112|  63.7k|        return {detail::make_arg<
 6113|  63.7k|            kind, Context,
 6114|  63.7k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  63.7k|                                 typename Context::char_type>::value>(args)...};
 6116|  63.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE27ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5900|  63.7k|{
 5901|  63.7k|    return make_value<Context>(value);
 5902|  63.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEEDaRT0_:
 5826|  65.5k|{
 5827|  65.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|       |                                  needs_context_tag>) {
 5831|       |        return make_value_impl<T>(SCN_FWD(arg));
 5832|       |    }
 5833|  65.5k|    else {
 5834|  65.5k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|  65.5k|            value, context_tag<Context>{}));
 5836|  65.5k|    }
 5837|  65.5k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5731|  65.5k|    {
 5732|  65.5k|        return {};
 5733|  65.5k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5795|  65.5k|{
 5796|  65.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  65.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  65.5k|    constexpr bool scannable_char =
 5800|  65.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  65.5k|    static_assert(scannable_char,
 5802|  65.5k|                  "Cannot scan an argument of an unsupported character "
 5803|  65.5k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  65.5k|    constexpr bool scannable_const =
 5806|  65.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  65.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  65.5k|    constexpr bool scannable_disabled =
 5810|  65.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  65.5k|    static_assert(scannable_disabled,
 5812|  65.5k|                  "Cannot scan an argument that has been disabled by "
 5813|  65.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  65.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  65.5k|    static_assert(
 5817|  65.5k|        scannable,
 5818|  65.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  65.5k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  65.5k|    return arg_value{arg};
 5822|  65.5k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5609|  65.5k|        : custom_value{static_cast<void*>(&val.val),
 5610|  65.5k|                       scan_custom_arg<T, Context>}
 5611|  65.5k|    {
 5612|  65.5k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5627|  65.5k|    {
 5628|  65.5k|        static_assert(!is_type_disabled<T>,
 5629|  65.5k|                      "Scanning of custom types is disabled by "
 5630|  65.5k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5631|  65.5k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1051|  65.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  65.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5632|       |
 5633|  65.5k|        using context_type = Context;
 5634|  65.5k|        using parse_context_type = typename context_type::parse_context_type;
 5635|  65.5k|        using scanner_type = typename context_type::template scanner_type<T>;
 5636|       |
 5637|  65.5k|        auto s = scanner_type{};
 5638|       |
 5639|  65.5k|        auto& arg_ref = *static_cast<T*>(arg);
 5640|  65.5k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5641|  65.5k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5642|       |
 5643|  65.5k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3929|  65.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 1.84k, False: 63.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  1.84k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  1.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  1.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  1.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.84k|    }
  ------------------
 5644|  63.7k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3939|  63.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  63.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  63.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 25.7k, False: 37.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  25.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  25.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  25.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  25.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  25.7k|    }                                                  \
  |  |  |  | 3938|  63.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5645|  37.9k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  37.9k|    static_cast<    \
  |  | 1056|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5646|       |
 5647|  37.9k|        return {};
 5648|  63.7k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5560|  65.5k|{
 5561|  65.5k|#if SCN_HAS_EXCEPTIONS
 5562|  65.5k|    auto fmt_it = pctx.begin();
 5563|  65.5k|    try {
 5564|  65.5k|        fmt_it = s.parse(pctx);
 5565|  65.5k|    }
 5566|  65.5k|    catch (const detail::scan_format_string_error_base& ex) {
 5567|       |        // scan_error takes a const char*.
 5568|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5569|       |        // stores a reference-counted string,
 5570|       |        // that will go out of scope here.
 5571|       |        // We need to provide a const char* that will stay in scope.
 5572|       |        // If scan_format_string_error was thrown with a string literal,
 5573|       |        // use that, otherwise refer to a thread_local std::string
 5574|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5574:25): [True: 0, False: 0]
  ------------------
 5575|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5576|      0|        }
 5577|      0|        thread_local std::string err_msg{};
 5578|      0|        err_msg = ex.what();
 5579|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5580|      0|                                     err_msg.c_str());
 5581|      0|    }
 5582|       |#else
 5583|       |    auto fmt_it = s.parse(pctx_ref);
 5584|       |#endif
 5585|  65.5k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.84k, False: 63.7k]
  |  |  ------------------
  ------------------
 5586|  1.84k|        return e;
 5587|  1.84k|    }
 5588|  63.7k|    pctx.advance_to(fmt_it);
 5589|  63.7k|    return {};
 5590|  65.5k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5739|  65.5k|    {
 5740|  65.5k|        return {val};
 5741|  65.5k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE6valuesEv:
 6406|   130k|    {
 6407|   130k|        return m_values;
 6408|   130k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  63.7k|        : basic_scan_args(store.desc, store.args.data())
 6153|  63.7k|    {
 6154|  63.7k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  29.1k|        : m_str(r.str)
 8793|  29.1k|    {
 8794|  29.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1738|  30.0k|    {
 1739|  30.0k|        return has_value();
 1740|  30.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1813|  62.6k|    {
 1814|  62.6k|        return &value();
 1815|  62.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1767|  62.6k|    {
 1768|  62.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  62.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  62.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  62.6k|        return this->get_value();
 1770|  62.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  43.9k|    {
  643|  43.9k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 16.2k, False: 27.6k]
  ------------------
  644|  16.2k|            destroy_value();
  645|  16.2k|        }
  646|  27.6k|        else {
  647|  27.6k|            destroy_unexpected();
  648|  27.6k|        }
  649|  43.9k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9829|  14.5k|{
 9830|  14.5k|    auto result = make_scan_result<Source, Args...>();
 9831|  14.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  14.5k|                                   make_scan_args(result->values())));
 9833|  14.5k|    return result;
 9834|  14.5k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9870|    921|{
 9871|    921|    auto result = make_scan_result<Source, T>();
 9872|    921|    fill_scan_result(
 9873|    921|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|    921|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|    921|                            detail::make_arg<scan_context>(result->value())));
 9875|    921|    return result;
 9876|    921|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5876|  1.84k|{
 5877|  1.84k|    check_scan_arg_types<T>();
 5878|       |
 5879|  1.84k|    basic_scan_arg<Context> arg;
 5880|  1.84k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  1.84k|    arg.m_value = make_value<Context>(value);
 5882|  1.84k|    return arg;
 5883|  1.84k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  5.52k|    {
 6429|  5.52k|        return std::get<0>(m_values);
 6430|  5.52k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9760|  14.5k|{
 9761|  14.5k|    auto result = make_scan_result<Source, Args...>();
 9762|  14.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  14.5k|                                   make_scan_args(result->values())));
 9764|  14.5k|    return result;
 9765|  14.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEEDav:
 9716|  30.0k|{
 9717|  30.0k|    return scan_result_type<Source, Args...>();
 9718|  30.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1550|  30.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  30.0k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  30.0k|    {
  613|  30.0k|        construct();
  614|  30.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  30.0k|    {
  694|  30.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  30.0k|        m_has_value = true;
  696|  30.0k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  30.0k|{
  396|  30.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  30.0k|        T(std::forward<Args>(args)...);
  398|  30.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6623|  30.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEEC2Ev:
 6397|   136k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   122k|    {
  718|   122k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   122k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   122k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9701|  30.0k|{
 9702|  30.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 13.8k, False: 16.2k]
  |  |  ------------------
  ------------------
 9703|  13.8k|        out = unexpected(in.error());
 9704|  13.8k|    }
 9705|  16.2k|    else {
 9706|  16.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  16.2k|    static_cast<    \
  |  | 1056|  16.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  16.2k|    }
 9708|  30.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1614|  13.8k|        : base(unexpect, std::move(e.error())),
 1615|  13.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  13.8k|    {
 1617|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  13.8k|        : m_has_value(false)
  637|  13.8k|    {
  638|  13.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  13.8k|    {
  701|  13.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.8k|                                  std::forward<Args>(args)...);
  703|  13.8k|        m_has_value = false;
  704|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  69.0k|    {
  730|  69.0k|        return reinterpret_cast<unexpected<E>*>(
  731|  69.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  69.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  69.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  13.8k|    {
 1315|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1555|  13.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  901|  13.8k|    {
  902|  13.8k|        assign_common(std::move(other));
  903|  13.8k|        return *this;
  904|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  948|  13.8k|    {
  949|  13.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 13.8k, False: 0]
  ------------------
  950|  13.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 13.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  13.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  13.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   164k|    {
  687|   164k|        return m_has_value;
  688|   164k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  62.6k|    {
  653|  62.6k|        return *value_ptr();
  654|  62.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1044|  13.8k|    {
 1045|  13.8k|        this->destroy_value();
 1046|  13.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  30.0k|    {
  708|  30.0k|        scn::detail::destroy_at(value_ptr());
  709|  30.0k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  30.0k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  30.0k|    else {
  408|  30.0k|        p->~T();
  409|  30.0k|    }
  410|  30.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEED2Ev:
 6630|  30.0k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  13.8k|    {
  701|  13.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.8k|                                  std::forward<Args>(args)...);
  703|  13.8k|        m_has_value = false;
  704|  13.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  13.8k|    {
  678|  13.8k|        return std::move(*unexpected_ptr());
  679|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  27.6k|    {
  712|  27.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  27.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8797|  29.1k|    {
 8798|  29.1k|        return m_str;
 8799|  29.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  63.7k|{
 6127|  63.7k|    detail::check_scan_arg_types<Args...>();
 6128|  63.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  63.7k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_19datetime_componentsEEEEbv:
 5841|   136k|{
 5842|   136k|    constexpr bool default_constructible_constraint =
 5843|   136k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   136k|    static_assert(default_constructible_constraint,
 5845|   136k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   136k|    constexpr bool destructible_constraint =
 5848|   136k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   136k|    static_assert(destructible_constraint,
 5850|   136k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   136k|    constexpr bool non_reference_constraint =
 5853|   136k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   136k|    static_assert(non_reference_constraint,
 5855|   136k|                  "Scan argument types must not be references");
 5856|       |
 5857|   136k|    constexpr bool movable_constraint =
 5858|   136k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   136k|    static_assert(movable_constraint,
 5860|   136k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   136k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   136k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   136k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6102|  63.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  63.7k|    {
 6104|  63.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6111|  63.7k|    {
 6112|  63.7k|        return {detail::make_arg<
 6113|  63.7k|            kind, Context,
 6114|  63.7k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  63.7k|                                 typename Context::char_type>::value>(args)...};
 6116|  63.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE27ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5900|  63.7k|{
 5901|  63.7k|    return make_value<Context>(value);
 5902|  63.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEEDaRT0_:
 5826|  65.5k|{
 5827|  65.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|       |                                  needs_context_tag>) {
 5831|       |        return make_value_impl<T>(SCN_FWD(arg));
 5832|       |    }
 5833|  65.5k|    else {
 5834|  65.5k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|  65.5k|            value, context_tag<Context>{}));
 5836|  65.5k|    }
 5837|  65.5k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5731|  65.5k|    {
 5732|  65.5k|        return {};
 5733|  65.5k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5795|  65.5k|{
 5796|  65.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  65.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  65.5k|    constexpr bool scannable_char =
 5800|  65.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  65.5k|    static_assert(scannable_char,
 5802|  65.5k|                  "Cannot scan an argument of an unsupported character "
 5803|  65.5k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  65.5k|    constexpr bool scannable_const =
 5806|  65.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  65.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  65.5k|    constexpr bool scannable_disabled =
 5810|  65.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  65.5k|    static_assert(scannable_disabled,
 5812|  65.5k|                  "Cannot scan an argument that has been disabled by "
 5813|  65.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  65.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  65.5k|    static_assert(
 5817|  65.5k|        scannable,
 5818|  65.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  65.5k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  65.5k|    return arg_value{arg};
 5822|  65.5k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5609|  65.5k|        : custom_value{static_cast<void*>(&val.val),
 5610|  65.5k|                       scan_custom_arg<T, Context>}
 5611|  65.5k|    {
 5612|  65.5k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5627|  65.5k|    {
 5628|  65.5k|        static_assert(!is_type_disabled<T>,
 5629|  65.5k|                      "Scanning of custom types is disabled by "
 5630|  65.5k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5631|  65.5k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1051|  65.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  65.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5632|       |
 5633|  65.5k|        using context_type = Context;
 5634|  65.5k|        using parse_context_type = typename context_type::parse_context_type;
 5635|  65.5k|        using scanner_type = typename context_type::template scanner_type<T>;
 5636|       |
 5637|  65.5k|        auto s = scanner_type{};
 5638|       |
 5639|  65.5k|        auto& arg_ref = *static_cast<T*>(arg);
 5640|  65.5k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5641|  65.5k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5642|       |
 5643|  65.5k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3929|  65.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 1.84k, False: 63.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  1.84k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  1.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  1.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  1.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.84k|    }
  ------------------
 5644|  63.7k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3939|  63.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  63.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  63.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 25.7k, False: 37.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  25.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  25.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  25.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  25.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  25.7k|    }                                                  \
  |  |  |  | 3938|  63.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5645|  37.9k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  37.9k|    static_cast<    \
  |  | 1056|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5646|       |
 5647|  37.9k|        return {};
 5648|  63.7k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5560|  65.5k|{
 5561|  65.5k|#if SCN_HAS_EXCEPTIONS
 5562|  65.5k|    auto fmt_it = pctx.begin();
 5563|  65.5k|    try {
 5564|  65.5k|        fmt_it = s.parse(pctx);
 5565|  65.5k|    }
 5566|  65.5k|    catch (const detail::scan_format_string_error_base& ex) {
 5567|       |        // scan_error takes a const char*.
 5568|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5569|       |        // stores a reference-counted string,
 5570|       |        // that will go out of scope here.
 5571|       |        // We need to provide a const char* that will stay in scope.
 5572|       |        // If scan_format_string_error was thrown with a string literal,
 5573|       |        // use that, otherwise refer to a thread_local std::string
 5574|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5574:25): [True: 0, False: 0]
  ------------------
 5575|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5576|      0|        }
 5577|      0|        thread_local std::string err_msg{};
 5578|      0|        err_msg = ex.what();
 5579|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5580|      0|                                     err_msg.c_str());
 5581|      0|    }
 5582|       |#else
 5583|       |    auto fmt_it = s.parse(pctx_ref);
 5584|       |#endif
 5585|  65.5k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.84k, False: 63.7k]
  |  |  ------------------
  ------------------
 5586|  1.84k|        return e;
 5587|  1.84k|    }
 5588|  63.7k|    pctx.advance_to(fmt_it);
 5589|  63.7k|    return {};
 5590|  65.5k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5739|  65.5k|    {
 5740|  65.5k|        return {val};
 5741|  65.5k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE6valuesEv:
 6406|   130k|    {
 6407|   130k|        return m_values;
 6408|   130k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  63.7k|        : basic_scan_args(store.desc, store.args.data())
 6153|  63.7k|    {
 6154|  63.7k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  29.1k|        : m_str(r.str)
 8793|  29.1k|    {
 8794|  29.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1738|  30.0k|    {
 1739|  30.0k|        return has_value();
 1740|  30.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1813|  62.6k|    {
 1814|  62.6k|        return &value();
 1815|  62.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1767|  62.6k|    {
 1768|  62.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  62.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  62.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  62.6k|        return this->get_value();
 1770|  62.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  43.9k|    {
  643|  43.9k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 16.2k, False: 27.6k]
  ------------------
  644|  16.2k|            destroy_value();
  645|  16.2k|        }
  646|  27.6k|        else {
  647|  27.6k|            destroy_unexpected();
  648|  27.6k|        }
  649|  43.9k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9829|  14.5k|{
 9830|  14.5k|    auto result = make_scan_result<Source, Args...>();
 9831|  14.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  14.5k|                                   make_scan_args(result->values())));
 9833|  14.5k|    return result;
 9834|  14.5k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9870|    921|{
 9871|    921|    auto result = make_scan_result<Source, T>();
 9872|    921|    fill_scan_result(
 9873|    921|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|    921|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|    921|                            detail::make_arg<scan_context>(result->value())));
 9875|    921|    return result;
 9876|    921|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5876|  1.84k|{
 5877|  1.84k|    check_scan_arg_types<T>();
 5878|       |
 5879|  1.84k|    basic_scan_arg<Context> arg;
 5880|  1.84k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  1.84k|    arg.m_value = make_value<Context>(value);
 5882|  1.84k|    return arg;
 5883|  1.84k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  5.52k|    {
 6429|  5.52k|        return std::get<0>(m_values);
 6430|  5.52k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  41.4k|    {
 2868|  41.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  41.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  41.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  41.4k|    {
 2849|  41.4k|        return decay_copy(t.begin());
 2850|  41.4k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2092|  2.94M|{
 2093|  2.94M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  2.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  2.94M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   212k|    {
 2925|   212k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   212k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   212k|    {
 2907|   212k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   212k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9760|  17.2k|{
 9761|  17.2k|    auto result = make_scan_result<Source, Args...>();
 9762|  17.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  17.2k|                                   make_scan_args(result->values())));
 9764|  17.2k|    return result;
 9765|  17.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEEDav:
 9716|  35.4k|{
 9717|  35.4k|    return scan_result_type<Source, Args...>();
 9718|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1550|  35.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  35.4k|        : m_value(T{}), m_has_value(true)
  427|  35.4k|    {
  428|  35.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2Ev:
 6623|  35.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6466|   106k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3458|   106k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  35.4k|{
 9702|  35.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 13.8k, False: 21.6k]
  |  |  ------------------
  ------------------
 9703|  13.8k|        out = unexpected(in.error());
 9704|  13.8k|    }
 9705|  21.6k|    else {
 9706|  21.6k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  21.6k|    static_cast<    \
  |  | 1056|  21.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  21.6k|    }
 9708|  35.4k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1738|   106k|    {
 1739|   106k|        return has_value();
 1740|   106k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   212k|    {
  490|   212k|        return m_has_value;
  491|   212k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1744|  41.4k|    {
 1745|  41.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  41.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  41.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  41.4k|        return this->get_unexpected().error();
 1747|  41.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  41.4k|    {
  473|  41.4k|        return m_unexpected;
  474|  41.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  13.8k|        : base(unexpect, std::move(e.error())),
 1615|  13.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  13.8k|    {
 1617|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  13.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  13.8k|          m_has_value(false)
  451|  13.8k|    {
  452|  13.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  13.8k|    {
 1315|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1555|  13.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  901|  13.8k|    {
  902|  13.8k|        assign_common(std::move(other));
  903|  13.8k|        return *this;
  904|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  13.8k|    {
  949|  13.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 13.8k, False: 0]
  ------------------
  950|  13.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 13.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  13.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  13.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   141k|    {
  490|   141k|        return m_has_value;
  491|   141k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  78.7k|    {
  456|  78.7k|        return m_value;
  457|  78.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  13.8k|    {
 1045|  13.8k|        this->destroy_value();
 1046|  13.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  13.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  13.8k|    {
  504|  13.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  13.8k|                                  std::forward<Args>(args)...);
  506|  13.8k|        m_has_value = false;
  507|  13.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  13.8k|    {
  473|  13.8k|        return m_unexpected;
  474|  13.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  13.8k|    {
  481|  13.8k|        return std::move(m_unexpected);
  482|  13.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6497|  64.9k|    {
 6498|  64.9k|        m_range = std::forward<Other>(r);
 6499|  64.9k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1793|  64.9k|    {
 1794|  64.9k|        return value();
 1795|  64.9k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1767|  64.9k|    {
 1768|  64.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  64.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  64.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  64.9k|        return this->get_value();
 1770|  64.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  64.9k|    {
  456|  64.9k|        return m_value;
  457|  64.9k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9522|  51.8k|{
 9523|  51.8k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1057|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9524|  51.8k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9459|  51.8k|{
 9460|  51.8k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|  51.8k|    auto result = vscan_impl(buffer, format, args);
 9463|  51.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 19.3k, False: 32.4k]
  |  |  ------------------
  ------------------
 9464|  19.3k|        return unexpected(result.error());
 9465|  19.3k|    }
 9466|  32.4k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|  51.8k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5379|   106k|{
 5380|   106k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   106k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   106k|                  "\n"
 5384|   106k|                  "Unsupported range type given as input to a scanning "
 5385|   106k|                  "function.\n"
 5386|   106k|                  "A range needs to have a character type (value type) "
 5387|   106k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   106k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   106k|                  "to be included.\n"
 5390|   106k|                  "See the scnlib documentation for more details.");
 5391|   106k|    static_assert(
 5392|   106k|        !std::is_same_v<T, custom_char_traits>,
 5393|   106k|        "\n"
 5394|   106k|        "Unsupported range type given as input to a scanning "
 5395|   106k|        "function.\n"
 5396|   106k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   106k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   106k|        "not supported.");
 5399|   106k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   106k|                  "\n"
 5401|   106k|                  "Unsupported range type given as input to a scanning "
 5402|   106k|                  "function.\n"
 5403|   106k|                  "file_marker_found cannot be used as an "
 5404|   106k|                  "source range type to scn::scan.\n"
 5405|   106k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   106k|                  "and do not provide an explicit source range, "
 5407|   106k|                  "or use scn::scan with a FILE* directly.");
 5408|   106k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   106k|                  "\n"
 5410|   106k|                  "Unsupported range type given as input to a scanning "
 5411|   106k|                  "function.\n"
 5412|   106k|                  "In order to be scannable, a range needs to satisfy "
 5413|   106k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   106k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   106k|                  "\n"
 5416|   106k|                  "Unsupported range type given as input to a scanning "
 5417|   106k|                  "function.\n"
 5418|   106k|                  "A range needs to model forward_range and have a valid "
 5419|   106k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   106k|                  "Examples of scannable ranges are std::string, "
 5421|   106k|                  "std::string_view, "
 5422|   106k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   106k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   106k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   106k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5349|   106k|{
 5350|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5351|       |        return file_marker_found{};
 5352|       |    }
 5353|       |    else if constexpr (!ranges::forward_range<Range>) {
 5354|       |        if constexpr (ranges::range<Range>) {
 5355|       |            return insufficient_range{};
 5356|       |        }
 5357|       |        else {
 5358|       |            return invalid_input_range{};
 5359|       |        }
 5360|       |    }
 5361|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5362|       |        return invalid_char_type{};
 5363|       |    }
 5364|   106k|    else {
 5365|   106k|        return make_forward_scan_buffer(r);
 5366|   106k|    }
 5367|   106k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5183|   106k|{
 5184|   106k|    return basic_scan_forward_buffer_impl(range);
 5185|   106k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|   106k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1057|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|   106k|          m_cursor(ranges::begin(*m_range))
 4765|   106k|    {
 4766|   106k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4735|   106k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|   106k|    {
 4737|   106k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4426|   106k|        : m_current_view(sv), m_is_contiguous(false)
 4427|   106k|    {
 4428|   106k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4339|   193k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   171k|    {
 2868|   171k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   171k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   171k|    {
 2849|   171k|        return decay_copy(t.begin());
 2850|   171k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3478|   236k|    {
 3479|   236k|        return m_iterator;
 3480|   236k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4769|   807k|    {
 4770|   807k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 14.9k, False: 792k]
  ------------------
 4771|  14.9k|            return false;
 4772|  14.9k|        }
 4773|   792k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|   792k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1051|   792k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   792k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|   792k|        }
 4776|   792k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 689k, False: 103k]
  ------------------
 4777|   689k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|   689k|                                          this->m_current_view.begin(),
 4779|   689k|                                          this->m_current_view.end());
 4780|   689k|        }
 4781|   792k|        m_latest = *m_cursor;
 4782|   792k|        ++m_cursor;
 4783|   792k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|   792k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|   792k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1051|   792k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   792k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|   792k|        }
 4787|   792k|        return true;
 4788|   807k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  2.39M|    {
 2925|  2.39M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  2.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  2.39M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  2.39M|    {
 2907|  2.39M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  2.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  2.39M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3482|  2.45M|    {
 3483|  2.45M|        return m_sentinel;
 3484|  2.45M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4344|   106k|    {
 4345|   106k|        SCN_UNUSED(position);
  ------------------
  |  | 1036|   106k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4346|   106k|        return true;
 4347|   106k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1614|  41.4k|        : base(unexpect, std::move(e.error())),
 1615|  41.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  41.4k|    {
 1617|  41.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  41.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  41.4k|          m_has_value(false)
  451|  41.4k|    {
  452|  41.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   106k|    {
 1315|   106k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6727|  64.9k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|  64.9k|                      ranges::iterator_t<SourceRange>>) {
 6730|  64.9k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|  64.9k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  64.9k|    {
 2868|  64.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  64.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  64.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  64.9k|    {
 2849|  64.9k|        return decay_copy(t.begin());
 2850|  64.9k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6714|  64.9k|{
 6715|  64.9k|    return ranges::end(source);
 6716|  64.9k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  64.9k|    {
 2925|  64.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  64.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  64.9k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  64.9k|    {
 2907|  64.9k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  64.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  64.9k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1568|  64.9k|        : base(std::in_place, std::forward<U>(val)),
 1569|  64.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  64.9k|    {
 1571|  64.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  64.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  64.9k|    {
  442|  64.9k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|  34.5k|    {
 8798|  34.5k|        return m_str;
 8799|  34.5k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3463|   171k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   171k|    static_cast<    \
  |  | 1056|   171k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   171k|    static_cast<    \
  |  | 1056|   171k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   171k|    {
 3465|   171k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  34.5k|        : m_str(r.str)
 8793|  34.5k|    {
 8794|  34.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1738|  35.4k|    {
 1739|  35.4k|        return has_value();
 1740|  35.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1813|  78.7k|    {
 1814|  78.7k|        return &value();
 1815|  78.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  78.7k|    {
 1768|  78.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  78.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  78.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  78.7k|        return this->get_value();
 1770|  78.7k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6486|  64.9k|    {
 6487|  64.9k|        return ranges::begin(m_range);
 6488|  64.9k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9829|  17.2k|{
 9830|  17.2k|    auto result = make_scan_result<Source, Args...>();
 9831|  17.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  17.2k|                                   make_scan_args(result->values())));
 9833|  17.2k|    return result;
 9834|  17.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9540|  51.8k|{
 9541|  51.8k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1057|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9542|  51.8k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9475|  51.8k|{
 9476|  51.8k|#if !SCN_DISABLE_LOCALE
 9477|  51.8k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|  51.8k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|  51.8k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|  51.8k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|  51.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 19.3k, False: 32.4k]
  |  |  ------------------
  ------------------
 9484|  19.3k|        return unexpected(result.error());
 9485|  19.3k|    }
 9486|  32.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|  51.8k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9870|    921|{
 9871|    921|    auto result = make_scan_result<Source, T>();
 9872|    921|    fill_scan_result(
 9873|    921|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|    921|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|    921|                            detail::make_arg<scan_context>(result->value())));
 9875|    921|    return result;
 9876|    921|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9553|  2.76k|{
 9554|  2.76k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1057|  2.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9555|  2.76k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  2.76k|{
 9500|  2.76k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  2.76k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  2.76k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.76k, False: 0]
  |  |  ------------------
  ------------------
 9504|  2.76k|        return unexpected(result.error());
 9505|  2.76k|    }
 9506|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  2.76k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9760|  17.2k|{
 9761|  17.2k|    auto result = make_scan_result<Source, Args...>();
 9762|  17.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  17.2k|                                   make_scan_args(result->values())));
 9764|  17.2k|    return result;
 9765|  17.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9716|  35.4k|{
 9717|  35.4k|    return scan_result_type<Source, Args...>();
 9718|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1550|  35.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  35.4k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  35.4k|    {
  613|  35.4k|        construct();
  614|  35.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  35.4k|    {
  694|  35.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  35.4k|        m_has_value = true;
  696|  35.4k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  35.4k|{
  396|  35.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  35.4k|        T(std::forward<Args>(args)...);
  398|  35.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6623|  35.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   149k|    {
  718|   149k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   149k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   149k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  35.4k|{
 9702|  35.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 13.8k, False: 21.6k]
  |  |  ------------------
  ------------------
 9703|  13.8k|        out = unexpected(in.error());
 9704|  13.8k|    }
 9705|  21.6k|    else {
 9706|  21.6k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  21.6k|    static_cast<    \
  |  | 1056|  21.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  21.6k|    }
 9708|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  13.8k|        : base(unexpect, std::move(e.error())),
 1615|  13.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  13.8k|    {
 1617|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  13.8k|        : m_has_value(false)
  637|  13.8k|    {
  638|  13.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  13.8k|    {
  701|  13.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.8k|                                  std::forward<Args>(args)...);
  703|  13.8k|        m_has_value = false;
  704|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  69.0k|    {
  730|  69.0k|        return reinterpret_cast<unexpected<E>*>(
  731|  69.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  69.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  69.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  13.8k|    {
 1315|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1555|  13.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  901|  13.8k|    {
  902|  13.8k|        assign_common(std::move(other));
  903|  13.8k|        return *this;
  904|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  13.8k|    {
  949|  13.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 13.8k, False: 0]
  ------------------
  950|  13.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 13.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  13.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  13.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   191k|    {
  687|   191k|        return m_has_value;
  688|   191k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  78.7k|    {
  653|  78.7k|        return *value_ptr();
  654|  78.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  13.8k|    {
 1045|  13.8k|        this->destroy_value();
 1046|  13.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  35.4k|    {
  708|  35.4k|        scn::detail::destroy_at(value_ptr());
  709|  35.4k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  35.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  35.4k|    else {
  408|  35.4k|        p->~T();
  409|  35.4k|    }
  410|  35.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6630|  35.4k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  13.8k|    {
  701|  13.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.8k|                                  std::forward<Args>(args)...);
  703|  13.8k|        m_has_value = false;
  704|  13.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  13.8k|    {
  678|  13.8k|        return std::move(*unexpected_ptr());
  679|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  27.6k|    {
  712|  27.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  27.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|  34.5k|    {
 8798|  34.5k|        return m_str;
 8799|  34.5k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  34.5k|        : m_str(r.str)
 8793|  34.5k|    {
 8794|  34.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1738|  35.4k|    {
 1739|  35.4k|        return has_value();
 1740|  35.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1813|  78.7k|    {
 1814|  78.7k|        return &value();
 1815|  78.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  78.7k|    {
 1768|  78.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  78.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  78.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  78.7k|        return this->get_value();
 1770|  78.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  49.2k|    {
  643|  49.2k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 21.6k, False: 27.6k]
  ------------------
  644|  21.6k|            destroy_value();
  645|  21.6k|        }
  646|  27.6k|        else {
  647|  27.6k|            destroy_unexpected();
  648|  27.6k|        }
  649|  49.2k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9829|  17.2k|{
 9830|  17.2k|    auto result = make_scan_result<Source, Args...>();
 9831|  17.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  17.2k|                                   make_scan_args(result->values())));
 9833|  17.2k|    return result;
 9834|  17.2k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9870|    921|{
 9871|    921|    auto result = make_scan_result<Source, T>();
 9872|    921|    fill_scan_result(
 9873|    921|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|    921|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|    921|                            detail::make_arg<scan_context>(result->value())));
 9875|    921|    return result;
 9876|    921|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9760|  17.2k|{
 9761|  17.2k|    auto result = make_scan_result<Source, Args...>();
 9762|  17.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  17.2k|                                   make_scan_args(result->values())));
 9764|  17.2k|    return result;
 9765|  17.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9716|  35.4k|{
 9717|  35.4k|    return scan_result_type<Source, Args...>();
 9718|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1550|  35.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  35.4k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  35.4k|    {
  613|  35.4k|        construct();
  614|  35.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  35.4k|    {
  694|  35.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  35.4k|        m_has_value = true;
  696|  35.4k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  35.4k|{
  396|  35.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  35.4k|        T(std::forward<Args>(args)...);
  398|  35.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6623|  35.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   149k|    {
  718|   149k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   149k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   149k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  35.4k|{
 9702|  35.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 13.8k, False: 21.6k]
  |  |  ------------------
  ------------------
 9703|  13.8k|        out = unexpected(in.error());
 9704|  13.8k|    }
 9705|  21.6k|    else {
 9706|  21.6k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  21.6k|    static_cast<    \
  |  | 1056|  21.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  21.6k|    }
 9708|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  13.8k|        : base(unexpect, std::move(e.error())),
 1615|  13.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  13.8k|    {
 1617|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  13.8k|        : m_has_value(false)
  637|  13.8k|    {
  638|  13.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  13.8k|    {
  701|  13.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.8k|                                  std::forward<Args>(args)...);
  703|  13.8k|        m_has_value = false;
  704|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  69.0k|    {
  730|  69.0k|        return reinterpret_cast<unexpected<E>*>(
  731|  69.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  69.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  69.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  13.8k|    {
 1315|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1555|  13.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  901|  13.8k|    {
  902|  13.8k|        assign_common(std::move(other));
  903|  13.8k|        return *this;
  904|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  13.8k|    {
  949|  13.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 13.8k, False: 0]
  ------------------
  950|  13.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 13.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  13.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  13.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   191k|    {
  687|   191k|        return m_has_value;
  688|   191k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  78.7k|    {
  653|  78.7k|        return *value_ptr();
  654|  78.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  13.8k|    {
 1045|  13.8k|        this->destroy_value();
 1046|  13.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  35.4k|    {
  708|  35.4k|        scn::detail::destroy_at(value_ptr());
  709|  35.4k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  35.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  35.4k|    else {
  408|  35.4k|        p->~T();
  409|  35.4k|    }
  410|  35.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6630|  35.4k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  13.8k|    {
  701|  13.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.8k|                                  std::forward<Args>(args)...);
  703|  13.8k|        m_has_value = false;
  704|  13.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  13.8k|    {
  678|  13.8k|        return std::move(*unexpected_ptr());
  679|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  27.6k|    {
  712|  27.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  27.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|  34.5k|    {
 8798|  34.5k|        return m_str;
 8799|  34.5k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  34.5k|        : m_str(r.str)
 8793|  34.5k|    {
 8794|  34.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1738|  35.4k|    {
 1739|  35.4k|        return has_value();
 1740|  35.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1813|  78.7k|    {
 1814|  78.7k|        return &value();
 1815|  78.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  78.7k|    {
 1768|  78.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  78.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  78.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  78.7k|        return this->get_value();
 1770|  78.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  49.2k|    {
  643|  49.2k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 21.6k, False: 27.6k]
  ------------------
  644|  21.6k|            destroy_value();
  645|  21.6k|        }
  646|  27.6k|        else {
  647|  27.6k|            destroy_unexpected();
  648|  27.6k|        }
  649|  49.2k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9829|  17.2k|{
 9830|  17.2k|    auto result = make_scan_result<Source, Args...>();
 9831|  17.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  17.2k|                                   make_scan_args(result->values())));
 9833|  17.2k|    return result;
 9834|  17.2k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9870|    921|{
 9871|    921|    auto result = make_scan_result<Source, T>();
 9872|    921|    fill_scan_result(
 9873|    921|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|    921|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|    921|                            detail::make_arg<scan_context>(result->value())));
 9875|    921|    return result;
 9876|    921|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  84.7k|    {
 2868|  84.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  84.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  84.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  84.7k|    {
 2849|  84.7k|        return decay_copy(t.begin());
 2850|  84.7k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2092|  1.08M|{
 2093|  1.08M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  1.08M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   214k|    {
 2925|   214k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   214k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   214k|    {
 2907|   214k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   214k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEEDav:
 9716|  35.4k|{
 9717|  35.4k|    return scan_result_type<Source, Args...>();
 9718|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1550|  35.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  35.4k|        : m_value(T{}), m_has_value(true)
  427|  35.4k|    {
  428|  35.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2Ev:
 6623|  35.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6466|   106k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3458|   106k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9701|  35.4k|{
 9702|  35.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 27.6k, False: 7.83k]
  |  |  ------------------
  ------------------
 9703|  27.6k|        out = unexpected(in.error());
 9704|  27.6k|    }
 9705|  7.83k|    else {
 9706|  7.83k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  7.83k|    static_cast<    \
  |  | 1056|  7.83k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  7.83k|    }
 9708|  35.4k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1738|   106k|    {
 1739|   106k|        return has_value();
 1740|   106k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   212k|    {
  490|   212k|        return m_has_value;
  491|   212k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1744|  82.8k|    {
 1745|  82.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  82.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  82.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  82.8k|        return this->get_unexpected().error();
 1747|  82.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  82.8k|    {
  473|  82.8k|        return m_unexpected;
  474|  82.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1614|  27.6k|        : base(unexpect, std::move(e.error())),
 1615|  27.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  27.6k|    {
 1617|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  27.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  27.6k|          m_has_value(false)
  451|  27.6k|    {
  452|  27.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  27.6k|    {
 1315|  27.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1555|  27.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  901|  27.6k|    {
  902|  27.6k|        assign_common(std::move(other));
  903|  27.6k|        return *this;
  904|  27.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  948|  27.6k|    {
  949|  27.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 27.6k, False: 0]
  ------------------
  950|  27.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 27.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  27.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  27.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   141k|    {
  490|   141k|        return m_has_value;
  491|   141k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  51.1k|    {
  456|  51.1k|        return m_value;
  457|  51.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1044|  27.6k|    {
 1045|  27.6k|        this->destroy_value();
 1046|  27.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  27.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  27.6k|    {
  504|  27.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  27.6k|                                  std::forward<Args>(args)...);
  506|  27.6k|        m_has_value = false;
  507|  27.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  27.6k|    {
  473|  27.6k|        return m_unexpected;
  474|  27.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  27.6k|    {
  481|  27.6k|        return std::move(m_unexpected);
  482|  27.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6497|  23.5k|    {
 6498|  23.5k|        m_range = std::forward<Other>(r);
 6499|  23.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1793|  23.5k|    {
 1794|  23.5k|        return value();
 1795|  23.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|  23.5k|    {
 1768|  23.5k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  23.5k|        return this->get_value();
 1770|  23.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  23.5k|    {
  456|  23.5k|        return m_value;
  457|  23.5k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9459|  50.4k|{
 9460|  50.4k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|  50.4k|    auto result = vscan_impl(buffer, format, args);
 9463|  50.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 38.6k, False: 11.7k]
  |  |  ------------------
  ------------------
 9464|  38.6k|        return unexpected(result.error());
 9465|  38.6k|    }
 9466|  11.7k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|  50.4k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5379|   106k|{
 5380|   106k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   106k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   106k|                  "\n"
 5384|   106k|                  "Unsupported range type given as input to a scanning "
 5385|   106k|                  "function.\n"
 5386|   106k|                  "A range needs to have a character type (value type) "
 5387|   106k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   106k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   106k|                  "to be included.\n"
 5390|   106k|                  "See the scnlib documentation for more details.");
 5391|   106k|    static_assert(
 5392|   106k|        !std::is_same_v<T, custom_char_traits>,
 5393|   106k|        "\n"
 5394|   106k|        "Unsupported range type given as input to a scanning "
 5395|   106k|        "function.\n"
 5396|   106k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   106k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   106k|        "not supported.");
 5399|   106k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   106k|                  "\n"
 5401|   106k|                  "Unsupported range type given as input to a scanning "
 5402|   106k|                  "function.\n"
 5403|   106k|                  "file_marker_found cannot be used as an "
 5404|   106k|                  "source range type to scn::scan.\n"
 5405|   106k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   106k|                  "and do not provide an explicit source range, "
 5407|   106k|                  "or use scn::scan with a FILE* directly.");
 5408|   106k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   106k|                  "\n"
 5410|   106k|                  "Unsupported range type given as input to a scanning "
 5411|   106k|                  "function.\n"
 5412|   106k|                  "In order to be scannable, a range needs to satisfy "
 5413|   106k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   106k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   106k|                  "\n"
 5416|   106k|                  "Unsupported range type given as input to a scanning "
 5417|   106k|                  "function.\n"
 5418|   106k|                  "A range needs to model forward_range and have a valid "
 5419|   106k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   106k|                  "Examples of scannable ranges are std::string, "
 5421|   106k|                  "std::string_view, "
 5422|   106k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   106k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   106k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   106k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5318|   106k|{
 5319|   106k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5320|   106k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5321|       |    }
 5322|       |    else {
 5323|       |        return invalid_char_type{};
 5324|       |    }
 5325|   106k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   106k|    {
 2999|   106k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   106k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   106k|    {
 2980|   106k|        return t.data();
 2981|   106k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3381|   106k|    {
 3382|   106k|        return detail::to_address(ranges::begin(derived()));
 3383|   106k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   313k|{
  316|   313k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|   313k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   313k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   313k|{
  294|   313k|    return p;
  295|   313k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   129k|    {
 2868|   129k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   129k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   129k|    {
 2849|   129k|        return decay_copy(t.begin());
 2850|   129k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3478|  1.85M|    {
 3479|  1.85M|        return m_iterator;
 3480|  1.85M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3337|   106k|    {
 3338|   106k|        return static_cast<const D&>(*this);
 3339|   106k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3073|   106k|    {
 3074|   106k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   106k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3039|   106k|    {
 3040|   106k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   106k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3494|   337k|    {
 3495|   337k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3496|   337k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1614|  82.8k|        : base(unexpect, std::move(e.error())),
 1615|  82.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  82.8k|    {
 1617|  82.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  82.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  82.8k|          m_has_value(false)
  451|  82.8k|    {
  452|  82.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   106k|    {
 1315|   106k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6727|  23.5k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|  23.5k|                      ranges::iterator_t<SourceRange>>) {
 6730|  23.5k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|  23.5k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   330k|    {
 2868|   330k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   330k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   330k|    {
 2849|   330k|        return decay_copy(t.begin());
 2850|   330k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6714|  23.5k|{
 6715|  23.5k|    return ranges::end(source);
 6716|  23.5k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   122k|    {
 2925|   122k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   122k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   122k|    {
 2907|   122k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   122k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3482|  1.47M|    {
 3483|  1.47M|        return m_sentinel;
 3484|  1.47M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|  23.5k|        : base(std::in_place, std::forward<U>(val)),
 1569|  23.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  23.5k|    {
 1571|  23.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  23.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  23.5k|    {
  442|  23.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8797|  33.6k|    {
 8798|  33.6k|        return m_str;
 8799|  33.6k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  67.2k|{
 6127|  67.2k|    detail::check_scan_arg_types<Args...>();
 6128|  67.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  67.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6102|  67.2k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  67.2k|    {
 6104|  67.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6111|  67.2k|    {
 6112|  67.2k|        return {detail::make_arg<
 6113|  67.2k|            kind, Context,
 6114|  67.2k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  67.2k|                                 typename Context::char_type>::value>(args)...};
 6116|  67.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE27E2tmvEENS1_9arg_valueERT2_:
 5900|  67.2k|{
 5901|  67.2k|    return make_value<Context>(value);
 5902|  67.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEEDaRT0_:
 5826|  70.9k|{
 5827|  70.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|       |                                  needs_context_tag>) {
 5831|       |        return make_value_impl<T>(SCN_FWD(arg));
 5832|       |    }
 5833|  70.9k|    else {
 5834|  70.9k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|  70.9k|            value, context_tag<Context>{}));
 5836|  70.9k|    }
 5837|  70.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5731|  70.9k|    {
 5732|  70.9k|        return {};
 5733|  70.9k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5795|  70.9k|{
 5796|  70.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  70.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  70.9k|    constexpr bool scannable_char =
 5800|  70.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  70.9k|    static_assert(scannable_char,
 5802|  70.9k|                  "Cannot scan an argument of an unsupported character "
 5803|  70.9k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  70.9k|    constexpr bool scannable_const =
 5806|  70.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  70.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  70.9k|    constexpr bool scannable_disabled =
 5810|  70.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  70.9k|    static_assert(scannable_disabled,
 5812|  70.9k|                  "Cannot scan an argument that has been disabled by "
 5813|  70.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  70.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  70.9k|    static_assert(
 5817|  70.9k|        scannable,
 5818|  70.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  70.9k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  70.9k|    return arg_value{arg};
 5822|  70.9k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5609|  70.9k|        : custom_value{static_cast<void*>(&val.val),
 5610|  70.9k|                       scan_custom_arg<T, Context>}
 5611|  70.9k|    {
 5612|  70.9k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5627|  70.9k|    {
 5628|  70.9k|        static_assert(!is_type_disabled<T>,
 5629|  70.9k|                      "Scanning of custom types is disabled by "
 5630|  70.9k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5631|  70.9k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1051|  70.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  70.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5632|       |
 5633|  70.9k|        using context_type = Context;
 5634|  70.9k|        using parse_context_type = typename context_type::parse_context_type;
 5635|  70.9k|        using scanner_type = typename context_type::template scanner_type<T>;
 5636|       |
 5637|  70.9k|        auto s = scanner_type{};
 5638|       |
 5639|  70.9k|        auto& arg_ref = *static_cast<T*>(arg);
 5640|  70.9k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5641|  70.9k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5642|       |
 5643|  70.9k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3929|  70.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 3.68k, False: 67.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  3.68k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  3.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  3.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  3.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.68k|    }
  ------------------
 5644|  67.2k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3939|  67.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  67.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  67.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 51.5k, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  51.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  51.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  51.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  51.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  51.5k|    }                                                  \
  |  |  |  | 3938|  67.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5645|  15.6k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  15.6k|    static_cast<    \
  |  | 1056|  15.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5646|       |
 5647|  15.6k|        return {};
 5648|  67.2k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5560|  70.9k|{
 5561|  70.9k|#if SCN_HAS_EXCEPTIONS
 5562|  70.9k|    auto fmt_it = pctx.begin();
 5563|  70.9k|    try {
 5564|  70.9k|        fmt_it = s.parse(pctx);
 5565|  70.9k|    }
 5566|  70.9k|    catch (const detail::scan_format_string_error_base& ex) {
 5567|       |        // scan_error takes a const char*.
 5568|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5569|       |        // stores a reference-counted string,
 5570|       |        // that will go out of scope here.
 5571|       |        // We need to provide a const char* that will stay in scope.
 5572|       |        // If scan_format_string_error was thrown with a string literal,
 5573|       |        // use that, otherwise refer to a thread_local std::string
 5574|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5574:25): [True: 0, False: 0]
  ------------------
 5575|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5576|      0|        }
 5577|      0|        thread_local std::string err_msg{};
 5578|      0|        err_msg = ex.what();
 5579|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5580|      0|                                     err_msg.c_str());
 5581|      0|    }
 5582|       |#else
 5583|       |    auto fmt_it = s.parse(pctx_ref);
 5584|       |#endif
 5585|  70.9k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.68k, False: 67.2k]
  |  |  ------------------
  ------------------
 5586|  3.68k|        return e;
 5587|  3.68k|    }
 5588|  67.2k|    pctx.advance_to(fmt_it);
 5589|  67.2k|    return {};
 5590|  70.9k|}
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6311|  1.03M|    {
 6312|  1.03M|        return m_format.data();
 6313|  1.03M|    }
_ZNK3scn2v424basic_scan_parse_contextIwE3endEv:
 6316|   212k|    {
 6317|   212k|        return m_format.data() + m_format.size();
 6318|   212k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6357|  11.0k|    {
 6358|  11.0k|        m_error = unexpected(detail::handle_error(
 6359|  11.0k|            scan_error{scan_error::invalid_format_string, msg}));
 6360|  11.0k|        return m_error.error();
 6361|  11.0k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4066|   487k|{
 4067|       |    if constexpr (sizeof(U) == 1) {
 4068|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4069|       |    }
 4070|       |    else if constexpr (sizeof(U) == 2) {
 4071|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4072|       |    }
 4073|   487k|    else {
 4074|       |        // utf-32
 4075|   487k|        static_assert(sizeof(U) == 4);
 4076|   487k|        SCN_UNUSED(ch);
  ------------------
  |  | 1036|   487k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4077|   487k|        return 1;
 4078|   487k|    }
 4079|   487k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4272|   376k|{
 4273|       |    if constexpr (sizeof(CharT) == 1) {
 4274|       |        return decode_utf8_code_point_exhaustive(input);
 4275|       |    }
 4276|       |    else if constexpr (sizeof(CharT) == 2) {
 4277|       |        return decode_utf16_code_point_exhaustive(input);
 4278|       |    }
 4279|   376k|    else {
 4280|   376k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1051|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4281|   376k|        auto cp = static_cast<char32_t>(input.front());
 4282|   376k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  986|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 49.3k, False: 327k]
  |  |  ------------------
  ------------------
 4283|  49.3k|            return invalid_code_point;
 4284|  49.3k|        }
 4285|   327k|        return cp;
 4286|   376k|    }
 4287|   376k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3974|   403k|{
 3975|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3976|       |                                          const CharT*, const CharT*>) {
 3977|       |        return {first, last};
 3978|       |    }
 3979|   403k|    else {
 3980|   403k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3981|   403k|    }
 3982|   403k|}
_ZN3scn2v424basic_scan_parse_contextIwE9get_errorEv:
 6364|   212k|    {
 6365|   212k|        return m_error;
 6366|   212k|    }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6322|   403k|    {
 6323|   403k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6324|   403k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1738|   509k|    {
 1739|   509k|        return has_value();
 1740|   509k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.01M|    {
  490|  1.01M|        return m_has_value;
  491|  1.01M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1744|   316k|    {
 1745|   316k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   316k|        return this->get_unexpected().error();
 1747|   316k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   316k|    {
  473|   316k|        return m_unexpected;
  474|   316k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|   146k|    {
 1804|   146k|        return std::move(value());
 1805|   146k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|   193k|    {
 1768|   193k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   193k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   193k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   193k|        return this->get_value();
 1770|   193k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   193k|    {
  456|   193k|        return m_value;
  457|   193k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9000|   170k|    {
 9001|   170k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|   170k|    static_cast<    \
  |  | 1056|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9002|   170k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5739|  70.9k|    {
 5740|  70.9k|        return {val};
 5741|  70.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  67.2k|        : basic_scan_args(store.desc, store.args.data())
 6153|  67.2k|    {
 6154|  67.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKNS3_9arg_valueE:
 6209|   201k|        : m_desc(desc), m_values(data)
 6210|   201k|    {
 6211|   201k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3463|   927k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   927k|    static_cast<    \
  |  | 1056|   927k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   927k|    static_cast<    \
  |  | 1056|   927k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   927k|    {
 3465|   927k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8463|   201k|{
 8464|   201k|    return s;
 8465|   201k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8435|   201k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  33.6k|        : m_str(r.str)
 8793|  33.6k|    {
 8794|  33.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1738|  35.4k|    {
 1739|  35.4k|        return has_value();
 1740|  35.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1813|  51.1k|    {
 1814|  51.1k|        return &value();
 1815|  51.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1767|  51.1k|    {
 1768|  51.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  51.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  51.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  51.1k|        return this->get_value();
 1770|  51.1k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6486|  23.5k|    {
 6487|  23.5k|        return ranges::begin(m_range);
 6488|  23.5k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9475|  50.4k|{
 9476|  50.4k|#if !SCN_DISABLE_LOCALE
 9477|  50.4k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|  50.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|  50.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|  50.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|  50.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 38.6k, False: 11.7k]
  |  |  ------------------
  ------------------
 9484|  38.6k|        return unexpected(result.error());
 9485|  38.6k|    }
 9486|  11.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|  50.4k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  5.52k|{
 9500|  5.52k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  5.52k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  5.52k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  5.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 5.52k, False: 0]
  |  |  ------------------
  ------------------
 9504|  5.52k|        return unexpected(result.error());
 9505|  5.52k|    }
 9506|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  5.52k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5876|  3.68k|{
 5877|  3.68k|    check_scan_arg_types<T>();
 5878|       |
 5879|  3.68k|    basic_scan_arg<Context> arg;
 5880|  3.68k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  3.68k|    arg.m_value = make_value<Context>(value);
 5882|  3.68k|    return arg;
 5883|  3.68k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5971|   212k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEEDav:
 9716|  35.4k|{
 9717|  35.4k|    return scan_result_type<Source, Args...>();
 9718|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1550|  35.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  35.4k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  35.4k|    {
  613|  35.4k|        construct();
  614|  35.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  35.4k|    {
  694|  35.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  35.4k|        m_has_value = true;
  696|  35.4k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  35.4k|{
  396|  35.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  35.4k|        T(std::forward<Args>(args)...);
  398|  35.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6623|  35.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   122k|    {
  718|   122k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   122k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   122k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9701|  35.4k|{
 9702|  35.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 27.6k, False: 7.83k]
  |  |  ------------------
  ------------------
 9703|  27.6k|        out = unexpected(in.error());
 9704|  27.6k|    }
 9705|  7.83k|    else {
 9706|  7.83k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  7.83k|    static_cast<    \
  |  | 1056|  7.83k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  7.83k|    }
 9708|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1614|  27.6k|        : base(unexpect, std::move(e.error())),
 1615|  27.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  27.6k|    {
 1617|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  27.6k|        : m_has_value(false)
  637|  27.6k|    {
  638|  27.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  27.6k|    {
  701|  27.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  27.6k|                                  std::forward<Args>(args)...);
  703|  27.6k|        m_has_value = false;
  704|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   138k|    {
  730|   138k|        return reinterpret_cast<unexpected<E>*>(
  731|   138k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|   138k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   138k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  27.6k|    {
 1315|  27.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1555|  27.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  901|  27.6k|    {
  902|  27.6k|        assign_common(std::move(other));
  903|  27.6k|        return *this;
  904|  27.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  948|  27.6k|    {
  949|  27.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 27.6k, False: 0]
  ------------------
  950|  27.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 27.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  27.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  27.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   204k|    {
  687|   204k|        return m_has_value;
  688|   204k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  51.1k|    {
  653|  51.1k|        return *value_ptr();
  654|  51.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1044|  27.6k|    {
 1045|  27.6k|        this->destroy_value();
 1046|  27.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  35.4k|    {
  708|  35.4k|        scn::detail::destroy_at(value_ptr());
  709|  35.4k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  35.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  35.4k|    else {
  408|  35.4k|        p->~T();
  409|  35.4k|    }
  410|  35.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEED2Ev:
 6630|  35.4k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  27.6k|    {
  701|  27.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  27.6k|                                  std::forward<Args>(args)...);
  703|  27.6k|        m_has_value = false;
  704|  27.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  27.6k|    {
  678|  27.6k|        return std::move(*unexpected_ptr());
  679|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  55.2k|    {
  712|  55.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  55.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8797|  33.6k|    {
 8798|  33.6k|        return m_str;
 8799|  33.6k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  67.2k|{
 6127|  67.2k|    detail::check_scan_arg_types<Args...>();
 6128|  67.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  67.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6102|  67.2k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  67.2k|    {
 6104|  67.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6111|  67.2k|    {
 6112|  67.2k|        return {detail::make_arg<
 6113|  67.2k|            kind, Context,
 6114|  67.2k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  67.2k|                                 typename Context::char_type>::value>(args)...};
 6116|  67.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE27ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5900|  67.2k|{
 5901|  67.2k|    return make_value<Context>(value);
 5902|  67.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEEDaRT0_:
 5826|  70.9k|{
 5827|  70.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|       |                                  needs_context_tag>) {
 5831|       |        return make_value_impl<T>(SCN_FWD(arg));
 5832|       |    }
 5833|  70.9k|    else {
 5834|  70.9k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|  70.9k|            value, context_tag<Context>{}));
 5836|  70.9k|    }
 5837|  70.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5731|  70.9k|    {
 5732|  70.9k|        return {};
 5733|  70.9k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5795|  70.9k|{
 5796|  70.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  70.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  70.9k|    constexpr bool scannable_char =
 5800|  70.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  70.9k|    static_assert(scannable_char,
 5802|  70.9k|                  "Cannot scan an argument of an unsupported character "
 5803|  70.9k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  70.9k|    constexpr bool scannable_const =
 5806|  70.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  70.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  70.9k|    constexpr bool scannable_disabled =
 5810|  70.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  70.9k|    static_assert(scannable_disabled,
 5812|  70.9k|                  "Cannot scan an argument that has been disabled by "
 5813|  70.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  70.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  70.9k|    static_assert(
 5817|  70.9k|        scannable,
 5818|  70.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  70.9k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  70.9k|    return arg_value{arg};
 5822|  70.9k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5609|  70.9k|        : custom_value{static_cast<void*>(&val.val),
 5610|  70.9k|                       scan_custom_arg<T, Context>}
 5611|  70.9k|    {
 5612|  70.9k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5627|  70.9k|    {
 5628|  70.9k|        static_assert(!is_type_disabled<T>,
 5629|  70.9k|                      "Scanning of custom types is disabled by "
 5630|  70.9k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5631|  70.9k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1051|  70.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  70.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5632|       |
 5633|  70.9k|        using context_type = Context;
 5634|  70.9k|        using parse_context_type = typename context_type::parse_context_type;
 5635|  70.9k|        using scanner_type = typename context_type::template scanner_type<T>;
 5636|       |
 5637|  70.9k|        auto s = scanner_type{};
 5638|       |
 5639|  70.9k|        auto& arg_ref = *static_cast<T*>(arg);
 5640|  70.9k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5641|  70.9k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5642|       |
 5643|  70.9k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3929|  70.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 3.68k, False: 67.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  3.68k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  3.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  3.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  3.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.68k|    }
  ------------------
 5644|  67.2k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3939|  67.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  67.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  67.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 51.5k, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  51.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  51.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  51.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  51.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  51.5k|    }                                                  \
  |  |  |  | 3938|  67.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5645|  15.6k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  15.6k|    static_cast<    \
  |  | 1056|  15.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5646|       |
 5647|  15.6k|        return {};
 5648|  67.2k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5560|  70.9k|{
 5561|  70.9k|#if SCN_HAS_EXCEPTIONS
 5562|  70.9k|    auto fmt_it = pctx.begin();
 5563|  70.9k|    try {
 5564|  70.9k|        fmt_it = s.parse(pctx);
 5565|  70.9k|    }
 5566|  70.9k|    catch (const detail::scan_format_string_error_base& ex) {
 5567|       |        // scan_error takes a const char*.
 5568|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5569|       |        // stores a reference-counted string,
 5570|       |        // that will go out of scope here.
 5571|       |        // We need to provide a const char* that will stay in scope.
 5572|       |        // If scan_format_string_error was thrown with a string literal,
 5573|       |        // use that, otherwise refer to a thread_local std::string
 5574|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5574:25): [True: 0, False: 0]
  ------------------
 5575|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5576|      0|        }
 5577|      0|        thread_local std::string err_msg{};
 5578|      0|        err_msg = ex.what();
 5579|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5580|      0|                                     err_msg.c_str());
 5581|      0|    }
 5582|       |#else
 5583|       |    auto fmt_it = s.parse(pctx_ref);
 5584|       |#endif
 5585|  70.9k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.68k, False: 67.2k]
  |  |  ------------------
  ------------------
 5586|  3.68k|        return e;
 5587|  3.68k|    }
 5588|  67.2k|    pctx.advance_to(fmt_it);
 5589|  67.2k|    return {};
 5590|  70.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5739|  70.9k|    {
 5740|  70.9k|        return {val};
 5741|  70.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  67.2k|        : basic_scan_args(store.desc, store.args.data())
 6153|  67.2k|    {
 6154|  67.2k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  33.6k|        : m_str(r.str)
 8793|  33.6k|    {
 8794|  33.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1738|  35.4k|    {
 1739|  35.4k|        return has_value();
 1740|  35.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1813|  51.1k|    {
 1814|  51.1k|        return &value();
 1815|  51.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1767|  51.1k|    {
 1768|  51.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  51.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  51.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  51.1k|        return this->get_value();
 1770|  51.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  63.0k|    {
  643|  63.0k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.83k, False: 55.2k]
  ------------------
  644|  7.83k|            destroy_value();
  645|  7.83k|        }
  646|  55.2k|        else {
  647|  55.2k|            destroy_unexpected();
  648|  55.2k|        }
  649|  63.0k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5876|  3.68k|{
 5877|  3.68k|    check_scan_arg_types<T>();
 5878|       |
 5879|  3.68k|    basic_scan_arg<Context> arg;
 5880|  3.68k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  3.68k|    arg.m_value = make_value<Context>(value);
 5882|  3.68k|    return arg;
 5883|  3.68k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEEDav:
 9716|  35.4k|{
 9717|  35.4k|    return scan_result_type<Source, Args...>();
 9718|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1550|  35.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  35.4k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  35.4k|    {
  613|  35.4k|        construct();
  614|  35.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  35.4k|    {
  694|  35.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  35.4k|        m_has_value = true;
  696|  35.4k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  35.4k|{
  396|  35.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  35.4k|        T(std::forward<Args>(args)...);
  398|  35.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6623|  35.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   122k|    {
  718|   122k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   122k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   122k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9701|  35.4k|{
 9702|  35.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 27.6k, False: 7.83k]
  |  |  ------------------
  ------------------
 9703|  27.6k|        out = unexpected(in.error());
 9704|  27.6k|    }
 9705|  7.83k|    else {
 9706|  7.83k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  7.83k|    static_cast<    \
  |  | 1056|  7.83k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  7.83k|    }
 9708|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1614|  27.6k|        : base(unexpect, std::move(e.error())),
 1615|  27.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  27.6k|    {
 1617|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  27.6k|        : m_has_value(false)
  637|  27.6k|    {
  638|  27.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  27.6k|    {
  701|  27.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  27.6k|                                  std::forward<Args>(args)...);
  703|  27.6k|        m_has_value = false;
  704|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   138k|    {
  730|   138k|        return reinterpret_cast<unexpected<E>*>(
  731|   138k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|   138k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   138k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  27.6k|    {
 1315|  27.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1555|  27.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  901|  27.6k|    {
  902|  27.6k|        assign_common(std::move(other));
  903|  27.6k|        return *this;
  904|  27.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  948|  27.6k|    {
  949|  27.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 27.6k, False: 0]
  ------------------
  950|  27.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 27.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  27.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  27.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   204k|    {
  687|   204k|        return m_has_value;
  688|   204k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  51.1k|    {
  653|  51.1k|        return *value_ptr();
  654|  51.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1044|  27.6k|    {
 1045|  27.6k|        this->destroy_value();
 1046|  27.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  35.4k|    {
  708|  35.4k|        scn::detail::destroy_at(value_ptr());
  709|  35.4k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  35.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  35.4k|    else {
  408|  35.4k|        p->~T();
  409|  35.4k|    }
  410|  35.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEED2Ev:
 6630|  35.4k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  27.6k|    {
  701|  27.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  27.6k|                                  std::forward<Args>(args)...);
  703|  27.6k|        m_has_value = false;
  704|  27.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  27.6k|    {
  678|  27.6k|        return std::move(*unexpected_ptr());
  679|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  55.2k|    {
  712|  55.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  55.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8797|  33.6k|    {
 8798|  33.6k|        return m_str;
 8799|  33.6k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  67.2k|{
 6127|  67.2k|    detail::check_scan_arg_types<Args...>();
 6128|  67.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  67.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6102|  67.2k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  67.2k|    {
 6104|  67.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6111|  67.2k|    {
 6112|  67.2k|        return {detail::make_arg<
 6113|  67.2k|            kind, Context,
 6114|  67.2k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  67.2k|                                 typename Context::char_type>::value>(args)...};
 6116|  67.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE27ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5900|  67.2k|{
 5901|  67.2k|    return make_value<Context>(value);
 5902|  67.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEEDaRT0_:
 5826|  70.9k|{
 5827|  70.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|       |                                  needs_context_tag>) {
 5831|       |        return make_value_impl<T>(SCN_FWD(arg));
 5832|       |    }
 5833|  70.9k|    else {
 5834|  70.9k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|  70.9k|            value, context_tag<Context>{}));
 5836|  70.9k|    }
 5837|  70.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5731|  70.9k|    {
 5732|  70.9k|        return {};
 5733|  70.9k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5795|  70.9k|{
 5796|  70.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  70.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  70.9k|    constexpr bool scannable_char =
 5800|  70.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  70.9k|    static_assert(scannable_char,
 5802|  70.9k|                  "Cannot scan an argument of an unsupported character "
 5803|  70.9k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  70.9k|    constexpr bool scannable_const =
 5806|  70.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  70.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  70.9k|    constexpr bool scannable_disabled =
 5810|  70.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  70.9k|    static_assert(scannable_disabled,
 5812|  70.9k|                  "Cannot scan an argument that has been disabled by "
 5813|  70.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  70.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  70.9k|    static_assert(
 5817|  70.9k|        scannable,
 5818|  70.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  70.9k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  70.9k|    return arg_value{arg};
 5822|  70.9k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5609|  70.9k|        : custom_value{static_cast<void*>(&val.val),
 5610|  70.9k|                       scan_custom_arg<T, Context>}
 5611|  70.9k|    {
 5612|  70.9k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5627|  70.9k|    {
 5628|  70.9k|        static_assert(!is_type_disabled<T>,
 5629|  70.9k|                      "Scanning of custom types is disabled by "
 5630|  70.9k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5631|  70.9k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1051|  70.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  70.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5632|       |
 5633|  70.9k|        using context_type = Context;
 5634|  70.9k|        using parse_context_type = typename context_type::parse_context_type;
 5635|  70.9k|        using scanner_type = typename context_type::template scanner_type<T>;
 5636|       |
 5637|  70.9k|        auto s = scanner_type{};
 5638|       |
 5639|  70.9k|        auto& arg_ref = *static_cast<T*>(arg);
 5640|  70.9k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5641|  70.9k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5642|       |
 5643|  70.9k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3929|  70.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 3.68k, False: 67.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  3.68k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  3.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  3.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  3.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.68k|    }
  ------------------
 5644|  67.2k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3939|  67.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  67.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  67.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 51.5k, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  51.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  51.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  51.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  51.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  51.5k|    }                                                  \
  |  |  |  | 3938|  67.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5645|  15.6k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  15.6k|    static_cast<    \
  |  | 1056|  15.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5646|       |
 5647|  15.6k|        return {};
 5648|  67.2k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5560|  70.9k|{
 5561|  70.9k|#if SCN_HAS_EXCEPTIONS
 5562|  70.9k|    auto fmt_it = pctx.begin();
 5563|  70.9k|    try {
 5564|  70.9k|        fmt_it = s.parse(pctx);
 5565|  70.9k|    }
 5566|  70.9k|    catch (const detail::scan_format_string_error_base& ex) {
 5567|       |        // scan_error takes a const char*.
 5568|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5569|       |        // stores a reference-counted string,
 5570|       |        // that will go out of scope here.
 5571|       |        // We need to provide a const char* that will stay in scope.
 5572|       |        // If scan_format_string_error was thrown with a string literal,
 5573|       |        // use that, otherwise refer to a thread_local std::string
 5574|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5574:25): [True: 0, False: 0]
  ------------------
 5575|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5576|      0|        }
 5577|      0|        thread_local std::string err_msg{};
 5578|      0|        err_msg = ex.what();
 5579|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5580|      0|                                     err_msg.c_str());
 5581|      0|    }
 5582|       |#else
 5583|       |    auto fmt_it = s.parse(pctx_ref);
 5584|       |#endif
 5585|  70.9k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.68k, False: 67.2k]
  |  |  ------------------
  ------------------
 5586|  3.68k|        return e;
 5587|  3.68k|    }
 5588|  67.2k|    pctx.advance_to(fmt_it);
 5589|  67.2k|    return {};
 5590|  70.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5739|  70.9k|    {
 5740|  70.9k|        return {val};
 5741|  70.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  67.2k|        : basic_scan_args(store.desc, store.args.data())
 6153|  67.2k|    {
 6154|  67.2k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  33.6k|        : m_str(r.str)
 8793|  33.6k|    {
 8794|  33.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1738|  35.4k|    {
 1739|  35.4k|        return has_value();
 1740|  35.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1813|  51.1k|    {
 1814|  51.1k|        return &value();
 1815|  51.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1767|  51.1k|    {
 1768|  51.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  51.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  51.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  51.1k|        return this->get_value();
 1770|  51.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  63.0k|    {
  643|  63.0k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.83k, False: 55.2k]
  ------------------
  644|  7.83k|            destroy_value();
  645|  7.83k|        }
  646|  55.2k|        else {
  647|  55.2k|            destroy_unexpected();
  648|  55.2k|        }
  649|  63.0k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5876|  3.68k|{
 5877|  3.68k|    check_scan_arg_types<T>();
 5878|       |
 5879|  3.68k|    basic_scan_arg<Context> arg;
 5880|  3.68k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  3.68k|    arg.m_value = make_value<Context>(value);
 5882|  3.68k|    return arg;
 5883|  3.68k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  82.8k|    {
 2868|  82.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  82.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  82.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  82.8k|    {
 2849|  82.8k|        return decay_copy(t.begin());
 2850|  82.8k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2092|  1.51M|{
 2093|  1.51M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  1.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  1.51M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   212k|    {
 2925|   212k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   212k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   212k|    {
 2907|   212k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   212k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEEDav:
 9716|  35.4k|{
 9717|  35.4k|    return scan_result_type<Source, Args...>();
 9718|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1550|  35.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  35.4k|        : m_value(T{}), m_has_value(true)
  427|  35.4k|    {
  428|  35.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2Ev:
 6623|  35.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6466|   106k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3458|   106k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  35.4k|{
 9702|  35.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 27.6k, False: 7.83k]
  |  |  ------------------
  ------------------
 9703|  27.6k|        out = unexpected(in.error());
 9704|  27.6k|    }
 9705|  7.83k|    else {
 9706|  7.83k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  7.83k|    static_cast<    \
  |  | 1056|  7.83k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  7.83k|    }
 9708|  35.4k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1738|   106k|    {
 1739|   106k|        return has_value();
 1740|   106k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   212k|    {
  490|   212k|        return m_has_value;
  491|   212k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1744|  82.8k|    {
 1745|  82.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  82.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  82.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  82.8k|        return this->get_unexpected().error();
 1747|  82.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  82.8k|    {
  473|  82.8k|        return m_unexpected;
  474|  82.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  27.6k|        : base(unexpect, std::move(e.error())),
 1615|  27.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  27.6k|    {
 1617|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  27.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  27.6k|          m_has_value(false)
  451|  27.6k|    {
  452|  27.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  27.6k|    {
 1315|  27.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1555|  27.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  901|  27.6k|    {
  902|  27.6k|        assign_common(std::move(other));
  903|  27.6k|        return *this;
  904|  27.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  27.6k|    {
  949|  27.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 27.6k, False: 0]
  ------------------
  950|  27.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 27.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  27.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  27.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   141k|    {
  490|   141k|        return m_has_value;
  491|   141k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  51.1k|    {
  456|  51.1k|        return m_value;
  457|  51.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  27.6k|    {
 1045|  27.6k|        this->destroy_value();
 1046|  27.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  27.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  27.6k|    {
  504|  27.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  27.6k|                                  std::forward<Args>(args)...);
  506|  27.6k|        m_has_value = false;
  507|  27.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  27.6k|    {
  473|  27.6k|        return m_unexpected;
  474|  27.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  27.6k|    {
  481|  27.6k|        return std::move(m_unexpected);
  482|  27.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6497|  23.5k|    {
 6498|  23.5k|        m_range = std::forward<Other>(r);
 6499|  23.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1793|  23.5k|    {
 1794|  23.5k|        return value();
 1795|  23.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1767|  23.5k|    {
 1768|  23.5k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  23.5k|        return this->get_value();
 1770|  23.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  23.5k|    {
  456|  23.5k|        return m_value;
  457|  23.5k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9459|  50.4k|{
 9460|  50.4k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|  50.4k|    auto result = vscan_impl(buffer, format, args);
 9463|  50.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 38.6k, False: 11.7k]
  |  |  ------------------
  ------------------
 9464|  38.6k|        return unexpected(result.error());
 9465|  38.6k|    }
 9466|  11.7k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|  50.4k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5379|   106k|{
 5380|   106k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   106k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   106k|                  "\n"
 5384|   106k|                  "Unsupported range type given as input to a scanning "
 5385|   106k|                  "function.\n"
 5386|   106k|                  "A range needs to have a character type (value type) "
 5387|   106k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   106k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   106k|                  "to be included.\n"
 5390|   106k|                  "See the scnlib documentation for more details.");
 5391|   106k|    static_assert(
 5392|   106k|        !std::is_same_v<T, custom_char_traits>,
 5393|   106k|        "\n"
 5394|   106k|        "Unsupported range type given as input to a scanning "
 5395|   106k|        "function.\n"
 5396|   106k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   106k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   106k|        "not supported.");
 5399|   106k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   106k|                  "\n"
 5401|   106k|                  "Unsupported range type given as input to a scanning "
 5402|   106k|                  "function.\n"
 5403|   106k|                  "file_marker_found cannot be used as an "
 5404|   106k|                  "source range type to scn::scan.\n"
 5405|   106k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   106k|                  "and do not provide an explicit source range, "
 5407|   106k|                  "or use scn::scan with a FILE* directly.");
 5408|   106k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   106k|                  "\n"
 5410|   106k|                  "Unsupported range type given as input to a scanning "
 5411|   106k|                  "function.\n"
 5412|   106k|                  "In order to be scannable, a range needs to satisfy "
 5413|   106k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   106k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   106k|                  "\n"
 5416|   106k|                  "Unsupported range type given as input to a scanning "
 5417|   106k|                  "function.\n"
 5418|   106k|                  "A range needs to model forward_range and have a valid "
 5419|   106k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   106k|                  "Examples of scannable ranges are std::string, "
 5421|   106k|                  "std::string_view, "
 5422|   106k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   106k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   106k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   106k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5349|   106k|{
 5350|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5351|       |        return file_marker_found{};
 5352|       |    }
 5353|       |    else if constexpr (!ranges::forward_range<Range>) {
 5354|       |        if constexpr (ranges::range<Range>) {
 5355|       |            return insufficient_range{};
 5356|       |        }
 5357|       |        else {
 5358|       |            return invalid_input_range{};
 5359|       |        }
 5360|       |    }
 5361|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5362|       |        return invalid_char_type{};
 5363|       |    }
 5364|   106k|    else {
 5365|   106k|        return make_forward_scan_buffer(r);
 5366|   106k|    }
 5367|   106k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5183|   106k|{
 5184|   106k|    return basic_scan_forward_buffer_impl(range);
 5185|   106k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|   106k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1057|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|   106k|          m_cursor(ranges::begin(*m_range))
 4765|   106k|    {
 4766|   106k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4735|   106k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|   106k|    {
 4737|   106k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4426|   106k|        : m_current_view(sv), m_is_contiguous(false)
 4427|   106k|    {
 4428|   106k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4339|   207k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   129k|    {
 2868|   129k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   129k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   129k|    {
 2849|   129k|        return decay_copy(t.begin());
 2850|   129k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3478|   153k|    {
 3479|   153k|        return m_iterator;
 3480|   153k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4769|   360k|    {
 4770|   360k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 18.7k, False: 341k]
  ------------------
 4771|  18.7k|            return false;
 4772|  18.7k|        }
 4773|   341k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|   341k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1051|   341k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   341k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|   341k|        }
 4776|   341k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 240k, False: 100k]
  ------------------
 4777|   240k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|   240k|                                          this->m_current_view.begin(),
 4779|   240k|                                          this->m_current_view.end());
 4780|   240k|        }
 4781|   341k|        m_latest = *m_cursor;
 4782|   341k|        ++m_cursor;
 4783|   341k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|   341k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|   341k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1051|   341k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   341k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|   341k|        }
 4787|   341k|        return true;
 4788|   360k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  1.04M|    {
 2925|  1.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  1.04M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  1.04M|    {
 2907|  1.04M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  1.04M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3482|  1.06M|    {
 3483|  1.06M|        return m_sentinel;
 3484|  1.06M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4344|   106k|    {
 4345|   106k|        SCN_UNUSED(position);
  ------------------
  |  | 1036|   106k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4346|   106k|        return true;
 4347|   106k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1614|  82.8k|        : base(unexpect, std::move(e.error())),
 1615|  82.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  82.8k|    {
 1617|  82.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  82.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  82.8k|          m_has_value(false)
  451|  82.8k|    {
  452|  82.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   106k|    {
 1315|   106k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6727|  23.5k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|  23.5k|                      ranges::iterator_t<SourceRange>>) {
 6730|  23.5k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|  23.5k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  23.5k|    {
 2868|  23.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  23.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  23.5k|    {
 2849|  23.5k|        return decay_copy(t.begin());
 2850|  23.5k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6714|  23.5k|{
 6715|  23.5k|    return ranges::end(source);
 6716|  23.5k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  23.5k|    {
 2925|  23.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  23.5k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  23.5k|    {
 2907|  23.5k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  23.5k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1568|  23.5k|        : base(std::in_place, std::forward<U>(val)),
 1569|  23.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  23.5k|    {
 1571|  23.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  23.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  23.5k|    {
  442|  23.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|  33.6k|    {
 8798|  33.6k|        return m_str;
 8799|  33.6k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3463|   129k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   129k|    static_cast<    \
  |  | 1056|   129k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   129k|    static_cast<    \
  |  | 1056|   129k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   129k|    {
 3465|   129k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  33.6k|        : m_str(r.str)
 8793|  33.6k|    {
 8794|  33.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1738|  35.4k|    {
 1739|  35.4k|        return has_value();
 1740|  35.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1813|  51.1k|    {
 1814|  51.1k|        return &value();
 1815|  51.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  51.1k|    {
 1768|  51.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  51.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  51.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  51.1k|        return this->get_value();
 1770|  51.1k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6486|  23.5k|    {
 6487|  23.5k|        return ranges::begin(m_range);
 6488|  23.5k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9475|  50.4k|{
 9476|  50.4k|#if !SCN_DISABLE_LOCALE
 9477|  50.4k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|  50.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|  50.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|  50.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|  50.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 38.6k, False: 11.7k]
  |  |  ------------------
  ------------------
 9484|  38.6k|        return unexpected(result.error());
 9485|  38.6k|    }
 9486|  11.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|  50.4k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  5.52k|{
 9500|  5.52k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  5.52k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  5.52k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  5.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 5.52k, False: 0]
  |  |  ------------------
  ------------------
 9504|  5.52k|        return unexpected(result.error());
 9505|  5.52k|    }
 9506|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  5.52k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9716|  35.4k|{
 9717|  35.4k|    return scan_result_type<Source, Args...>();
 9718|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1550|  35.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  35.4k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  35.4k|    {
  613|  35.4k|        construct();
  614|  35.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  35.4k|    {
  694|  35.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  35.4k|        m_has_value = true;
  696|  35.4k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  35.4k|{
  396|  35.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  35.4k|        T(std::forward<Args>(args)...);
  398|  35.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6623|  35.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   122k|    {
  718|   122k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   122k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   122k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  35.4k|{
 9702|  35.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 27.6k, False: 7.83k]
  |  |  ------------------
  ------------------
 9703|  27.6k|        out = unexpected(in.error());
 9704|  27.6k|    }
 9705|  7.83k|    else {
 9706|  7.83k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  7.83k|    static_cast<    \
  |  | 1056|  7.83k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  7.83k|    }
 9708|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  27.6k|        : base(unexpect, std::move(e.error())),
 1615|  27.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  27.6k|    {
 1617|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  27.6k|        : m_has_value(false)
  637|  27.6k|    {
  638|  27.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  27.6k|    {
  701|  27.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  27.6k|                                  std::forward<Args>(args)...);
  703|  27.6k|        m_has_value = false;
  704|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   138k|    {
  730|   138k|        return reinterpret_cast<unexpected<E>*>(
  731|   138k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|   138k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   138k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  27.6k|    {
 1315|  27.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1555|  27.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  901|  27.6k|    {
  902|  27.6k|        assign_common(std::move(other));
  903|  27.6k|        return *this;
  904|  27.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  27.6k|    {
  949|  27.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 27.6k, False: 0]
  ------------------
  950|  27.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 27.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  27.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  27.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   204k|    {
  687|   204k|        return m_has_value;
  688|   204k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  51.1k|    {
  653|  51.1k|        return *value_ptr();
  654|  51.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  27.6k|    {
 1045|  27.6k|        this->destroy_value();
 1046|  27.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  35.4k|    {
  708|  35.4k|        scn::detail::destroy_at(value_ptr());
  709|  35.4k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  35.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  35.4k|    else {
  408|  35.4k|        p->~T();
  409|  35.4k|    }
  410|  35.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6630|  35.4k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  27.6k|    {
  701|  27.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  27.6k|                                  std::forward<Args>(args)...);
  703|  27.6k|        m_has_value = false;
  704|  27.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  27.6k|    {
  678|  27.6k|        return std::move(*unexpected_ptr());
  679|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  55.2k|    {
  712|  55.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  55.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|  33.6k|    {
 8798|  33.6k|        return m_str;
 8799|  33.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  33.6k|        : m_str(r.str)
 8793|  33.6k|    {
 8794|  33.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1738|  35.4k|    {
 1739|  35.4k|        return has_value();
 1740|  35.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1813|  51.1k|    {
 1814|  51.1k|        return &value();
 1815|  51.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  51.1k|    {
 1768|  51.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  51.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  51.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  51.1k|        return this->get_value();
 1770|  51.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  63.0k|    {
  643|  63.0k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.83k, False: 55.2k]
  ------------------
  644|  7.83k|            destroy_value();
  645|  7.83k|        }
  646|  55.2k|        else {
  647|  55.2k|            destroy_unexpected();
  648|  55.2k|        }
  649|  63.0k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9716|  35.4k|{
 9717|  35.4k|    return scan_result_type<Source, Args...>();
 9718|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1550|  35.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  35.4k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  35.4k|    {
  613|  35.4k|        construct();
  614|  35.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  35.4k|    {
  694|  35.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  35.4k|        m_has_value = true;
  696|  35.4k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  35.4k|{
  396|  35.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  35.4k|        T(std::forward<Args>(args)...);
  398|  35.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6623|  35.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   122k|    {
  718|   122k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   122k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   122k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  35.4k|{
 9702|  35.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 27.6k, False: 7.83k]
  |  |  ------------------
  ------------------
 9703|  27.6k|        out = unexpected(in.error());
 9704|  27.6k|    }
 9705|  7.83k|    else {
 9706|  7.83k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  7.83k|    static_cast<    \
  |  | 1056|  7.83k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  7.83k|    }
 9708|  35.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  27.6k|        : base(unexpect, std::move(e.error())),
 1615|  27.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  27.6k|    {
 1617|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  27.6k|        : m_has_value(false)
  637|  27.6k|    {
  638|  27.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  27.6k|    {
  701|  27.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  27.6k|                                  std::forward<Args>(args)...);
  703|  27.6k|        m_has_value = false;
  704|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   138k|    {
  730|   138k|        return reinterpret_cast<unexpected<E>*>(
  731|   138k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|   138k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   138k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  27.6k|    {
 1315|  27.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1555|  27.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  901|  27.6k|    {
  902|  27.6k|        assign_common(std::move(other));
  903|  27.6k|        return *this;
  904|  27.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  27.6k|    {
  949|  27.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 27.6k, False: 0]
  ------------------
  950|  27.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 27.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  27.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  27.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   204k|    {
  687|   204k|        return m_has_value;
  688|   204k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  51.1k|    {
  653|  51.1k|        return *value_ptr();
  654|  51.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  27.6k|    {
 1045|  27.6k|        this->destroy_value();
 1046|  27.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  35.4k|    {
  708|  35.4k|        scn::detail::destroy_at(value_ptr());
  709|  35.4k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  35.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  35.4k|    else {
  408|  35.4k|        p->~T();
  409|  35.4k|    }
  410|  35.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6630|  35.4k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  27.6k|    {
  701|  27.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  27.6k|                                  std::forward<Args>(args)...);
  703|  27.6k|        m_has_value = false;
  704|  27.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  27.6k|    {
  678|  27.6k|        return std::move(*unexpected_ptr());
  679|  27.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  55.2k|    {
  712|  55.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  55.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|  33.6k|    {
 8798|  33.6k|        return m_str;
 8799|  33.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  33.6k|        : m_str(r.str)
 8793|  33.6k|    {
 8794|  33.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1738|  35.4k|    {
 1739|  35.4k|        return has_value();
 1740|  35.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1813|  51.1k|    {
 1814|  51.1k|        return &value();
 1815|  51.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  51.1k|    {
 1768|  51.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  51.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  51.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  51.1k|        return this->get_value();
 1770|  51.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  63.0k|    {
  643|  63.0k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.83k, False: 55.2k]
  ------------------
  644|  7.83k|            destroy_value();
  645|  7.83k|        }
  646|  55.2k|        else {
  647|  55.2k|            destroy_unexpected();
  648|  55.2k|        }
  649|  63.0k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3478|  1.42M|    {
 3479|  1.42M|        return m_iterator;
 3480|  1.42M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3478|  1.17M|    {
 3479|  1.17M|        return m_iterator;
 3480|  1.17M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4471|  13.4M|    {
 4472|  13.4M|        assert(m_begin);
 4473|  13.4M|        return m_end == nullptr;
 4474|  13.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4488|   191k|    {
 4489|   191k|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 87.4k, False: 103k]
  ------------------
 4490|  87.4k|            return make_string_view_from_pointers(
 4491|  87.4k|                static_cast<const CharT*>(m_begin) + position(),
 4492|  87.4k|                static_cast<const CharT*>(m_end));
 4493|  87.4k|        }
 4494|   103k|        return parent()->get_segment_starting_at(position());
 4495|   191k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4482|  7.80M|    {
 4483|  7.80M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1051|  7.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|  7.80M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|  7.80M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4375|   103k|    {
 4376|   103k|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 4377|   103k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4378|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4379|      0|        }
 4380|   103k|        const auto start = pos - m_putback_buffer.size();
 4381|   103k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1051|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4382|   103k|        return m_current_view.substr(start);
 4383|   103k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4466|   288k|    {
 4467|   288k|        return m_position;
 4468|   288k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4397|   406k|    {
 4398|   406k|        return m_is_contiguous;
 4399|   406k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4471|  7.06M|    {
 4472|  7.06M|        assert(m_begin);
 4473|  7.06M|        return m_end == nullptr;
 4474|  7.06M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4488|   100k|    {
 4489|   100k|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 100k, False: 0]
  ------------------
 4490|   100k|            return make_string_view_from_pointers(
 4491|   100k|                static_cast<const CharT*>(m_begin) + position(),
 4492|   100k|                static_cast<const CharT*>(m_end));
 4493|   100k|        }
 4494|      0|        return parent()->get_segment_starting_at(position());
 4495|   100k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4482|  3.91M|    {
 4483|  3.91M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1051|  3.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|  3.91M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|  3.91M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4466|   147k|    {
 4467|   147k|        return m_position;
 4468|   147k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4397|   420k|    {
 4398|   420k|        return m_is_contiguous;
 4399|   420k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3332|   265k|    {
 3333|   265k|        return static_cast<D&>(*this);
 3334|   265k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3373|   265k|    {
 3374|   265k|        return detail::to_address(ranges::begin(derived()));
 3375|   265k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3332|   207k|    {
 3333|   207k|        return static_cast<D&>(*this);
 3334|   207k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3373|   207k|    {
 3374|   207k|        return detail::to_address(ranges::begin(derived()));
 3375|   207k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8994|   205k|    {
 8995|   205k|        return ranges::subrange{begin(), end()};
 8996|   205k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8986|   205k|    {
 8987|   205k|        return ranges::default_sentinel;
 8988|   205k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3463|   759k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   759k|    static_cast<    \
  |  | 1056|   759k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   759k|    static_cast<    \
  |  | 1056|   759k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   759k|    {
 3465|   759k|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8813|   213k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|   103k|    {
 1978|   103k|        return detail::transform_error_impl(std::move(*this),
 1979|   103k|                                            std::forward<F>(f));
 1980|   103k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|   103k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   103k|    else {
 1471|   103k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   103k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   103k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 102k, False: 1.52k]
  |  |  ------------------
  ------------------
 1473|   103k|                   ? result(*std::forward<Exp>(exp))
 1474|   103k|                   : result(unexpect,
 1475|  1.52k|                            trivial_invoke(std::forward<F>(f),
 1476|  1.52k|                                           std::forward<Exp>(exp).error()));
 1477|   103k|    }
 1478|   103k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   207k|    {
  490|   207k|        return m_has_value;
  491|   207k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|   102k|    {
 1804|   102k|        return std::move(value());
 1805|   102k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|   102k|    {
 1768|   102k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   102k|        return this->get_value();
 1770|   102k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   102k|    {
  456|   102k|        return m_value;
  457|   102k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1568|   280k|        : base(std::in_place, std::forward<U>(val)),
 1569|   280k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   280k|    {
 1571|   280k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   280k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   280k|    {
  442|   280k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   488k|    {
 1315|   488k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1348|  4.45k|{
 1349|  4.45k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1350|  4.45k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1754|  1.52k|    {
 1755|  1.52k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  1.52k|        return std::move(this->get_unexpected().error());
 1757|  1.52k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  1.52k|    {
  473|  1.52k|        return m_unexpected;
  474|  1.52k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  8.91k|    {
  365|  8.91k|        return m_unexpected;
  366|  8.91k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1624|  1.52k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  1.52k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  1.52k|    {
 1627|  1.52k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   159k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   159k|          m_has_value(false)
  451|   159k|    {
  452|   159k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8994|   200k|    {
 8995|   200k|        return ranges::subrange{begin(), end()};
 8996|   200k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8986|   200k|    {
 8987|   200k|        return ranges::default_sentinel;
 8988|   200k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3463|   696k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   696k|    static_cast<    \
  |  | 1056|   696k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   696k|    static_cast<    \
  |  | 1056|   696k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   696k|    {
 3465|   696k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|   100k|    {
 1978|   100k|        return detail::transform_error_impl(std::move(*this),
 1979|   100k|                                            std::forward<F>(f));
 1980|   100k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|   100k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   100k|    else {
 1471|   100k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   100k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 99.7k, False: 1.08k]
  |  |  ------------------
  ------------------
 1473|   100k|                   ? result(*std::forward<Exp>(exp))
 1474|   100k|                   : result(unexpect,
 1475|  1.08k|                            trivial_invoke(std::forward<F>(f),
 1476|  1.08k|                                           std::forward<Exp>(exp).error()));
 1477|   100k|    }
 1478|   100k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   201k|    {
  490|   201k|        return m_has_value;
  491|   201k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|  99.7k|    {
 1804|  99.7k|        return std::move(value());
 1805|  99.7k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|  99.7k|    {
 1768|  99.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  99.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  99.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  99.7k|        return this->get_value();
 1770|  99.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  99.7k|    {
  456|  99.7k|        return m_value;
  457|  99.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1568|   170k|        : base(std::in_place, std::forward<U>(val)),
 1569|   170k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   170k|    {
 1571|   170k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   170k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   170k|    {
  442|   170k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   509k|    {
 1315|   509k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1754|  1.08k|    {
 1755|  1.08k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  1.08k|        return std::move(this->get_unexpected().error());
 1757|  1.08k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  1.08k|    {
  473|  1.08k|        return m_unexpected;
  474|  1.08k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1624|  1.08k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  1.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  1.08k|    {
 1627|  1.08k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   316k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   316k|          m_has_value(false)
  451|   316k|    {
  452|   316k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1614|   248k|        : base(unexpect, std::move(e.error())),
 1615|   248k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   248k|    {
 1617|   248k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   248k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   248k|          m_has_value(false)
  451|   248k|    {
  452|   248k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   409k|    {
 1315|   409k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1614|  41.4k|        : base(unexpect, std::move(e.error())),
 1615|  41.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  41.4k|    {
 1617|  41.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  42.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  42.2k|          m_has_value(false)
  451|  42.2k|    {
  452|  42.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   177k|    {
 1315|   177k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1568|   135k|        : base(std::in_place, std::forward<U>(val)),
 1569|   135k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   135k|    {
 1571|   135k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   135k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   135k|    {
  442|   135k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1738|   177k|    {
 1739|   177k|        return has_value();
 1740|   177k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   355k|    {
  490|   355k|        return m_has_value;
  491|   355k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1744|  42.2k|    {
 1745|  42.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  42.2k|        return this->get_unexpected().error();
 1747|  42.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  42.2k|    {
  473|  42.2k|        return m_unexpected;
  474|  42.2k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1803|   135k|    {
 1804|   135k|        return std::move(value());
 1805|   135k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1767|   135k|    {
 1768|   135k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   135k|        return this->get_value();
 1770|   135k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   135k|    {
  456|   135k|        return m_value;
  457|   135k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1614|  82.8k|        : base(unexpect, std::move(e.error())),
 1615|  82.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  82.8k|    {
 1617|  82.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  83.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  83.9k|          m_has_value(false)
  451|  83.9k|    {
  452|  83.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   207k|    {
 1315|   207k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1568|   123k|        : base(std::in_place, std::forward<U>(val)),
 1569|   123k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   123k|    {
 1571|   123k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   123k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   123k|    {
  442|   123k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1738|   207k|    {
 1739|   207k|        return has_value();
 1740|   207k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|   414k|    {
  490|   414k|        return m_has_value;
  491|   414k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1744|  83.9k|    {
 1745|  83.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  83.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  83.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  83.9k|        return this->get_unexpected().error();
 1747|  83.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  83.9k|    {
  473|  83.9k|        return m_unexpected;
  474|  83.9k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1803|   123k|    {
 1804|   123k|        return std::move(value());
 1805|   123k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1767|   123k|    {
 1768|   123k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   123k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   123k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   123k|        return this->get_value();
 1770|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|   123k|    {
  456|   123k|        return m_value;
  457|   123k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|  87.4k|    {
 1978|  87.4k|        return detail::transform_error_impl(std::move(*this),
 1979|  87.4k|                                            std::forward<F>(f));
 1980|  87.4k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|  87.4k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  87.4k|    else {
 1471|  87.4k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  87.4k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  87.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 86.7k, False: 774]
  |  |  ------------------
  ------------------
 1473|  87.4k|                   ? result(*std::forward<Exp>(exp))
 1474|  87.4k|                   : result(unexpect,
 1475|    774|                            trivial_invoke(std::forward<F>(f),
 1476|    774|                                           std::forward<Exp>(exp).error()));
 1477|  87.4k|    }
 1478|  87.4k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   174k|    {
  490|   174k|        return m_has_value;
  491|   174k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|  86.7k|    {
 1804|  86.7k|        return std::move(value());
 1805|  86.7k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|  86.7k|    {
 1768|  86.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  86.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  86.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  86.7k|        return this->get_value();
 1770|  86.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  86.7k|    {
  456|  86.7k|        return m_value;
  457|  86.7k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1754|    774|    {
 1755|    774|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    774|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    774|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|    774|        return std::move(this->get_unexpected().error());
 1757|    774|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    774|    {
  473|    774|        return m_unexpected;
  474|    774|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1624|    774|        : base(unexpect, std::forward<Args>(args)...),
 1625|    774|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|    774|    {
 1627|    774|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8978|   815k|    {
 8979|   815k|        return m_current;
 8980|   815k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8866|   174k|    {
 8867|   174k|        return m_args;
 8868|   174k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8871|   363k|    {
 8872|   363k|        return m_locale;
 8873|   363k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8877|   371k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   371k|    static_cast<    \
  |  | 1056|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   371k|    static_cast<    \
  |  | 1056|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8878|   371k|    {
 8879|   371k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   174k|    {
 2999|   174k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   174k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   174k|    {
 2980|   174k|        return t.data();
 2981|   174k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|  87.4k|    {
 3074|  87.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  87.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3039|  87.4k|    {
 3040|  87.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  87.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|   157k|        : base(unexpect, std::move(e.error())),
 1615|   157k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   157k|    {
 1617|   157k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1568|  48.8k|        : base(std::in_place, std::forward<U>(val)),
 1569|  48.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  48.8k|    {
 1571|  48.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  48.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  48.8k|    {
  442|  48.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8978|   698k|    {
 8979|   698k|        return m_current;
 8980|   698k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8866|   201k|    {
 8867|   201k|        return m_args;
 8868|   201k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8871|   401k|    {
 8872|   401k|        return m_locale;
 8873|   401k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8877|   414k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   414k|    static_cast<    \
  |  | 1056|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   414k|    static_cast<    \
  |  | 1056|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8878|   414k|    {
 8879|   414k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   201k|    {
 2999|   201k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   201k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   201k|    {
 2980|   201k|        return t.data();
 2981|   201k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|   100k|    {
 3074|   100k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   100k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3039|   100k|    {
 3040|   100k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   100k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|   314k|        : base(unexpect, std::move(e.error())),
 1615|   314k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   314k|    {
 1617|   314k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1568|  23.5k|        : base(std::in_place, std::forward<U>(val)),
 1569|  23.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  23.5k|    {
 1571|  23.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  23.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  23.5k|    {
  442|  23.5k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|   577k|    {
 4558|   577k|        return x.is_at_end();
 4559|   577k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4601|  1.39M|    {
 4602|  1.39M|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 1.39M]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|  1.39M|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 1.39M]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|  1.39M|        return !read_at_position();
 4609|  1.39M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4581|  4.03M|    {
 4582|  4.03M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  4.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  4.03M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 4.03M]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|  4.03M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  985|  4.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 3.22M, False: 807k]
  |  |  ------------------
  ------------------
 4589|  3.22M|            return true;
 4590|  3.22M|        }
 4591|       |
 4592|  1.60M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 807k, False: 792k]
  ------------------
 4593|   807k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 14.9k, False: 792k]
  ------------------
 4594|  14.9k|                return false;
 4595|  14.9k|            }
 4596|   807k|        }
 4597|   792k|        return true;
 4598|   807k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4516|  1.26M|    {
 4517|  1.26M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|  1.26M|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 1.26M]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|  1.26M|        auto res = read_at_position();
 4526|  1.26M|        SCN_EXPECT(res);
  ------------------
  |  | 1051|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|  1.26M|        return parent()->get_character_at(m_position);
 4528|  1.26M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4386|  1.26M|    {
 4387|  1.26M|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 418k, False: 843k]
  |  |  ------------------
  ------------------
 4388|  1.26M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|   418k|            return m_putback_buffer[pos];
 4390|   418k|        }
 4391|   843k|        const auto start = pos - m_putback_buffer.size();
 4392|   843k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1051|   843k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   843k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|   843k|        return m_current_view[start];
 4394|   843k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1568|   102k|        : base(std::in_place, std::forward<U>(val)),
 1569|   102k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   102k|    {
 1571|   102k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   102k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   102k|    {
  442|   102k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   103k|    {
 1315|   103k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|  1.52k|        : base(unexpect, std::move(e.error())),
 1615|  1.52k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  1.52k|    {
 1617|  1.52k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.52k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.52k|          m_has_value(false)
  451|  1.52k|    {
  452|  1.52k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  4.45k|        : m_unexpected(std::forward<Args>(args)...)
  359|  4.45k|    {
  360|  4.45k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  4.45k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  4.45k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4502|  1.37M|    {
 4503|  1.37M|        ++m_position;
 4504|  1.37M|        (void)read_at_position();
 4505|  1.37M|        return *this;
 4506|  1.37M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4551|   610k|    {
 4552|   610k|        return !(lhs == rhs);
 4553|   610k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4546|   610k|    {
 4547|   610k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 610k, False: 0]
  |  Branch (4547:46): [True: 74.9k, False: 535k]
  ------------------
 4548|   610k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  4.45k|        : m_unexpected(std::forward<Err>(e))
  350|  4.45k|    {
  351|  4.45k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  4.45k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  4.45k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3482|  1.74M|    {
 3483|  1.74M|        return m_sentinel;
 3484|  1.74M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|   817k|    {
 4569|   817k|        return !x.is_at_end();
 4570|   817k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|    774|        : base(unexpect, std::move(e.error())),
 1615|    774|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    774|    {
 1617|    774|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    774|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    774|          m_has_value(false)
  451|    774|    {
  452|    774|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  87.4k|    {
 1315|  87.4k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1568|  86.7k|        : base(std::in_place, std::forward<U>(val)),
 1569|  86.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  86.7k|    {
 1571|  86.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  86.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  86.7k|    {
  442|  86.7k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   262k|    {
 2999|   262k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   262k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   262k|    {
 2980|   262k|        return t.data();
 2981|   262k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1568|   160k|        : base(std::in_place, std::forward<U>(val)),
 1569|   160k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   160k|    {
 1571|   160k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|   160k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   160k|    {
  442|   160k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1793|   113k|    {
 1794|   113k|        return value();
 1795|   113k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2867|   102k|    {
 2868|   102k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   102k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2848|   102k|    {
 2849|   102k|        return decay_copy(t.begin());
 2850|   102k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2092|   102k|{
 2093|   102k|    return SCN_FWD(t);
  ------------------
  |  | 1057|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|   102k|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3909|  87.4k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|  87.4k|    static_cast<    \
  |  | 1056|  87.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|  87.4k|    {
 3911|  87.4k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3909|   103k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|   103k|    static_cast<    \
  |  | 1056|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|   103k|    {
 3911|   103k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|   447k|    {
 4558|   447k|        return x.is_at_end();
 4559|   447k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4601|   861k|    {
 4602|   861k|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 861k]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|   861k|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 861k]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|   861k|        return !read_at_position();
 4609|   861k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4581|  2.09M|    {
 4582|  2.09M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  2.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  2.09M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 2.09M]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|  2.09M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  985|  2.09M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.72M, False: 360k]
  |  |  ------------------
  ------------------
 4589|  1.72M|            return true;
 4590|  1.72M|        }
 4591|       |
 4592|   701k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 360k, False: 341k]
  ------------------
 4593|   360k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 18.7k, False: 341k]
  ------------------
 4594|  18.7k|                return false;
 4595|  18.7k|            }
 4596|   360k|        }
 4597|   341k|        return true;
 4598|   360k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4355|  2.79M|    {
 4356|  2.79M|        return m_putback_buffer.size() + m_current_view.size();
 4357|  2.79M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4516|   758k|    {
 4517|   758k|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|   758k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   758k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|   758k|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 758k]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|   758k|        auto res = read_at_position();
 4526|   758k|        SCN_EXPECT(res);
  ------------------
  |  | 1051|   758k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   758k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|   758k|        return parent()->get_character_at(m_position);
 4528|   758k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4386|   758k|    {
 4387|   758k|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|   758k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 417k, False: 341k]
  |  |  ------------------
  ------------------
 4388|   758k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|   417k|            return m_putback_buffer[pos];
 4390|   417k|        }
 4391|   341k|        const auto start = pos - m_putback_buffer.size();
 4392|   341k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1051|   341k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   341k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|   341k|        return m_current_view[start];
 4394|   341k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1568|  99.7k|        : base(std::in_place, std::forward<U>(val)),
 1569|  99.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  99.7k|    {
 1571|  99.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  99.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  99.7k|    {
  442|  99.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   100k|    {
 1315|   100k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|  1.08k|        : base(unexpect, std::move(e.error())),
 1615|  1.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  1.08k|    {
 1617|  1.08k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.08k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.08k|          m_has_value(false)
  451|  1.08k|    {
  452|  1.08k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4502|   469k|    {
 4503|   469k|        ++m_position;
 4504|   469k|        (void)read_at_position();
 4505|   469k|        return *this;
 4506|   469k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4551|   163k|    {
 4552|   163k|        return !(lhs == rhs);
 4553|   163k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4546|   163k|    {
 4547|   163k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 163k, False: 0]
  |  Branch (4547:46): [True: 23.5k, False: 139k]
  ------------------
 4548|   163k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3482|  1.15M|    {
 3483|  1.15M|        return m_sentinel;
 3484|  1.15M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|   414k|    {
 4569|   414k|        return !x.is_at_end();
 4570|   414k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|  1.08k|        : base(unexpect, std::move(e.error())),
 1615|  1.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  1.08k|    {
 1617|  1.08k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.08k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.08k|          m_has_value(false)
  451|  1.08k|    {
  452|  1.08k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   100k|    {
 1315|   100k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1568|  99.7k|        : base(std::in_place, std::forward<U>(val)),
 1569|  99.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  99.7k|    {
 1571|  99.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  99.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  99.7k|    {
  442|  99.7k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   201k|    {
  490|   201k|        return m_has_value;
  491|   201k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|  99.7k|    {
 1768|  99.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  99.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  99.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  99.7k|        return this->get_value();
 1770|  99.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  99.7k|    {
  456|  99.7k|        return m_value;
  457|  99.7k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|   100k|    {
 1978|   100k|        return detail::transform_error_impl(std::move(*this),
 1979|   100k|                                            std::forward<F>(f));
 1980|   100k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|   100k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   100k|    else {
 1471|   100k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   100k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 99.7k, False: 1.08k]
  |  |  ------------------
  ------------------
 1473|   100k|                   ? result(*std::forward<Exp>(exp))
 1474|   100k|                   : result(unexpect,
 1475|  1.08k|                            trivial_invoke(std::forward<F>(f),
 1476|  1.08k|                                           std::forward<Exp>(exp).error()));
 1477|   100k|    }
 1478|   100k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|  99.7k|    {
 1804|  99.7k|        return std::move(value());
 1805|  99.7k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1754|  1.08k|    {
 1755|  1.08k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  1.08k|        return std::move(this->get_unexpected().error());
 1757|  1.08k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  1.08k|    {
  473|  1.08k|        return m_unexpected;
  474|  1.08k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1624|  1.08k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  1.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  1.08k|    {
 1627|  1.08k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   201k|    {
 2999|   201k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   201k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   201k|    {
 2980|   201k|        return t.data();
 2981|   201k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1793|  47.0k|    {
 1794|  47.0k|        return value();
 1795|  47.0k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2867|  99.7k|    {
 2868|  99.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  99.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  99.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2848|  99.7k|    {
 2849|  99.7k|        return decay_copy(t.begin());
 2850|  99.7k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2092|  99.7k|{
 2093|  99.7k|    return SCN_FWD(t);
  ------------------
  |  | 1057|  99.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  99.7k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3909|   100k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|   100k|    static_cast<    \
  |  | 1056|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|   100k|    {
 3911|   100k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3909|   100k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|   100k|    static_cast<    \
  |  | 1056|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|   100k|    {
 3911|   100k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4355|  5.63M|    {
 4356|  5.63M|        return m_putback_buffer.size() + m_current_view.size();
 4357|  5.63M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6193|   191k|    {
 6194|   191k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 191k]
  |  |  ------------------
  ------------------
 6195|      0|            return max_size();
 6196|      0|        }
 6197|       |
 6198|   191k|        return static_cast<std::size_t>(m_desc &
 6199|   191k|                                        ((1 << detail::packed_arg_bits) - 1));
 6200|   191k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6219|   382k|    {
 6220|   382k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6221|   382k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6161|   191k|    {
 6162|   191k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 191k]
  |  |  ------------------
  ------------------
 6163|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6164|      0|                return m_args[id];
 6165|      0|            }
 6166|      0|            return {};
 6167|      0|        }
 6168|       |
 6169|   191k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 191k]
  |  |  ------------------
  ------------------
 6170|      0|            return {};
 6171|      0|        }
 6172|       |
 6173|   191k|        const auto t = type(id);
 6174|   191k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 191k]
  |  |  ------------------
  ------------------
 6175|      0|            return {};
 6176|      0|        }
 6177|       |
 6178|   191k|        basic_scan_arg<Context> arg;
 6179|   191k|        arg.m_type = t;
 6180|   191k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 191k]
  ------------------
 6181|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6182|      0|        }
 6183|   191k|        else {
 6184|   191k|            arg.m_value = m_values[id];
 6185|   191k|        }
 6186|   191k|        return arg;
 6187|   191k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6228|   191k|    {
 6229|       |        // First (0th) index is size, types start after that
 6230|   191k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6231|   191k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6232|   191k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6233|   191k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6223|   191k|    {
 6224|   191k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6225|   191k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5977|   387k|    {
 5978|   387k|        return m_type != detail::arg_type::none_type;
 5979|   387k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9361|  2.76k|{
 9362|  2.76k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  2.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  2.76k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  2.76k|{
 9251|  2.76k|#define SCN_VISIT(Type)                                                \
 9252|  2.76k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  2.76k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  2.76k|    }                                                                  \
 9255|  2.76k|    else {                                                             \
 9256|  2.76k|        return vis(monostate_val);                                     \
 9257|  2.76k|    }
 9258|       |
 9259|  2.76k|    monostate monostate_val{};
 9260|       |
 9261|  2.76k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 2.76k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 2.76k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 2.76k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 2.76k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 2.76k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 2.76k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 2.76k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 2.76k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 2.76k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 2.76k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 2.76k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 2.76k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 2.76k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 2.76k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 2.76k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 2.76k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 2.76k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 2.76k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 2.76k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 2.76k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 2.76k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 2.76k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 2.76k]
  ------------------
 9315|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9316|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 2.76k]
  ------------------
 9317|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9318|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 2.76k]
  ------------------
 9319|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9320|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 2.76k]
  ------------------
 9321|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9322|       |
 9323|  2.76k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 2.76k, False: 0]
  ------------------
 9324|  2.76k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  2.76k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  2.76k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 2.76k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 2.76k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  2.76k|            SCN_CLANG_POP
 9341|  2.76k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6022|   387k|{
 6023|   387k|    return arg.m_type;
 6024|   387k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6034|   196k|{
 6035|   196k|    return arg.m_value;
 6036|   196k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEi:
 6292|  2.76k|        : m_format{format},
 6293|  2.76k|          m_next_arg_id{next_arg_id},
 6294|  2.76k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  2.76k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  2.76k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  2.76k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  2.76k|    {
 6300|  2.76k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2ENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEl:
 4459|  90.2k|        : m_begin(const_cast<CharT*>(view.data())),
 4460|  90.2k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4461|  90.2k|          m_position(pos)
 4462|  90.2k|    {
 4463|  90.2k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8962|   196k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1055|   196k|    static_cast<    \
  |  | 1056|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8963|   196k|    {
 8964|   196k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handle4scanERNS0_24basic_scan_parse_contextIcEERS5_:
 5955|   196k|        {
 5956|   196k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5957|   196k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handleC2ENS3_17custom_value_typeE:
 5960|   196k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4689|   193k|{
 4690|   193k|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 87.4k, False: 106k]
  ------------------
 4691|  87.4k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|  87.4k|                                ranges::default_sentinel};
 4693|  87.4k|    }
 4694|   106k|    return ranges::subrange{forward_iterator{this, 0},
 4695|   106k|                            ranges::default_sentinel};
 4696|   193k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4452|   106k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|   106k|    {
 4454|   106k|        SCN_EXPECT(parent);
  ------------------
  |  | 1051|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|   106k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1051|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   106k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9361|  2.76k|{
 9362|  2.76k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  2.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  2.76k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  2.76k|{
 9251|  2.76k|#define SCN_VISIT(Type)                                                \
 9252|  2.76k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  2.76k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  2.76k|    }                                                                  \
 9255|  2.76k|    else {                                                             \
 9256|  2.76k|        return vis(monostate_val);                                     \
 9257|  2.76k|    }
 9258|       |
 9259|  2.76k|    monostate monostate_val{};
 9260|       |
 9261|  2.76k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 2.76k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 2.76k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 2.76k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 2.76k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 2.76k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 2.76k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 2.76k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 2.76k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 2.76k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 2.76k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 2.76k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 2.76k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 2.76k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 2.76k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 2.76k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 2.76k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 2.76k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 2.76k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 2.76k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 2.76k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 2.76k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 2.76k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 2.76k]
  ------------------
 9315|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9316|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 2.76k]
  ------------------
 9317|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9318|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 2.76k]
  ------------------
 9319|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9320|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 2.76k]
  ------------------
 9321|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9322|       |
 9323|  2.76k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 2.76k, False: 0]
  ------------------
 9324|  2.76k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  2.76k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  2.76k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 2.76k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 2.76k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  2.76k|            SCN_CLANG_POP
 9341|  2.76k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSH_11char_traitsIcEEEEi:
 6292|  2.76k|        : m_format{format},
 6293|  2.76k|          m_next_arg_id{next_arg_id},
 6294|  2.76k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  2.76k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  2.76k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  2.76k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  2.76k|    {
 6300|  2.76k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6292|  87.4k|        : m_format{format},
 6293|  87.4k|          m_next_arg_id{next_arg_id},
 6294|  87.4k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  87.4k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  87.4k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  87.4k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  87.4k|    {
 6300|  87.4k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|  87.4k|    {
 3074|  87.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  87.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3039|  87.4k|    {
 3040|  87.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  87.4k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|  87.4k|{
 7809|  87.4k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|  87.4k|    handler.check_args_exhausted();
 7811|  87.4k|    return handler.get_error();
 7812|  87.4k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|  87.4k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|  87.4k|    auto begin = format.data();
 7777|  87.4k|    auto it = begin;
 7778|  87.4k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   136k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 87.4k, False: 48.8k]
  ------------------
 7781|  87.4k|        const auto ch = *it++;
 7782|  87.4k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 87.4k, False: 0]
  ------------------
 7783|  87.4k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|  87.4k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|  87.4k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 38.6k, False: 48.8k]
  ------------------
 7787|  38.6k|                return;
 7788|  38.6k|            }
 7789|  87.4k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|  87.4k|    }
 7800|       |
 7801|  48.8k|    handler.on_literal_text(begin, end);
 7802|  48.8k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7705|  87.4k|{
 7706|  87.4k|    struct id_adapter {
 7707|  87.4k|        constexpr void operator()()
 7708|  87.4k|        {
 7709|  87.4k|            arg_id = handler.on_arg_id();
 7710|  87.4k|        }
 7711|  87.4k|        constexpr void operator()(std::size_t id)
 7712|  87.4k|        {
 7713|  87.4k|            arg_id = handler.on_arg_id(id);
 7714|  87.4k|        }
 7715|       |
 7716|  87.4k|        constexpr void on_error(const char* msg)
 7717|  87.4k|        {
 7718|  87.4k|            SCN_UNLIKELY_ATTR
 7719|  87.4k|            handler.on_error(msg);
 7720|  87.4k|        }
 7721|       |
 7722|  87.4k|        Handler& handler;
 7723|  87.4k|        std::size_t arg_id;
 7724|  87.4k|    };
 7725|       |
 7726|  87.4k|    ++begin;
 7727|  87.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 87.4k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|  87.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 87.4k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|  87.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 87.4k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|  87.4k|    else {
 7739|  87.4k|        auto adapter = id_adapter{handler, 0};
 7740|  87.4k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|  87.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 87.4k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|  87.4k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 87.4k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|  87.4k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 87.4k, False: 0]
  ------------------
 7751|  87.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 87.4k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|  87.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|  87.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 87.4k]
  |  |  |  Branch (986:45): [True: 0, False: 87.4k]
  |  |  |  Branch (986:45): [True: 0, False: 87.4k]
  |  |  ------------------
  ------------------
 7757|      0|                handler.on_error("Unknown format specifier");
 7758|      0|                return begin;
 7759|      0|            }
 7760|  87.4k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|  87.4k|    }
 7767|  87.4k|    return begin + 1;
 7768|  87.4k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8861|   191k|    {
 8862|   191k|        return m_args.get(id);
 8863|   191k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6327|   191k|    {
 6328|   191k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 191k]
  |  |  ------------------
  ------------------
 6329|      0|            on_error(
 6330|      0|                "Cannot switch from manual to automatic argument indexing");
 6331|      0|            return 0;
 6332|      0|        }
 6333|       |
 6334|   191k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6335|   191k|        do_check_arg_id(id);
 6336|   191k|        return id;
 6337|   191k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6821|   191k|{
 6822|   191k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6822:9): [Folded - Ignored]
  ------------------
 6823|   191k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6823:10): [Folded - Ignored]
  |  Branch (6823:22): [Folded - Ignored]
  ------------------
 6824|       |        // The cast below will cause an error on gcc pre-12
 6825|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6826|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6826:13): [True: 0, False: 0]
  ------------------
 6827|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6828|      0|            SCN_UNLIKELY_ATTR
 6829|      0|            on_error("Argument not found");
 6830|      0|        }
 6831|      0|    }
 6832|   191k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|  87.4k|{
 7207|  87.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  87.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  87.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|  87.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 87.4k, False: 0]
  |  Branch (7208:26): [True: 0, False: 87.4k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|  87.4k|    handler();
 7213|  87.4k|    return begin;
 7214|  87.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|  87.4k|        {
 7709|  87.4k|            arg_id = handler.on_arg_id();
 7710|  87.4k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9361|   191k|{
 9362|   191k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   191k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   191k|{
 9251|   191k|#define SCN_VISIT(Type)                                                \
 9252|   191k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   191k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   191k|    }                                                                  \
 9255|   191k|    else {                                                             \
 9256|   191k|        return vis(monostate_val);                                     \
 9257|   191k|    }
 9258|       |
 9259|   191k|    monostate monostate_val{};
 9260|       |
 9261|   191k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 191k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 191k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 191k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 191k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 191k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 191k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 191k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 191k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 191k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 191k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 191k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 191k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 191k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 191k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 191k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 191k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 191k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 191k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 191k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 191k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 191k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 191k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 191k]
  ------------------
 9315|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9316|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 191k]
  ------------------
 9317|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9318|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 191k]
  ------------------
 9319|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9320|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 191k]
  ------------------
 9321|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9322|       |
 9323|   191k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 191k, False: 0]
  ------------------
 9324|   191k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   191k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   191k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 191k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 191k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   191k|            SCN_CLANG_POP
 9341|   191k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4715|  87.4k|        : base(typename base::contiguous_tag{}, sv)
 4716|  87.4k|    {
 4717|  87.4k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4420|  87.4k|        : m_current_view(sv), m_is_contiguous(true)
 4421|  87.4k|    {
 4422|  87.4k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   174k|    {
 2999|   174k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   174k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2989|   174k|    {
 2990|   174k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  | 1057|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2991|   174k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   174k|    {
 2868|   174k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   174k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   174k|    {
 2849|   174k|        return decay_copy(t.begin());
 2850|   174k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3073|  87.4k|    {
 3074|  87.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  87.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3039|  87.4k|    {
 3040|  87.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  87.4k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator16batch_advance_toEl:
 4538|  87.4k|    {
 4539|  87.4k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  | 1051|  87.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  87.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4540|  87.4k|        m_position = i;
 4541|  87.4k|        return *this;
 4542|  87.4k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6292|   103k|        : m_format{format},
 6293|   103k|          m_next_arg_id{next_arg_id},
 6294|   103k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|   103k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|   103k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|   103k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|   103k|    {
 6300|   103k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|   103k|{
 7809|   103k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|   103k|    handler.check_args_exhausted();
 7811|   103k|    return handler.get_error();
 7812|   103k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|   103k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|   103k|    auto begin = format.data();
 7777|   103k|    auto it = begin;
 7778|   103k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   168k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 103k, False: 64.9k]
  ------------------
 7781|   103k|        const auto ch = *it++;
 7782|   103k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 103k, False: 0]
  ------------------
 7783|   103k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|   103k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|   103k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 38.6k, False: 64.9k]
  ------------------
 7787|  38.6k|                return;
 7788|  38.6k|            }
 7789|   103k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|   103k|    }
 7800|       |
 7801|  64.9k|    handler.on_literal_text(begin, end);
 7802|  64.9k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7705|   103k|{
 7706|   103k|    struct id_adapter {
 7707|   103k|        constexpr void operator()()
 7708|   103k|        {
 7709|   103k|            arg_id = handler.on_arg_id();
 7710|   103k|        }
 7711|   103k|        constexpr void operator()(std::size_t id)
 7712|   103k|        {
 7713|   103k|            arg_id = handler.on_arg_id(id);
 7714|   103k|        }
 7715|       |
 7716|   103k|        constexpr void on_error(const char* msg)
 7717|   103k|        {
 7718|   103k|            SCN_UNLIKELY_ATTR
 7719|   103k|            handler.on_error(msg);
 7720|   103k|        }
 7721|       |
 7722|   103k|        Handler& handler;
 7723|   103k|        std::size_t arg_id;
 7724|   103k|    };
 7725|       |
 7726|   103k|    ++begin;
 7727|   103k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|   103k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 103k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|   103k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 103k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|   103k|    else {
 7739|   103k|        auto adapter = id_adapter{handler, 0};
 7740|   103k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|   103k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|   103k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 103k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|   103k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 103k, False: 0]
  ------------------
 7751|   103k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|   103k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|   103k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 103k]
  |  |  |  Branch (986:45): [True: 0, False: 103k]
  |  |  |  Branch (986:45): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7757|      0|                handler.on_error("Unknown format specifier");
 7758|      0|                return begin;
 7759|      0|            }
 7760|   103k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|   103k|    }
 7767|   103k|    return begin + 1;
 7768|   103k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|   103k|{
 7207|   103k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|   103k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 103k, False: 0]
  |  Branch (7208:26): [True: 0, False: 103k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|   103k|    handler();
 7213|   103k|    return begin;
 7214|   103k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|   103k|        {
 7709|   103k|            arg_id = handler.on_arg_id();
 7710|   103k|        }
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4350|  41.4k|    {
 4351|  41.4k|        return sync(0);
 4352|  41.4k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6193|   201k|    {
 6194|   201k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 201k]
  |  |  ------------------
  ------------------
 6195|      0|            return max_size();
 6196|      0|        }
 6197|       |
 6198|   201k|        return static_cast<std::size_t>(m_desc &
 6199|   201k|                                        ((1 << detail::packed_arg_bits) - 1));
 6200|   201k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6219|   403k|    {
 6220|   403k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6221|   403k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6161|   201k|    {
 6162|   201k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 201k]
  |  |  ------------------
  ------------------
 6163|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6164|      0|                return m_args[id];
 6165|      0|            }
 6166|      0|            return {};
 6167|      0|        }
 6168|       |
 6169|   201k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  986|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 201k]
  |  |  ------------------
  ------------------
 6170|      0|            return {};
 6171|      0|        }
 6172|       |
 6173|   201k|        const auto t = type(id);
 6174|   201k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  986|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 201k]
  |  |  ------------------
  ------------------
 6175|      0|            return {};
 6176|      0|        }
 6177|       |
 6178|   201k|        basic_scan_arg<Context> arg;
 6179|   201k|        arg.m_type = t;
 6180|   201k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 201k]
  ------------------
 6181|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6182|      0|        }
 6183|   201k|        else {
 6184|   201k|            arg.m_value = m_values[id];
 6185|   201k|        }
 6186|   201k|        return arg;
 6187|   201k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6228|   201k|    {
 6229|       |        // First (0th) index is size, types start after that
 6230|   201k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6231|   201k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6232|   201k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6233|   201k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6223|   201k|    {
 6224|   201k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6225|   201k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5977|   414k|    {
 5978|   414k|        return m_type != detail::arg_type::none_type;
 5979|   414k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9361|  5.52k|{
 9362|  5.52k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  5.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  5.52k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  5.52k|{
 9251|  5.52k|#define SCN_VISIT(Type)                                                \
 9252|  5.52k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  5.52k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  5.52k|    }                                                                  \
 9255|  5.52k|    else {                                                             \
 9256|  5.52k|        return vis(monostate_val);                                     \
 9257|  5.52k|    }
 9258|       |
 9259|  5.52k|    monostate monostate_val{};
 9260|       |
 9261|  5.52k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 5.52k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 5.52k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 5.52k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 5.52k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 5.52k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 5.52k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 5.52k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 5.52k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 5.52k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 5.52k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 5.52k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 5.52k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 5.52k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 5.52k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 5.52k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 5.52k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 5.52k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 5.52k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 5.52k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 5.52k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 5.52k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 5.52k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 5.52k]
  ------------------
 9315|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9316|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 5.52k]
  ------------------
 9317|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9318|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 5.52k]
  ------------------
 9319|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9320|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 5.52k]
  ------------------
 9321|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9322|       |
 9323|  5.52k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 5.52k, False: 0]
  ------------------
 9324|  5.52k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  5.52k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  5.52k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 5.52k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 5.52k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  5.52k|            SCN_CLANG_POP
 9341|  5.52k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6022|   414k|{
 6023|   414k|    return arg.m_type;
 6024|   414k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6034|   212k|{
 6035|   212k|    return arg.m_value;
 6036|   212k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEi:
 6292|  5.52k|        : m_format{format},
 6293|  5.52k|          m_next_arg_id{next_arg_id},
 6294|  5.52k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  5.52k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  5.52k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  5.52k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  5.52k|    {
 6300|  5.52k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2ENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEl:
 4459|   106k|        : m_begin(const_cast<CharT*>(view.data())),
 4460|   106k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4461|   106k|          m_position(pos)
 4462|   106k|    {
 4463|   106k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8962|   212k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1055|   212k|    static_cast<    \
  |  | 1056|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8963|   212k|    {
 8964|   212k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handle4scanERNS0_24basic_scan_parse_contextIwEERS5_:
 5955|   212k|        {
 5956|   212k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5957|   212k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handleC2ENS3_17custom_value_typeE:
 5960|   212k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6292|   100k|        : m_format{format},
 6293|   100k|          m_next_arg_id{next_arg_id},
 6294|   100k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|   100k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|   100k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|   100k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|   100k|    {
 6300|   100k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|   100k|    {
 3074|   100k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   100k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3039|   100k|    {
 3040|   100k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   100k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|   100k|{
 7809|   100k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|   100k|    handler.check_args_exhausted();
 7811|   100k|    return handler.get_error();
 7812|   100k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|   100k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|   100k|    auto begin = format.data();
 7777|   100k|    auto it = begin;
 7778|   100k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   124k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 100k, False: 23.5k]
  ------------------
 7781|   100k|        const auto ch = *it++;
 7782|   100k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 100k, False: 0]
  ------------------
 7783|   100k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|   100k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|   100k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 77.3k, False: 23.5k]
  ------------------
 7787|  77.3k|                return;
 7788|  77.3k|            }
 7789|   100k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|   100k|    }
 7800|       |
 7801|  23.5k|    handler.on_literal_text(begin, end);
 7802|  23.5k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7705|   100k|{
 7706|   100k|    struct id_adapter {
 7707|   100k|        constexpr void operator()()
 7708|   100k|        {
 7709|   100k|            arg_id = handler.on_arg_id();
 7710|   100k|        }
 7711|   100k|        constexpr void operator()(std::size_t id)
 7712|   100k|        {
 7713|   100k|            arg_id = handler.on_arg_id(id);
 7714|   100k|        }
 7715|       |
 7716|   100k|        constexpr void on_error(const char* msg)
 7717|   100k|        {
 7718|   100k|            SCN_UNLIKELY_ATTR
 7719|   100k|            handler.on_error(msg);
 7720|   100k|        }
 7721|       |
 7722|   100k|        Handler& handler;
 7723|   100k|        std::size_t arg_id;
 7724|   100k|    };
 7725|       |
 7726|   100k|    ++begin;
 7727|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|   100k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 100k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|   100k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 100k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|   100k|    else {
 7739|   100k|        auto adapter = id_adapter{handler, 0};
 7740|   100k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|   100k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|   100k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 100k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|   100k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 100k, False: 0]
  ------------------
 7751|   100k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|   100k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|   100k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 100k]
  |  |  |  Branch (986:45): [True: 0, False: 100k]
  |  |  |  Branch (986:45): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7757|      0|                handler.on_error("Unknown format specifier");
 7758|      0|                return begin;
 7759|      0|            }
 7760|   100k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|   100k|    }
 7767|   100k|    return begin + 1;
 7768|   100k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8861|   201k|    {
 8862|   201k|        return m_args.get(id);
 8863|   201k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6327|   201k|    {
 6328|   201k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  986|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 201k]
  |  |  ------------------
  ------------------
 6329|      0|            on_error(
 6330|      0|                "Cannot switch from manual to automatic argument indexing");
 6331|      0|            return 0;
 6332|      0|        }
 6333|       |
 6334|   201k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6335|   201k|        do_check_arg_id(id);
 6336|   201k|        return id;
 6337|   201k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6821|   201k|{
 6822|   201k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6822:9): [Folded - Ignored]
  ------------------
 6823|   201k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6823:10): [Folded - Ignored]
  |  Branch (6823:22): [Folded - Ignored]
  ------------------
 6824|       |        // The cast below will cause an error on gcc pre-12
 6825|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6826|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6826:13): [True: 0, False: 0]
  ------------------
 6827|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6828|      0|            SCN_UNLIKELY_ATTR
 6829|      0|            on_error("Argument not found");
 6830|      0|        }
 6831|      0|    }
 6832|   201k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|   100k|{
 7207|   100k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|   100k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 100k, False: 0]
  |  Branch (7208:26): [True: 0, False: 100k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|   100k|    handler();
 7213|   100k|    return begin;
 7214|   100k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|   100k|        {
 7709|   100k|            arg_id = handler.on_arg_id();
 7710|   100k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9361|   201k|{
 9362|   201k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   201k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   201k|{
 9251|   201k|#define SCN_VISIT(Type)                                                \
 9252|   201k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   201k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   201k|    }                                                                  \
 9255|   201k|    else {                                                             \
 9256|   201k|        return vis(monostate_val);                                     \
 9257|   201k|    }
 9258|       |
 9259|   201k|    monostate monostate_val{};
 9260|       |
 9261|   201k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 201k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 201k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 201k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 201k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 201k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 201k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 201k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 201k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 201k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 201k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 201k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 201k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 201k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 201k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 201k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 201k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 201k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 201k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 201k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 201k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 201k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 201k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 201k]
  ------------------
 9315|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9316|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 201k]
  ------------------
 9317|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9318|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 201k]
  ------------------
 9319|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9320|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 201k]
  ------------------
 9321|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9322|       |
 9323|   201k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 201k, False: 0]
  ------------------
 9324|   201k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   201k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   201k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 201k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 201k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   201k|            SCN_CLANG_POP
 9341|   201k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4715|   100k|        : base(typename base::contiguous_tag{}, sv)
 4716|   100k|    {
 4717|   100k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4420|   100k|        : m_current_view(sv), m_is_contiguous(true)
 4421|   100k|    {
 4422|   100k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   201k|    {
 2999|   201k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   201k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2989|   201k|    {
 2990|   201k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  | 1057|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2991|   201k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   201k|    {
 2868|   201k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   201k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   201k|    {
 2849|   201k|        return decay_copy(t.begin());
 2850|   201k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3073|   100k|    {
 3074|   100k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   100k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3039|   100k|    {
 3040|   100k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   100k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4689|   207k|{
 4690|   207k|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 100k, False: 106k]
  ------------------
 4691|   100k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|   100k|                                ranges::default_sentinel};
 4693|   100k|    }
 4694|   106k|    return ranges::subrange{forward_iterator{this, 0},
 4695|   106k|                            ranges::default_sentinel};
 4696|   207k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4452|   106k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|   106k|    {
 4454|   106k|        SCN_EXPECT(parent);
  ------------------
  |  | 1051|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|   106k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1051|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   106k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator16batch_advance_toEl:
 4538|   100k|    {
 4539|   100k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  | 1051|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4540|   100k|        m_position = i;
 4541|   100k|        return *this;
 4542|   100k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9361|  5.52k|{
 9362|  5.52k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  5.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  5.52k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  5.52k|{
 9251|  5.52k|#define SCN_VISIT(Type)                                                \
 9252|  5.52k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  5.52k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  5.52k|    }                                                                  \
 9255|  5.52k|    else {                                                             \
 9256|  5.52k|        return vis(monostate_val);                                     \
 9257|  5.52k|    }
 9258|       |
 9259|  5.52k|    monostate monostate_val{};
 9260|       |
 9261|  5.52k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 5.52k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 5.52k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 5.52k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 5.52k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 5.52k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 5.52k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 5.52k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 5.52k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 5.52k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 5.52k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 5.52k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 5.52k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 5.52k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 5.52k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 5.52k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 5.52k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 5.52k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 5.52k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 5.52k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 5.52k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 5.52k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 5.52k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 5.52k]
  ------------------
 9315|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9316|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 5.52k]
  ------------------
 9317|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9318|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 5.52k]
  ------------------
 9319|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9320|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 5.52k]
  ------------------
 9321|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9322|       |
 9323|  5.52k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 5.52k, False: 0]
  ------------------
 9324|  5.52k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  5.52k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  5.52k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 5.52k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 5.52k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  5.52k|            SCN_CLANG_POP
 9341|  5.52k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSH_11char_traitsIwEEEEi:
 6292|  5.52k|        : m_format{format},
 6293|  5.52k|          m_next_arg_id{next_arg_id},
 6294|  5.52k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  5.52k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  5.52k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  5.52k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  5.52k|    {
 6300|  5.52k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6292|   100k|        : m_format{format},
 6293|   100k|          m_next_arg_id{next_arg_id},
 6294|   100k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|   100k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|   100k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|   100k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|   100k|    {
 6300|   100k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|   100k|{
 7809|   100k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|   100k|    handler.check_args_exhausted();
 7811|   100k|    return handler.get_error();
 7812|   100k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|   100k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|   100k|    auto begin = format.data();
 7777|   100k|    auto it = begin;
 7778|   100k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   124k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 100k, False: 23.5k]
  ------------------
 7781|   100k|        const auto ch = *it++;
 7782|   100k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 100k, False: 0]
  ------------------
 7783|   100k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|   100k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|   100k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 77.3k, False: 23.5k]
  ------------------
 7787|  77.3k|                return;
 7788|  77.3k|            }
 7789|   100k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|   100k|    }
 7800|       |
 7801|  23.5k|    handler.on_literal_text(begin, end);
 7802|  23.5k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7705|   100k|{
 7706|   100k|    struct id_adapter {
 7707|   100k|        constexpr void operator()()
 7708|   100k|        {
 7709|   100k|            arg_id = handler.on_arg_id();
 7710|   100k|        }
 7711|   100k|        constexpr void operator()(std::size_t id)
 7712|   100k|        {
 7713|   100k|            arg_id = handler.on_arg_id(id);
 7714|   100k|        }
 7715|       |
 7716|   100k|        constexpr void on_error(const char* msg)
 7717|   100k|        {
 7718|   100k|            SCN_UNLIKELY_ATTR
 7719|   100k|            handler.on_error(msg);
 7720|   100k|        }
 7721|       |
 7722|   100k|        Handler& handler;
 7723|   100k|        std::size_t arg_id;
 7724|   100k|    };
 7725|       |
 7726|   100k|    ++begin;
 7727|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|   100k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 100k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|   100k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 100k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|   100k|    else {
 7739|   100k|        auto adapter = id_adapter{handler, 0};
 7740|   100k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|   100k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|   100k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 100k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|   100k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 100k, False: 0]
  ------------------
 7751|   100k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|   100k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|   100k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 100k]
  |  |  |  Branch (986:45): [True: 0, False: 100k]
  |  |  |  Branch (986:45): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7757|      0|                handler.on_error("Unknown format specifier");
 7758|      0|                return begin;
 7759|      0|            }
 7760|   100k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|   100k|    }
 7767|   100k|    return begin + 1;
 7768|   100k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|   100k|{
 7207|   100k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|   100k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 100k, False: 0]
  |  Branch (7208:26): [True: 0, False: 100k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|   100k|    handler();
 7213|   100k|    return begin;
 7214|   100k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|   100k|        {
 7709|   100k|            arg_id = handler.on_arg_id();
 7710|   100k|        }
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4350|  82.8k|    {
 4351|  82.8k|        return sync(0);
 4352|  82.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6147|  5.52k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6147|  11.0k|    constexpr basic_scan_args() = default;
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2924|   106k|    {
 2925|   106k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   106k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2906|   106k|    {
 2907|   106k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   106k|    }
_ZN3scn2v46ranges6detail10decay_copyINS1_18default_sentinel_tEEEu7__decayIT_EOS5_:
 2092|   205k|{
 2093|   205k|    return SCN_FWD(t);
  ------------------
  |  | 1057|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|   205k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
 4531|  48.8k|    {
 4532|  48.8k|        SCN_EXPECT(n >= 0);
  ------------------
  |  | 1051|  48.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  48.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4533|  48.8k|        m_position += n;
 4534|  48.8k|        return *this;
 4535|  48.8k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2924|  98.5k|    {
 2925|  98.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  98.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  98.5k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2906|  98.5k|    {
 2907|  98.5k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  98.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  98.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
 4531|  23.5k|    {
 4532|  23.5k|        SCN_EXPECT(n >= 0);
  ------------------
  |  | 1051|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4533|  23.5k|        m_position += n;
 4534|  23.5k|        return *this;
 4535|  23.5k|    }

_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  16.8k|{
   89|  16.8k|    auto result = make_scan_result<Source, Args...>();
   90|  16.8k|    fill_scan_result(result,
   91|  16.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  16.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  16.8k|    return result;
   94|  16.8k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  50.4k|{
   44|  50.4k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1057|  50.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  50.4k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  16.8k|{
  131|  16.8k|    auto result = make_scan_result<Source, Args...>();
  132|  16.8k|    fill_scan_result(result,
  133|  16.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  16.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  16.8k|    return result;
  136|  16.8k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  50.4k|{
   60|  50.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1057|  50.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  50.4k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.84k|{
  171|  1.84k|    auto result = make_scan_result<Source, T>();
  172|  1.84k|    fill_scan_result(
  173|  1.84k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.84k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.84k|    return result;
  176|  1.84k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  5.52k|{
   72|  5.52k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1057|  5.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  5.52k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  16.8k|{
   89|  16.8k|    auto result = make_scan_result<Source, Args...>();
   90|  16.8k|    fill_scan_result(result,
   91|  16.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  16.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  16.8k|    return result;
   94|  16.8k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  16.8k|{
  131|  16.8k|    auto result = make_scan_result<Source, Args...>();
  132|  16.8k|    fill_scan_result(result,
  133|  16.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  16.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  16.8k|    return result;
  136|  16.8k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.84k|{
  171|  1.84k|    auto result = make_scan_result<Source, T>();
  172|  1.84k|    fill_scan_result(
  173|  1.84k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.84k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.84k|    return result;
  176|  1.84k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  16.8k|{
   89|  16.8k|    auto result = make_scan_result<Source, Args...>();
   90|  16.8k|    fill_scan_result(result,
   91|  16.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  16.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  16.8k|    return result;
   94|  16.8k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  16.8k|{
  131|  16.8k|    auto result = make_scan_result<Source, Args...>();
  132|  16.8k|    fill_scan_result(result,
  133|  16.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  16.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  16.8k|    return result;
  136|  16.8k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.84k|{
  171|  1.84k|    auto result = make_scan_result<Source, T>();
  172|  1.84k|    fill_scan_result(
  173|  1.84k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.84k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.84k|    return result;
  176|  1.84k|}
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  16.8k|{
   89|  16.8k|    auto result = make_scan_result<Source, Args...>();
   90|  16.8k|    fill_scan_result(result,
   91|  16.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  16.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  16.8k|    return result;
   94|  16.8k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  50.4k|{
   44|  50.4k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1057|  50.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  50.4k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  16.8k|{
  131|  16.8k|    auto result = make_scan_result<Source, Args...>();
  132|  16.8k|    fill_scan_result(result,
  133|  16.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  16.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  16.8k|    return result;
  136|  16.8k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  50.4k|{
   60|  50.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1057|  50.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  50.4k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.84k|{
  171|  1.84k|    auto result = make_scan_result<Source, T>();
  172|  1.84k|    fill_scan_result(
  173|  1.84k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.84k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.84k|    return result;
  176|  1.84k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  5.52k|{
   72|  5.52k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1057|  5.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  5.52k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  16.8k|{
   89|  16.8k|    auto result = make_scan_result<Source, Args...>();
   90|  16.8k|    fill_scan_result(result,
   91|  16.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  16.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  16.8k|    return result;
   94|  16.8k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  16.8k|{
  131|  16.8k|    auto result = make_scan_result<Source, Args...>();
  132|  16.8k|    fill_scan_result(result,
  133|  16.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  16.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  16.8k|    return result;
  136|  16.8k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.84k|{
  171|  1.84k|    auto result = make_scan_result<Source, T>();
  172|  1.84k|    fill_scan_result(
  173|  1.84k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.84k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.84k|    return result;
  176|  1.84k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  16.8k|{
   89|  16.8k|    auto result = make_scan_result<Source, Args...>();
   90|  16.8k|    fill_scan_result(result,
   91|  16.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  16.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  16.8k|    return result;
   94|  16.8k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  16.8k|{
  131|  16.8k|    auto result = make_scan_result<Source, Args...>();
  132|  16.8k|    fill_scan_result(result,
  133|  16.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  16.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  16.8k|    return result;
  136|  16.8k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.84k|{
  171|  1.84k|    auto result = make_scan_result<Source, T>();
  172|  1.84k|    fill_scan_result(
  173|  1.84k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.84k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.84k|    return result;
  176|  1.84k|}

_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|   103k|{
  250|   103k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|   103k|        .transform_error(impl::make_eof_scan_error);
  252|   103k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|   100k|{
  250|   100k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|   100k|        .transform_error(impl::make_eof_scan_error);
  252|   100k|}
_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   196k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   196k|{
  309|   196k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   196k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2179|  43.7k|{
 2180|  43.7k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2181|  43.7k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2187|  51.8k|{
 2188|  51.8k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2189|  51.8k|    return sync_after_vscan(source, n);
 2190|  51.8k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2197|  50.4k|{
 2198|  50.4k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2199|  50.4k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2205|  50.4k|{
 2206|  50.4k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2207|  50.4k|    return sync_after_vscan(source, n);
 2208|  50.4k|}
_ZN3scn2v46detail16chrono_scan_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3872|  63.7k|{
 3873|  63.7k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3873:9): [True: 34.5k, False: 29.1k]
  ------------------
 3874|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3875|  34.5k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3876|  34.5k|    }
 3877|       |
 3878|  29.1k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3879|  29.1k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3880|  29.1k|    auto begin = contiguous_ctx.begin();
 3881|  29.1k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3939|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12.8k, False: 16.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  12.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  12.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  12.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  12.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.8k|    }                                                  \
  |  |  |  | 3938|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3882|  16.2k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3883|  29.1k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3872|  63.7k|{
 3873|  63.7k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3873:9): [True: 34.5k, False: 29.1k]
  ------------------
 3874|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3875|  34.5k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3876|  34.5k|    }
 3877|       |
 3878|  29.1k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3879|  29.1k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3880|  29.1k|    auto begin = contiguous_ctx.begin();
 3881|  29.1k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3939|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12.8k, False: 16.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  12.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  12.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  12.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  12.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.8k|    }                                                  \
  |  |  |  | 3938|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3882|  16.2k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3883|  29.1k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3872|  63.7k|{
 3873|  63.7k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3873:9): [True: 34.5k, False: 29.1k]
  ------------------
 3874|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3875|  34.5k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3876|  34.5k|    }
 3877|       |
 3878|  29.1k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3879|  29.1k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3880|  29.1k|    auto begin = contiguous_ctx.begin();
 3881|  29.1k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3939|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12.8k, False: 16.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  12.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  12.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  12.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  12.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.8k|    }                                                  \
  |  |  |  | 3938|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3882|  16.2k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3883|  29.1k|}
_ZN3scn2v46detail16chrono_scan_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3872|  67.2k|{
 3873|  67.2k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3873:9): [True: 33.6k, False: 33.6k]
  ------------------
 3874|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3875|  33.6k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3876|  33.6k|    }
 3877|       |
 3878|  33.6k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3879|  33.6k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3880|  33.6k|    auto begin = contiguous_ctx.begin();
 3881|  33.6k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3939|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 25.7k, False: 7.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  25.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  25.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  25.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  25.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  25.7k|    }                                                  \
  |  |  |  | 3938|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3882|  7.83k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3883|  33.6k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3872|  67.2k|{
 3873|  67.2k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3873:9): [True: 33.6k, False: 33.6k]
  ------------------
 3874|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3875|  33.6k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3876|  33.6k|    }
 3877|       |
 3878|  33.6k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3879|  33.6k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3880|  33.6k|    auto begin = contiguous_ctx.begin();
 3881|  33.6k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3939|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 25.7k, False: 7.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  25.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  25.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  25.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  25.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  25.7k|    }                                                  \
  |  |  |  | 3938|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3882|  7.83k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3883|  33.6k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3872|  67.2k|{
 3873|  67.2k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3873:9): [True: 33.6k, False: 33.6k]
  ------------------
 3874|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3875|  33.6k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3876|  33.6k|    }
 3877|       |
 3878|  33.6k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3879|  33.6k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3880|  33.6k|    auto begin = contiguous_ctx.begin();
 3881|  33.6k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3939|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 25.7k, False: 7.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  25.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  25.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  25.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  25.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  25.7k|    }                                                  \
  |  |  |  | 3938|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3882|  7.83k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3883|  33.6k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   191k|{
  215|   191k|    return find_classic_impl(
  216|   191k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   191k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   191k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|  16.5k|{
  329|  16.5k|    SCN_UNLIKELY_ATTR
  330|  16.5k|    return e;
  331|  16.5k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2148|  43.7k|{
 2149|  43.7k|    return vscan_internal(source, format, args);
 2150|  43.7k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2154|  51.8k|{
 2155|  51.8k|    auto n = vscan_internal(source, format, args);
 2156|  51.8k|    return sync_after_vscan(source, n);
 2157|  51.8k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2162|  50.4k|{
 2163|  50.4k|    return vscan_internal(source, format, args);
 2164|  50.4k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2168|  50.4k|{
 2169|  50.4k|    auto n = vscan_internal(source, format, args);
 2170|  50.4k|    return sync_after_vscan(source, n);
 2171|  50.4k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2234|  2.76k|{
 2235|  2.76k|    return vscan_value_internal(source, arg);
 2236|  2.76k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2239|  2.76k|{
 2240|  2.76k|    auto n = vscan_value_internal(source, arg);
 2241|  2.76k|    return sync_after_vscan(source, n);
 2242|  2.76k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2247|  5.52k|{
 2248|  5.52k|    return vscan_value_internal(source, arg);
 2249|  5.52k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2253|  5.52k|{
 2254|  5.52k|    auto n = vscan_value_internal(source, arg);
 2255|  5.52k|    return sync_after_vscan(source, n);
 2256|  5.52k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  93.1k|{
  118|  93.1k|    static_assert(sizeof(*source.data()) == 1);
  119|  93.1k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1051|  93.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  93.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  93.1k|    uint64_t word{};
  121|  93.1k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  93.1k|    return has_byte_greater(word, 127) != 0;
  124|  93.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   191k|{
  131|   191k|    auto it = source.begin();
  132|       |
  133|   197k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 93.1k, False: 104k]
  ------------------
  134|  93.1k|        auto sv =
  135|  93.1k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  93.1k|                .substr(0, 8);
  137|       |
  138|  93.1k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 80.0k, False: 13.1k]
  ------------------
  139|  80.0k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  80.0k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  80.0k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 74.9k, False: 5.10k]
  ------------------
  142|  74.9k|                break;
  143|  74.9k|            }
  144|  5.10k|            continue;
  145|  80.0k|        }
  146|       |
  147|  19.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 17.6k, False: 1.36k]
  ------------------
  148|  17.6k|            auto tmp =
  149|  17.6k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  17.6k|            auto res = get_next_code_point(tmp);
  151|  17.6k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 11.7k, False: 5.92k]
  ------------------
  152|  11.7k|                return it;
  153|  11.7k|            }
  154|  5.92k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  5.92k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  5.92k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1052|  5.92k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|  5.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  5.92k|        }
  158|  13.1k|    }
  159|       |
  160|   179k|    return detail::make_string_view_iterator(source, it);
  161|   191k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   176k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  17.6k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2045|   103k|{
 2046|   103k|    const auto argcount = args.size();
 2047|   103k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2047:9): [True: 0, False: 103k]
  |  Branch (2047:60): [True: 0, False: 0]
  ------------------
 2048|      0|        auto arg = args.get(0);
 2049|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2050|      0|    }
 2051|       |
 2052|   103k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2052:9): [True: 0, False: 103k]
  ------------------
 2053|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2054|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2056|      0|        return vscan_parse_format_string(format, handler);
 2057|      0|    }
 2058|       |
 2059|   103k|    SCN_UNLIKELY_ATTR
 2060|   103k|    {
 2061|   103k|        auto handler = format_handler<false, CharT>{
 2062|   103k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   103k|    static_cast<    \
  |  | 1056|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   103k|    static_cast<    \
  |  | 1056|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   103k|        return vscan_parse_format_string(format, handler);
 2064|   103k|    }
 2065|   103k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1593|   191k|{
 1594|   191k|    if (format.size() != 2) {
  ------------------
  |  Branch (1594:9): [True: 191k, False: 0]
  ------------------
 1595|   191k|        return false;
 1596|   191k|    }
 1597|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1597:12): [True: 0, False: 0]
  |  Branch (1597:39): [True: 0, False: 0]
  ------------------
 1598|   191k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1626|  2.76k|{
 1627|  2.76k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 2.76k]
  |  |  ------------------
  ------------------
 1628|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1629|      0|                                             "Argument #0 not found");
 1630|      0|    }
 1631|       |
 1632|  2.76k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  985|  2.76k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 2.76k]
  |  |  ------------------
  ------------------
 1633|      0|        auto reader = impl::default_arg_reader<
 1634|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1635|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1636|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1637|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1638|      0|    }
 1639|       |
 1640|  2.76k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1641|  2.76k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1055|  2.76k|    static_cast<    \
  |  | 1056|  2.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1642|  2.76k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|  2.76k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  2.76k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  2.76k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.76k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.76k|    }                                                  \
  |  |  |  | 3938|  2.76k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1643|      0|    return it.position();
 1644|  2.76k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1869|  87.4k|        : format_handler_base{argcount},
 1870|  87.4k|          parse_ctx{source_tag<Source&&>, format},
 1871|  87.4k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  87.4k|    static_cast<    \
  |  | 1056|  87.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  87.4k|    static_cast<    \
  |  | 1056|  87.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|  87.4k|    {
 1873|  87.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1687|   392k|    format_handler_base(size_t argcount) : args_count(argcount)
 1688|   392k|    {
 1689|   392k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  986|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 392k]
  |  |  ------------------
  ------------------
 1690|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1691|      0|        }
 1692|   392k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1820|  87.4k|        : contiguous_ctx(source, args, loc)
 1821|  87.4k|    {
 1822|  87.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|  87.4k|{
 2011|  87.4k|    const auto beg = handler.get_ctx().begin();
 2012|  87.4k|    detail::parse_format_string<false>(format, handler);
 2013|  87.4k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 38.6k, False: 48.8k]
  |  |  ------------------
  ------------------
 2014|  38.6k|        return unexpected(err.error());
 2015|  38.6k|    }
 2016|  48.8k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|  87.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1994|   272k|    {
 1995|   272k|        return ctx.get();
 1996|   272k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1825|   272k|    {
 1826|   272k|        return contiguous_ctx;
 1827|   272k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1876|   136k|    {
 1877|   136k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 136k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   136k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1736|   232k|    {
 1737|   232k|        error = unexpected(err);
 1738|   232k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1648|  87.4k|{
 1649|  87.4k|    auto arg = ctx.arg(id);
 1650|  87.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 87.4k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|  87.4k|    return arg;
 1654|  87.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1762|   392k|    {
 1763|   392k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  986|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 392k]
  |  |  ------------------
  ------------------
 1764|      0|            on_error({scan_error::invalid_format_string,
 1765|      0|                      "Argument ID out-of-range"});
 1766|      0|            return;
 1767|      0|        }
 1768|       |
 1769|   392k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  986|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 392k]
  |  |  ------------------
  ------------------
 1770|      0|            on_error({scan_error::invalid_format_string,
 1771|      0|                      "Argument with this ID has already been scanned"});
 1772|      0|        }
 1773|       |
 1774|   392k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  985|   392k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 392k, False: 0]
  |  |  ------------------
  ------------------
 1775|   392k|            visited_args_lower64 |= (1ull << id);
 1776|   392k|            return;
 1777|   392k|        }
 1778|       |
 1779|      0|        id -= 64;
 1780|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1781|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1746|   392k|    {
 1747|   392k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  986|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 392k]
  |  |  ------------------
  ------------------
 1748|      0|            on_error({scan_error::invalid_format_string,
 1749|      0|                      "Argument ID out-of-range"});
 1750|      0|            return false;
 1751|      0|        }
 1752|       |
 1753|   392k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  985|   392k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 392k, False: 0]
  |  |  ------------------
  ------------------
 1754|   392k|            return (visited_args_lower64 >> id) & 1ull;
 1755|   392k|        }
 1756|       |
 1757|      0|        id -= 64;
 1758|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1759|   392k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1916|  87.4k|    {
 1917|  87.4k|        return parse_ctx.next_arg_id();
 1918|  87.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1956|  87.4k|    {
 1957|  87.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|  87.4k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|  87.4k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 87.4k, False: 0]
  ------------------
 1961|  87.4k|            parse_ctx.advance_to(begin);
 1962|  87.4k|            on_visit_scan_arg(
 1963|  87.4k|                impl::custom_reader<detail::default_context<char_type>>{
 1964|  87.4k|                    parse_ctx, get_custom_ctx()},
 1965|  87.4k|                arg);
 1966|  87.4k|            return parse_ctx.begin();
 1967|  87.4k|        }
 1968|       |
 1969|      0|        auto specs = detail::format_specs{};
 1970|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|      0|            detail::get_arg_type(arg)};
 1973|       |
 1974|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1975|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 0]
  |  Branch (1975:29): [True: 0, False: 0]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1982|      0|            return parse_ctx.begin();
 1983|      0|        }
 1984|      0|        parse_ctx.advance_to(begin);
 1985|       |
 1986|      0|        on_visit_scan_arg(
 1987|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|      0|                                           get_ctx().locale()},
 1989|      0|            arg);
 1990|      0|        return parse_ctx.begin();
 1991|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1927|  87.4k|    {
 1928|  87.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 87.4k]
  |  Branch (1928:13): [True: 0, False: 87.4k]
  |  Branch (1928:29): [True: 0, False: 87.4k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|  87.4k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|  87.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 38.6k, False: 48.8k]
  |  |  ------------------
  ------------------
 1935|  38.6k|            on_error(r.error());
 1936|  38.6k|        }
 1937|  48.8k|        else {
 1938|  48.8k|            get_ctx().advance_to(*r);
 1939|  48.8k|        }
 1940|  87.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE14get_custom_ctxEv:
 1998|  87.4k|    {
 1999|  87.4k|        return ctx.get_custom();
 2000|  87.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE10get_customEv:
 1829|  87.4k|    {
 1830|  87.4k|        if (!buffer) {
  ------------------
  |  Branch (1830:13): [True: 87.4k, False: 0]
  ------------------
 1831|  87.4k|            buffer.emplace(detail::make_string_view_from_pointers(
 1832|  87.4k|                ranges::data(contiguous_ctx.underlying_range()),
 1833|  87.4k|                ranges::data(contiguous_ctx.underlying_range()) +
 1834|  87.4k|                    ranges::size(contiguous_ctx.underlying_range())));
 1835|  87.4k|        }
 1836|  87.4k|        auto it = buffer->get().begin();
 1837|  87.4k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1838|  87.4k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1839|  87.4k|        return *custom_ctx;
 1840|  87.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1695|   392k|    {
 1696|   392k|        {
 1697|   392k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1697:45): [True: 0, False: 392k]
  ------------------
 1698|   392k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1698:35): [True: 0, False: 392k]
  ------------------
 1699|   392k|                                      ? std::numeric_limits<uint64_t>::max()
 1700|   392k|                                      : (1ull << args_count_lower64) - 1;
 1701|       |
 1702|   392k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1702:17): [True: 0, False: 392k]
  ------------------
 1703|      0|                return on_error({scan_error::invalid_format_string,
 1704|      0|                                 "Argument list not exhausted"});
 1705|      0|            }
 1706|   392k|        }
 1707|       |
 1708|   392k|        if (args_count < 64) {
  ------------------
  |  Branch (1708:13): [True: 392k, False: 0]
  ------------------
 1709|   392k|            return;
 1710|   392k|        }
 1711|       |
 1712|      0|        auto last_args_count = args_count - 64;
 1713|      0|        for (auto it = visited_args_upper.begin();
 1714|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1714:14): [True: 0, False: 0]
  ------------------
 1715|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1715:17): [True: 0, False: 0]
  ------------------
 1716|      0|                return on_error({scan_error::invalid_format_string,
 1717|      0|                                 "Argument list not exhausted"});
 1718|      0|            }
 1719|      0|            last_args_count -= 8;
 1720|      0|        }
 1721|       |
 1722|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1723|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1723:13): [True: 0, False: 0]
  ------------------
 1724|      0|            return on_error({scan_error::invalid_format_string,
 1725|      0|                             "Argument list not exhausted"});
 1726|      0|        }
 1727|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1741|  1.57M|    {
 1742|  1.57M|        return error;
 1743|  1.57M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1869|   103k|        : format_handler_base{argcount},
 1870|   103k|          parse_ctx{source_tag<Source&&>, format},
 1871|   103k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   103k|    static_cast<    \
  |  | 1056|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   103k|    static_cast<    \
  |  | 1056|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|   103k|    {
 1873|   103k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1796|   103k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1055|   103k|    static_cast<    \
  |  | 1056|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1797|   103k|    {
 1798|   103k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|   103k|{
 2011|   103k|    const auto beg = handler.get_ctx().begin();
 2012|   103k|    detail::parse_format_string<false>(format, handler);
 2013|   103k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 38.6k, False: 64.9k]
  |  |  ------------------
  ------------------
 2014|  38.6k|        return unexpected(err.error());
 2015|  38.6k|    }
 2016|  64.9k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|   103k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1994|   337k|    {
 1995|   337k|        return ctx.get();
 1996|   337k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1801|   337k|    {
 1802|   337k|        return ctx;
 1803|   337k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1876|   168k|    {
 1877|   168k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 168k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   168k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1648|   103k|{
 1649|   103k|    auto arg = ctx.arg(id);
 1650|   103k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|   103k|    return arg;
 1654|   103k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1916|   103k|    {
 1917|   103k|        return parse_ctx.next_arg_id();
 1918|   103k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1956|   103k|    {
 1957|   103k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|   103k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|   103k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 103k, False: 0]
  ------------------
 1961|   103k|            parse_ctx.advance_to(begin);
 1962|   103k|            on_visit_scan_arg(
 1963|   103k|                impl::custom_reader<detail::default_context<char_type>>{
 1964|   103k|                    parse_ctx, get_custom_ctx()},
 1965|   103k|                arg);
 1966|   103k|            return parse_ctx.begin();
 1967|   103k|        }
 1968|       |
 1969|      0|        auto specs = detail::format_specs{};
 1970|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|      0|            detail::get_arg_type(arg)};
 1973|       |
 1974|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1975|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 0]
  |  Branch (1975:29): [True: 0, False: 0]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1982|      0|            return parse_ctx.begin();
 1983|      0|        }
 1984|      0|        parse_ctx.advance_to(begin);
 1985|       |
 1986|      0|        on_visit_scan_arg(
 1987|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|      0|                                           get_ctx().locale()},
 1989|      0|            arg);
 1990|      0|        return parse_ctx.begin();
 1991|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1927|   103k|    {
 1928|   103k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 103k]
  |  Branch (1928:13): [True: 0, False: 103k]
  |  Branch (1928:29): [True: 0, False: 103k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|   103k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|   103k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 38.6k, False: 64.9k]
  |  |  ------------------
  ------------------
 1935|  38.6k|            on_error(r.error());
 1936|  38.6k|        }
 1937|  64.9k|        else {
 1938|  64.9k|            get_ctx().advance_to(*r);
 1939|  64.9k|        }
 1940|   103k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE14get_custom_ctxEv:
 1998|   103k|    {
 1999|   103k|        return ctx.get_custom();
 2000|   103k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE10get_customEv:
 1805|   103k|    {
 1806|   103k|        return ctx;
 1807|   103k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2025|  87.4k|{
 2026|  87.4k|    const auto argcount = args.size();
 2027|  87.4k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2027:9): [True: 0, False: 87.4k]
  |  Branch (2027:60): [True: 0, False: 0]
  ------------------
 2028|      0|        auto arg = args.get(0);
 2029|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2030|      0|    }
 2031|       |
 2032|  87.4k|    auto handler = format_handler<true, CharT>{
 2033|  87.4k|        ranges::subrange<const CharT*>{source.data(),
 2034|  87.4k|                                       source.data() + source.size()},
 2035|  87.4k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  87.4k|    static_cast<    \
  |  | 1056|  87.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  87.4k|    static_cast<    \
  |  | 1056|  87.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2036|  87.4k|    return vscan_parse_format_string(format, handler);
 2037|  87.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1606|  2.76k|{
 1607|  2.76k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 2.76k]
  |  |  ------------------
  ------------------
 1608|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1609|      0|                                             "Argument #0 not found");
 1610|      0|    }
 1611|       |
 1612|  2.76k|    auto reader =
 1613|  2.76k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1614|  2.76k|            ranges::subrange<const CharT*>{source.data(),
 1615|  2.76k|                                           source.data() + source.size()},
 1616|  2.76k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1055|  2.76k|    static_cast<    \
  |  | 1056|  2.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1617|  2.76k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|  2.76k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  2.76k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  2.76k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.76k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.76k|    }                                                  \
  |  |  |  | 3938|  2.76k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1618|      0|    return ranges::distance(source.data(), it);
 1619|  2.76k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2125|   106k|{
 2126|   106k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  985|   106k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 64.9k, False: 41.4k]
  |  |  ------------------
  ------------------
 2127|  64.9k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  986|  64.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 64.9k]
  |  |  ------------------
  ------------------
 2128|      0|            return detail::unexpected_scan_error(
 2129|      0|                scan_error::invalid_source_state,
 2130|      0|                "Failed to sync with underlying source");
 2131|      0|        }
 2132|  64.9k|    }
 2133|  41.4k|    else {
 2134|  41.4k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  986|  41.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 41.4k]
  |  |  ------------------
  ------------------
 2135|      0|            return detail::unexpected_scan_error(
 2136|      0|                scan_error::invalid_source_state,
 2137|      0|                "Failed to sync with underlying source");
 2138|      0|        }
 2139|  41.4k|    }
 2140|   106k|    return result;
 2141|   106k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2025|   100k|{
 2026|   100k|    const auto argcount = args.size();
 2027|   100k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2027:9): [True: 0, False: 100k]
  |  Branch (2027:60): [True: 0, False: 0]
  ------------------
 2028|      0|        auto arg = args.get(0);
 2029|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2030|      0|    }
 2031|       |
 2032|   100k|    auto handler = format_handler<true, CharT>{
 2033|   100k|        ranges::subrange<const CharT*>{source.data(),
 2034|   100k|                                       source.data() + source.size()},
 2035|   100k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   100k|    static_cast<    \
  |  | 1056|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   100k|    static_cast<    \
  |  | 1056|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2036|   100k|    return vscan_parse_format_string(format, handler);
 2037|   100k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1593|   201k|{
 1594|   201k|    if (format.size() != 2) {
  ------------------
  |  Branch (1594:9): [True: 201k, False: 0]
  ------------------
 1595|   201k|        return false;
 1596|   201k|    }
 1597|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1597:12): [True: 0, False: 0]
  |  Branch (1597:39): [True: 0, False: 0]
  ------------------
 1598|   201k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1606|  5.52k|{
 1607|  5.52k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  5.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 5.52k]
  |  |  ------------------
  ------------------
 1608|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1609|      0|                                             "Argument #0 not found");
 1610|      0|    }
 1611|       |
 1612|  5.52k|    auto reader =
 1613|  5.52k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1614|  5.52k|            ranges::subrange<const CharT*>{source.data(),
 1615|  5.52k|                                           source.data() + source.size()},
 1616|  5.52k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1055|  5.52k|    static_cast<    \
  |  | 1056|  5.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1617|  5.52k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|  5.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  5.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  5.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  5.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 5.52k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  5.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  5.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.52k|    }                                                  \
  |  |  |  | 3938|  5.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1618|      0|    return ranges::distance(source.data(), it);
 1619|  5.52k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1869|   100k|        : format_handler_base{argcount},
 1870|   100k|          parse_ctx{source_tag<Source&&>, format},
 1871|   100k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   100k|    static_cast<    \
  |  | 1056|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   100k|    static_cast<    \
  |  | 1056|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|   100k|    {
 1873|   100k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1820|   100k|        : contiguous_ctx(source, args, loc)
 1821|   100k|    {
 1822|   100k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|   100k|{
 2011|   100k|    const auto beg = handler.get_ctx().begin();
 2012|   100k|    detail::parse_format_string<false>(format, handler);
 2013|   100k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 77.3k, False: 23.5k]
  |  |  ------------------
  ------------------
 2014|  77.3k|        return unexpected(err.error());
 2015|  77.3k|    }
 2016|  23.5k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|   100k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1994|   248k|    {
 1995|   248k|        return ctx.get();
 1996|   248k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1825|   248k|    {
 1826|   248k|        return contiguous_ctx;
 1827|   248k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1876|   124k|    {
 1877|   124k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 124k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   124k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1648|   100k|{
 1649|   100k|    auto arg = ctx.arg(id);
 1650|   100k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|   100k|    return arg;
 1654|   100k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1916|   100k|    {
 1917|   100k|        return parse_ctx.next_arg_id();
 1918|   100k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1956|   100k|    {
 1957|   100k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|   100k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|   100k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 100k, False: 0]
  ------------------
 1961|   100k|            parse_ctx.advance_to(begin);
 1962|   100k|            on_visit_scan_arg(
 1963|   100k|                impl::custom_reader<detail::default_context<char_type>>{
 1964|   100k|                    parse_ctx, get_custom_ctx()},
 1965|   100k|                arg);
 1966|   100k|            return parse_ctx.begin();
 1967|   100k|        }
 1968|       |
 1969|      0|        auto specs = detail::format_specs{};
 1970|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|      0|            detail::get_arg_type(arg)};
 1973|       |
 1974|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1975|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 0]
  |  Branch (1975:29): [True: 0, False: 0]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1982|      0|            return parse_ctx.begin();
 1983|      0|        }
 1984|      0|        parse_ctx.advance_to(begin);
 1985|       |
 1986|      0|        on_visit_scan_arg(
 1987|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|      0|                                           get_ctx().locale()},
 1989|      0|            arg);
 1990|      0|        return parse_ctx.begin();
 1991|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1927|   100k|    {
 1928|   100k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 100k]
  |  Branch (1928:13): [True: 0, False: 100k]
  |  Branch (1928:29): [True: 0, False: 100k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|   100k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|   100k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 77.3k, False: 23.5k]
  |  |  ------------------
  ------------------
 1935|  77.3k|            on_error(r.error());
 1936|  77.3k|        }
 1937|  23.5k|        else {
 1938|  23.5k|            get_ctx().advance_to(*r);
 1939|  23.5k|        }
 1940|   100k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE14get_custom_ctxEv:
 1998|   100k|    {
 1999|   100k|        return ctx.get_custom();
 2000|   100k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE10get_customEv:
 1829|   100k|    {
 1830|   100k|        if (!buffer) {
  ------------------
  |  Branch (1830:13): [True: 100k, False: 0]
  ------------------
 1831|   100k|            buffer.emplace(detail::make_string_view_from_pointers(
 1832|   100k|                ranges::data(contiguous_ctx.underlying_range()),
 1833|   100k|                ranges::data(contiguous_ctx.underlying_range()) +
 1834|   100k|                    ranges::size(contiguous_ctx.underlying_range())));
 1835|   100k|        }
 1836|   100k|        auto it = buffer->get().begin();
 1837|   100k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1838|   100k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1839|   100k|        return *custom_ctx;
 1840|   100k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2045|   100k|{
 2046|   100k|    const auto argcount = args.size();
 2047|   100k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2047:9): [True: 0, False: 100k]
  |  Branch (2047:60): [True: 0, False: 0]
  ------------------
 2048|      0|        auto arg = args.get(0);
 2049|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2050|      0|    }
 2051|       |
 2052|   100k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2052:9): [True: 0, False: 100k]
  ------------------
 2053|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2054|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2056|      0|        return vscan_parse_format_string(format, handler);
 2057|      0|    }
 2058|       |
 2059|   100k|    SCN_UNLIKELY_ATTR
 2060|   100k|    {
 2061|   100k|        auto handler = format_handler<false, CharT>{
 2062|   100k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   100k|    static_cast<    \
  |  | 1056|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   100k|    static_cast<    \
  |  | 1056|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   100k|        return vscan_parse_format_string(format, handler);
 2064|   100k|    }
 2065|   100k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1626|  5.52k|{
 1627|  5.52k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  5.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 5.52k]
  |  |  ------------------
  ------------------
 1628|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1629|      0|                                             "Argument #0 not found");
 1630|      0|    }
 1631|       |
 1632|  5.52k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  985|  5.52k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 5.52k]
  |  |  ------------------
  ------------------
 1633|      0|        auto reader = impl::default_arg_reader<
 1634|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1635|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1636|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1637|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1638|      0|    }
 1639|       |
 1640|  5.52k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1641|  5.52k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1055|  5.52k|    static_cast<    \
  |  | 1056|  5.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1642|  5.52k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|  5.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  5.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  5.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  5.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 5.52k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  5.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  5.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.52k|    }                                                  \
  |  |  |  | 3938|  5.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1643|      0|    return it.position();
 1644|  5.52k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1869|   100k|        : format_handler_base{argcount},
 1870|   100k|          parse_ctx{source_tag<Source&&>, format},
 1871|   100k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   100k|    static_cast<    \
  |  | 1056|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   100k|    static_cast<    \
  |  | 1056|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|   100k|    {
 1873|   100k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1796|   100k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1055|   100k|    static_cast<    \
  |  | 1056|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1797|   100k|    {
 1798|   100k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|   100k|{
 2011|   100k|    const auto beg = handler.get_ctx().begin();
 2012|   100k|    detail::parse_format_string<false>(format, handler);
 2013|   100k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 77.3k, False: 23.5k]
  |  |  ------------------
  ------------------
 2014|  77.3k|        return unexpected(err.error());
 2015|  77.3k|    }
 2016|  23.5k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|   100k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1994|   248k|    {
 1995|   248k|        return ctx.get();
 1996|   248k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1801|   248k|    {
 1802|   248k|        return ctx;
 1803|   248k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1876|   124k|    {
 1877|   124k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 124k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   124k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1648|   100k|{
 1649|   100k|    auto arg = ctx.arg(id);
 1650|   100k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|   100k|    return arg;
 1654|   100k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1916|   100k|    {
 1917|   100k|        return parse_ctx.next_arg_id();
 1918|   100k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1956|   100k|    {
 1957|   100k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|   100k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|   100k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 100k, False: 0]
  ------------------
 1961|   100k|            parse_ctx.advance_to(begin);
 1962|   100k|            on_visit_scan_arg(
 1963|   100k|                impl::custom_reader<detail::default_context<char_type>>{
 1964|   100k|                    parse_ctx, get_custom_ctx()},
 1965|   100k|                arg);
 1966|   100k|            return parse_ctx.begin();
 1967|   100k|        }
 1968|       |
 1969|      0|        auto specs = detail::format_specs{};
 1970|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|      0|            detail::get_arg_type(arg)};
 1973|       |
 1974|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1975|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 0]
  |  Branch (1975:29): [True: 0, False: 0]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1982|      0|            return parse_ctx.begin();
 1983|      0|        }
 1984|      0|        parse_ctx.advance_to(begin);
 1985|       |
 1986|      0|        on_visit_scan_arg(
 1987|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|      0|                                           get_ctx().locale()},
 1989|      0|            arg);
 1990|      0|        return parse_ctx.begin();
 1991|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1927|   100k|    {
 1928|   100k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 100k]
  |  Branch (1928:13): [True: 0, False: 100k]
  |  Branch (1928:29): [True: 0, False: 100k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|   100k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|   100k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 77.3k, False: 23.5k]
  |  |  ------------------
  ------------------
 1935|  77.3k|            on_error(r.error());
 1936|  77.3k|        }
 1937|  23.5k|        else {
 1938|  23.5k|            get_ctx().advance_to(*r);
 1939|  23.5k|        }
 1940|   100k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE14get_custom_ctxEv:
 1998|   100k|    {
 1999|   100k|        return ctx.get_custom();
 2000|   100k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE10get_customEv:
 1805|   100k|    {
 1806|   100k|        return ctx;
 1807|   100k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2125|   106k|{
 2126|   106k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  985|   106k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 23.5k, False: 82.8k]
  |  |  ------------------
  ------------------
 2127|  23.5k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  986|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 23.5k]
  |  |  ------------------
  ------------------
 2128|      0|            return detail::unexpected_scan_error(
 2129|      0|                scan_error::invalid_source_state,
 2130|      0|                "Failed to sync with underlying source");
 2131|      0|        }
 2132|  23.5k|    }
 2133|  82.8k|    else {
 2134|  82.8k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  986|  82.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 82.8k]
  |  |  ------------------
  ------------------
 2135|      0|            return detail::unexpected_scan_error(
 2136|      0|                scan_error::invalid_source_state,
 2137|      0|                "Failed to sync with underlying source");
 2138|      0|        }
 2139|  82.8k|    }
 2140|   106k|    return result;
 2141|   106k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2071|  2.76k|{
 2072|  2.76k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  2.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  2.76k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2071|  2.76k|{
 2072|  2.76k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  2.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  2.76k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2071|  5.52k|{
 2072|  5.52k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  5.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  5.52k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2071|  5.52k|{
 2072|  5.52k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  5.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  5.52k|}
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3853|  34.5k|{
 3854|  34.5k|    {
 3855|  34.5k|        SCN_TRY(it,
  ------------------
  |  | 3939|  34.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  34.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  34.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  34.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 508, False: 34.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    508|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    508|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    508|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    508|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    508|    }                                                  \
  |  |  |  | 3938|  34.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  34.0k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  34.0k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  34.0k|    static_cast<    \
  |  | 1056|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  34.0k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  34.0k|        ctx.range(), t, ctx.locale());
 3862|  34.0k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  34.0k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.3k, False: 21.6k]
  |  |  ------------------
  ------------------
 3864|  12.3k|        return unexpected(e.error());
 3865|  12.3k|    }
 3866|  21.6k|    return r.get_iterator();
 3867|  34.0k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2997|  34.0k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  34.0k|    static_cast<    \
  |  | 1056|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  34.0k|          m_begin(ranges::begin(m_range)),
 2999|  34.0k|          m_tm(t),
 3000|  34.0k|          m_loc(loc)
 3001|  34.0k|    {
 3002|  34.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3648|  11.5k|    {
 3649|  11.5k|        set_error({scan_error::invalid_format_string, msg});
 3650|  11.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3653|  49.1k|    {
 3654|  49.1k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 12.3k, False: 36.7k]
  ------------------
 3655|  12.3k|            m_error = unexpected(e);
 3656|  12.3k|        }
 3657|  49.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3005|  35.5k|    {
 3006|  59.2k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 35.5k, False: 23.7k]
  ------------------
 3007|  35.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 210, False: 35.2k]
  ------------------
 3008|    210|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    210|            }
 3010|  35.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 11.5k, False: 23.7k]
  ------------------
 3011|  11.5k|                return on_error("Invalid literal character");
 3012|  11.5k|            }
 3013|  23.7k|            ++beg;
 3014|  23.7k|            ++m_begin;
 3015|  23.7k|        }
 3016|  35.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3035|  3.90k|    {
 3036|  3.90k|#if !SCN_DISABLE_LOCALE
 3037|  3.90k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 3.90k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  3.90k|#endif
 3044|       |
 3045|  3.90k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  3.90k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  3.90k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  3.90k|    {
 2509|  3.90k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  3.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.90k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  3.90k|        t.tm_year = y - 1900;
 2514|  3.90k|        st.set_full_year(h);
 2515|  3.90k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3671|  60.9k|    {
 3672|  60.9k|        int digits_read = 0;
 3673|  60.9k|        int accumulator = 0;
 3674|   105k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 105k, False: 424]
  ------------------
 3675|   105k|            const auto ch = *m_begin;
 3676|   105k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 30.8k, False: 74.5k]
  |  Branch (3676:36): [True: 20.3k, False: 54.2k]
  ------------------
 3677|  51.2k|                break;
 3678|  51.2k|            }
 3679|  54.2k|            ++m_begin;
 3680|  54.2k|            ++digits_read;
 3681|  54.2k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  54.2k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 9.31k, False: 44.9k]
  ------------------
 3683|  9.31k|                break;
 3684|  9.31k|            }
 3685|  54.2k|        }
 3686|  60.9k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 18.4k, False: 42.5k]
  ------------------
 3687|  18.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  18.4k|                                 "Too few integer digits"});
 3689|  18.4k|            return -1;
 3690|  18.4k|        }
 3691|  42.5k|        return accumulator;
 3692|  60.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3049|  6.35k|    {
 3050|  6.35k|#if !SCN_DISABLE_LOCALE
 3051|  6.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 6.35k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  6.35k|#endif
 3059|       |
 3060|  6.35k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  6.35k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  6.35k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  6.35k|    {
 2526|  6.35k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.74k, False: 4.61k]
  |  |  |  Branch (986:45): [True: 1.74k, False: 4.61k]
  |  |  |  Branch (986:45): [True: 0, False: 4.61k]
  |  |  ------------------
  ------------------
 2527|  1.74k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  1.74k|                                "Invalid value for tm_year"});
 2529|  1.74k|        }
 2530|  4.61k|        st.short_year_value = y;
 2531|  4.61k|        st.set_short_year(h);
 2532|  4.61k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3092|  4.88k|    {
 3093|  4.88k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.88k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.88k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.88k|#endif
 3101|       |
 3102|  4.88k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.88k|            {"January", 1},
 3104|  4.88k|            {"February", 2},
 3105|  4.88k|            {"March", 3},
 3106|  4.88k|            {"April", 4},
 3107|  4.88k|            {"May", 5},
 3108|  4.88k|            {"June", 6},
 3109|  4.88k|            {"July", 7},
 3110|  4.88k|            {"August", 8},
 3111|  4.88k|            {"September", 9},
 3112|  4.88k|            {"October", 10},
 3113|  4.88k|            {"November", 11},
 3114|  4.88k|            {"December", 12},
 3115|  4.88k|        }};
 3116|  4.88k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 88, False: 4.79k]
  ------------------
 3117|     88|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     88|        }
 3119|  4.79k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.79k|            {"Jan", 1},
 3121|  4.79k|            {"Feb", 2},
 3122|  4.79k|            {"Mar", 3},
 3123|  4.79k|            {"Apr", 4},
 3124|  4.79k|            {"Jun", 6},
 3125|  4.79k|            {"Jul", 7},
 3126|  4.79k|            {"Aug", 8},
 3127|  4.79k|            {"Sep", 9},
 3128|  4.79k|            {"Oct", 10},
 3129|  4.79k|            {"Nov", 11},
 3130|  4.79k|            {"Dec", 12},
 3131|  4.79k|        }};
 3132|  4.79k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 3.02k, False: 1.76k]
  ------------------
 3133|  3.02k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|  3.02k|        }
 3135|  1.76k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  1.76k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  11.6k|    {
 2499|  11.6k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  20.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.98k, False: 8.68k]
  |  |  |  Branch (986:45): [True: 2.86k, False: 8.80k]
  |  |  |  Branch (986:45): [True: 124, False: 8.68k]
  |  |  ------------------
  ------------------
 2500|  2.98k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  2.98k|                                "Invalid value for tm_mon"});
 2502|  2.98k|        }
 2503|  8.68k|        t.tm_mon = m - 1;
 2504|  8.68k|        st.set_mon(h);
 2505|  8.68k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.88k|    {
 3710|  4.88k|        auto start_it = m_begin;
 3711|  4.88k|        std::size_t options_available = N;
 3712|  4.88k|        std::size_t chars_consumed = 0;
 3713|  19.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 14.5k, False: 4.72k]
  ------------------
 3714|  19.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 14.4k, False: 88]
  ------------------
 3715|  14.4k|            std::size_t i = 0;
 3716|  14.4k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 68, False: 14.4k]
  ------------------
 3717|     68|                options_available = 0;
 3718|     68|                break;
 3719|     68|            }
 3720|  14.4k|            const auto ch = *m_begin;
 3721|  14.4k|            ++m_begin;
 3722|  89.0k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 74.6k, False: 14.4k]
  ------------------
 3723|  74.6k|                const auto cmp = static_cast<unsigned>(
 3724|  74.6k|                    ch ^ options[i].first[chars_consumed]);
 3725|  74.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 74.6k]
  ------------------
 3726|  74.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 61.5k, False: 13.0k]
  |  Branch (3726:34): [True: 58.3k, False: 3.20k]
  ------------------
 3727|  58.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  58.3k|                                options.end());
 3729|  58.3k|                    --options_available;
 3730|  58.3k|                    continue;
 3731|  58.3k|                }
 3732|  16.2k|                ++i;
 3733|  16.2k|            }
 3734|  14.4k|            ++chars_consumed;
 3735|  14.4k|        }
 3736|  4.88k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.79k, False: 88]
  ------------------
 3737|  4.79k|            m_begin = start_it;
 3738|  4.79k|            return std::nullopt;
 3739|  4.79k|        }
 3740|     88|        return options.front().second;
 3741|  4.88k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.79k|    {
 3710|  4.79k|        auto start_it = m_begin;
 3711|  4.79k|        std::size_t options_available = N;
 3712|  4.79k|        std::size_t chars_consumed = 0;
 3713|  15.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 14.2k, False: 1.70k]
  ------------------
 3714|  15.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 11.2k, False: 3.02k]
  ------------------
 3715|  11.2k|            std::size_t i = 0;
 3716|  11.2k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 60, False: 11.1k]
  ------------------
 3717|     60|                options_available = 0;
 3718|     60|                break;
 3719|     60|            }
 3720|  11.1k|            const auto ch = *m_begin;
 3721|  11.1k|            ++m_begin;
 3722|  70.2k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 59.1k, False: 11.1k]
  ------------------
 3723|  59.1k|                const auto cmp = static_cast<unsigned>(
 3724|  59.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  59.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 59.1k]
  ------------------
 3726|  59.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 52.7k, False: 6.38k]
  |  Branch (3726:34): [True: 49.6k, False: 3.10k]
  ------------------
 3727|  49.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.6k|                                options.end());
 3729|  49.6k|                    --options_available;
 3730|  49.6k|                    continue;
 3731|  49.6k|                }
 3732|  9.49k|                ++i;
 3733|  9.49k|            }
 3734|  11.1k|            ++chars_consumed;
 3735|  11.1k|        }
 3736|  4.79k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 1.76k, False: 3.02k]
  ------------------
 3737|  1.76k|            m_begin = start_it;
 3738|  1.76k|            return std::nullopt;
 3739|  1.76k|        }
 3740|  3.02k|        return options.front().second;
 3741|  4.79k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3138|  8.55k|    {
 3139|  8.55k|#if !SCN_DISABLE_LOCALE
 3140|  8.55k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 8.55k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  8.55k|#endif
 3147|       |
 3148|  8.55k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  8.55k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  8.55k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3170|  8.53k|    {
 3171|  8.53k|#if !SCN_DISABLE_LOCALE
 3172|  8.53k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 8.53k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  8.53k|#endif
 3179|       |
 3180|  8.53k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  8.53k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  8.53k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  8.53k|    {
 2489|  8.53k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.50k, False: 5.02k]
  |  |  |  Branch (986:45): [True: 3.42k, False: 5.11k]
  |  |  |  Branch (986:45): [True: 82, False: 5.02k]
  |  |  ------------------
  ------------------
 2490|  3.50k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  3.50k|                                "Invalid value for tm_mday"});
 2492|  3.50k|        }
 2493|  5.02k|        t.tm_mday = d;
 2494|  5.02k|        st.set_mday(h);
 2495|  5.02k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3185|  3.71k|    {
 3186|  3.71k|#if !SCN_DISABLE_LOCALE
 3187|  3.71k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.71k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.71k|#endif
 3194|       |
 3195|  3.71k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.71k|            {"Sunday", 0},
 3197|  3.71k|            {"Monday", 1},
 3198|  3.71k|            {"Tuesday", 2},
 3199|  3.71k|            {"Wednesday", 3},
 3200|  3.71k|            {"Thursday", 4},
 3201|  3.71k|            {"Friday", 5},
 3202|  3.71k|            {"Saturday", 6},
 3203|  3.71k|        }};
 3204|  3.71k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.71k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.71k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.71k|            {"Sun", 0},
 3209|  3.71k|            {"Mon", 1},
 3210|  3.71k|            {"Tue", 2},
 3211|  3.71k|            {"Wed", 3},
 3212|  3.71k|            {"Thu", 4},
 3213|  3.71k|            {"Fri", 5},
 3214|  3.71k|            {"Sat", 6},
 3215|  3.71k|        }};
 3216|  3.71k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 1.92k, False: 1.78k]
  ------------------
 3217|  1.92k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|  1.92k|        }
 3219|  1.78k|        return set_error(
 3220|  1.78k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.71k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2535|  1.92k|    {
 2536|  1.92k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  986|  3.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.92k]
  |  |  |  Branch (986:45): [True: 0, False: 1.92k]
  |  |  |  Branch (986:45): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 2537|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2538|      0|                                "Invalid value for tm_wday"});
 2539|      0|        }
 2540|  1.92k|        t.tm_wday = d;
 2541|  1.92k|        st.set_wday(h);
 2542|  1.92k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  7.42k|    {
 3710|  7.42k|        auto start_it = m_begin;
 3711|  7.42k|        std::size_t options_available = N;
 3712|  7.42k|        std::size_t chars_consumed = 0;
 3713|  25.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 19.6k, False: 5.44k]
  ------------------
 3714|  25.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 17.7k, False: 1.92k]
  ------------------
 3715|  17.7k|            std::size_t i = 0;
 3716|  17.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 54, False: 17.7k]
  ------------------
 3717|     54|                options_available = 0;
 3718|     54|                break;
 3719|     54|            }
 3720|  17.7k|            const auto ch = *m_begin;
 3721|  17.7k|            ++m_begin;
 3722|  79.9k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 62.2k, False: 17.7k]
  ------------------
 3723|  62.2k|                const auto cmp = static_cast<unsigned>(
 3724|  62.2k|                    ch ^ options[i].first[chars_consumed]);
 3725|  62.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 62.2k]
  ------------------
 3726|  62.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.0k, False: 12.2k]
  |  Branch (3726:34): [True: 49.9k, False: 80]
  ------------------
 3727|  49.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.9k|                                options.end());
 3729|  49.9k|                    --options_available;
 3730|  49.9k|                    continue;
 3731|  49.9k|                }
 3732|  12.3k|                ++i;
 3733|  12.3k|            }
 3734|  17.7k|            ++chars_consumed;
 3735|  17.7k|        }
 3736|  7.42k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 5.49k, False: 1.92k]
  ------------------
 3737|  5.49k|            m_begin = start_it;
 3738|  5.49k|            return std::nullopt;
 3739|  5.49k|        }
 3740|  1.92k|        return options.front().second;
 3741|  7.42k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 3259|  15.2k|    {
 3260|  15.2k|#if !SCN_DISABLE_LOCALE
 3261|  15.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 15.2k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  15.2k|#endif
 3268|       |
 3269|  15.2k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  15.2k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  15.2k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  15.2k|    {
 2469|  15.2k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.57k, False: 12.6k]
  |  |  |  Branch (986:45): [True: 2.36k, False: 12.8k]
  |  |  |  Branch (986:45): [True: 210, False: 12.6k]
  |  |  ------------------
  ------------------
 2470|  2.57k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  2.57k|                                  "Invalid value for tm_hour"});
 2472|  2.57k|        }
 2473|  12.6k|        t.tm_hour = h;
 2474|  12.6k|        st.set_hour24(hdl);
 2475|  12.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 3287|  15.1k|    {
 3288|  15.1k|#if !SCN_DISABLE_LOCALE
 3289|  15.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 15.1k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  15.1k|#endif
 3296|       |
 3297|  15.1k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  15.1k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  15.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  15.1k|    {
 2459|  15.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.93k, False: 12.2k]
  |  |  |  Branch (986:45): [True: 2.90k, False: 12.2k]
  |  |  |  Branch (986:45): [True: 26, False: 12.2k]
  |  |  ------------------
  ------------------
 2460|  2.93k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  2.93k|                                "Invalid value for tm_min"});
 2462|  2.93k|        }
 2463|  12.2k|        t.tm_min = m;
 2464|  12.2k|        st.set_min(h);
 2465|  12.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3301|  3.18k|    {
 3302|  3.18k|#if !SCN_DISABLE_LOCALE
 3303|  3.18k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.18k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.18k|#endif
 3310|       |
 3311|  3.18k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.18k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.18k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  3.18k|    {
 2449|  3.18k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  4.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.74k, False: 1.44k]
  |  |  |  Branch (986:45): [True: 1.74k, False: 1.44k]
  |  |  |  Branch (986:45): [True: 4, False: 1.44k]
  |  |  ------------------
  ------------------
 2450|  1.74k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  1.74k|                                "Invalid value for tm_sec"});
 2452|  1.74k|        }
 2453|  1.44k|        t.tm_sec = s;
 2454|  1.44k|        st.set_sec(h);
 2455|  1.44k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3543|  6.35k|    {
 3544|       |        // %m/%d/%y
 3545|  6.35k|        constexpr CharT slash = '/';
 3546|  6.35k|        on_dec_month();
 3547|  6.35k|        on_text(&slash, &slash + 1);
 3548|  6.35k|        on_day_of_month();
 3549|  6.35k|        on_text(&slash, &slash + 1);
 3550|  6.35k|        on_short_year();
 3551|  6.35k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3553|  2.11k|    {
 3554|       |        // %Y-%m-%d
 3555|  2.11k|        constexpr CharT dash = '-';
 3556|  2.11k|        on_full_year();
 3557|  2.11k|        on_text(&dash, &dash + 1);
 3558|  2.11k|        on_dec_month();
 3559|  2.11k|        on_text(&dash, &dash + 1);
 3560|  2.11k|        on_day_of_month();
 3561|  2.11k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3585|  11.9k|    {
 3586|       |        // %H:%M
 3587|  11.9k|        constexpr CharT colon = ':';
 3588|  11.9k|        on_24_hour();
 3589|  11.9k|        on_text(&colon, &colon + 1);
 3590|  11.9k|        on_minute();
 3591|  11.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3593|  3.18k|    {
 3594|       |        // %H:%M:%S
 3595|  3.18k|        constexpr CharT colon = ':';
 3596|  3.18k|        on_24_hour();
 3597|  3.18k|        on_text(&colon, &colon + 1);
 3598|  3.18k|        on_minute();
 3599|  3.18k|        on_text(&colon, &colon + 1);
 3600|  3.18k|        on_second();
 3601|  3.18k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3632|  21.6k|    {
 3633|  21.6k|        m_st.verify(*this);
 3634|  21.6k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 21.6k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  21.6k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 21.3k, False: 330]
  |  Branch (3637:37): [True: 4.59k, False: 16.7k]
  |  Branch (3637:60): [True: 0, False: 16.7k]
  ------------------
 3638|  4.59k|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|  4.59k|        }
 3640|  21.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2586|  9.49k|    {
 2587|  9.49k|        st.handle_short_year_and_century(t.tm_year, 1900);
 2588|  9.49k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3643|  68.2k|    {
 3644|  68.2k|        return m_error;
 3645|  68.2k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3660|  21.6k|    {
 3661|  21.6k|        return m_begin;
 3662|  21.6k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3853|  29.1k|{
 3854|  29.1k|    {
 3855|  29.1k|        SCN_TRY(it,
  ------------------
  |  | 3939|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 258, False: 28.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    258|    }                                                  \
  |  |  |  | 3938|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  28.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  28.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  28.9k|    static_cast<    \
  |  | 1056|  28.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  28.9k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  28.9k|        ctx.range(), t, ctx.locale());
 3862|  28.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  28.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.6k, False: 16.2k]
  |  |  ------------------
  ------------------
 3864|  12.6k|        return unexpected(e.error());
 3865|  12.6k|    }
 3866|  16.2k|    return r.get_iterator();
 3867|  28.9k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  87.4k|{
  250|  87.4k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  87.4k|        .transform_error(impl::make_eof_scan_error);
  252|  87.4k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2997|  28.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  28.9k|    static_cast<    \
  |  | 1056|  28.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  28.9k|          m_begin(ranges::begin(m_range)),
 2999|  28.9k|          m_tm(t),
 3000|  28.9k|          m_loc(loc)
 3001|  28.9k|    {
 3002|  28.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3648|  11.8k|    {
 3649|  11.8k|        set_error({scan_error::invalid_format_string, msg});
 3650|  11.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3653|  51.0k|    {
 3654|  51.0k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 12.6k, False: 38.4k]
  ------------------
 3655|  12.6k|            m_error = unexpected(e);
 3656|  12.6k|        }
 3657|  51.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3005|  26.0k|    {
 3006|  40.1k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 26.0k, False: 14.0k]
  ------------------
 3007|  26.0k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 164, False: 25.9k]
  ------------------
 3008|    164|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    164|            }
 3010|  25.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 11.8k, False: 14.0k]
  ------------------
 3011|  11.8k|                return on_error("Invalid literal character");
 3012|  11.8k|            }
 3013|  14.0k|            ++beg;
 3014|  14.0k|            ++m_begin;
 3015|  14.0k|        }
 3016|  26.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3035|  3.96k|    {
 3036|  3.96k|#if !SCN_DISABLE_LOCALE
 3037|  3.96k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 3.96k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  3.96k|#endif
 3044|       |
 3045|  3.96k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  3.96k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  3.96k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  3.96k|    {
 2509|  3.96k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  3.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.96k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  3.96k|        t.tm_year = y - 1900;
 2514|  3.96k|        st.set_full_year(h);
 2515|  3.96k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3671|  46.4k|    {
 3672|  46.4k|        int digits_read = 0;
 3673|  46.4k|        int accumulator = 0;
 3674|  75.8k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 75.5k, False: 346]
  ------------------
 3675|  75.5k|            const auto ch = *m_begin;
 3676|  75.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 22.4k, False: 53.0k]
  |  Branch (3676:36): [True: 19.1k, False: 33.9k]
  ------------------
 3677|  41.5k|                break;
 3678|  41.5k|            }
 3679|  33.9k|            ++m_begin;
 3680|  33.9k|            ++digits_read;
 3681|  33.9k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  33.9k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 4.56k, False: 29.3k]
  ------------------
 3683|  4.56k|                break;
 3684|  4.56k|            }
 3685|  33.9k|        }
 3686|  46.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 19.2k, False: 27.2k]
  ------------------
 3687|  19.2k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  19.2k|                                 "Too few integer digits"});
 3689|  19.2k|            return -1;
 3690|  19.2k|        }
 3691|  27.2k|        return accumulator;
 3692|  46.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3049|  1.93k|    {
 3050|  1.93k|#if !SCN_DISABLE_LOCALE
 3051|  1.93k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 1.93k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  1.93k|#endif
 3059|       |
 3060|  1.93k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  1.93k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  1.93k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  1.93k|    {
 2526|  1.93k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.79k, False: 140]
  |  |  |  Branch (986:45): [True: 1.79k, False: 140]
  |  |  |  Branch (986:45): [True: 0, False: 140]
  |  |  ------------------
  ------------------
 2527|  1.79k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  1.79k|                                "Invalid value for tm_year"});
 2529|  1.79k|        }
 2530|    140|        st.short_year_value = y;
 2531|    140|        st.set_short_year(h);
 2532|    140|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3092|  4.90k|    {
 3093|  4.90k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.90k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.90k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.90k|#endif
 3101|       |
 3102|  4.90k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.90k|            {"January", 1},
 3104|  4.90k|            {"February", 2},
 3105|  4.90k|            {"March", 3},
 3106|  4.90k|            {"April", 4},
 3107|  4.90k|            {"May", 5},
 3108|  4.90k|            {"June", 6},
 3109|  4.90k|            {"July", 7},
 3110|  4.90k|            {"August", 8},
 3111|  4.90k|            {"September", 9},
 3112|  4.90k|            {"October", 10},
 3113|  4.90k|            {"November", 11},
 3114|  4.90k|            {"December", 12},
 3115|  4.90k|        }};
 3116|  4.90k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 80, False: 4.82k]
  ------------------
 3117|     80|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     80|        }
 3119|  4.82k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.82k|            {"Jan", 1},
 3121|  4.82k|            {"Feb", 2},
 3122|  4.82k|            {"Mar", 3},
 3123|  4.82k|            {"Apr", 4},
 3124|  4.82k|            {"Jun", 6},
 3125|  4.82k|            {"Jul", 7},
 3126|  4.82k|            {"Aug", 8},
 3127|  4.82k|            {"Sep", 9},
 3128|  4.82k|            {"Oct", 10},
 3129|  4.82k|            {"Nov", 11},
 3130|  4.82k|            {"Dec", 12},
 3131|  4.82k|        }};
 3132|  4.82k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 3.02k, False: 1.79k]
  ------------------
 3133|  3.02k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|  3.02k|        }
 3135|  1.79k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  1.79k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  7.25k|    {
 2499|  7.25k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.09k, False: 4.16k]
  |  |  |  Branch (986:45): [True: 2.99k, False: 4.26k]
  |  |  |  Branch (986:45): [True: 104, False: 4.16k]
  |  |  ------------------
  ------------------
 2500|  3.09k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  3.09k|                                "Invalid value for tm_mon"});
 2502|  3.09k|        }
 2503|  4.16k|        t.tm_mon = m - 1;
 2504|  4.16k|        st.set_mon(h);
 2505|  4.16k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.90k|    {
 3710|  4.90k|        auto start_it = m_begin;
 3711|  4.90k|        std::size_t options_available = N;
 3712|  4.90k|        std::size_t chars_consumed = 0;
 3713|  19.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 14.5k, False: 4.76k]
  ------------------
 3714|  19.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 14.4k, False: 80]
  ------------------
 3715|  14.4k|            std::size_t i = 0;
 3716|  14.4k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 60, False: 14.3k]
  ------------------
 3717|     60|                options_available = 0;
 3718|     60|                break;
 3719|     60|            }
 3720|  14.3k|            const auto ch = *m_begin;
 3721|  14.3k|            ++m_begin;
 3722|  89.1k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 74.7k, False: 14.3k]
  ------------------
 3723|  74.7k|                const auto cmp = static_cast<unsigned>(
 3724|  74.7k|                    ch ^ options[i].first[chars_consumed]);
 3725|  74.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 74.7k]
  ------------------
 3726|  74.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 61.8k, False: 12.9k]
  |  Branch (3726:34): [True: 58.6k, False: 3.16k]
  ------------------
 3727|  58.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  58.6k|                                options.end());
 3729|  58.6k|                    --options_available;
 3730|  58.6k|                    continue;
 3731|  58.6k|                }
 3732|  16.1k|                ++i;
 3733|  16.1k|            }
 3734|  14.3k|            ++chars_consumed;
 3735|  14.3k|        }
 3736|  4.90k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.82k, False: 80]
  ------------------
 3737|  4.82k|            m_begin = start_it;
 3738|  4.82k|            return std::nullopt;
 3739|  4.82k|        }
 3740|     80|        return options.front().second;
 3741|  4.90k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.82k|    {
 3710|  4.82k|        auto start_it = m_begin;
 3711|  4.82k|        std::size_t options_available = N;
 3712|  4.82k|        std::size_t chars_consumed = 0;
 3713|  15.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 14.2k, False: 1.74k]
  ------------------
 3714|  15.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 11.1k, False: 3.02k]
  ------------------
 3715|  11.1k|            std::size_t i = 0;
 3716|  11.1k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 52, False: 11.1k]
  ------------------
 3717|     52|                options_available = 0;
 3718|     52|                break;
 3719|     52|            }
 3720|  11.1k|            const auto ch = *m_begin;
 3721|  11.1k|            ++m_begin;
 3722|  70.5k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 59.3k, False: 11.1k]
  ------------------
 3723|  59.3k|                const auto cmp = static_cast<unsigned>(
 3724|  59.3k|                    ch ^ options[i].first[chars_consumed]);
 3725|  59.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 59.3k]
  ------------------
 3726|  59.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 53.0k, False: 6.35k]
  |  Branch (3726:34): [True: 49.9k, False: 3.07k]
  ------------------
 3727|  49.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.9k|                                options.end());
 3729|  49.9k|                    --options_available;
 3730|  49.9k|                    continue;
 3731|  49.9k|                }
 3732|  9.43k|                ++i;
 3733|  9.43k|            }
 3734|  11.1k|            ++chars_consumed;
 3735|  11.1k|        }
 3736|  4.82k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 1.79k, False: 3.02k]
  ------------------
 3737|  1.79k|            m_begin = start_it;
 3738|  1.79k|            return std::nullopt;
 3739|  1.79k|        }
 3740|  3.02k|        return options.front().second;
 3741|  4.82k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3138|  4.15k|    {
 3139|  4.15k|#if !SCN_DISABLE_LOCALE
 3140|  4.15k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 4.15k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  4.15k|#endif
 3147|       |
 3148|  4.15k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  4.15k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  4.15k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3170|  4.13k|    {
 3171|  4.13k|#if !SCN_DISABLE_LOCALE
 3172|  4.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 4.13k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  4.13k|#endif
 3179|       |
 3180|  4.13k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  4.13k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  4.13k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  4.13k|    {
 2489|  4.13k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  4.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.59k, False: 548]
  |  |  |  Branch (986:45): [True: 3.51k, False: 622]
  |  |  |  Branch (986:45): [True: 74, False: 548]
  |  |  ------------------
  ------------------
 2490|  3.59k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  3.59k|                                "Invalid value for tm_mday"});
 2492|  3.59k|        }
 2493|    548|        t.tm_mday = d;
 2494|    548|        st.set_mday(h);
 2495|    548|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3185|  3.58k|    {
 3186|  3.58k|#if !SCN_DISABLE_LOCALE
 3187|  3.58k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.58k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.58k|#endif
 3194|       |
 3195|  3.58k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.58k|            {"Sunday", 0},
 3197|  3.58k|            {"Monday", 1},
 3198|  3.58k|            {"Tuesday", 2},
 3199|  3.58k|            {"Wednesday", 3},
 3200|  3.58k|            {"Thursday", 4},
 3201|  3.58k|            {"Friday", 5},
 3202|  3.58k|            {"Saturday", 6},
 3203|  3.58k|        }};
 3204|  3.58k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.58k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.58k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.58k|            {"Sun", 0},
 3209|  3.58k|            {"Mon", 1},
 3210|  3.58k|            {"Tue", 2},
 3211|  3.58k|            {"Wed", 3},
 3212|  3.58k|            {"Thu", 4},
 3213|  3.58k|            {"Fri", 5},
 3214|  3.58k|            {"Sat", 6},
 3215|  3.58k|        }};
 3216|  3.58k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 1.77k, False: 1.81k]
  ------------------
 3217|  1.77k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|  1.77k|        }
 3219|  1.81k|        return set_error(
 3220|  1.81k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.58k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2535|  1.77k|    {
 2536|  1.77k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  986|  3.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.77k]
  |  |  |  Branch (986:45): [True: 0, False: 1.77k]
  |  |  |  Branch (986:45): [True: 0, False: 1.77k]
  |  |  ------------------
  ------------------
 2537|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2538|      0|                                "Invalid value for tm_wday"});
 2539|      0|        }
 2540|  1.77k|        t.tm_wday = d;
 2541|  1.77k|        st.set_wday(h);
 2542|  1.77k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  7.16k|    {
 3710|  7.16k|        auto start_it = m_begin;
 3711|  7.16k|        std::size_t options_available = N;
 3712|  7.16k|        std::size_t chars_consumed = 0;
 3713|  23.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 18.4k, False: 5.36k]
  ------------------
 3714|  23.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 16.6k, False: 1.77k]
  ------------------
 3715|  16.6k|            std::size_t i = 0;
 3716|  16.6k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 38, False: 16.6k]
  ------------------
 3717|     38|                options_available = 0;
 3718|     38|                break;
 3719|     38|            }
 3720|  16.6k|            const auto ch = *m_begin;
 3721|  16.6k|            ++m_begin;
 3722|  76.2k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 59.6k, False: 16.6k]
  ------------------
 3723|  59.6k|                const auto cmp = static_cast<unsigned>(
 3724|  59.6k|                    ch ^ options[i].first[chars_consumed]);
 3725|  59.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 59.6k]
  ------------------
 3726|  59.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 48.4k, False: 11.2k]
  |  Branch (3726:34): [True: 48.3k, False: 52]
  ------------------
 3727|  48.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  48.3k|                                options.end());
 3729|  48.3k|                    --options_available;
 3730|  48.3k|                    continue;
 3731|  48.3k|                }
 3732|  11.2k|                ++i;
 3733|  11.2k|            }
 3734|  16.6k|            ++chars_consumed;
 3735|  16.6k|        }
 3736|  7.16k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 5.39k, False: 1.77k]
  ------------------
 3737|  5.39k|            m_begin = start_it;
 3738|  5.39k|            return std::nullopt;
 3739|  5.39k|        }
 3740|  1.77k|        return options.front().second;
 3741|  7.16k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 3259|  14.5k|    {
 3260|  14.5k|#if !SCN_DISABLE_LOCALE
 3261|  14.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 14.5k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  14.5k|#endif
 3268|       |
 3269|  14.5k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  14.5k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  14.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  14.5k|    {
 2469|  14.5k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.85k, False: 11.7k]
  |  |  |  Branch (986:45): [True: 2.66k, False: 11.9k]
  |  |  |  Branch (986:45): [True: 188, False: 11.7k]
  |  |  ------------------
  ------------------
 2470|  2.85k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  2.85k|                                  "Invalid value for tm_hour"});
 2472|  2.85k|        }
 2473|  11.7k|        t.tm_hour = h;
 2474|  11.7k|        st.set_hour24(hdl);
 2475|  11.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 3287|  14.5k|    {
 3288|  14.5k|#if !SCN_DISABLE_LOCALE
 3289|  14.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 14.5k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  14.5k|#endif
 3296|       |
 3297|  14.5k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  14.5k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  14.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  14.5k|    {
 2459|  14.5k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.03k, False: 11.4k]
  |  |  |  Branch (986:45): [True: 3.02k, False: 11.5k]
  |  |  |  Branch (986:45): [True: 18, False: 11.4k]
  |  |  ------------------
  ------------------
 2460|  3.03k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  3.03k|                                "Invalid value for tm_min"});
 2462|  3.03k|        }
 2463|  11.4k|        t.tm_min = m;
 2464|  11.4k|        st.set_min(h);
 2465|  11.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3301|  3.21k|    {
 3302|  3.21k|#if !SCN_DISABLE_LOCALE
 3303|  3.21k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.21k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.21k|#endif
 3310|       |
 3311|  3.21k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.21k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.21k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  3.21k|    {
 2449|  3.21k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  4.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.78k, False: 1.42k]
  |  |  |  Branch (986:45): [True: 1.78k, False: 1.43k]
  |  |  |  Branch (986:45): [True: 2, False: 1.42k]
  |  |  ------------------
  ------------------
 2450|  1.78k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  1.78k|                                "Invalid value for tm_sec"});
 2452|  1.78k|        }
 2453|  1.42k|        t.tm_sec = s;
 2454|  1.42k|        st.set_sec(h);
 2455|  1.42k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3543|  1.93k|    {
 3544|       |        // %m/%d/%y
 3545|  1.93k|        constexpr CharT slash = '/';
 3546|  1.93k|        on_dec_month();
 3547|  1.93k|        on_text(&slash, &slash + 1);
 3548|  1.93k|        on_day_of_month();
 3549|  1.93k|        on_text(&slash, &slash + 1);
 3550|  1.93k|        on_short_year();
 3551|  1.93k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3553|  2.14k|    {
 3554|       |        // %Y-%m-%d
 3555|  2.14k|        constexpr CharT dash = '-';
 3556|  2.14k|        on_full_year();
 3557|  2.14k|        on_text(&dash, &dash + 1);
 3558|  2.14k|        on_dec_month();
 3559|  2.14k|        on_text(&dash, &dash + 1);
 3560|  2.14k|        on_day_of_month();
 3561|  2.14k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3585|  11.3k|    {
 3586|       |        // %H:%M
 3587|  11.3k|        constexpr CharT colon = ':';
 3588|  11.3k|        on_24_hour();
 3589|  11.3k|        on_text(&colon, &colon + 1);
 3590|  11.3k|        on_minute();
 3591|  11.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3593|  3.21k|    {
 3594|       |        // %H:%M:%S
 3595|  3.21k|        constexpr CharT colon = ':';
 3596|  3.21k|        on_24_hour();
 3597|  3.21k|        on_text(&colon, &colon + 1);
 3598|  3.21k|        on_minute();
 3599|  3.21k|        on_text(&colon, &colon + 1);
 3600|  3.21k|        on_second();
 3601|  3.21k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3632|  16.2k|    {
 3633|  16.2k|        m_st.verify(*this);
 3634|  16.2k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 16.2k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  16.2k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 15.9k, False: 330]
  |  Branch (3637:37): [True: 130, False: 15.8k]
  |  Branch (3637:60): [True: 0, False: 15.8k]
  ------------------
 3638|    130|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|    130|        }
 3640|  16.2k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3643|  58.0k|    {
 3644|  58.0k|        return m_error;
 3645|  58.0k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3660|  16.2k|    {
 3661|  16.2k|        return m_begin;
 3662|  16.2k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3853|  34.5k|{
 3854|  34.5k|    {
 3855|  34.5k|        SCN_TRY(it,
  ------------------
  |  | 3939|  34.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  34.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  34.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  34.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 508, False: 34.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    508|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    508|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    508|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    508|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    508|    }                                                  \
  |  |  |  | 3938|  34.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  34.0k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  34.0k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  34.0k|    static_cast<    \
  |  | 1056|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  34.0k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  34.0k|        ctx.range(), t, ctx.locale());
 3862|  34.0k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  34.0k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.3k, False: 21.6k]
  |  |  ------------------
  ------------------
 3864|  12.3k|        return unexpected(e.error());
 3865|  12.3k|    }
 3866|  21.6k|    return r.get_iterator();
 3867|  34.0k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2997|  34.0k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  34.0k|    static_cast<    \
  |  | 1056|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  34.0k|          m_begin(ranges::begin(m_range)),
 2999|  34.0k|          m_tm(t),
 3000|  34.0k|          m_loc(loc)
 3001|  34.0k|    {
 3002|  34.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3648|  11.5k|    {
 3649|  11.5k|        set_error({scan_error::invalid_format_string, msg});
 3650|  11.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3653|  49.1k|    {
 3654|  49.1k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 12.3k, False: 36.7k]
  ------------------
 3655|  12.3k|            m_error = unexpected(e);
 3656|  12.3k|        }
 3657|  49.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3005|  35.5k|    {
 3006|  59.2k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 35.5k, False: 23.7k]
  ------------------
 3007|  35.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 210, False: 35.2k]
  ------------------
 3008|    210|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    210|            }
 3010|  35.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 11.5k, False: 23.7k]
  ------------------
 3011|  11.5k|                return on_error("Invalid literal character");
 3012|  11.5k|            }
 3013|  23.7k|            ++beg;
 3014|  23.7k|            ++m_begin;
 3015|  23.7k|        }
 3016|  35.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3035|  3.90k|    {
 3036|  3.90k|#if !SCN_DISABLE_LOCALE
 3037|  3.90k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 3.90k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  3.90k|#endif
 3044|       |
 3045|  3.90k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  3.90k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  3.90k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  3.90k|    {
 2509|  3.90k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  3.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.90k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  3.90k|        t.tm_year = y - 1900;
 2514|  3.90k|        st.set_full_year(h);
 2515|  3.90k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3671|  60.9k|    {
 3672|  60.9k|        int digits_read = 0;
 3673|  60.9k|        int accumulator = 0;
 3674|   105k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 105k, False: 424]
  ------------------
 3675|   105k|            const auto ch = *m_begin;
 3676|   105k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 30.8k, False: 74.5k]
  |  Branch (3676:36): [True: 20.3k, False: 54.2k]
  ------------------
 3677|  51.2k|                break;
 3678|  51.2k|            }
 3679|  54.2k|            ++m_begin;
 3680|  54.2k|            ++digits_read;
 3681|  54.2k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  54.2k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 9.31k, False: 44.9k]
  ------------------
 3683|  9.31k|                break;
 3684|  9.31k|            }
 3685|  54.2k|        }
 3686|  60.9k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 18.4k, False: 42.5k]
  ------------------
 3687|  18.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  18.4k|                                 "Too few integer digits"});
 3689|  18.4k|            return -1;
 3690|  18.4k|        }
 3691|  42.5k|        return accumulator;
 3692|  60.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3049|  6.35k|    {
 3050|  6.35k|#if !SCN_DISABLE_LOCALE
 3051|  6.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 6.35k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  6.35k|#endif
 3059|       |
 3060|  6.35k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  6.35k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  6.35k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  6.35k|    {
 2526|  6.35k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.74k, False: 4.61k]
  |  |  |  Branch (986:45): [True: 1.74k, False: 4.61k]
  |  |  |  Branch (986:45): [True: 0, False: 4.61k]
  |  |  ------------------
  ------------------
 2527|  1.74k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  1.74k|                                "Invalid value for tm_year"});
 2529|  1.74k|        }
 2530|  4.61k|        st.short_year_value = y;
 2531|  4.61k|        st.set_short_year(h);
 2532|  4.61k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3092|  4.88k|    {
 3093|  4.88k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.88k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.88k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.88k|#endif
 3101|       |
 3102|  4.88k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.88k|            {"January", 1},
 3104|  4.88k|            {"February", 2},
 3105|  4.88k|            {"March", 3},
 3106|  4.88k|            {"April", 4},
 3107|  4.88k|            {"May", 5},
 3108|  4.88k|            {"June", 6},
 3109|  4.88k|            {"July", 7},
 3110|  4.88k|            {"August", 8},
 3111|  4.88k|            {"September", 9},
 3112|  4.88k|            {"October", 10},
 3113|  4.88k|            {"November", 11},
 3114|  4.88k|            {"December", 12},
 3115|  4.88k|        }};
 3116|  4.88k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 88, False: 4.79k]
  ------------------
 3117|     88|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     88|        }
 3119|  4.79k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.79k|            {"Jan", 1},
 3121|  4.79k|            {"Feb", 2},
 3122|  4.79k|            {"Mar", 3},
 3123|  4.79k|            {"Apr", 4},
 3124|  4.79k|            {"Jun", 6},
 3125|  4.79k|            {"Jul", 7},
 3126|  4.79k|            {"Aug", 8},
 3127|  4.79k|            {"Sep", 9},
 3128|  4.79k|            {"Oct", 10},
 3129|  4.79k|            {"Nov", 11},
 3130|  4.79k|            {"Dec", 12},
 3131|  4.79k|        }};
 3132|  4.79k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 3.02k, False: 1.76k]
  ------------------
 3133|  3.02k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|  3.02k|        }
 3135|  1.76k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  1.76k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  11.6k|    {
 2499|  11.6k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  20.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.98k, False: 8.68k]
  |  |  |  Branch (986:45): [True: 2.86k, False: 8.80k]
  |  |  |  Branch (986:45): [True: 124, False: 8.68k]
  |  |  ------------------
  ------------------
 2500|  2.98k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  2.98k|                                "Invalid value for tm_mon"});
 2502|  2.98k|        }
 2503|  8.68k|        t.tm_mon = m - 1;
 2504|  8.68k|        st.set_mon(h);
 2505|  8.68k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.88k|    {
 3710|  4.88k|        auto start_it = m_begin;
 3711|  4.88k|        std::size_t options_available = N;
 3712|  4.88k|        std::size_t chars_consumed = 0;
 3713|  19.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 14.5k, False: 4.72k]
  ------------------
 3714|  19.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 14.4k, False: 88]
  ------------------
 3715|  14.4k|            std::size_t i = 0;
 3716|  14.4k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 68, False: 14.4k]
  ------------------
 3717|     68|                options_available = 0;
 3718|     68|                break;
 3719|     68|            }
 3720|  14.4k|            const auto ch = *m_begin;
 3721|  14.4k|            ++m_begin;
 3722|  89.0k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 74.6k, False: 14.4k]
  ------------------
 3723|  74.6k|                const auto cmp = static_cast<unsigned>(
 3724|  74.6k|                    ch ^ options[i].first[chars_consumed]);
 3725|  74.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 74.6k]
  ------------------
 3726|  74.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 61.5k, False: 13.0k]
  |  Branch (3726:34): [True: 58.3k, False: 3.20k]
  ------------------
 3727|  58.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  58.3k|                                options.end());
 3729|  58.3k|                    --options_available;
 3730|  58.3k|                    continue;
 3731|  58.3k|                }
 3732|  16.2k|                ++i;
 3733|  16.2k|            }
 3734|  14.4k|            ++chars_consumed;
 3735|  14.4k|        }
 3736|  4.88k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.79k, False: 88]
  ------------------
 3737|  4.79k|            m_begin = start_it;
 3738|  4.79k|            return std::nullopt;
 3739|  4.79k|        }
 3740|     88|        return options.front().second;
 3741|  4.88k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.79k|    {
 3710|  4.79k|        auto start_it = m_begin;
 3711|  4.79k|        std::size_t options_available = N;
 3712|  4.79k|        std::size_t chars_consumed = 0;
 3713|  15.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 14.2k, False: 1.70k]
  ------------------
 3714|  15.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 11.2k, False: 3.02k]
  ------------------
 3715|  11.2k|            std::size_t i = 0;
 3716|  11.2k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 60, False: 11.1k]
  ------------------
 3717|     60|                options_available = 0;
 3718|     60|                break;
 3719|     60|            }
 3720|  11.1k|            const auto ch = *m_begin;
 3721|  11.1k|            ++m_begin;
 3722|  70.2k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 59.1k, False: 11.1k]
  ------------------
 3723|  59.1k|                const auto cmp = static_cast<unsigned>(
 3724|  59.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  59.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 59.1k]
  ------------------
 3726|  59.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 52.7k, False: 6.38k]
  |  Branch (3726:34): [True: 49.6k, False: 3.10k]
  ------------------
 3727|  49.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.6k|                                options.end());
 3729|  49.6k|                    --options_available;
 3730|  49.6k|                    continue;
 3731|  49.6k|                }
 3732|  9.49k|                ++i;
 3733|  9.49k|            }
 3734|  11.1k|            ++chars_consumed;
 3735|  11.1k|        }
 3736|  4.79k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 1.76k, False: 3.02k]
  ------------------
 3737|  1.76k|            m_begin = start_it;
 3738|  1.76k|            return std::nullopt;
 3739|  1.76k|        }
 3740|  3.02k|        return options.front().second;
 3741|  4.79k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3138|  8.55k|    {
 3139|  8.55k|#if !SCN_DISABLE_LOCALE
 3140|  8.55k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 8.55k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  8.55k|#endif
 3147|       |
 3148|  8.55k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  8.55k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  8.55k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3170|  8.53k|    {
 3171|  8.53k|#if !SCN_DISABLE_LOCALE
 3172|  8.53k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 8.53k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  8.53k|#endif
 3179|       |
 3180|  8.53k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  8.53k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  8.53k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  8.53k|    {
 2489|  8.53k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.50k, False: 5.02k]
  |  |  |  Branch (986:45): [True: 3.42k, False: 5.11k]
  |  |  |  Branch (986:45): [True: 82, False: 5.02k]
  |  |  ------------------
  ------------------
 2490|  3.50k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  3.50k|                                "Invalid value for tm_mday"});
 2492|  3.50k|        }
 2493|  5.02k|        t.tm_mday = d;
 2494|  5.02k|        st.set_mday(h);
 2495|  5.02k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3185|  3.71k|    {
 3186|  3.71k|#if !SCN_DISABLE_LOCALE
 3187|  3.71k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.71k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.71k|#endif
 3194|       |
 3195|  3.71k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.71k|            {"Sunday", 0},
 3197|  3.71k|            {"Monday", 1},
 3198|  3.71k|            {"Tuesday", 2},
 3199|  3.71k|            {"Wednesday", 3},
 3200|  3.71k|            {"Thursday", 4},
 3201|  3.71k|            {"Friday", 5},
 3202|  3.71k|            {"Saturday", 6},
 3203|  3.71k|        }};
 3204|  3.71k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.71k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.71k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.71k|            {"Sun", 0},
 3209|  3.71k|            {"Mon", 1},
 3210|  3.71k|            {"Tue", 2},
 3211|  3.71k|            {"Wed", 3},
 3212|  3.71k|            {"Thu", 4},
 3213|  3.71k|            {"Fri", 5},
 3214|  3.71k|            {"Sat", 6},
 3215|  3.71k|        }};
 3216|  3.71k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 1.92k, False: 1.78k]
  ------------------
 3217|  1.92k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|  1.92k|        }
 3219|  1.78k|        return set_error(
 3220|  1.78k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.71k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2535|  1.92k|    {
 2536|  1.92k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  986|  3.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.92k]
  |  |  |  Branch (986:45): [True: 0, False: 1.92k]
  |  |  |  Branch (986:45): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 2537|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2538|      0|                                "Invalid value for tm_wday"});
 2539|      0|        }
 2540|  1.92k|        t.tm_wday = d;
 2541|  1.92k|        st.set_wday(h);
 2542|  1.92k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  7.42k|    {
 3710|  7.42k|        auto start_it = m_begin;
 3711|  7.42k|        std::size_t options_available = N;
 3712|  7.42k|        std::size_t chars_consumed = 0;
 3713|  25.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 19.6k, False: 5.44k]
  ------------------
 3714|  25.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 17.7k, False: 1.92k]
  ------------------
 3715|  17.7k|            std::size_t i = 0;
 3716|  17.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 54, False: 17.7k]
  ------------------
 3717|     54|                options_available = 0;
 3718|     54|                break;
 3719|     54|            }
 3720|  17.7k|            const auto ch = *m_begin;
 3721|  17.7k|            ++m_begin;
 3722|  79.9k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 62.2k, False: 17.7k]
  ------------------
 3723|  62.2k|                const auto cmp = static_cast<unsigned>(
 3724|  62.2k|                    ch ^ options[i].first[chars_consumed]);
 3725|  62.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 62.2k]
  ------------------
 3726|  62.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.0k, False: 12.2k]
  |  Branch (3726:34): [True: 49.9k, False: 80]
  ------------------
 3727|  49.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.9k|                                options.end());
 3729|  49.9k|                    --options_available;
 3730|  49.9k|                    continue;
 3731|  49.9k|                }
 3732|  12.3k|                ++i;
 3733|  12.3k|            }
 3734|  17.7k|            ++chars_consumed;
 3735|  17.7k|        }
 3736|  7.42k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 5.49k, False: 1.92k]
  ------------------
 3737|  5.49k|            m_begin = start_it;
 3738|  5.49k|            return std::nullopt;
 3739|  5.49k|        }
 3740|  1.92k|        return options.front().second;
 3741|  7.42k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 3259|  15.2k|    {
 3260|  15.2k|#if !SCN_DISABLE_LOCALE
 3261|  15.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 15.2k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  15.2k|#endif
 3268|       |
 3269|  15.2k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  15.2k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  15.2k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  15.2k|    {
 2469|  15.2k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.57k, False: 12.6k]
  |  |  |  Branch (986:45): [True: 2.36k, False: 12.8k]
  |  |  |  Branch (986:45): [True: 210, False: 12.6k]
  |  |  ------------------
  ------------------
 2470|  2.57k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  2.57k|                                  "Invalid value for tm_hour"});
 2472|  2.57k|        }
 2473|  12.6k|        t.tm_hour = h;
 2474|  12.6k|        st.set_hour24(hdl);
 2475|  12.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 3287|  15.1k|    {
 3288|  15.1k|#if !SCN_DISABLE_LOCALE
 3289|  15.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 15.1k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  15.1k|#endif
 3296|       |
 3297|  15.1k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  15.1k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  15.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  15.1k|    {
 2459|  15.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.93k, False: 12.2k]
  |  |  |  Branch (986:45): [True: 2.90k, False: 12.2k]
  |  |  |  Branch (986:45): [True: 26, False: 12.2k]
  |  |  ------------------
  ------------------
 2460|  2.93k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  2.93k|                                "Invalid value for tm_min"});
 2462|  2.93k|        }
 2463|  12.2k|        t.tm_min = m;
 2464|  12.2k|        st.set_min(h);
 2465|  12.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3301|  3.18k|    {
 3302|  3.18k|#if !SCN_DISABLE_LOCALE
 3303|  3.18k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.18k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.18k|#endif
 3310|       |
 3311|  3.18k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.18k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.18k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  3.18k|    {
 2449|  3.18k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  4.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.74k, False: 1.44k]
  |  |  |  Branch (986:45): [True: 1.74k, False: 1.44k]
  |  |  |  Branch (986:45): [True: 4, False: 1.44k]
  |  |  ------------------
  ------------------
 2450|  1.74k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  1.74k|                                "Invalid value for tm_sec"});
 2452|  1.74k|        }
 2453|  1.44k|        t.tm_sec = s;
 2454|  1.44k|        st.set_sec(h);
 2455|  1.44k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3543|  6.35k|    {
 3544|       |        // %m/%d/%y
 3545|  6.35k|        constexpr CharT slash = '/';
 3546|  6.35k|        on_dec_month();
 3547|  6.35k|        on_text(&slash, &slash + 1);
 3548|  6.35k|        on_day_of_month();
 3549|  6.35k|        on_text(&slash, &slash + 1);
 3550|  6.35k|        on_short_year();
 3551|  6.35k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3553|  2.11k|    {
 3554|       |        // %Y-%m-%d
 3555|  2.11k|        constexpr CharT dash = '-';
 3556|  2.11k|        on_full_year();
 3557|  2.11k|        on_text(&dash, &dash + 1);
 3558|  2.11k|        on_dec_month();
 3559|  2.11k|        on_text(&dash, &dash + 1);
 3560|  2.11k|        on_day_of_month();
 3561|  2.11k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3585|  11.9k|    {
 3586|       |        // %H:%M
 3587|  11.9k|        constexpr CharT colon = ':';
 3588|  11.9k|        on_24_hour();
 3589|  11.9k|        on_text(&colon, &colon + 1);
 3590|  11.9k|        on_minute();
 3591|  11.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3593|  3.18k|    {
 3594|       |        // %H:%M:%S
 3595|  3.18k|        constexpr CharT colon = ':';
 3596|  3.18k|        on_24_hour();
 3597|  3.18k|        on_text(&colon, &colon + 1);
 3598|  3.18k|        on_minute();
 3599|  3.18k|        on_text(&colon, &colon + 1);
 3600|  3.18k|        on_second();
 3601|  3.18k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3632|  21.6k|    {
 3633|  21.6k|        m_st.verify(*this);
 3634|  21.6k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 21.6k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  21.6k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 21.3k, False: 330]
  |  Branch (3637:37): [True: 4.59k, False: 16.7k]
  |  Branch (3637:60): [True: 0, False: 16.7k]
  ------------------
 3638|  4.59k|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|  4.59k|        }
 3640|  21.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3643|  68.2k|    {
 3644|  68.2k|        return m_error;
 3645|  68.2k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3660|  21.6k|    {
 3661|  21.6k|        return m_begin;
 3662|  21.6k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3853|  29.1k|{
 3854|  29.1k|    {
 3855|  29.1k|        SCN_TRY(it,
  ------------------
  |  | 3939|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 258, False: 28.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    258|    }                                                  \
  |  |  |  | 3938|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  28.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  28.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  28.9k|    static_cast<    \
  |  | 1056|  28.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  28.9k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  28.9k|        ctx.range(), t, ctx.locale());
 3862|  28.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  28.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.6k, False: 16.2k]
  |  |  ------------------
  ------------------
 3864|  12.6k|        return unexpected(e.error());
 3865|  12.6k|    }
 3866|  16.2k|    return r.get_iterator();
 3867|  28.9k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2997|  28.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  28.9k|    static_cast<    \
  |  | 1056|  28.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  28.9k|          m_begin(ranges::begin(m_range)),
 2999|  28.9k|          m_tm(t),
 3000|  28.9k|          m_loc(loc)
 3001|  28.9k|    {
 3002|  28.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3648|  11.8k|    {
 3649|  11.8k|        set_error({scan_error::invalid_format_string, msg});
 3650|  11.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3653|  51.0k|    {
 3654|  51.0k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 12.6k, False: 38.4k]
  ------------------
 3655|  12.6k|            m_error = unexpected(e);
 3656|  12.6k|        }
 3657|  51.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3005|  26.0k|    {
 3006|  40.1k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 26.0k, False: 14.0k]
  ------------------
 3007|  26.0k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 164, False: 25.9k]
  ------------------
 3008|    164|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    164|            }
 3010|  25.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 11.8k, False: 14.0k]
  ------------------
 3011|  11.8k|                return on_error("Invalid literal character");
 3012|  11.8k|            }
 3013|  14.0k|            ++beg;
 3014|  14.0k|            ++m_begin;
 3015|  14.0k|        }
 3016|  26.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3035|  3.96k|    {
 3036|  3.96k|#if !SCN_DISABLE_LOCALE
 3037|  3.96k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 3.96k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  3.96k|#endif
 3044|       |
 3045|  3.96k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  3.96k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  3.96k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  3.96k|    {
 2509|  3.96k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  3.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.96k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  3.96k|        t.tm_year = y - 1900;
 2514|  3.96k|        st.set_full_year(h);
 2515|  3.96k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3671|  46.4k|    {
 3672|  46.4k|        int digits_read = 0;
 3673|  46.4k|        int accumulator = 0;
 3674|  75.8k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 75.5k, False: 346]
  ------------------
 3675|  75.5k|            const auto ch = *m_begin;
 3676|  75.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 22.4k, False: 53.0k]
  |  Branch (3676:36): [True: 19.1k, False: 33.9k]
  ------------------
 3677|  41.5k|                break;
 3678|  41.5k|            }
 3679|  33.9k|            ++m_begin;
 3680|  33.9k|            ++digits_read;
 3681|  33.9k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  33.9k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 4.56k, False: 29.3k]
  ------------------
 3683|  4.56k|                break;
 3684|  4.56k|            }
 3685|  33.9k|        }
 3686|  46.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 19.2k, False: 27.2k]
  ------------------
 3687|  19.2k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  19.2k|                                 "Too few integer digits"});
 3689|  19.2k|            return -1;
 3690|  19.2k|        }
 3691|  27.2k|        return accumulator;
 3692|  46.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3049|  1.93k|    {
 3050|  1.93k|#if !SCN_DISABLE_LOCALE
 3051|  1.93k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 1.93k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  1.93k|#endif
 3059|       |
 3060|  1.93k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  1.93k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  1.93k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  1.93k|    {
 2526|  1.93k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.79k, False: 140]
  |  |  |  Branch (986:45): [True: 1.79k, False: 140]
  |  |  |  Branch (986:45): [True: 0, False: 140]
  |  |  ------------------
  ------------------
 2527|  1.79k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  1.79k|                                "Invalid value for tm_year"});
 2529|  1.79k|        }
 2530|    140|        st.short_year_value = y;
 2531|    140|        st.set_short_year(h);
 2532|    140|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3092|  4.90k|    {
 3093|  4.90k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.90k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.90k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.90k|#endif
 3101|       |
 3102|  4.90k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.90k|            {"January", 1},
 3104|  4.90k|            {"February", 2},
 3105|  4.90k|            {"March", 3},
 3106|  4.90k|            {"April", 4},
 3107|  4.90k|            {"May", 5},
 3108|  4.90k|            {"June", 6},
 3109|  4.90k|            {"July", 7},
 3110|  4.90k|            {"August", 8},
 3111|  4.90k|            {"September", 9},
 3112|  4.90k|            {"October", 10},
 3113|  4.90k|            {"November", 11},
 3114|  4.90k|            {"December", 12},
 3115|  4.90k|        }};
 3116|  4.90k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 80, False: 4.82k]
  ------------------
 3117|     80|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     80|        }
 3119|  4.82k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.82k|            {"Jan", 1},
 3121|  4.82k|            {"Feb", 2},
 3122|  4.82k|            {"Mar", 3},
 3123|  4.82k|            {"Apr", 4},
 3124|  4.82k|            {"Jun", 6},
 3125|  4.82k|            {"Jul", 7},
 3126|  4.82k|            {"Aug", 8},
 3127|  4.82k|            {"Sep", 9},
 3128|  4.82k|            {"Oct", 10},
 3129|  4.82k|            {"Nov", 11},
 3130|  4.82k|            {"Dec", 12},
 3131|  4.82k|        }};
 3132|  4.82k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 3.02k, False: 1.79k]
  ------------------
 3133|  3.02k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|  3.02k|        }
 3135|  1.79k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  1.79k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  7.25k|    {
 2499|  7.25k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.09k, False: 4.16k]
  |  |  |  Branch (986:45): [True: 2.99k, False: 4.26k]
  |  |  |  Branch (986:45): [True: 104, False: 4.16k]
  |  |  ------------------
  ------------------
 2500|  3.09k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  3.09k|                                "Invalid value for tm_mon"});
 2502|  3.09k|        }
 2503|  4.16k|        t.tm_mon = m - 1;
 2504|  4.16k|        st.set_mon(h);
 2505|  4.16k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.90k|    {
 3710|  4.90k|        auto start_it = m_begin;
 3711|  4.90k|        std::size_t options_available = N;
 3712|  4.90k|        std::size_t chars_consumed = 0;
 3713|  19.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 14.5k, False: 4.76k]
  ------------------
 3714|  19.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 14.4k, False: 80]
  ------------------
 3715|  14.4k|            std::size_t i = 0;
 3716|  14.4k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 60, False: 14.3k]
  ------------------
 3717|     60|                options_available = 0;
 3718|     60|                break;
 3719|     60|            }
 3720|  14.3k|            const auto ch = *m_begin;
 3721|  14.3k|            ++m_begin;
 3722|  89.1k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 74.7k, False: 14.3k]
  ------------------
 3723|  74.7k|                const auto cmp = static_cast<unsigned>(
 3724|  74.7k|                    ch ^ options[i].first[chars_consumed]);
 3725|  74.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 74.7k]
  ------------------
 3726|  74.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 61.8k, False: 12.9k]
  |  Branch (3726:34): [True: 58.6k, False: 3.16k]
  ------------------
 3727|  58.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  58.6k|                                options.end());
 3729|  58.6k|                    --options_available;
 3730|  58.6k|                    continue;
 3731|  58.6k|                }
 3732|  16.1k|                ++i;
 3733|  16.1k|            }
 3734|  14.3k|            ++chars_consumed;
 3735|  14.3k|        }
 3736|  4.90k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.82k, False: 80]
  ------------------
 3737|  4.82k|            m_begin = start_it;
 3738|  4.82k|            return std::nullopt;
 3739|  4.82k|        }
 3740|     80|        return options.front().second;
 3741|  4.90k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.82k|    {
 3710|  4.82k|        auto start_it = m_begin;
 3711|  4.82k|        std::size_t options_available = N;
 3712|  4.82k|        std::size_t chars_consumed = 0;
 3713|  15.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 14.2k, False: 1.74k]
  ------------------
 3714|  15.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 11.1k, False: 3.02k]
  ------------------
 3715|  11.1k|            std::size_t i = 0;
 3716|  11.1k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 52, False: 11.1k]
  ------------------
 3717|     52|                options_available = 0;
 3718|     52|                break;
 3719|     52|            }
 3720|  11.1k|            const auto ch = *m_begin;
 3721|  11.1k|            ++m_begin;
 3722|  70.5k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 59.3k, False: 11.1k]
  ------------------
 3723|  59.3k|                const auto cmp = static_cast<unsigned>(
 3724|  59.3k|                    ch ^ options[i].first[chars_consumed]);
 3725|  59.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 59.3k]
  ------------------
 3726|  59.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 53.0k, False: 6.35k]
  |  Branch (3726:34): [True: 49.9k, False: 3.07k]
  ------------------
 3727|  49.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.9k|                                options.end());
 3729|  49.9k|                    --options_available;
 3730|  49.9k|                    continue;
 3731|  49.9k|                }
 3732|  9.43k|                ++i;
 3733|  9.43k|            }
 3734|  11.1k|            ++chars_consumed;
 3735|  11.1k|        }
 3736|  4.82k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 1.79k, False: 3.02k]
  ------------------
 3737|  1.79k|            m_begin = start_it;
 3738|  1.79k|            return std::nullopt;
 3739|  1.79k|        }
 3740|  3.02k|        return options.front().second;
 3741|  4.82k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3138|  4.15k|    {
 3139|  4.15k|#if !SCN_DISABLE_LOCALE
 3140|  4.15k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 4.15k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  4.15k|#endif
 3147|       |
 3148|  4.15k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  4.15k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  4.15k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3170|  4.13k|    {
 3171|  4.13k|#if !SCN_DISABLE_LOCALE
 3172|  4.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 4.13k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  4.13k|#endif
 3179|       |
 3180|  4.13k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  4.13k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  4.13k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  4.13k|    {
 2489|  4.13k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  4.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.59k, False: 548]
  |  |  |  Branch (986:45): [True: 3.51k, False: 622]
  |  |  |  Branch (986:45): [True: 74, False: 548]
  |  |  ------------------
  ------------------
 2490|  3.59k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  3.59k|                                "Invalid value for tm_mday"});
 2492|  3.59k|        }
 2493|    548|        t.tm_mday = d;
 2494|    548|        st.set_mday(h);
 2495|    548|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3185|  3.58k|    {
 3186|  3.58k|#if !SCN_DISABLE_LOCALE
 3187|  3.58k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.58k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.58k|#endif
 3194|       |
 3195|  3.58k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.58k|            {"Sunday", 0},
 3197|  3.58k|            {"Monday", 1},
 3198|  3.58k|            {"Tuesday", 2},
 3199|  3.58k|            {"Wednesday", 3},
 3200|  3.58k|            {"Thursday", 4},
 3201|  3.58k|            {"Friday", 5},
 3202|  3.58k|            {"Saturday", 6},
 3203|  3.58k|        }};
 3204|  3.58k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.58k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.58k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.58k|            {"Sun", 0},
 3209|  3.58k|            {"Mon", 1},
 3210|  3.58k|            {"Tue", 2},
 3211|  3.58k|            {"Wed", 3},
 3212|  3.58k|            {"Thu", 4},
 3213|  3.58k|            {"Fri", 5},
 3214|  3.58k|            {"Sat", 6},
 3215|  3.58k|        }};
 3216|  3.58k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 1.77k, False: 1.81k]
  ------------------
 3217|  1.77k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|  1.77k|        }
 3219|  1.81k|        return set_error(
 3220|  1.81k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.58k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2535|  1.77k|    {
 2536|  1.77k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  986|  3.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.77k]
  |  |  |  Branch (986:45): [True: 0, False: 1.77k]
  |  |  |  Branch (986:45): [True: 0, False: 1.77k]
  |  |  ------------------
  ------------------
 2537|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2538|      0|                                "Invalid value for tm_wday"});
 2539|      0|        }
 2540|  1.77k|        t.tm_wday = d;
 2541|  1.77k|        st.set_wday(h);
 2542|  1.77k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  7.16k|    {
 3710|  7.16k|        auto start_it = m_begin;
 3711|  7.16k|        std::size_t options_available = N;
 3712|  7.16k|        std::size_t chars_consumed = 0;
 3713|  23.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 18.4k, False: 5.36k]
  ------------------
 3714|  23.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 16.6k, False: 1.77k]
  ------------------
 3715|  16.6k|            std::size_t i = 0;
 3716|  16.6k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 38, False: 16.6k]
  ------------------
 3717|     38|                options_available = 0;
 3718|     38|                break;
 3719|     38|            }
 3720|  16.6k|            const auto ch = *m_begin;
 3721|  16.6k|            ++m_begin;
 3722|  76.2k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 59.6k, False: 16.6k]
  ------------------
 3723|  59.6k|                const auto cmp = static_cast<unsigned>(
 3724|  59.6k|                    ch ^ options[i].first[chars_consumed]);
 3725|  59.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 59.6k]
  ------------------
 3726|  59.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 48.4k, False: 11.2k]
  |  Branch (3726:34): [True: 48.3k, False: 52]
  ------------------
 3727|  48.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  48.3k|                                options.end());
 3729|  48.3k|                    --options_available;
 3730|  48.3k|                    continue;
 3731|  48.3k|                }
 3732|  11.2k|                ++i;
 3733|  11.2k|            }
 3734|  16.6k|            ++chars_consumed;
 3735|  16.6k|        }
 3736|  7.16k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 5.39k, False: 1.77k]
  ------------------
 3737|  5.39k|            m_begin = start_it;
 3738|  5.39k|            return std::nullopt;
 3739|  5.39k|        }
 3740|  1.77k|        return options.front().second;
 3741|  7.16k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 3259|  14.5k|    {
 3260|  14.5k|#if !SCN_DISABLE_LOCALE
 3261|  14.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 14.5k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  14.5k|#endif
 3268|       |
 3269|  14.5k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  14.5k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  14.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  14.5k|    {
 2469|  14.5k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.85k, False: 11.7k]
  |  |  |  Branch (986:45): [True: 2.66k, False: 11.9k]
  |  |  |  Branch (986:45): [True: 188, False: 11.7k]
  |  |  ------------------
  ------------------
 2470|  2.85k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  2.85k|                                  "Invalid value for tm_hour"});
 2472|  2.85k|        }
 2473|  11.7k|        t.tm_hour = h;
 2474|  11.7k|        st.set_hour24(hdl);
 2475|  11.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 3287|  14.5k|    {
 3288|  14.5k|#if !SCN_DISABLE_LOCALE
 3289|  14.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 14.5k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  14.5k|#endif
 3296|       |
 3297|  14.5k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  14.5k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  14.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  14.5k|    {
 2459|  14.5k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.03k, False: 11.4k]
  |  |  |  Branch (986:45): [True: 3.02k, False: 11.5k]
  |  |  |  Branch (986:45): [True: 18, False: 11.4k]
  |  |  ------------------
  ------------------
 2460|  3.03k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  3.03k|                                "Invalid value for tm_min"});
 2462|  3.03k|        }
 2463|  11.4k|        t.tm_min = m;
 2464|  11.4k|        st.set_min(h);
 2465|  11.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3301|  3.21k|    {
 3302|  3.21k|#if !SCN_DISABLE_LOCALE
 3303|  3.21k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.21k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.21k|#endif
 3310|       |
 3311|  3.21k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.21k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.21k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  3.21k|    {
 2449|  3.21k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  4.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.78k, False: 1.42k]
  |  |  |  Branch (986:45): [True: 1.78k, False: 1.43k]
  |  |  |  Branch (986:45): [True: 2, False: 1.42k]
  |  |  ------------------
  ------------------
 2450|  1.78k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  1.78k|                                "Invalid value for tm_sec"});
 2452|  1.78k|        }
 2453|  1.42k|        t.tm_sec = s;
 2454|  1.42k|        st.set_sec(h);
 2455|  1.42k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3543|  1.93k|    {
 3544|       |        // %m/%d/%y
 3545|  1.93k|        constexpr CharT slash = '/';
 3546|  1.93k|        on_dec_month();
 3547|  1.93k|        on_text(&slash, &slash + 1);
 3548|  1.93k|        on_day_of_month();
 3549|  1.93k|        on_text(&slash, &slash + 1);
 3550|  1.93k|        on_short_year();
 3551|  1.93k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3553|  2.14k|    {
 3554|       |        // %Y-%m-%d
 3555|  2.14k|        constexpr CharT dash = '-';
 3556|  2.14k|        on_full_year();
 3557|  2.14k|        on_text(&dash, &dash + 1);
 3558|  2.14k|        on_dec_month();
 3559|  2.14k|        on_text(&dash, &dash + 1);
 3560|  2.14k|        on_day_of_month();
 3561|  2.14k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3585|  11.3k|    {
 3586|       |        // %H:%M
 3587|  11.3k|        constexpr CharT colon = ':';
 3588|  11.3k|        on_24_hour();
 3589|  11.3k|        on_text(&colon, &colon + 1);
 3590|  11.3k|        on_minute();
 3591|  11.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3593|  3.21k|    {
 3594|       |        // %H:%M:%S
 3595|  3.21k|        constexpr CharT colon = ':';
 3596|  3.21k|        on_24_hour();
 3597|  3.21k|        on_text(&colon, &colon + 1);
 3598|  3.21k|        on_minute();
 3599|  3.21k|        on_text(&colon, &colon + 1);
 3600|  3.21k|        on_second();
 3601|  3.21k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3632|  16.2k|    {
 3633|  16.2k|        m_st.verify(*this);
 3634|  16.2k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 16.2k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  16.2k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 15.9k, False: 330]
  |  Branch (3637:37): [True: 130, False: 15.8k]
  |  Branch (3637:60): [True: 0, False: 15.8k]
  ------------------
 3638|    130|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|    130|        }
 3640|  16.2k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3643|  58.0k|    {
 3644|  58.0k|        return m_error;
 3645|  58.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3660|  16.2k|    {
 3661|  16.2k|        return m_begin;
 3662|  16.2k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3853|  34.5k|{
 3854|  34.5k|    {
 3855|  34.5k|        SCN_TRY(it,
  ------------------
  |  | 3939|  34.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  34.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  34.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  34.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 508, False: 34.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    508|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    508|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    508|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    508|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    508|    }                                                  \
  |  |  |  | 3938|  34.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  34.0k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  34.0k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  34.0k|    static_cast<    \
  |  | 1056|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  34.0k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  34.0k|        ctx.range(), t, ctx.locale());
 3862|  34.0k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  34.0k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.3k, False: 21.6k]
  |  |  ------------------
  ------------------
 3864|  12.3k|        return unexpected(e.error());
 3865|  12.3k|    }
 3866|  21.6k|    return r.get_iterator();
 3867|  34.0k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2997|  34.0k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  34.0k|    static_cast<    \
  |  | 1056|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  34.0k|          m_begin(ranges::begin(m_range)),
 2999|  34.0k|          m_tm(t),
 3000|  34.0k|          m_loc(loc)
 3001|  34.0k|    {
 3002|  34.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3648|  11.5k|    {
 3649|  11.5k|        set_error({scan_error::invalid_format_string, msg});
 3650|  11.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3653|  47.4k|    {
 3654|  47.4k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 12.3k, False: 35.0k]
  ------------------
 3655|  12.3k|            m_error = unexpected(e);
 3656|  12.3k|        }
 3657|  47.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3005|  35.5k|    {
 3006|  59.2k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 35.5k, False: 23.7k]
  ------------------
 3007|  35.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 210, False: 35.2k]
  ------------------
 3008|    210|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    210|            }
 3010|  35.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 11.5k, False: 23.7k]
  ------------------
 3011|  11.5k|                return on_error("Invalid literal character");
 3012|  11.5k|            }
 3013|  23.7k|            ++beg;
 3014|  23.7k|            ++m_begin;
 3015|  23.7k|        }
 3016|  35.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3035|  3.90k|    {
 3036|  3.90k|#if !SCN_DISABLE_LOCALE
 3037|  3.90k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 3.90k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  3.90k|#endif
 3044|       |
 3045|  3.90k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  3.90k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  3.90k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2686|  3.90k|    {
 2687|  3.90k|        t.year = y;
 2688|  3.90k|        st.set_full_year(h);
 2689|  3.90k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3671|  60.9k|    {
 3672|  60.9k|        int digits_read = 0;
 3673|  60.9k|        int accumulator = 0;
 3674|   105k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 105k, False: 424]
  ------------------
 3675|   105k|            const auto ch = *m_begin;
 3676|   105k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 30.8k, False: 74.5k]
  |  Branch (3676:36): [True: 20.3k, False: 54.2k]
  ------------------
 3677|  51.2k|                break;
 3678|  51.2k|            }
 3679|  54.2k|            ++m_begin;
 3680|  54.2k|            ++digits_read;
 3681|  54.2k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  54.2k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 9.31k, False: 44.9k]
  ------------------
 3683|  9.31k|                break;
 3684|  9.31k|            }
 3685|  54.2k|        }
 3686|  60.9k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 18.4k, False: 42.5k]
  ------------------
 3687|  18.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  18.4k|                                 "Too few integer digits"});
 3689|  18.4k|            return -1;
 3690|  18.4k|        }
 3691|  42.5k|        return accumulator;
 3692|  60.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3049|  6.35k|    {
 3050|  6.35k|#if !SCN_DISABLE_LOCALE
 3051|  6.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 6.35k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  6.35k|#endif
 3059|       |
 3060|  6.35k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  6.35k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  6.35k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2709|  6.35k|    {
 2710|  6.35k|        if (!t.year) {
  ------------------
  |  Branch (2710:13): [True: 6.35k, False: 0]
  ------------------
 2711|  6.35k|            t.year = y;
 2712|  6.35k|        }
 2713|      0|        else {
 2714|      0|            t.year = *t.year + y;
 2715|      0|        }
 2716|  6.35k|        st.set_short_year(h);
 2717|  6.35k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3092|  4.88k|    {
 3093|  4.88k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.88k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.88k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.88k|#endif
 3101|       |
 3102|  4.88k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.88k|            {"January", 1},
 3104|  4.88k|            {"February", 2},
 3105|  4.88k|            {"March", 3},
 3106|  4.88k|            {"April", 4},
 3107|  4.88k|            {"May", 5},
 3108|  4.88k|            {"June", 6},
 3109|  4.88k|            {"July", 7},
 3110|  4.88k|            {"August", 8},
 3111|  4.88k|            {"September", 9},
 3112|  4.88k|            {"October", 10},
 3113|  4.88k|            {"November", 11},
 3114|  4.88k|            {"December", 12},
 3115|  4.88k|        }};
 3116|  4.88k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 88, False: 4.79k]
  ------------------
 3117|     88|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     88|        }
 3119|  4.79k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.79k|            {"Jan", 1},
 3121|  4.79k|            {"Feb", 2},
 3122|  4.79k|            {"Mar", 3},
 3123|  4.79k|            {"Apr", 4},
 3124|  4.79k|            {"Jun", 6},
 3125|  4.79k|            {"Jul", 7},
 3126|  4.79k|            {"Aug", 8},
 3127|  4.79k|            {"Sep", 9},
 3128|  4.79k|            {"Oct", 10},
 3129|  4.79k|            {"Nov", 11},
 3130|  4.79k|            {"Dec", 12},
 3131|  4.79k|        }};
 3132|  4.79k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 3.02k, False: 1.76k]
  ------------------
 3133|  3.02k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|  3.02k|        }
 3135|  1.76k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  1.76k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2673|  11.6k|    {
 2674|  11.6k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  20.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.98k, False: 8.68k]
  |  |  |  Branch (986:45): [True: 2.86k, False: 8.80k]
  |  |  |  Branch (986:45): [True: 124, False: 8.68k]
  |  |  ------------------
  ------------------
 2675|  2.98k|            return h.set_error(
 2676|  2.98k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2677|  2.98k|        }
 2678|  8.68k|        t.mon = month{static_cast<unsigned>(m)};
 2679|  8.68k|        st.set_mon(h);
 2680|  8.68k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.88k|    {
 3710|  4.88k|        auto start_it = m_begin;
 3711|  4.88k|        std::size_t options_available = N;
 3712|  4.88k|        std::size_t chars_consumed = 0;
 3713|  19.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 14.5k, False: 4.72k]
  ------------------
 3714|  19.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 14.4k, False: 88]
  ------------------
 3715|  14.4k|            std::size_t i = 0;
 3716|  14.4k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 68, False: 14.4k]
  ------------------
 3717|     68|                options_available = 0;
 3718|     68|                break;
 3719|     68|            }
 3720|  14.4k|            const auto ch = *m_begin;
 3721|  14.4k|            ++m_begin;
 3722|  89.0k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 74.6k, False: 14.4k]
  ------------------
 3723|  74.6k|                const auto cmp = static_cast<unsigned>(
 3724|  74.6k|                    ch ^ options[i].first[chars_consumed]);
 3725|  74.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 74.6k]
  ------------------
 3726|  74.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 61.5k, False: 13.0k]
  |  Branch (3726:34): [True: 58.3k, False: 3.20k]
  ------------------
 3727|  58.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  58.3k|                                options.end());
 3729|  58.3k|                    --options_available;
 3730|  58.3k|                    continue;
 3731|  58.3k|                }
 3732|  16.2k|                ++i;
 3733|  16.2k|            }
 3734|  14.4k|            ++chars_consumed;
 3735|  14.4k|        }
 3736|  4.88k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.79k, False: 88]
  ------------------
 3737|  4.79k|            m_begin = start_it;
 3738|  4.79k|            return std::nullopt;
 3739|  4.79k|        }
 3740|     88|        return options.front().second;
 3741|  4.88k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.79k|    {
 3710|  4.79k|        auto start_it = m_begin;
 3711|  4.79k|        std::size_t options_available = N;
 3712|  4.79k|        std::size_t chars_consumed = 0;
 3713|  15.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 14.2k, False: 1.70k]
  ------------------
 3714|  15.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 11.2k, False: 3.02k]
  ------------------
 3715|  11.2k|            std::size_t i = 0;
 3716|  11.2k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 60, False: 11.1k]
  ------------------
 3717|     60|                options_available = 0;
 3718|     60|                break;
 3719|     60|            }
 3720|  11.1k|            const auto ch = *m_begin;
 3721|  11.1k|            ++m_begin;
 3722|  70.2k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 59.1k, False: 11.1k]
  ------------------
 3723|  59.1k|                const auto cmp = static_cast<unsigned>(
 3724|  59.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  59.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 59.1k]
  ------------------
 3726|  59.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 52.7k, False: 6.38k]
  |  Branch (3726:34): [True: 49.6k, False: 3.10k]
  ------------------
 3727|  49.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.6k|                                options.end());
 3729|  49.6k|                    --options_available;
 3730|  49.6k|                    continue;
 3731|  49.6k|                }
 3732|  9.49k|                ++i;
 3733|  9.49k|            }
 3734|  11.1k|            ++chars_consumed;
 3735|  11.1k|        }
 3736|  4.79k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 1.76k, False: 3.02k]
  ------------------
 3737|  1.76k|            m_begin = start_it;
 3738|  1.76k|            return std::nullopt;
 3739|  1.76k|        }
 3740|  3.02k|        return options.front().second;
 3741|  4.79k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3138|  8.55k|    {
 3139|  8.55k|#if !SCN_DISABLE_LOCALE
 3140|  8.55k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 8.55k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  8.55k|#endif
 3147|       |
 3148|  8.55k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  8.55k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  8.55k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3170|  8.53k|    {
 3171|  8.53k|#if !SCN_DISABLE_LOCALE
 3172|  8.53k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 8.53k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  8.53k|#endif
 3179|       |
 3180|  8.53k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  8.53k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  8.53k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2660|  8.53k|    {
 2661|  8.53k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.50k, False: 5.02k]
  |  |  |  Branch (986:45): [True: 3.42k, False: 5.11k]
  |  |  |  Branch (986:45): [True: 82, False: 5.02k]
  |  |  ------------------
  ------------------
 2662|  3.50k|            return h.set_error(
 2663|  3.50k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2664|  3.50k|        }
 2665|  5.02k|        t.mday = d;
 2666|  5.02k|        st.set_mday(h);
 2667|  5.02k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3185|  3.71k|    {
 3186|  3.71k|#if !SCN_DISABLE_LOCALE
 3187|  3.71k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.71k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.71k|#endif
 3194|       |
 3195|  3.71k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.71k|            {"Sunday", 0},
 3197|  3.71k|            {"Monday", 1},
 3198|  3.71k|            {"Tuesday", 2},
 3199|  3.71k|            {"Wednesday", 3},
 3200|  3.71k|            {"Thursday", 4},
 3201|  3.71k|            {"Friday", 5},
 3202|  3.71k|            {"Saturday", 6},
 3203|  3.71k|        }};
 3204|  3.71k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.71k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.71k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.71k|            {"Sun", 0},
 3209|  3.71k|            {"Mon", 1},
 3210|  3.71k|            {"Tue", 2},
 3211|  3.71k|            {"Wed", 3},
 3212|  3.71k|            {"Thu", 4},
 3213|  3.71k|            {"Fri", 5},
 3214|  3.71k|            {"Sat", 6},
 3215|  3.71k|        }};
 3216|  3.71k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 1.92k, False: 1.78k]
  ------------------
 3217|  1.92k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|  1.92k|        }
 3219|  1.78k|        return set_error(
 3220|  1.78k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.71k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2723|  1.92k|    {
 2724|  1.92k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  986|  3.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.92k]
  |  |  |  Branch (986:45): [True: 0, False: 1.92k]
  |  |  |  Branch (986:45): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 2725|      0|            return h.set_error(
 2726|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 2727|      0|        }
 2728|  1.92k|        t.wday = weekday{static_cast<unsigned>(d)};
 2729|  1.92k|        st.set_wday(h);
 2730|  1.92k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  7.42k|    {
 3710|  7.42k|        auto start_it = m_begin;
 3711|  7.42k|        std::size_t options_available = N;
 3712|  7.42k|        std::size_t chars_consumed = 0;
 3713|  25.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 19.6k, False: 5.44k]
  ------------------
 3714|  25.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 17.7k, False: 1.92k]
  ------------------
 3715|  17.7k|            std::size_t i = 0;
 3716|  17.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 54, False: 17.7k]
  ------------------
 3717|     54|                options_available = 0;
 3718|     54|                break;
 3719|     54|            }
 3720|  17.7k|            const auto ch = *m_begin;
 3721|  17.7k|            ++m_begin;
 3722|  79.9k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 62.2k, False: 17.7k]
  ------------------
 3723|  62.2k|                const auto cmp = static_cast<unsigned>(
 3724|  62.2k|                    ch ^ options[i].first[chars_consumed]);
 3725|  62.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 62.2k]
  ------------------
 3726|  62.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.0k, False: 12.2k]
  |  Branch (3726:34): [True: 49.9k, False: 80]
  ------------------
 3727|  49.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.9k|                                options.end());
 3729|  49.9k|                    --options_available;
 3730|  49.9k|                    continue;
 3731|  49.9k|                }
 3732|  12.3k|                ++i;
 3733|  12.3k|            }
 3734|  17.7k|            ++chars_consumed;
 3735|  17.7k|        }
 3736|  7.42k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 5.49k, False: 1.92k]
  ------------------
 3737|  5.49k|            m_begin = start_it;
 3738|  5.49k|            return std::nullopt;
 3739|  5.49k|        }
 3740|  1.92k|        return options.front().second;
 3741|  7.42k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 3259|  15.2k|    {
 3260|  15.2k|#if !SCN_DISABLE_LOCALE
 3261|  15.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 15.2k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  15.2k|#endif
 3268|       |
 3269|  15.2k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  15.2k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  15.2k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2634|  15.2k|    {
 2635|  15.2k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.57k, False: 12.6k]
  |  |  |  Branch (986:45): [True: 2.36k, False: 12.8k]
  |  |  |  Branch (986:45): [True: 210, False: 12.6k]
  |  |  ------------------
  ------------------
 2636|  2.57k|            return hdl.set_error(
 2637|  2.57k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2638|  2.57k|        }
 2639|  12.6k|        t.hour = h;
 2640|  12.6k|        st.set_hour24(hdl);
 2641|  12.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 3287|  15.1k|    {
 3288|  15.1k|#if !SCN_DISABLE_LOCALE
 3289|  15.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 15.1k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  15.1k|#endif
 3296|       |
 3297|  15.1k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  15.1k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  15.1k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2621|  15.1k|    {
 2622|  15.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.93k, False: 12.2k]
  |  |  |  Branch (986:45): [True: 2.90k, False: 12.2k]
  |  |  |  Branch (986:45): [True: 26, False: 12.2k]
  |  |  ------------------
  ------------------
 2623|  2.93k|            return h.set_error({scan_error::invalid_scanned_value,
 2624|  2.93k|                                "Invalid value for minutes"});
 2625|  2.93k|        }
 2626|  12.2k|        t.min = m;
 2627|  12.2k|        st.set_min(h);
 2628|  12.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3301|  3.18k|    {
 3302|  3.18k|#if !SCN_DISABLE_LOCALE
 3303|  3.18k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.18k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.18k|#endif
 3310|       |
 3311|  3.18k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.18k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.18k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2608|  3.18k|    {
 2609|  3.18k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  4.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.74k, False: 1.44k]
  |  |  |  Branch (986:45): [True: 1.74k, False: 1.44k]
  |  |  |  Branch (986:45): [True: 4, False: 1.44k]
  |  |  ------------------
  ------------------
 2610|  1.74k|            return h.set_error({scan_error::invalid_scanned_value,
 2611|  1.74k|                                "Invalid value for seconds"});
 2612|  1.74k|        }
 2613|  1.44k|        t.sec = s;
 2614|  1.44k|        st.set_sec(h);
 2615|  1.44k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3543|  6.35k|    {
 3544|       |        // %m/%d/%y
 3545|  6.35k|        constexpr CharT slash = '/';
 3546|  6.35k|        on_dec_month();
 3547|  6.35k|        on_text(&slash, &slash + 1);
 3548|  6.35k|        on_day_of_month();
 3549|  6.35k|        on_text(&slash, &slash + 1);
 3550|  6.35k|        on_short_year();
 3551|  6.35k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3553|  2.11k|    {
 3554|       |        // %Y-%m-%d
 3555|  2.11k|        constexpr CharT dash = '-';
 3556|  2.11k|        on_full_year();
 3557|  2.11k|        on_text(&dash, &dash + 1);
 3558|  2.11k|        on_dec_month();
 3559|  2.11k|        on_text(&dash, &dash + 1);
 3560|  2.11k|        on_day_of_month();
 3561|  2.11k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3585|  11.9k|    {
 3586|       |        // %H:%M
 3587|  11.9k|        constexpr CharT colon = ':';
 3588|  11.9k|        on_24_hour();
 3589|  11.9k|        on_text(&colon, &colon + 1);
 3590|  11.9k|        on_minute();
 3591|  11.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3593|  3.18k|    {
 3594|       |        // %H:%M:%S
 3595|  3.18k|        constexpr CharT colon = ':';
 3596|  3.18k|        on_24_hour();
 3597|  3.18k|        on_text(&colon, &colon + 1);
 3598|  3.18k|        on_minute();
 3599|  3.18k|        on_text(&colon, &colon + 1);
 3600|  3.18k|        on_second();
 3601|  3.18k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3632|  21.6k|    {
 3633|  21.6k|        m_st.verify(*this);
 3634|  21.6k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 21.6k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  21.6k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 21.3k, False: 330]
  |  Branch (3637:37): [True: 4.59k, False: 16.7k]
  |  Branch (3637:60): [True: 0, False: 16.7k]
  ------------------
 3638|  4.59k|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|  4.59k|        }
 3640|  21.6k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2773|  4.74k|    {
 2774|  4.74k|        assert(t.year);
 2775|  4.74k|        st.handle_short_year_and_century(*t.year, 0);
 2776|  4.74k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3643|  68.2k|    {
 3644|  68.2k|        return m_error;
 3645|  68.2k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3660|  21.6k|    {
 3661|  21.6k|        return m_begin;
 3662|  21.6k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3853|  29.1k|{
 3854|  29.1k|    {
 3855|  29.1k|        SCN_TRY(it,
  ------------------
  |  | 3939|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 258, False: 28.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    258|    }                                                  \
  |  |  |  | 3938|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  28.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  28.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  28.9k|    static_cast<    \
  |  | 1056|  28.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  28.9k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  28.9k|        ctx.range(), t, ctx.locale());
 3862|  28.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  28.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.6k, False: 16.2k]
  |  |  ------------------
  ------------------
 3864|  12.6k|        return unexpected(e.error());
 3865|  12.6k|    }
 3866|  16.2k|    return r.get_iterator();
 3867|  28.9k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2997|  28.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  28.9k|    static_cast<    \
  |  | 1056|  28.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  28.9k|          m_begin(ranges::begin(m_range)),
 2999|  28.9k|          m_tm(t),
 3000|  28.9k|          m_loc(loc)
 3001|  28.9k|    {
 3002|  28.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3648|  11.8k|    {
 3649|  11.8k|        set_error({scan_error::invalid_format_string, msg});
 3650|  11.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3653|  49.2k|    {
 3654|  49.2k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 12.6k, False: 36.6k]
  ------------------
 3655|  12.6k|            m_error = unexpected(e);
 3656|  12.6k|        }
 3657|  49.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3005|  26.0k|    {
 3006|  40.1k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 26.0k, False: 14.0k]
  ------------------
 3007|  26.0k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 164, False: 25.9k]
  ------------------
 3008|    164|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    164|            }
 3010|  25.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 11.8k, False: 14.0k]
  ------------------
 3011|  11.8k|                return on_error("Invalid literal character");
 3012|  11.8k|            }
 3013|  14.0k|            ++beg;
 3014|  14.0k|            ++m_begin;
 3015|  14.0k|        }
 3016|  26.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3035|  3.96k|    {
 3036|  3.96k|#if !SCN_DISABLE_LOCALE
 3037|  3.96k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 3.96k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  3.96k|#endif
 3044|       |
 3045|  3.96k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  3.96k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  3.96k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2686|  3.96k|    {
 2687|  3.96k|        t.year = y;
 2688|  3.96k|        st.set_full_year(h);
 2689|  3.96k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3671|  46.4k|    {
 3672|  46.4k|        int digits_read = 0;
 3673|  46.4k|        int accumulator = 0;
 3674|  75.8k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 75.5k, False: 346]
  ------------------
 3675|  75.5k|            const auto ch = *m_begin;
 3676|  75.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 22.4k, False: 53.0k]
  |  Branch (3676:36): [True: 19.1k, False: 33.9k]
  ------------------
 3677|  41.5k|                break;
 3678|  41.5k|            }
 3679|  33.9k|            ++m_begin;
 3680|  33.9k|            ++digits_read;
 3681|  33.9k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  33.9k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 4.56k, False: 29.3k]
  ------------------
 3683|  4.56k|                break;
 3684|  4.56k|            }
 3685|  33.9k|        }
 3686|  46.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 19.2k, False: 27.2k]
  ------------------
 3687|  19.2k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  19.2k|                                 "Too few integer digits"});
 3689|  19.2k|            return -1;
 3690|  19.2k|        }
 3691|  27.2k|        return accumulator;
 3692|  46.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3049|  1.93k|    {
 3050|  1.93k|#if !SCN_DISABLE_LOCALE
 3051|  1.93k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 1.93k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  1.93k|#endif
 3059|       |
 3060|  1.93k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  1.93k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  1.93k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2709|  1.93k|    {
 2710|  1.93k|        if (!t.year) {
  ------------------
  |  Branch (2710:13): [True: 1.93k, False: 0]
  ------------------
 2711|  1.93k|            t.year = y;
 2712|  1.93k|        }
 2713|      0|        else {
 2714|      0|            t.year = *t.year + y;
 2715|      0|        }
 2716|  1.93k|        st.set_short_year(h);
 2717|  1.93k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3092|  4.90k|    {
 3093|  4.90k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.90k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.90k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.90k|#endif
 3101|       |
 3102|  4.90k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.90k|            {"January", 1},
 3104|  4.90k|            {"February", 2},
 3105|  4.90k|            {"March", 3},
 3106|  4.90k|            {"April", 4},
 3107|  4.90k|            {"May", 5},
 3108|  4.90k|            {"June", 6},
 3109|  4.90k|            {"July", 7},
 3110|  4.90k|            {"August", 8},
 3111|  4.90k|            {"September", 9},
 3112|  4.90k|            {"October", 10},
 3113|  4.90k|            {"November", 11},
 3114|  4.90k|            {"December", 12},
 3115|  4.90k|        }};
 3116|  4.90k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 80, False: 4.82k]
  ------------------
 3117|     80|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     80|        }
 3119|  4.82k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.82k|            {"Jan", 1},
 3121|  4.82k|            {"Feb", 2},
 3122|  4.82k|            {"Mar", 3},
 3123|  4.82k|            {"Apr", 4},
 3124|  4.82k|            {"Jun", 6},
 3125|  4.82k|            {"Jul", 7},
 3126|  4.82k|            {"Aug", 8},
 3127|  4.82k|            {"Sep", 9},
 3128|  4.82k|            {"Oct", 10},
 3129|  4.82k|            {"Nov", 11},
 3130|  4.82k|            {"Dec", 12},
 3131|  4.82k|        }};
 3132|  4.82k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 3.02k, False: 1.79k]
  ------------------
 3133|  3.02k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|  3.02k|        }
 3135|  1.79k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  1.79k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2673|  7.25k|    {
 2674|  7.25k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.09k, False: 4.16k]
  |  |  |  Branch (986:45): [True: 2.99k, False: 4.26k]
  |  |  |  Branch (986:45): [True: 104, False: 4.16k]
  |  |  ------------------
  ------------------
 2675|  3.09k|            return h.set_error(
 2676|  3.09k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2677|  3.09k|        }
 2678|  4.16k|        t.mon = month{static_cast<unsigned>(m)};
 2679|  4.16k|        st.set_mon(h);
 2680|  4.16k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.90k|    {
 3710|  4.90k|        auto start_it = m_begin;
 3711|  4.90k|        std::size_t options_available = N;
 3712|  4.90k|        std::size_t chars_consumed = 0;
 3713|  19.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 14.5k, False: 4.76k]
  ------------------
 3714|  19.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 14.4k, False: 80]
  ------------------
 3715|  14.4k|            std::size_t i = 0;
 3716|  14.4k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 60, False: 14.3k]
  ------------------
 3717|     60|                options_available = 0;
 3718|     60|                break;
 3719|     60|            }
 3720|  14.3k|            const auto ch = *m_begin;
 3721|  14.3k|            ++m_begin;
 3722|  89.1k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 74.7k, False: 14.3k]
  ------------------
 3723|  74.7k|                const auto cmp = static_cast<unsigned>(
 3724|  74.7k|                    ch ^ options[i].first[chars_consumed]);
 3725|  74.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 74.7k]
  ------------------
 3726|  74.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 61.8k, False: 12.9k]
  |  Branch (3726:34): [True: 58.6k, False: 3.16k]
  ------------------
 3727|  58.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  58.6k|                                options.end());
 3729|  58.6k|                    --options_available;
 3730|  58.6k|                    continue;
 3731|  58.6k|                }
 3732|  16.1k|                ++i;
 3733|  16.1k|            }
 3734|  14.3k|            ++chars_consumed;
 3735|  14.3k|        }
 3736|  4.90k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.82k, False: 80]
  ------------------
 3737|  4.82k|            m_begin = start_it;
 3738|  4.82k|            return std::nullopt;
 3739|  4.82k|        }
 3740|     80|        return options.front().second;
 3741|  4.90k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.82k|    {
 3710|  4.82k|        auto start_it = m_begin;
 3711|  4.82k|        std::size_t options_available = N;
 3712|  4.82k|        std::size_t chars_consumed = 0;
 3713|  15.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 14.2k, False: 1.74k]
  ------------------
 3714|  15.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 11.1k, False: 3.02k]
  ------------------
 3715|  11.1k|            std::size_t i = 0;
 3716|  11.1k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 52, False: 11.1k]
  ------------------
 3717|     52|                options_available = 0;
 3718|     52|                break;
 3719|     52|            }
 3720|  11.1k|            const auto ch = *m_begin;
 3721|  11.1k|            ++m_begin;
 3722|  70.5k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 59.3k, False: 11.1k]
  ------------------
 3723|  59.3k|                const auto cmp = static_cast<unsigned>(
 3724|  59.3k|                    ch ^ options[i].first[chars_consumed]);
 3725|  59.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 59.3k]
  ------------------
 3726|  59.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 53.0k, False: 6.35k]
  |  Branch (3726:34): [True: 49.9k, False: 3.07k]
  ------------------
 3727|  49.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.9k|                                options.end());
 3729|  49.9k|                    --options_available;
 3730|  49.9k|                    continue;
 3731|  49.9k|                }
 3732|  9.43k|                ++i;
 3733|  9.43k|            }
 3734|  11.1k|            ++chars_consumed;
 3735|  11.1k|        }
 3736|  4.82k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 1.79k, False: 3.02k]
  ------------------
 3737|  1.79k|            m_begin = start_it;
 3738|  1.79k|            return std::nullopt;
 3739|  1.79k|        }
 3740|  3.02k|        return options.front().second;
 3741|  4.82k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3138|  4.15k|    {
 3139|  4.15k|#if !SCN_DISABLE_LOCALE
 3140|  4.15k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 4.15k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  4.15k|#endif
 3147|       |
 3148|  4.15k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  4.15k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  4.15k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3170|  4.13k|    {
 3171|  4.13k|#if !SCN_DISABLE_LOCALE
 3172|  4.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 4.13k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  4.13k|#endif
 3179|       |
 3180|  4.13k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  4.13k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  4.13k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2660|  4.13k|    {
 2661|  4.13k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  4.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.59k, False: 548]
  |  |  |  Branch (986:45): [True: 3.51k, False: 622]
  |  |  |  Branch (986:45): [True: 74, False: 548]
  |  |  ------------------
  ------------------
 2662|  3.59k|            return h.set_error(
 2663|  3.59k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2664|  3.59k|        }
 2665|    548|        t.mday = d;
 2666|    548|        st.set_mday(h);
 2667|    548|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3185|  3.58k|    {
 3186|  3.58k|#if !SCN_DISABLE_LOCALE
 3187|  3.58k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.58k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.58k|#endif
 3194|       |
 3195|  3.58k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.58k|            {"Sunday", 0},
 3197|  3.58k|            {"Monday", 1},
 3198|  3.58k|            {"Tuesday", 2},
 3199|  3.58k|            {"Wednesday", 3},
 3200|  3.58k|            {"Thursday", 4},
 3201|  3.58k|            {"Friday", 5},
 3202|  3.58k|            {"Saturday", 6},
 3203|  3.58k|        }};
 3204|  3.58k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.58k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.58k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.58k|            {"Sun", 0},
 3209|  3.58k|            {"Mon", 1},
 3210|  3.58k|            {"Tue", 2},
 3211|  3.58k|            {"Wed", 3},
 3212|  3.58k|            {"Thu", 4},
 3213|  3.58k|            {"Fri", 5},
 3214|  3.58k|            {"Sat", 6},
 3215|  3.58k|        }};
 3216|  3.58k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 1.77k, False: 1.81k]
  ------------------
 3217|  1.77k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|  1.77k|        }
 3219|  1.81k|        return set_error(
 3220|  1.81k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.58k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2723|  1.77k|    {
 2724|  1.77k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  986|  3.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.77k]
  |  |  |  Branch (986:45): [True: 0, False: 1.77k]
  |  |  |  Branch (986:45): [True: 0, False: 1.77k]
  |  |  ------------------
  ------------------
 2725|      0|            return h.set_error(
 2726|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 2727|      0|        }
 2728|  1.77k|        t.wday = weekday{static_cast<unsigned>(d)};
 2729|  1.77k|        st.set_wday(h);
 2730|  1.77k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  7.16k|    {
 3710|  7.16k|        auto start_it = m_begin;
 3711|  7.16k|        std::size_t options_available = N;
 3712|  7.16k|        std::size_t chars_consumed = 0;
 3713|  23.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 18.4k, False: 5.36k]
  ------------------
 3714|  23.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 16.6k, False: 1.77k]
  ------------------
 3715|  16.6k|            std::size_t i = 0;
 3716|  16.6k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 38, False: 16.6k]
  ------------------
 3717|     38|                options_available = 0;
 3718|     38|                break;
 3719|     38|            }
 3720|  16.6k|            const auto ch = *m_begin;
 3721|  16.6k|            ++m_begin;
 3722|  76.2k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 59.6k, False: 16.6k]
  ------------------
 3723|  59.6k|                const auto cmp = static_cast<unsigned>(
 3724|  59.6k|                    ch ^ options[i].first[chars_consumed]);
 3725|  59.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 59.6k]
  ------------------
 3726|  59.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 48.4k, False: 11.2k]
  |  Branch (3726:34): [True: 48.3k, False: 52]
  ------------------
 3727|  48.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  48.3k|                                options.end());
 3729|  48.3k|                    --options_available;
 3730|  48.3k|                    continue;
 3731|  48.3k|                }
 3732|  11.2k|                ++i;
 3733|  11.2k|            }
 3734|  16.6k|            ++chars_consumed;
 3735|  16.6k|        }
 3736|  7.16k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 5.39k, False: 1.77k]
  ------------------
 3737|  5.39k|            m_begin = start_it;
 3738|  5.39k|            return std::nullopt;
 3739|  5.39k|        }
 3740|  1.77k|        return options.front().second;
 3741|  7.16k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 3259|  14.5k|    {
 3260|  14.5k|#if !SCN_DISABLE_LOCALE
 3261|  14.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 14.5k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  14.5k|#endif
 3268|       |
 3269|  14.5k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  14.5k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  14.5k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2634|  14.5k|    {
 2635|  14.5k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.85k, False: 11.7k]
  |  |  |  Branch (986:45): [True: 2.66k, False: 11.9k]
  |  |  |  Branch (986:45): [True: 188, False: 11.7k]
  |  |  ------------------
  ------------------
 2636|  2.85k|            return hdl.set_error(
 2637|  2.85k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2638|  2.85k|        }
 2639|  11.7k|        t.hour = h;
 2640|  11.7k|        st.set_hour24(hdl);
 2641|  11.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 3287|  14.5k|    {
 3288|  14.5k|#if !SCN_DISABLE_LOCALE
 3289|  14.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 14.5k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  14.5k|#endif
 3296|       |
 3297|  14.5k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  14.5k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  14.5k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2621|  14.5k|    {
 2622|  14.5k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.03k, False: 11.4k]
  |  |  |  Branch (986:45): [True: 3.02k, False: 11.5k]
  |  |  |  Branch (986:45): [True: 18, False: 11.4k]
  |  |  ------------------
  ------------------
 2623|  3.03k|            return h.set_error({scan_error::invalid_scanned_value,
 2624|  3.03k|                                "Invalid value for minutes"});
 2625|  3.03k|        }
 2626|  11.4k|        t.min = m;
 2627|  11.4k|        st.set_min(h);
 2628|  11.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3301|  3.21k|    {
 3302|  3.21k|#if !SCN_DISABLE_LOCALE
 3303|  3.21k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.21k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.21k|#endif
 3310|       |
 3311|  3.21k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.21k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.21k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2608|  3.21k|    {
 2609|  3.21k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  4.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.78k, False: 1.42k]
  |  |  |  Branch (986:45): [True: 1.78k, False: 1.43k]
  |  |  |  Branch (986:45): [True: 2, False: 1.42k]
  |  |  ------------------
  ------------------
 2610|  1.78k|            return h.set_error({scan_error::invalid_scanned_value,
 2611|  1.78k|                                "Invalid value for seconds"});
 2612|  1.78k|        }
 2613|  1.42k|        t.sec = s;
 2614|  1.42k|        st.set_sec(h);
 2615|  1.42k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3543|  1.93k|    {
 3544|       |        // %m/%d/%y
 3545|  1.93k|        constexpr CharT slash = '/';
 3546|  1.93k|        on_dec_month();
 3547|  1.93k|        on_text(&slash, &slash + 1);
 3548|  1.93k|        on_day_of_month();
 3549|  1.93k|        on_text(&slash, &slash + 1);
 3550|  1.93k|        on_short_year();
 3551|  1.93k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3553|  2.14k|    {
 3554|       |        // %Y-%m-%d
 3555|  2.14k|        constexpr CharT dash = '-';
 3556|  2.14k|        on_full_year();
 3557|  2.14k|        on_text(&dash, &dash + 1);
 3558|  2.14k|        on_dec_month();
 3559|  2.14k|        on_text(&dash, &dash + 1);
 3560|  2.14k|        on_day_of_month();
 3561|  2.14k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3585|  11.3k|    {
 3586|       |        // %H:%M
 3587|  11.3k|        constexpr CharT colon = ':';
 3588|  11.3k|        on_24_hour();
 3589|  11.3k|        on_text(&colon, &colon + 1);
 3590|  11.3k|        on_minute();
 3591|  11.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3593|  3.21k|    {
 3594|       |        // %H:%M:%S
 3595|  3.21k|        constexpr CharT colon = ':';
 3596|  3.21k|        on_24_hour();
 3597|  3.21k|        on_text(&colon, &colon + 1);
 3598|  3.21k|        on_minute();
 3599|  3.21k|        on_text(&colon, &colon + 1);
 3600|  3.21k|        on_second();
 3601|  3.21k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3632|  16.2k|    {
 3633|  16.2k|        m_st.verify(*this);
 3634|  16.2k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 16.2k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  16.2k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 15.9k, False: 330]
  |  Branch (3637:37): [True: 130, False: 15.8k]
  |  Branch (3637:60): [True: 0, False: 15.8k]
  ------------------
 3638|    130|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|    130|        }
 3640|  16.2k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3643|  58.0k|    {
 3644|  58.0k|        return m_error;
 3645|  58.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3660|  16.2k|    {
 3661|  16.2k|        return m_begin;
 3662|  16.2k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3853|  33.6k|{
 3854|  33.6k|    {
 3855|  33.6k|        SCN_TRY(it,
  ------------------
  |  | 3939|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 360, False: 33.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    360|    }                                                  \
  |  |  |  | 3938|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  33.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  33.2k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  33.2k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  33.2k|    static_cast<    \
  |  | 1056|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  33.2k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  33.2k|        ctx.range(), t, ctx.locale());
 3862|  33.2k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  33.2k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 25.4k, False: 7.83k]
  |  |  ------------------
  ------------------
 3864|  25.4k|        return unexpected(e.error());
 3865|  25.4k|    }
 3866|  7.83k|    return r.get_iterator();
 3867|  33.2k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2997|  33.2k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  33.2k|    static_cast<    \
  |  | 1056|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  33.2k|          m_begin(ranges::begin(m_range)),
 2999|  33.2k|          m_tm(t),
 3000|  33.2k|          m_loc(loc)
 3001|  33.2k|    {
 3002|  33.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3648|  24.8k|    {
 3649|  24.8k|        set_error({scan_error::invalid_format_string, msg});
 3650|  24.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3653|   109k|    {
 3654|   109k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 25.4k, False: 83.9k]
  ------------------
 3655|  25.4k|            m_error = unexpected(e);
 3656|  25.4k|        }
 3657|   109k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3005|  32.8k|    {
 3006|  40.7k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 32.8k, False: 7.88k]
  ------------------
 3007|  32.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 118, False: 32.7k]
  ------------------
 3008|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    118|            }
 3010|  32.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 24.8k, False: 7.88k]
  ------------------
 3011|  24.8k|                return on_error("Invalid literal character");
 3012|  24.8k|            }
 3013|  7.88k|            ++beg;
 3014|  7.88k|            ++m_begin;
 3015|  7.88k|        }
 3016|  32.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3035|  7.29k|    {
 3036|  7.29k|#if !SCN_DISABLE_LOCALE
 3037|  7.29k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 7.29k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  7.29k|#endif
 3044|       |
 3045|  7.29k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  7.29k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  7.29k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  7.29k|    {
 2509|  7.29k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  7.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.29k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  7.29k|        t.tm_year = y - 1900;
 2514|  7.29k|        st.set_full_year(h);
 2515|  7.29k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3671|  58.1k|    {
 3672|  58.1k|        int digits_read = 0;
 3673|  58.1k|        int accumulator = 0;
 3674|  75.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 74.7k, False: 260]
  ------------------
 3675|  74.7k|            const auto ch = *m_begin;
 3676|  74.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 32.3k, False: 42.3k]
  |  Branch (3676:36): [True: 22.8k, False: 19.5k]
  ------------------
 3677|  55.2k|                break;
 3678|  55.2k|            }
 3679|  19.5k|            ++m_begin;
 3680|  19.5k|            ++digits_read;
 3681|  19.5k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  19.5k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 2.65k, False: 16.8k]
  ------------------
 3683|  2.65k|                break;
 3684|  2.65k|            }
 3685|  19.5k|        }
 3686|  58.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 42.1k, False: 15.9k]
  ------------------
 3687|  42.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  42.1k|                                 "Too few integer digits"});
 3689|  42.1k|            return -1;
 3690|  42.1k|        }
 3691|  15.9k|        return accumulator;
 3692|  58.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3049|  3.64k|    {
 3050|  3.64k|#if !SCN_DISABLE_LOCALE
 3051|  3.64k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 3.64k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  3.64k|#endif
 3059|       |
 3060|  3.64k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  3.64k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  3.64k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  3.64k|    {
 2526|  3.64k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.63k, False: 18]
  |  |  |  Branch (986:45): [True: 3.63k, False: 18]
  |  |  |  Branch (986:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2527|  3.63k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  3.63k|                                "Invalid value for tm_year"});
 2529|  3.63k|        }
 2530|     18|        st.short_year_value = y;
 2531|     18|        st.set_short_year(h);
 2532|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3092|  4.35k|    {
 3093|  4.35k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.35k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.35k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.35k|#endif
 3101|       |
 3102|  4.35k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.35k|            {"January", 1},
 3104|  4.35k|            {"February", 2},
 3105|  4.35k|            {"March", 3},
 3106|  4.35k|            {"April", 4},
 3107|  4.35k|            {"May", 5},
 3108|  4.35k|            {"June", 6},
 3109|  4.35k|            {"July", 7},
 3110|  4.35k|            {"August", 8},
 3111|  4.35k|            {"September", 9},
 3112|  4.35k|            {"October", 10},
 3113|  4.35k|            {"November", 11},
 3114|  4.35k|            {"December", 12},
 3115|  4.35k|        }};
 3116|  4.35k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 22, False: 4.33k]
  ------------------
 3117|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     22|        }
 3119|  4.33k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.33k|            {"Jan", 1},
 3121|  4.33k|            {"Feb", 2},
 3122|  4.33k|            {"Mar", 3},
 3123|  4.33k|            {"Apr", 4},
 3124|  4.33k|            {"Jun", 6},
 3125|  4.33k|            {"Jul", 7},
 3126|  4.33k|            {"Aug", 8},
 3127|  4.33k|            {"Sep", 9},
 3128|  4.33k|            {"Oct", 10},
 3129|  4.33k|            {"Nov", 11},
 3130|  4.33k|            {"Dec", 12},
 3131|  4.33k|        }};
 3132|  4.33k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 706, False: 3.62k]
  ------------------
 3133|    706|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|    706|        }
 3135|  3.62k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  3.62k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  8.06k|    {
 2499|  8.06k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  9.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.93k, False: 1.13k]
  |  |  |  Branch (986:45): [True: 6.88k, False: 1.18k]
  |  |  |  Branch (986:45): [True: 58, False: 1.13k]
  |  |  ------------------
  ------------------
 2500|  6.93k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  6.93k|                                "Invalid value for tm_mon"});
 2502|  6.93k|        }
 2503|  1.13k|        t.tm_mon = m - 1;
 2504|  1.13k|        st.set_mon(h);
 2505|  1.13k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.35k|    {
 3710|  4.35k|        auto start_it = m_begin;
 3711|  4.35k|        std::size_t options_available = N;
 3712|  4.35k|        std::size_t chars_consumed = 0;
 3713|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.64k, False: 4.29k]
  ------------------
 3714|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.62k, False: 22]
  ------------------
 3715|  6.62k|            std::size_t i = 0;
 3716|  6.62k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 40, False: 6.58k]
  ------------------
 3717|     40|                options_available = 0;
 3718|     40|                break;
 3719|     40|            }
 3720|  6.58k|            const auto ch = *m_begin;
 3721|  6.58k|            ++m_begin;
 3722|  62.5k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 55.9k, False: 6.58k]
  ------------------
 3723|  55.9k|                const auto cmp = static_cast<unsigned>(
 3724|  55.9k|                    ch ^ options[i].first[chars_consumed]);
 3725|  55.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 55.9k]
  ------------------
 3726|  55.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 53.0k, False: 2.98k]
  |  Branch (3726:34): [True: 52.1k, False: 844]
  ------------------
 3727|  52.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  52.1k|                                options.end());
 3729|  52.1k|                    --options_available;
 3730|  52.1k|                    continue;
 3731|  52.1k|                }
 3732|  3.82k|                ++i;
 3733|  3.82k|            }
 3734|  6.58k|            ++chars_consumed;
 3735|  6.58k|        }
 3736|  4.35k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.33k, False: 22]
  ------------------
 3737|  4.33k|            m_begin = start_it;
 3738|  4.33k|            return std::nullopt;
 3739|  4.33k|        }
 3740|     22|        return options.front().second;
 3741|  4.35k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.33k|    {
 3710|  4.33k|        auto start_it = m_begin;
 3711|  4.33k|        std::size_t options_available = N;
 3712|  4.33k|        std::size_t chars_consumed = 0;
 3713|  10.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.55k, False: 3.59k]
  ------------------
 3714|  10.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 5.84k, False: 706]
  ------------------
 3715|  5.84k|            std::size_t i = 0;
 3716|  5.84k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 30, False: 5.81k]
  ------------------
 3717|     30|                options_available = 0;
 3718|     30|                break;
 3719|     30|            }
 3720|  5.81k|            const auto ch = *m_begin;
 3721|  5.81k|            ++m_begin;
 3722|  54.9k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 49.1k, False: 5.81k]
  ------------------
 3723|  49.1k|                const auto cmp = static_cast<unsigned>(
 3724|  49.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  49.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 49.1k]
  ------------------
 3726|  49.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 47.6k, False: 1.47k]
  |  Branch (3726:34): [True: 46.9k, False: 790]
  ------------------
 3727|  46.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  46.9k|                                options.end());
 3729|  46.9k|                    --options_available;
 3730|  46.9k|                    continue;
 3731|  46.9k|                }
 3732|  2.26k|                ++i;
 3733|  2.26k|            }
 3734|  5.81k|            ++chars_consumed;
 3735|  5.81k|        }
 3736|  4.33k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 3.62k, False: 706]
  ------------------
 3737|  3.62k|            m_begin = start_it;
 3738|  3.62k|            return std::nullopt;
 3739|  3.62k|        }
 3740|    706|        return options.front().second;
 3741|  4.33k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3138|  7.34k|    {
 3139|  7.34k|#if !SCN_DISABLE_LOCALE
 3140|  7.34k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 7.34k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  7.34k|#endif
 3147|       |
 3148|  7.34k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  7.34k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  7.34k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3170|  7.32k|    {
 3171|  7.32k|#if !SCN_DISABLE_LOCALE
 3172|  7.32k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 7.32k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  7.32k|#endif
 3179|       |
 3180|  7.32k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  7.32k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  7.32k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  7.32k|    {
 2489|  7.32k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  7.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.24k, False: 82]
  |  |  |  Branch (986:45): [True: 7.23k, False: 90]
  |  |  |  Branch (986:45): [True: 8, False: 82]
  |  |  ------------------
  ------------------
 2490|  7.24k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  7.24k|                                "Invalid value for tm_mday"});
 2492|  7.24k|        }
 2493|     82|        t.tm_mday = d;
 2494|     82|        st.set_mday(h);
 2495|     82|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3185|  3.64k|    {
 3186|  3.64k|#if !SCN_DISABLE_LOCALE
 3187|  3.64k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.64k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.64k|#endif
 3194|       |
 3195|  3.64k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.64k|            {"Sunday", 0},
 3197|  3.64k|            {"Monday", 1},
 3198|  3.64k|            {"Tuesday", 2},
 3199|  3.64k|            {"Wednesday", 3},
 3200|  3.64k|            {"Thursday", 4},
 3201|  3.64k|            {"Friday", 5},
 3202|  3.64k|            {"Saturday", 6},
 3203|  3.64k|        }};
 3204|  3.64k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.64k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.64k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.64k|            {"Sun", 0},
 3209|  3.64k|            {"Mon", 1},
 3210|  3.64k|            {"Tue", 2},
 3211|  3.64k|            {"Wed", 3},
 3212|  3.64k|            {"Thu", 4},
 3213|  3.64k|            {"Fri", 5},
 3214|  3.64k|            {"Sat", 6},
 3215|  3.64k|        }};
 3216|  3.64k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 0, False: 3.64k]
  ------------------
 3217|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|      0|        }
 3219|  3.64k|        return set_error(
 3220|  3.64k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.64k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  7.28k|    {
 3710|  7.28k|        auto start_it = m_begin;
 3711|  7.28k|        std::size_t options_available = N;
 3712|  7.28k|        std::size_t chars_consumed = 0;
 3713|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 7.49k, False: 7.26k]
  ------------------
 3714|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 7.49k, False: 0]
  ------------------
 3715|  7.49k|            std::size_t i = 0;
 3716|  7.49k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 24, False: 7.47k]
  ------------------
 3717|     24|                options_available = 0;
 3718|     24|                break;
 3719|     24|            }
 3720|  7.47k|            const auto ch = *m_begin;
 3721|  7.47k|            ++m_begin;
 3722|  58.6k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 51.1k, False: 7.47k]
  ------------------
 3723|  51.1k|                const auto cmp = static_cast<unsigned>(
 3724|  51.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  51.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 51.1k]
  ------------------
 3726|  51.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.9k, False: 224]
  |  Branch (3726:34): [True: 50.9k, False: 16]
  ------------------
 3727|  50.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  50.9k|                                options.end());
 3729|  50.9k|                    --options_available;
 3730|  50.9k|                    continue;
 3731|  50.9k|                }
 3732|    240|                ++i;
 3733|    240|            }
 3734|  7.47k|            ++chars_consumed;
 3735|  7.47k|        }
 3736|  7.28k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 7.28k, False: 0]
  ------------------
 3737|  7.28k|            m_begin = start_it;
 3738|  7.28k|            return std::nullopt;
 3739|  7.28k|        }
 3740|      0|        return options.front().second;
 3741|  7.28k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 3259|  14.3k|    {
 3260|  14.3k|#if !SCN_DISABLE_LOCALE
 3261|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 14.3k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  14.3k|#endif
 3268|       |
 3269|  14.3k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  14.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  14.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  14.3k|    {
 2469|  14.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.82k, False: 7.51k]
  |  |  |  Branch (986:45): [True: 6.73k, False: 7.60k]
  |  |  |  Branch (986:45): [True: 90, False: 7.51k]
  |  |  ------------------
  ------------------
 2470|  6.82k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  6.82k|                                  "Invalid value for tm_hour"});
 2472|  6.82k|        }
 2473|  7.51k|        t.tm_hour = h;
 2474|  7.51k|        st.set_hour24(hdl);
 2475|  7.51k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 3287|  14.3k|    {
 3288|  14.3k|#if !SCN_DISABLE_LOCALE
 3289|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 14.3k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  14.3k|#endif
 3296|       |
 3297|  14.3k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  14.3k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  14.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  14.3k|    {
 2459|  14.3k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.84k, False: 7.48k]
  |  |  |  Branch (986:45): [True: 6.83k, False: 7.49k]
  |  |  |  Branch (986:45): [True: 12, False: 7.48k]
  |  |  ------------------
  ------------------
 2460|  6.84k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  6.84k|                                "Invalid value for tm_min"});
 2462|  6.84k|        }
 2463|  7.48k|        t.tm_min = m;
 2464|  7.48k|        st.set_min(h);
 2465|  7.48k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3301|  3.84k|    {
 3302|  3.84k|#if !SCN_DISABLE_LOCALE
 3303|  3.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.84k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.84k|#endif
 3310|       |
 3311|  3.84k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.84k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.84k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  3.84k|    {
 2449|  3.84k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  4.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.61k, False: 236]
  |  |  |  Branch (986:45): [True: 3.61k, False: 238]
  |  |  |  Branch (986:45): [True: 2, False: 236]
  |  |  ------------------
  ------------------
 2450|  3.61k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  3.61k|                                "Invalid value for tm_sec"});
 2452|  3.61k|        }
 2453|    236|        t.tm_sec = s;
 2454|    236|        st.set_sec(h);
 2455|    236|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3543|  3.64k|    {
 3544|       |        // %m/%d/%y
 3545|  3.64k|        constexpr CharT slash = '/';
 3546|  3.64k|        on_dec_month();
 3547|  3.64k|        on_text(&slash, &slash + 1);
 3548|  3.64k|        on_day_of_month();
 3549|  3.64k|        on_text(&slash, &slash + 1);
 3550|  3.64k|        on_short_year();
 3551|  3.64k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3553|  3.65k|    {
 3554|       |        // %Y-%m-%d
 3555|  3.65k|        constexpr CharT dash = '-';
 3556|  3.65k|        on_full_year();
 3557|  3.65k|        on_text(&dash, &dash + 1);
 3558|  3.65k|        on_dec_month();
 3559|  3.65k|        on_text(&dash, &dash + 1);
 3560|  3.65k|        on_day_of_month();
 3561|  3.65k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3585|  10.4k|    {
 3586|       |        // %H:%M
 3587|  10.4k|        constexpr CharT colon = ':';
 3588|  10.4k|        on_24_hour();
 3589|  10.4k|        on_text(&colon, &colon + 1);
 3590|  10.4k|        on_minute();
 3591|  10.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3593|  3.84k|    {
 3594|       |        // %H:%M:%S
 3595|  3.84k|        constexpr CharT colon = ':';
 3596|  3.84k|        on_24_hour();
 3597|  3.84k|        on_text(&colon, &colon + 1);
 3598|  3.84k|        on_minute();
 3599|  3.84k|        on_text(&colon, &colon + 1);
 3600|  3.84k|        on_second();
 3601|  3.84k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3632|  7.83k|    {
 3633|  7.83k|        m_st.verify(*this);
 3634|  7.83k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 7.83k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  7.83k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 7.82k, False: 12]
  |  Branch (3637:37): [True: 10, False: 7.81k]
  |  Branch (3637:60): [True: 0, False: 7.81k]
  ------------------
 3638|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|     10|        }
 3640|  7.83k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3643|  66.5k|    {
 3644|  66.5k|        return m_error;
 3645|  66.5k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3660|  7.83k|    {
 3661|  7.83k|        return m_begin;
 3662|  7.83k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3853|  33.6k|{
 3854|  33.6k|    {
 3855|  33.6k|        SCN_TRY(it,
  ------------------
  |  | 3939|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 360, False: 33.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    360|    }                                                  \
  |  |  |  | 3938|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  33.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  33.2k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  33.2k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  33.2k|    static_cast<    \
  |  | 1056|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  33.2k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  33.2k|        ctx.range(), t, ctx.locale());
 3862|  33.2k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  33.2k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 25.4k, False: 7.83k]
  |  |  ------------------
  ------------------
 3864|  25.4k|        return unexpected(e.error());
 3865|  25.4k|    }
 3866|  7.83k|    return r.get_iterator();
 3867|  33.2k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|   100k|{
  250|   100k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|   100k|        .transform_error(impl::make_eof_scan_error);
  252|   100k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2997|  33.2k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  33.2k|    static_cast<    \
  |  | 1056|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  33.2k|          m_begin(ranges::begin(m_range)),
 2999|  33.2k|          m_tm(t),
 3000|  33.2k|          m_loc(loc)
 3001|  33.2k|    {
 3002|  33.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3648|  24.8k|    {
 3649|  24.8k|        set_error({scan_error::invalid_format_string, msg});
 3650|  24.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3653|   109k|    {
 3654|   109k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 25.4k, False: 83.9k]
  ------------------
 3655|  25.4k|            m_error = unexpected(e);
 3656|  25.4k|        }
 3657|   109k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3005|  32.8k|    {
 3006|  40.7k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 32.8k, False: 7.88k]
  ------------------
 3007|  32.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 118, False: 32.7k]
  ------------------
 3008|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    118|            }
 3010|  32.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 24.8k, False: 7.88k]
  ------------------
 3011|  24.8k|                return on_error("Invalid literal character");
 3012|  24.8k|            }
 3013|  7.88k|            ++beg;
 3014|  7.88k|            ++m_begin;
 3015|  7.88k|        }
 3016|  32.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3035|  7.29k|    {
 3036|  7.29k|#if !SCN_DISABLE_LOCALE
 3037|  7.29k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 7.29k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  7.29k|#endif
 3044|       |
 3045|  7.29k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  7.29k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  7.29k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  7.29k|    {
 2509|  7.29k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  7.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.29k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  7.29k|        t.tm_year = y - 1900;
 2514|  7.29k|        st.set_full_year(h);
 2515|  7.29k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3671|  58.1k|    {
 3672|  58.1k|        int digits_read = 0;
 3673|  58.1k|        int accumulator = 0;
 3674|  75.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 74.7k, False: 260]
  ------------------
 3675|  74.7k|            const auto ch = *m_begin;
 3676|  74.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 32.3k, False: 42.3k]
  |  Branch (3676:36): [True: 22.8k, False: 19.5k]
  ------------------
 3677|  55.2k|                break;
 3678|  55.2k|            }
 3679|  19.5k|            ++m_begin;
 3680|  19.5k|            ++digits_read;
 3681|  19.5k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  19.5k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 2.65k, False: 16.8k]
  ------------------
 3683|  2.65k|                break;
 3684|  2.65k|            }
 3685|  19.5k|        }
 3686|  58.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 42.1k, False: 15.9k]
  ------------------
 3687|  42.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  42.1k|                                 "Too few integer digits"});
 3689|  42.1k|            return -1;
 3690|  42.1k|        }
 3691|  15.9k|        return accumulator;
 3692|  58.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3049|  3.64k|    {
 3050|  3.64k|#if !SCN_DISABLE_LOCALE
 3051|  3.64k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 3.64k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  3.64k|#endif
 3059|       |
 3060|  3.64k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  3.64k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  3.64k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  3.64k|    {
 2526|  3.64k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.63k, False: 18]
  |  |  |  Branch (986:45): [True: 3.63k, False: 18]
  |  |  |  Branch (986:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2527|  3.63k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  3.63k|                                "Invalid value for tm_year"});
 2529|  3.63k|        }
 2530|     18|        st.short_year_value = y;
 2531|     18|        st.set_short_year(h);
 2532|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3092|  4.35k|    {
 3093|  4.35k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.35k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.35k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.35k|#endif
 3101|       |
 3102|  4.35k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.35k|            {"January", 1},
 3104|  4.35k|            {"February", 2},
 3105|  4.35k|            {"March", 3},
 3106|  4.35k|            {"April", 4},
 3107|  4.35k|            {"May", 5},
 3108|  4.35k|            {"June", 6},
 3109|  4.35k|            {"July", 7},
 3110|  4.35k|            {"August", 8},
 3111|  4.35k|            {"September", 9},
 3112|  4.35k|            {"October", 10},
 3113|  4.35k|            {"November", 11},
 3114|  4.35k|            {"December", 12},
 3115|  4.35k|        }};
 3116|  4.35k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 22, False: 4.33k]
  ------------------
 3117|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     22|        }
 3119|  4.33k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.33k|            {"Jan", 1},
 3121|  4.33k|            {"Feb", 2},
 3122|  4.33k|            {"Mar", 3},
 3123|  4.33k|            {"Apr", 4},
 3124|  4.33k|            {"Jun", 6},
 3125|  4.33k|            {"Jul", 7},
 3126|  4.33k|            {"Aug", 8},
 3127|  4.33k|            {"Sep", 9},
 3128|  4.33k|            {"Oct", 10},
 3129|  4.33k|            {"Nov", 11},
 3130|  4.33k|            {"Dec", 12},
 3131|  4.33k|        }};
 3132|  4.33k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 706, False: 3.62k]
  ------------------
 3133|    706|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|    706|        }
 3135|  3.62k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  3.62k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  8.06k|    {
 2499|  8.06k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  9.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.93k, False: 1.13k]
  |  |  |  Branch (986:45): [True: 6.88k, False: 1.18k]
  |  |  |  Branch (986:45): [True: 58, False: 1.13k]
  |  |  ------------------
  ------------------
 2500|  6.93k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  6.93k|                                "Invalid value for tm_mon"});
 2502|  6.93k|        }
 2503|  1.13k|        t.tm_mon = m - 1;
 2504|  1.13k|        st.set_mon(h);
 2505|  1.13k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.35k|    {
 3710|  4.35k|        auto start_it = m_begin;
 3711|  4.35k|        std::size_t options_available = N;
 3712|  4.35k|        std::size_t chars_consumed = 0;
 3713|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.64k, False: 4.29k]
  ------------------
 3714|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.62k, False: 22]
  ------------------
 3715|  6.62k|            std::size_t i = 0;
 3716|  6.62k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 40, False: 6.58k]
  ------------------
 3717|     40|                options_available = 0;
 3718|     40|                break;
 3719|     40|            }
 3720|  6.58k|            const auto ch = *m_begin;
 3721|  6.58k|            ++m_begin;
 3722|  62.5k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 55.9k, False: 6.58k]
  ------------------
 3723|  55.9k|                const auto cmp = static_cast<unsigned>(
 3724|  55.9k|                    ch ^ options[i].first[chars_consumed]);
 3725|  55.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 55.9k]
  ------------------
 3726|  55.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 53.0k, False: 2.98k]
  |  Branch (3726:34): [True: 52.1k, False: 844]
  ------------------
 3727|  52.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  52.1k|                                options.end());
 3729|  52.1k|                    --options_available;
 3730|  52.1k|                    continue;
 3731|  52.1k|                }
 3732|  3.82k|                ++i;
 3733|  3.82k|            }
 3734|  6.58k|            ++chars_consumed;
 3735|  6.58k|        }
 3736|  4.35k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.33k, False: 22]
  ------------------
 3737|  4.33k|            m_begin = start_it;
 3738|  4.33k|            return std::nullopt;
 3739|  4.33k|        }
 3740|     22|        return options.front().second;
 3741|  4.35k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.33k|    {
 3710|  4.33k|        auto start_it = m_begin;
 3711|  4.33k|        std::size_t options_available = N;
 3712|  4.33k|        std::size_t chars_consumed = 0;
 3713|  10.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.55k, False: 3.59k]
  ------------------
 3714|  10.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 5.84k, False: 706]
  ------------------
 3715|  5.84k|            std::size_t i = 0;
 3716|  5.84k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 30, False: 5.81k]
  ------------------
 3717|     30|                options_available = 0;
 3718|     30|                break;
 3719|     30|            }
 3720|  5.81k|            const auto ch = *m_begin;
 3721|  5.81k|            ++m_begin;
 3722|  54.9k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 49.1k, False: 5.81k]
  ------------------
 3723|  49.1k|                const auto cmp = static_cast<unsigned>(
 3724|  49.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  49.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 49.1k]
  ------------------
 3726|  49.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 47.6k, False: 1.47k]
  |  Branch (3726:34): [True: 46.9k, False: 790]
  ------------------
 3727|  46.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  46.9k|                                options.end());
 3729|  46.9k|                    --options_available;
 3730|  46.9k|                    continue;
 3731|  46.9k|                }
 3732|  2.26k|                ++i;
 3733|  2.26k|            }
 3734|  5.81k|            ++chars_consumed;
 3735|  5.81k|        }
 3736|  4.33k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 3.62k, False: 706]
  ------------------
 3737|  3.62k|            m_begin = start_it;
 3738|  3.62k|            return std::nullopt;
 3739|  3.62k|        }
 3740|    706|        return options.front().second;
 3741|  4.33k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3138|  7.34k|    {
 3139|  7.34k|#if !SCN_DISABLE_LOCALE
 3140|  7.34k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 7.34k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  7.34k|#endif
 3147|       |
 3148|  7.34k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  7.34k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  7.34k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3170|  7.32k|    {
 3171|  7.32k|#if !SCN_DISABLE_LOCALE
 3172|  7.32k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 7.32k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  7.32k|#endif
 3179|       |
 3180|  7.32k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  7.32k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  7.32k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  7.32k|    {
 2489|  7.32k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  7.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.24k, False: 82]
  |  |  |  Branch (986:45): [True: 7.23k, False: 90]
  |  |  |  Branch (986:45): [True: 8, False: 82]
  |  |  ------------------
  ------------------
 2490|  7.24k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  7.24k|                                "Invalid value for tm_mday"});
 2492|  7.24k|        }
 2493|     82|        t.tm_mday = d;
 2494|     82|        st.set_mday(h);
 2495|     82|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3185|  3.64k|    {
 3186|  3.64k|#if !SCN_DISABLE_LOCALE
 3187|  3.64k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.64k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.64k|#endif
 3194|       |
 3195|  3.64k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.64k|            {"Sunday", 0},
 3197|  3.64k|            {"Monday", 1},
 3198|  3.64k|            {"Tuesday", 2},
 3199|  3.64k|            {"Wednesday", 3},
 3200|  3.64k|            {"Thursday", 4},
 3201|  3.64k|            {"Friday", 5},
 3202|  3.64k|            {"Saturday", 6},
 3203|  3.64k|        }};
 3204|  3.64k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.64k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.64k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.64k|            {"Sun", 0},
 3209|  3.64k|            {"Mon", 1},
 3210|  3.64k|            {"Tue", 2},
 3211|  3.64k|            {"Wed", 3},
 3212|  3.64k|            {"Thu", 4},
 3213|  3.64k|            {"Fri", 5},
 3214|  3.64k|            {"Sat", 6},
 3215|  3.64k|        }};
 3216|  3.64k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 0, False: 3.64k]
  ------------------
 3217|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|      0|        }
 3219|  3.64k|        return set_error(
 3220|  3.64k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.64k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  7.28k|    {
 3710|  7.28k|        auto start_it = m_begin;
 3711|  7.28k|        std::size_t options_available = N;
 3712|  7.28k|        std::size_t chars_consumed = 0;
 3713|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 7.49k, False: 7.26k]
  ------------------
 3714|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 7.49k, False: 0]
  ------------------
 3715|  7.49k|            std::size_t i = 0;
 3716|  7.49k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 24, False: 7.47k]
  ------------------
 3717|     24|                options_available = 0;
 3718|     24|                break;
 3719|     24|            }
 3720|  7.47k|            const auto ch = *m_begin;
 3721|  7.47k|            ++m_begin;
 3722|  58.6k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 51.1k, False: 7.47k]
  ------------------
 3723|  51.1k|                const auto cmp = static_cast<unsigned>(
 3724|  51.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  51.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 51.1k]
  ------------------
 3726|  51.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.9k, False: 224]
  |  Branch (3726:34): [True: 50.9k, False: 16]
  ------------------
 3727|  50.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  50.9k|                                options.end());
 3729|  50.9k|                    --options_available;
 3730|  50.9k|                    continue;
 3731|  50.9k|                }
 3732|    240|                ++i;
 3733|    240|            }
 3734|  7.47k|            ++chars_consumed;
 3735|  7.47k|        }
 3736|  7.28k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 7.28k, False: 0]
  ------------------
 3737|  7.28k|            m_begin = start_it;
 3738|  7.28k|            return std::nullopt;
 3739|  7.28k|        }
 3740|      0|        return options.front().second;
 3741|  7.28k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 3259|  14.3k|    {
 3260|  14.3k|#if !SCN_DISABLE_LOCALE
 3261|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 14.3k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  14.3k|#endif
 3268|       |
 3269|  14.3k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  14.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  14.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  14.3k|    {
 2469|  14.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.82k, False: 7.51k]
  |  |  |  Branch (986:45): [True: 6.73k, False: 7.60k]
  |  |  |  Branch (986:45): [True: 90, False: 7.51k]
  |  |  ------------------
  ------------------
 2470|  6.82k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  6.82k|                                  "Invalid value for tm_hour"});
 2472|  6.82k|        }
 2473|  7.51k|        t.tm_hour = h;
 2474|  7.51k|        st.set_hour24(hdl);
 2475|  7.51k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 3287|  14.3k|    {
 3288|  14.3k|#if !SCN_DISABLE_LOCALE
 3289|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 14.3k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  14.3k|#endif
 3296|       |
 3297|  14.3k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  14.3k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  14.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  14.3k|    {
 2459|  14.3k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.84k, False: 7.48k]
  |  |  |  Branch (986:45): [True: 6.83k, False: 7.49k]
  |  |  |  Branch (986:45): [True: 12, False: 7.48k]
  |  |  ------------------
  ------------------
 2460|  6.84k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  6.84k|                                "Invalid value for tm_min"});
 2462|  6.84k|        }
 2463|  7.48k|        t.tm_min = m;
 2464|  7.48k|        st.set_min(h);
 2465|  7.48k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3301|  3.84k|    {
 3302|  3.84k|#if !SCN_DISABLE_LOCALE
 3303|  3.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.84k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.84k|#endif
 3310|       |
 3311|  3.84k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.84k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.84k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  3.84k|    {
 2449|  3.84k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  4.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.61k, False: 236]
  |  |  |  Branch (986:45): [True: 3.61k, False: 238]
  |  |  |  Branch (986:45): [True: 2, False: 236]
  |  |  ------------------
  ------------------
 2450|  3.61k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  3.61k|                                "Invalid value for tm_sec"});
 2452|  3.61k|        }
 2453|    236|        t.tm_sec = s;
 2454|    236|        st.set_sec(h);
 2455|    236|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3543|  3.64k|    {
 3544|       |        // %m/%d/%y
 3545|  3.64k|        constexpr CharT slash = '/';
 3546|  3.64k|        on_dec_month();
 3547|  3.64k|        on_text(&slash, &slash + 1);
 3548|  3.64k|        on_day_of_month();
 3549|  3.64k|        on_text(&slash, &slash + 1);
 3550|  3.64k|        on_short_year();
 3551|  3.64k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3553|  3.65k|    {
 3554|       |        // %Y-%m-%d
 3555|  3.65k|        constexpr CharT dash = '-';
 3556|  3.65k|        on_full_year();
 3557|  3.65k|        on_text(&dash, &dash + 1);
 3558|  3.65k|        on_dec_month();
 3559|  3.65k|        on_text(&dash, &dash + 1);
 3560|  3.65k|        on_day_of_month();
 3561|  3.65k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3585|  10.4k|    {
 3586|       |        // %H:%M
 3587|  10.4k|        constexpr CharT colon = ':';
 3588|  10.4k|        on_24_hour();
 3589|  10.4k|        on_text(&colon, &colon + 1);
 3590|  10.4k|        on_minute();
 3591|  10.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3593|  3.84k|    {
 3594|       |        // %H:%M:%S
 3595|  3.84k|        constexpr CharT colon = ':';
 3596|  3.84k|        on_24_hour();
 3597|  3.84k|        on_text(&colon, &colon + 1);
 3598|  3.84k|        on_minute();
 3599|  3.84k|        on_text(&colon, &colon + 1);
 3600|  3.84k|        on_second();
 3601|  3.84k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3632|  7.83k|    {
 3633|  7.83k|        m_st.verify(*this);
 3634|  7.83k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 7.83k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  7.83k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 7.82k, False: 12]
  |  Branch (3637:37): [True: 10, False: 7.81k]
  |  Branch (3637:60): [True: 0, False: 7.81k]
  ------------------
 3638|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|     10|        }
 3640|  7.83k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3643|  66.5k|    {
 3644|  66.5k|        return m_error;
 3645|  66.5k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3660|  7.83k|    {
 3661|  7.83k|        return m_begin;
 3662|  7.83k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3853|  33.6k|{
 3854|  33.6k|    {
 3855|  33.6k|        SCN_TRY(it,
  ------------------
  |  | 3939|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 360, False: 33.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    360|    }                                                  \
  |  |  |  | 3938|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  33.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  33.2k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  33.2k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  33.2k|    static_cast<    \
  |  | 1056|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  33.2k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  33.2k|        ctx.range(), t, ctx.locale());
 3862|  33.2k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  33.2k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 25.4k, False: 7.83k]
  |  |  ------------------
  ------------------
 3864|  25.4k|        return unexpected(e.error());
 3865|  25.4k|    }
 3866|  7.83k|    return r.get_iterator();
 3867|  33.2k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2997|  33.2k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  33.2k|    static_cast<    \
  |  | 1056|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  33.2k|          m_begin(ranges::begin(m_range)),
 2999|  33.2k|          m_tm(t),
 3000|  33.2k|          m_loc(loc)
 3001|  33.2k|    {
 3002|  33.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3648|  24.8k|    {
 3649|  24.8k|        set_error({scan_error::invalid_format_string, msg});
 3650|  24.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3653|   109k|    {
 3654|   109k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 25.4k, False: 83.9k]
  ------------------
 3655|  25.4k|            m_error = unexpected(e);
 3656|  25.4k|        }
 3657|   109k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3005|  32.8k|    {
 3006|  40.7k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 32.8k, False: 7.88k]
  ------------------
 3007|  32.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 118, False: 32.7k]
  ------------------
 3008|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    118|            }
 3010|  32.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 24.8k, False: 7.88k]
  ------------------
 3011|  24.8k|                return on_error("Invalid literal character");
 3012|  24.8k|            }
 3013|  7.88k|            ++beg;
 3014|  7.88k|            ++m_begin;
 3015|  7.88k|        }
 3016|  32.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3035|  7.29k|    {
 3036|  7.29k|#if !SCN_DISABLE_LOCALE
 3037|  7.29k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 7.29k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  7.29k|#endif
 3044|       |
 3045|  7.29k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  7.29k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  7.29k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  7.29k|    {
 2509|  7.29k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  7.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.29k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  7.29k|        t.tm_year = y - 1900;
 2514|  7.29k|        st.set_full_year(h);
 2515|  7.29k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3671|  58.1k|    {
 3672|  58.1k|        int digits_read = 0;
 3673|  58.1k|        int accumulator = 0;
 3674|  75.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 74.7k, False: 260]
  ------------------
 3675|  74.7k|            const auto ch = *m_begin;
 3676|  74.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 32.3k, False: 42.3k]
  |  Branch (3676:36): [True: 22.8k, False: 19.5k]
  ------------------
 3677|  55.2k|                break;
 3678|  55.2k|            }
 3679|  19.5k|            ++m_begin;
 3680|  19.5k|            ++digits_read;
 3681|  19.5k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  19.5k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 2.65k, False: 16.8k]
  ------------------
 3683|  2.65k|                break;
 3684|  2.65k|            }
 3685|  19.5k|        }
 3686|  58.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 42.1k, False: 15.9k]
  ------------------
 3687|  42.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  42.1k|                                 "Too few integer digits"});
 3689|  42.1k|            return -1;
 3690|  42.1k|        }
 3691|  15.9k|        return accumulator;
 3692|  58.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3049|  3.64k|    {
 3050|  3.64k|#if !SCN_DISABLE_LOCALE
 3051|  3.64k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 3.64k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  3.64k|#endif
 3059|       |
 3060|  3.64k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  3.64k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  3.64k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  3.64k|    {
 2526|  3.64k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.63k, False: 18]
  |  |  |  Branch (986:45): [True: 3.63k, False: 18]
  |  |  |  Branch (986:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2527|  3.63k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  3.63k|                                "Invalid value for tm_year"});
 2529|  3.63k|        }
 2530|     18|        st.short_year_value = y;
 2531|     18|        st.set_short_year(h);
 2532|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3092|  4.35k|    {
 3093|  4.35k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.35k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.35k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.35k|#endif
 3101|       |
 3102|  4.35k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.35k|            {"January", 1},
 3104|  4.35k|            {"February", 2},
 3105|  4.35k|            {"March", 3},
 3106|  4.35k|            {"April", 4},
 3107|  4.35k|            {"May", 5},
 3108|  4.35k|            {"June", 6},
 3109|  4.35k|            {"July", 7},
 3110|  4.35k|            {"August", 8},
 3111|  4.35k|            {"September", 9},
 3112|  4.35k|            {"October", 10},
 3113|  4.35k|            {"November", 11},
 3114|  4.35k|            {"December", 12},
 3115|  4.35k|        }};
 3116|  4.35k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 22, False: 4.33k]
  ------------------
 3117|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     22|        }
 3119|  4.33k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.33k|            {"Jan", 1},
 3121|  4.33k|            {"Feb", 2},
 3122|  4.33k|            {"Mar", 3},
 3123|  4.33k|            {"Apr", 4},
 3124|  4.33k|            {"Jun", 6},
 3125|  4.33k|            {"Jul", 7},
 3126|  4.33k|            {"Aug", 8},
 3127|  4.33k|            {"Sep", 9},
 3128|  4.33k|            {"Oct", 10},
 3129|  4.33k|            {"Nov", 11},
 3130|  4.33k|            {"Dec", 12},
 3131|  4.33k|        }};
 3132|  4.33k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 706, False: 3.62k]
  ------------------
 3133|    706|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|    706|        }
 3135|  3.62k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  3.62k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  8.06k|    {
 2499|  8.06k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  9.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.93k, False: 1.13k]
  |  |  |  Branch (986:45): [True: 6.88k, False: 1.18k]
  |  |  |  Branch (986:45): [True: 58, False: 1.13k]
  |  |  ------------------
  ------------------
 2500|  6.93k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  6.93k|                                "Invalid value for tm_mon"});
 2502|  6.93k|        }
 2503|  1.13k|        t.tm_mon = m - 1;
 2504|  1.13k|        st.set_mon(h);
 2505|  1.13k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.35k|    {
 3710|  4.35k|        auto start_it = m_begin;
 3711|  4.35k|        std::size_t options_available = N;
 3712|  4.35k|        std::size_t chars_consumed = 0;
 3713|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.64k, False: 4.29k]
  ------------------
 3714|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.62k, False: 22]
  ------------------
 3715|  6.62k|            std::size_t i = 0;
 3716|  6.62k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 40, False: 6.58k]
  ------------------
 3717|     40|                options_available = 0;
 3718|     40|                break;
 3719|     40|            }
 3720|  6.58k|            const auto ch = *m_begin;
 3721|  6.58k|            ++m_begin;
 3722|  62.5k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 55.9k, False: 6.58k]
  ------------------
 3723|  55.9k|                const auto cmp = static_cast<unsigned>(
 3724|  55.9k|                    ch ^ options[i].first[chars_consumed]);
 3725|  55.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 55.9k]
  ------------------
 3726|  55.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 53.0k, False: 2.98k]
  |  Branch (3726:34): [True: 52.1k, False: 844]
  ------------------
 3727|  52.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  52.1k|                                options.end());
 3729|  52.1k|                    --options_available;
 3730|  52.1k|                    continue;
 3731|  52.1k|                }
 3732|  3.82k|                ++i;
 3733|  3.82k|            }
 3734|  6.58k|            ++chars_consumed;
 3735|  6.58k|        }
 3736|  4.35k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.33k, False: 22]
  ------------------
 3737|  4.33k|            m_begin = start_it;
 3738|  4.33k|            return std::nullopt;
 3739|  4.33k|        }
 3740|     22|        return options.front().second;
 3741|  4.35k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.33k|    {
 3710|  4.33k|        auto start_it = m_begin;
 3711|  4.33k|        std::size_t options_available = N;
 3712|  4.33k|        std::size_t chars_consumed = 0;
 3713|  10.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.55k, False: 3.59k]
  ------------------
 3714|  10.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 5.84k, False: 706]
  ------------------
 3715|  5.84k|            std::size_t i = 0;
 3716|  5.84k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 30, False: 5.81k]
  ------------------
 3717|     30|                options_available = 0;
 3718|     30|                break;
 3719|     30|            }
 3720|  5.81k|            const auto ch = *m_begin;
 3721|  5.81k|            ++m_begin;
 3722|  54.9k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 49.1k, False: 5.81k]
  ------------------
 3723|  49.1k|                const auto cmp = static_cast<unsigned>(
 3724|  49.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  49.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 49.1k]
  ------------------
 3726|  49.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 47.6k, False: 1.47k]
  |  Branch (3726:34): [True: 46.9k, False: 790]
  ------------------
 3727|  46.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  46.9k|                                options.end());
 3729|  46.9k|                    --options_available;
 3730|  46.9k|                    continue;
 3731|  46.9k|                }
 3732|  2.26k|                ++i;
 3733|  2.26k|            }
 3734|  5.81k|            ++chars_consumed;
 3735|  5.81k|        }
 3736|  4.33k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 3.62k, False: 706]
  ------------------
 3737|  3.62k|            m_begin = start_it;
 3738|  3.62k|            return std::nullopt;
 3739|  3.62k|        }
 3740|    706|        return options.front().second;
 3741|  4.33k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3138|  7.34k|    {
 3139|  7.34k|#if !SCN_DISABLE_LOCALE
 3140|  7.34k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 7.34k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  7.34k|#endif
 3147|       |
 3148|  7.34k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  7.34k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  7.34k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3170|  7.32k|    {
 3171|  7.32k|#if !SCN_DISABLE_LOCALE
 3172|  7.32k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 7.32k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  7.32k|#endif
 3179|       |
 3180|  7.32k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  7.32k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  7.32k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  7.32k|    {
 2489|  7.32k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  7.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.24k, False: 82]
  |  |  |  Branch (986:45): [True: 7.23k, False: 90]
  |  |  |  Branch (986:45): [True: 8, False: 82]
  |  |  ------------------
  ------------------
 2490|  7.24k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  7.24k|                                "Invalid value for tm_mday"});
 2492|  7.24k|        }
 2493|     82|        t.tm_mday = d;
 2494|     82|        st.set_mday(h);
 2495|     82|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3185|  3.64k|    {
 3186|  3.64k|#if !SCN_DISABLE_LOCALE
 3187|  3.64k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.64k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.64k|#endif
 3194|       |
 3195|  3.64k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.64k|            {"Sunday", 0},
 3197|  3.64k|            {"Monday", 1},
 3198|  3.64k|            {"Tuesday", 2},
 3199|  3.64k|            {"Wednesday", 3},
 3200|  3.64k|            {"Thursday", 4},
 3201|  3.64k|            {"Friday", 5},
 3202|  3.64k|            {"Saturday", 6},
 3203|  3.64k|        }};
 3204|  3.64k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.64k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.64k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.64k|            {"Sun", 0},
 3209|  3.64k|            {"Mon", 1},
 3210|  3.64k|            {"Tue", 2},
 3211|  3.64k|            {"Wed", 3},
 3212|  3.64k|            {"Thu", 4},
 3213|  3.64k|            {"Fri", 5},
 3214|  3.64k|            {"Sat", 6},
 3215|  3.64k|        }};
 3216|  3.64k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 0, False: 3.64k]
  ------------------
 3217|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|      0|        }
 3219|  3.64k|        return set_error(
 3220|  3.64k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.64k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  7.28k|    {
 3710|  7.28k|        auto start_it = m_begin;
 3711|  7.28k|        std::size_t options_available = N;
 3712|  7.28k|        std::size_t chars_consumed = 0;
 3713|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 7.49k, False: 7.26k]
  ------------------
 3714|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 7.49k, False: 0]
  ------------------
 3715|  7.49k|            std::size_t i = 0;
 3716|  7.49k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 24, False: 7.47k]
  ------------------
 3717|     24|                options_available = 0;
 3718|     24|                break;
 3719|     24|            }
 3720|  7.47k|            const auto ch = *m_begin;
 3721|  7.47k|            ++m_begin;
 3722|  58.6k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 51.1k, False: 7.47k]
  ------------------
 3723|  51.1k|                const auto cmp = static_cast<unsigned>(
 3724|  51.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  51.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 51.1k]
  ------------------
 3726|  51.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.9k, False: 224]
  |  Branch (3726:34): [True: 50.9k, False: 16]
  ------------------
 3727|  50.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  50.9k|                                options.end());
 3729|  50.9k|                    --options_available;
 3730|  50.9k|                    continue;
 3731|  50.9k|                }
 3732|    240|                ++i;
 3733|    240|            }
 3734|  7.47k|            ++chars_consumed;
 3735|  7.47k|        }
 3736|  7.28k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 7.28k, False: 0]
  ------------------
 3737|  7.28k|            m_begin = start_it;
 3738|  7.28k|            return std::nullopt;
 3739|  7.28k|        }
 3740|      0|        return options.front().second;
 3741|  7.28k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 3259|  14.3k|    {
 3260|  14.3k|#if !SCN_DISABLE_LOCALE
 3261|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 14.3k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  14.3k|#endif
 3268|       |
 3269|  14.3k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  14.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  14.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  14.3k|    {
 2469|  14.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.82k, False: 7.51k]
  |  |  |  Branch (986:45): [True: 6.73k, False: 7.60k]
  |  |  |  Branch (986:45): [True: 90, False: 7.51k]
  |  |  ------------------
  ------------------
 2470|  6.82k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  6.82k|                                  "Invalid value for tm_hour"});
 2472|  6.82k|        }
 2473|  7.51k|        t.tm_hour = h;
 2474|  7.51k|        st.set_hour24(hdl);
 2475|  7.51k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 3287|  14.3k|    {
 3288|  14.3k|#if !SCN_DISABLE_LOCALE
 3289|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 14.3k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  14.3k|#endif
 3296|       |
 3297|  14.3k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  14.3k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  14.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  14.3k|    {
 2459|  14.3k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.84k, False: 7.48k]
  |  |  |  Branch (986:45): [True: 6.83k, False: 7.49k]
  |  |  |  Branch (986:45): [True: 12, False: 7.48k]
  |  |  ------------------
  ------------------
 2460|  6.84k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  6.84k|                                "Invalid value for tm_min"});
 2462|  6.84k|        }
 2463|  7.48k|        t.tm_min = m;
 2464|  7.48k|        st.set_min(h);
 2465|  7.48k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3301|  3.84k|    {
 3302|  3.84k|#if !SCN_DISABLE_LOCALE
 3303|  3.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.84k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.84k|#endif
 3310|       |
 3311|  3.84k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.84k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.84k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  3.84k|    {
 2449|  3.84k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  4.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.61k, False: 236]
  |  |  |  Branch (986:45): [True: 3.61k, False: 238]
  |  |  |  Branch (986:45): [True: 2, False: 236]
  |  |  ------------------
  ------------------
 2450|  3.61k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  3.61k|                                "Invalid value for tm_sec"});
 2452|  3.61k|        }
 2453|    236|        t.tm_sec = s;
 2454|    236|        st.set_sec(h);
 2455|    236|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3543|  3.64k|    {
 3544|       |        // %m/%d/%y
 3545|  3.64k|        constexpr CharT slash = '/';
 3546|  3.64k|        on_dec_month();
 3547|  3.64k|        on_text(&slash, &slash + 1);
 3548|  3.64k|        on_day_of_month();
 3549|  3.64k|        on_text(&slash, &slash + 1);
 3550|  3.64k|        on_short_year();
 3551|  3.64k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3553|  3.65k|    {
 3554|       |        // %Y-%m-%d
 3555|  3.65k|        constexpr CharT dash = '-';
 3556|  3.65k|        on_full_year();
 3557|  3.65k|        on_text(&dash, &dash + 1);
 3558|  3.65k|        on_dec_month();
 3559|  3.65k|        on_text(&dash, &dash + 1);
 3560|  3.65k|        on_day_of_month();
 3561|  3.65k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3585|  10.4k|    {
 3586|       |        // %H:%M
 3587|  10.4k|        constexpr CharT colon = ':';
 3588|  10.4k|        on_24_hour();
 3589|  10.4k|        on_text(&colon, &colon + 1);
 3590|  10.4k|        on_minute();
 3591|  10.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3593|  3.84k|    {
 3594|       |        // %H:%M:%S
 3595|  3.84k|        constexpr CharT colon = ':';
 3596|  3.84k|        on_24_hour();
 3597|  3.84k|        on_text(&colon, &colon + 1);
 3598|  3.84k|        on_minute();
 3599|  3.84k|        on_text(&colon, &colon + 1);
 3600|  3.84k|        on_second();
 3601|  3.84k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3632|  7.83k|    {
 3633|  7.83k|        m_st.verify(*this);
 3634|  7.83k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 7.83k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  7.83k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 7.82k, False: 12]
  |  Branch (3637:37): [True: 10, False: 7.81k]
  |  Branch (3637:60): [True: 0, False: 7.81k]
  ------------------
 3638|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|     10|        }
 3640|  7.83k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3643|  66.5k|    {
 3644|  66.5k|        return m_error;
 3645|  66.5k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3660|  7.83k|    {
 3661|  7.83k|        return m_begin;
 3662|  7.83k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3853|  33.6k|{
 3854|  33.6k|    {
 3855|  33.6k|        SCN_TRY(it,
  ------------------
  |  | 3939|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 360, False: 33.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    360|    }                                                  \
  |  |  |  | 3938|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  33.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  33.2k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  33.2k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  33.2k|    static_cast<    \
  |  | 1056|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  33.2k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  33.2k|        ctx.range(), t, ctx.locale());
 3862|  33.2k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  33.2k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 25.4k, False: 7.83k]
  |  |  ------------------
  ------------------
 3864|  25.4k|        return unexpected(e.error());
 3865|  25.4k|    }
 3866|  7.83k|    return r.get_iterator();
 3867|  33.2k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2997|  33.2k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  33.2k|    static_cast<    \
  |  | 1056|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  33.2k|          m_begin(ranges::begin(m_range)),
 2999|  33.2k|          m_tm(t),
 3000|  33.2k|          m_loc(loc)
 3001|  33.2k|    {
 3002|  33.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3648|  24.8k|    {
 3649|  24.8k|        set_error({scan_error::invalid_format_string, msg});
 3650|  24.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3653|   109k|    {
 3654|   109k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 25.4k, False: 83.9k]
  ------------------
 3655|  25.4k|            m_error = unexpected(e);
 3656|  25.4k|        }
 3657|   109k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3005|  32.8k|    {
 3006|  40.7k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 32.8k, False: 7.88k]
  ------------------
 3007|  32.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 118, False: 32.7k]
  ------------------
 3008|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    118|            }
 3010|  32.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 24.8k, False: 7.88k]
  ------------------
 3011|  24.8k|                return on_error("Invalid literal character");
 3012|  24.8k|            }
 3013|  7.88k|            ++beg;
 3014|  7.88k|            ++m_begin;
 3015|  7.88k|        }
 3016|  32.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3035|  7.29k|    {
 3036|  7.29k|#if !SCN_DISABLE_LOCALE
 3037|  7.29k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 7.29k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  7.29k|#endif
 3044|       |
 3045|  7.29k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  7.29k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  7.29k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  7.29k|    {
 2509|  7.29k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  7.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.29k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  7.29k|        t.tm_year = y - 1900;
 2514|  7.29k|        st.set_full_year(h);
 2515|  7.29k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3671|  58.1k|    {
 3672|  58.1k|        int digits_read = 0;
 3673|  58.1k|        int accumulator = 0;
 3674|  75.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 74.7k, False: 260]
  ------------------
 3675|  74.7k|            const auto ch = *m_begin;
 3676|  74.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 32.3k, False: 42.3k]
  |  Branch (3676:36): [True: 22.8k, False: 19.5k]
  ------------------
 3677|  55.2k|                break;
 3678|  55.2k|            }
 3679|  19.5k|            ++m_begin;
 3680|  19.5k|            ++digits_read;
 3681|  19.5k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  19.5k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 2.65k, False: 16.8k]
  ------------------
 3683|  2.65k|                break;
 3684|  2.65k|            }
 3685|  19.5k|        }
 3686|  58.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 42.1k, False: 15.9k]
  ------------------
 3687|  42.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  42.1k|                                 "Too few integer digits"});
 3689|  42.1k|            return -1;
 3690|  42.1k|        }
 3691|  15.9k|        return accumulator;
 3692|  58.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3049|  3.64k|    {
 3050|  3.64k|#if !SCN_DISABLE_LOCALE
 3051|  3.64k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 3.64k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  3.64k|#endif
 3059|       |
 3060|  3.64k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  3.64k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  3.64k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  3.64k|    {
 2526|  3.64k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.63k, False: 18]
  |  |  |  Branch (986:45): [True: 3.63k, False: 18]
  |  |  |  Branch (986:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2527|  3.63k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  3.63k|                                "Invalid value for tm_year"});
 2529|  3.63k|        }
 2530|     18|        st.short_year_value = y;
 2531|     18|        st.set_short_year(h);
 2532|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3092|  4.35k|    {
 3093|  4.35k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.35k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.35k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.35k|#endif
 3101|       |
 3102|  4.35k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.35k|            {"January", 1},
 3104|  4.35k|            {"February", 2},
 3105|  4.35k|            {"March", 3},
 3106|  4.35k|            {"April", 4},
 3107|  4.35k|            {"May", 5},
 3108|  4.35k|            {"June", 6},
 3109|  4.35k|            {"July", 7},
 3110|  4.35k|            {"August", 8},
 3111|  4.35k|            {"September", 9},
 3112|  4.35k|            {"October", 10},
 3113|  4.35k|            {"November", 11},
 3114|  4.35k|            {"December", 12},
 3115|  4.35k|        }};
 3116|  4.35k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 22, False: 4.33k]
  ------------------
 3117|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     22|        }
 3119|  4.33k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.33k|            {"Jan", 1},
 3121|  4.33k|            {"Feb", 2},
 3122|  4.33k|            {"Mar", 3},
 3123|  4.33k|            {"Apr", 4},
 3124|  4.33k|            {"Jun", 6},
 3125|  4.33k|            {"Jul", 7},
 3126|  4.33k|            {"Aug", 8},
 3127|  4.33k|            {"Sep", 9},
 3128|  4.33k|            {"Oct", 10},
 3129|  4.33k|            {"Nov", 11},
 3130|  4.33k|            {"Dec", 12},
 3131|  4.33k|        }};
 3132|  4.33k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 706, False: 3.62k]
  ------------------
 3133|    706|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|    706|        }
 3135|  3.62k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  3.62k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  8.06k|    {
 2499|  8.06k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  9.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.93k, False: 1.13k]
  |  |  |  Branch (986:45): [True: 6.88k, False: 1.18k]
  |  |  |  Branch (986:45): [True: 58, False: 1.13k]
  |  |  ------------------
  ------------------
 2500|  6.93k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  6.93k|                                "Invalid value for tm_mon"});
 2502|  6.93k|        }
 2503|  1.13k|        t.tm_mon = m - 1;
 2504|  1.13k|        st.set_mon(h);
 2505|  1.13k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.35k|    {
 3710|  4.35k|        auto start_it = m_begin;
 3711|  4.35k|        std::size_t options_available = N;
 3712|  4.35k|        std::size_t chars_consumed = 0;
 3713|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.64k, False: 4.29k]
  ------------------
 3714|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.62k, False: 22]
  ------------------
 3715|  6.62k|            std::size_t i = 0;
 3716|  6.62k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 40, False: 6.58k]
  ------------------
 3717|     40|                options_available = 0;
 3718|     40|                break;
 3719|     40|            }
 3720|  6.58k|            const auto ch = *m_begin;
 3721|  6.58k|            ++m_begin;
 3722|  62.5k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 55.9k, False: 6.58k]
  ------------------
 3723|  55.9k|                const auto cmp = static_cast<unsigned>(
 3724|  55.9k|                    ch ^ options[i].first[chars_consumed]);
 3725|  55.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 55.9k]
  ------------------
 3726|  55.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 53.0k, False: 2.98k]
  |  Branch (3726:34): [True: 52.1k, False: 844]
  ------------------
 3727|  52.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  52.1k|                                options.end());
 3729|  52.1k|                    --options_available;
 3730|  52.1k|                    continue;
 3731|  52.1k|                }
 3732|  3.82k|                ++i;
 3733|  3.82k|            }
 3734|  6.58k|            ++chars_consumed;
 3735|  6.58k|        }
 3736|  4.35k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.33k, False: 22]
  ------------------
 3737|  4.33k|            m_begin = start_it;
 3738|  4.33k|            return std::nullopt;
 3739|  4.33k|        }
 3740|     22|        return options.front().second;
 3741|  4.35k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.33k|    {
 3710|  4.33k|        auto start_it = m_begin;
 3711|  4.33k|        std::size_t options_available = N;
 3712|  4.33k|        std::size_t chars_consumed = 0;
 3713|  10.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.55k, False: 3.59k]
  ------------------
 3714|  10.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 5.84k, False: 706]
  ------------------
 3715|  5.84k|            std::size_t i = 0;
 3716|  5.84k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 30, False: 5.81k]
  ------------------
 3717|     30|                options_available = 0;
 3718|     30|                break;
 3719|     30|            }
 3720|  5.81k|            const auto ch = *m_begin;
 3721|  5.81k|            ++m_begin;
 3722|  54.9k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 49.1k, False: 5.81k]
  ------------------
 3723|  49.1k|                const auto cmp = static_cast<unsigned>(
 3724|  49.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  49.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 49.1k]
  ------------------
 3726|  49.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 47.6k, False: 1.47k]
  |  Branch (3726:34): [True: 46.9k, False: 790]
  ------------------
 3727|  46.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  46.9k|                                options.end());
 3729|  46.9k|                    --options_available;
 3730|  46.9k|                    continue;
 3731|  46.9k|                }
 3732|  2.26k|                ++i;
 3733|  2.26k|            }
 3734|  5.81k|            ++chars_consumed;
 3735|  5.81k|        }
 3736|  4.33k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 3.62k, False: 706]
  ------------------
 3737|  3.62k|            m_begin = start_it;
 3738|  3.62k|            return std::nullopt;
 3739|  3.62k|        }
 3740|    706|        return options.front().second;
 3741|  4.33k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3138|  7.34k|    {
 3139|  7.34k|#if !SCN_DISABLE_LOCALE
 3140|  7.34k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 7.34k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  7.34k|#endif
 3147|       |
 3148|  7.34k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  7.34k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  7.34k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3170|  7.32k|    {
 3171|  7.32k|#if !SCN_DISABLE_LOCALE
 3172|  7.32k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 7.32k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  7.32k|#endif
 3179|       |
 3180|  7.32k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  7.32k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  7.32k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  7.32k|    {
 2489|  7.32k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  7.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.24k, False: 82]
  |  |  |  Branch (986:45): [True: 7.23k, False: 90]
  |  |  |  Branch (986:45): [True: 8, False: 82]
  |  |  ------------------
  ------------------
 2490|  7.24k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  7.24k|                                "Invalid value for tm_mday"});
 2492|  7.24k|        }
 2493|     82|        t.tm_mday = d;
 2494|     82|        st.set_mday(h);
 2495|     82|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3185|  3.64k|    {
 3186|  3.64k|#if !SCN_DISABLE_LOCALE
 3187|  3.64k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.64k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.64k|#endif
 3194|       |
 3195|  3.64k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.64k|            {"Sunday", 0},
 3197|  3.64k|            {"Monday", 1},
 3198|  3.64k|            {"Tuesday", 2},
 3199|  3.64k|            {"Wednesday", 3},
 3200|  3.64k|            {"Thursday", 4},
 3201|  3.64k|            {"Friday", 5},
 3202|  3.64k|            {"Saturday", 6},
 3203|  3.64k|        }};
 3204|  3.64k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.64k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.64k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.64k|            {"Sun", 0},
 3209|  3.64k|            {"Mon", 1},
 3210|  3.64k|            {"Tue", 2},
 3211|  3.64k|            {"Wed", 3},
 3212|  3.64k|            {"Thu", 4},
 3213|  3.64k|            {"Fri", 5},
 3214|  3.64k|            {"Sat", 6},
 3215|  3.64k|        }};
 3216|  3.64k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 0, False: 3.64k]
  ------------------
 3217|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|      0|        }
 3219|  3.64k|        return set_error(
 3220|  3.64k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.64k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  7.28k|    {
 3710|  7.28k|        auto start_it = m_begin;
 3711|  7.28k|        std::size_t options_available = N;
 3712|  7.28k|        std::size_t chars_consumed = 0;
 3713|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 7.49k, False: 7.26k]
  ------------------
 3714|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 7.49k, False: 0]
  ------------------
 3715|  7.49k|            std::size_t i = 0;
 3716|  7.49k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 24, False: 7.47k]
  ------------------
 3717|     24|                options_available = 0;
 3718|     24|                break;
 3719|     24|            }
 3720|  7.47k|            const auto ch = *m_begin;
 3721|  7.47k|            ++m_begin;
 3722|  58.6k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 51.1k, False: 7.47k]
  ------------------
 3723|  51.1k|                const auto cmp = static_cast<unsigned>(
 3724|  51.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  51.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 51.1k]
  ------------------
 3726|  51.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.9k, False: 224]
  |  Branch (3726:34): [True: 50.9k, False: 16]
  ------------------
 3727|  50.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  50.9k|                                options.end());
 3729|  50.9k|                    --options_available;
 3730|  50.9k|                    continue;
 3731|  50.9k|                }
 3732|    240|                ++i;
 3733|    240|            }
 3734|  7.47k|            ++chars_consumed;
 3735|  7.47k|        }
 3736|  7.28k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 7.28k, False: 0]
  ------------------
 3737|  7.28k|            m_begin = start_it;
 3738|  7.28k|            return std::nullopt;
 3739|  7.28k|        }
 3740|      0|        return options.front().second;
 3741|  7.28k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 3259|  14.3k|    {
 3260|  14.3k|#if !SCN_DISABLE_LOCALE
 3261|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 14.3k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  14.3k|#endif
 3268|       |
 3269|  14.3k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  14.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  14.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  14.3k|    {
 2469|  14.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.82k, False: 7.51k]
  |  |  |  Branch (986:45): [True: 6.73k, False: 7.60k]
  |  |  |  Branch (986:45): [True: 90, False: 7.51k]
  |  |  ------------------
  ------------------
 2470|  6.82k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  6.82k|                                  "Invalid value for tm_hour"});
 2472|  6.82k|        }
 2473|  7.51k|        t.tm_hour = h;
 2474|  7.51k|        st.set_hour24(hdl);
 2475|  7.51k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 3287|  14.3k|    {
 3288|  14.3k|#if !SCN_DISABLE_LOCALE
 3289|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 14.3k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  14.3k|#endif
 3296|       |
 3297|  14.3k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  14.3k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  14.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  14.3k|    {
 2459|  14.3k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.84k, False: 7.48k]
  |  |  |  Branch (986:45): [True: 6.83k, False: 7.49k]
  |  |  |  Branch (986:45): [True: 12, False: 7.48k]
  |  |  ------------------
  ------------------
 2460|  6.84k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  6.84k|                                "Invalid value for tm_min"});
 2462|  6.84k|        }
 2463|  7.48k|        t.tm_min = m;
 2464|  7.48k|        st.set_min(h);
 2465|  7.48k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3301|  3.84k|    {
 3302|  3.84k|#if !SCN_DISABLE_LOCALE
 3303|  3.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.84k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.84k|#endif
 3310|       |
 3311|  3.84k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.84k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.84k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  3.84k|    {
 2449|  3.84k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  4.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.61k, False: 236]
  |  |  |  Branch (986:45): [True: 3.61k, False: 238]
  |  |  |  Branch (986:45): [True: 2, False: 236]
  |  |  ------------------
  ------------------
 2450|  3.61k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  3.61k|                                "Invalid value for tm_sec"});
 2452|  3.61k|        }
 2453|    236|        t.tm_sec = s;
 2454|    236|        st.set_sec(h);
 2455|    236|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3543|  3.64k|    {
 3544|       |        // %m/%d/%y
 3545|  3.64k|        constexpr CharT slash = '/';
 3546|  3.64k|        on_dec_month();
 3547|  3.64k|        on_text(&slash, &slash + 1);
 3548|  3.64k|        on_day_of_month();
 3549|  3.64k|        on_text(&slash, &slash + 1);
 3550|  3.64k|        on_short_year();
 3551|  3.64k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3553|  3.65k|    {
 3554|       |        // %Y-%m-%d
 3555|  3.65k|        constexpr CharT dash = '-';
 3556|  3.65k|        on_full_year();
 3557|  3.65k|        on_text(&dash, &dash + 1);
 3558|  3.65k|        on_dec_month();
 3559|  3.65k|        on_text(&dash, &dash + 1);
 3560|  3.65k|        on_day_of_month();
 3561|  3.65k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3585|  10.4k|    {
 3586|       |        // %H:%M
 3587|  10.4k|        constexpr CharT colon = ':';
 3588|  10.4k|        on_24_hour();
 3589|  10.4k|        on_text(&colon, &colon + 1);
 3590|  10.4k|        on_minute();
 3591|  10.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3593|  3.84k|    {
 3594|       |        // %H:%M:%S
 3595|  3.84k|        constexpr CharT colon = ':';
 3596|  3.84k|        on_24_hour();
 3597|  3.84k|        on_text(&colon, &colon + 1);
 3598|  3.84k|        on_minute();
 3599|  3.84k|        on_text(&colon, &colon + 1);
 3600|  3.84k|        on_second();
 3601|  3.84k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3632|  7.83k|    {
 3633|  7.83k|        m_st.verify(*this);
 3634|  7.83k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 7.83k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  7.83k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 7.82k, False: 12]
  |  Branch (3637:37): [True: 10, False: 7.81k]
  |  Branch (3637:60): [True: 0, False: 7.81k]
  ------------------
 3638|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|     10|        }
 3640|  7.83k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3643|  66.5k|    {
 3644|  66.5k|        return m_error;
 3645|  66.5k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3660|  7.83k|    {
 3661|  7.83k|        return m_begin;
 3662|  7.83k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3853|  33.6k|{
 3854|  33.6k|    {
 3855|  33.6k|        SCN_TRY(it,
  ------------------
  |  | 3939|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 360, False: 33.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    360|    }                                                  \
  |  |  |  | 3938|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  33.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  33.2k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  33.2k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  33.2k|    static_cast<    \
  |  | 1056|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  33.2k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  33.2k|        ctx.range(), t, ctx.locale());
 3862|  33.2k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  33.2k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 25.4k, False: 7.83k]
  |  |  ------------------
  ------------------
 3864|  25.4k|        return unexpected(e.error());
 3865|  25.4k|    }
 3866|  7.83k|    return r.get_iterator();
 3867|  33.2k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2997|  33.2k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  33.2k|    static_cast<    \
  |  | 1056|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  33.2k|          m_begin(ranges::begin(m_range)),
 2999|  33.2k|          m_tm(t),
 3000|  33.2k|          m_loc(loc)
 3001|  33.2k|    {
 3002|  33.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3648|  24.8k|    {
 3649|  24.8k|        set_error({scan_error::invalid_format_string, msg});
 3650|  24.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3653|   105k|    {
 3654|   105k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 25.4k, False: 80.3k]
  ------------------
 3655|  25.4k|            m_error = unexpected(e);
 3656|  25.4k|        }
 3657|   105k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3005|  32.8k|    {
 3006|  40.7k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 32.8k, False: 7.88k]
  ------------------
 3007|  32.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 118, False: 32.7k]
  ------------------
 3008|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    118|            }
 3010|  32.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 24.8k, False: 7.88k]
  ------------------
 3011|  24.8k|                return on_error("Invalid literal character");
 3012|  24.8k|            }
 3013|  7.88k|            ++beg;
 3014|  7.88k|            ++m_begin;
 3015|  7.88k|        }
 3016|  32.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3035|  7.29k|    {
 3036|  7.29k|#if !SCN_DISABLE_LOCALE
 3037|  7.29k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 7.29k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  7.29k|#endif
 3044|       |
 3045|  7.29k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  7.29k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  7.29k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2686|  7.29k|    {
 2687|  7.29k|        t.year = y;
 2688|  7.29k|        st.set_full_year(h);
 2689|  7.29k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3671|  58.1k|    {
 3672|  58.1k|        int digits_read = 0;
 3673|  58.1k|        int accumulator = 0;
 3674|  75.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 74.7k, False: 260]
  ------------------
 3675|  74.7k|            const auto ch = *m_begin;
 3676|  74.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 32.3k, False: 42.3k]
  |  Branch (3676:36): [True: 22.8k, False: 19.5k]
  ------------------
 3677|  55.2k|                break;
 3678|  55.2k|            }
 3679|  19.5k|            ++m_begin;
 3680|  19.5k|            ++digits_read;
 3681|  19.5k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  19.5k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 2.65k, False: 16.8k]
  ------------------
 3683|  2.65k|                break;
 3684|  2.65k|            }
 3685|  19.5k|        }
 3686|  58.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 42.1k, False: 15.9k]
  ------------------
 3687|  42.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  42.1k|                                 "Too few integer digits"});
 3689|  42.1k|            return -1;
 3690|  42.1k|        }
 3691|  15.9k|        return accumulator;
 3692|  58.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3049|  3.64k|    {
 3050|  3.64k|#if !SCN_DISABLE_LOCALE
 3051|  3.64k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 3.64k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  3.64k|#endif
 3059|       |
 3060|  3.64k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  3.64k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  3.64k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2709|  3.64k|    {
 2710|  3.64k|        if (!t.year) {
  ------------------
  |  Branch (2710:13): [True: 3.64k, False: 0]
  ------------------
 2711|  3.64k|            t.year = y;
 2712|  3.64k|        }
 2713|      0|        else {
 2714|      0|            t.year = *t.year + y;
 2715|      0|        }
 2716|  3.64k|        st.set_short_year(h);
 2717|  3.64k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3092|  4.35k|    {
 3093|  4.35k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.35k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.35k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.35k|#endif
 3101|       |
 3102|  4.35k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.35k|            {"January", 1},
 3104|  4.35k|            {"February", 2},
 3105|  4.35k|            {"March", 3},
 3106|  4.35k|            {"April", 4},
 3107|  4.35k|            {"May", 5},
 3108|  4.35k|            {"June", 6},
 3109|  4.35k|            {"July", 7},
 3110|  4.35k|            {"August", 8},
 3111|  4.35k|            {"September", 9},
 3112|  4.35k|            {"October", 10},
 3113|  4.35k|            {"November", 11},
 3114|  4.35k|            {"December", 12},
 3115|  4.35k|        }};
 3116|  4.35k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 22, False: 4.33k]
  ------------------
 3117|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     22|        }
 3119|  4.33k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.33k|            {"Jan", 1},
 3121|  4.33k|            {"Feb", 2},
 3122|  4.33k|            {"Mar", 3},
 3123|  4.33k|            {"Apr", 4},
 3124|  4.33k|            {"Jun", 6},
 3125|  4.33k|            {"Jul", 7},
 3126|  4.33k|            {"Aug", 8},
 3127|  4.33k|            {"Sep", 9},
 3128|  4.33k|            {"Oct", 10},
 3129|  4.33k|            {"Nov", 11},
 3130|  4.33k|            {"Dec", 12},
 3131|  4.33k|        }};
 3132|  4.33k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 706, False: 3.62k]
  ------------------
 3133|    706|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|    706|        }
 3135|  3.62k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  3.62k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2673|  8.06k|    {
 2674|  8.06k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  9.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.93k, False: 1.13k]
  |  |  |  Branch (986:45): [True: 6.88k, False: 1.18k]
  |  |  |  Branch (986:45): [True: 58, False: 1.13k]
  |  |  ------------------
  ------------------
 2675|  6.93k|            return h.set_error(
 2676|  6.93k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2677|  6.93k|        }
 2678|  1.13k|        t.mon = month{static_cast<unsigned>(m)};
 2679|  1.13k|        st.set_mon(h);
 2680|  1.13k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.35k|    {
 3710|  4.35k|        auto start_it = m_begin;
 3711|  4.35k|        std::size_t options_available = N;
 3712|  4.35k|        std::size_t chars_consumed = 0;
 3713|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.64k, False: 4.29k]
  ------------------
 3714|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.62k, False: 22]
  ------------------
 3715|  6.62k|            std::size_t i = 0;
 3716|  6.62k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 40, False: 6.58k]
  ------------------
 3717|     40|                options_available = 0;
 3718|     40|                break;
 3719|     40|            }
 3720|  6.58k|            const auto ch = *m_begin;
 3721|  6.58k|            ++m_begin;
 3722|  62.5k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 55.9k, False: 6.58k]
  ------------------
 3723|  55.9k|                const auto cmp = static_cast<unsigned>(
 3724|  55.9k|                    ch ^ options[i].first[chars_consumed]);
 3725|  55.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 55.9k]
  ------------------
 3726|  55.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 53.0k, False: 2.98k]
  |  Branch (3726:34): [True: 52.1k, False: 844]
  ------------------
 3727|  52.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  52.1k|                                options.end());
 3729|  52.1k|                    --options_available;
 3730|  52.1k|                    continue;
 3731|  52.1k|                }
 3732|  3.82k|                ++i;
 3733|  3.82k|            }
 3734|  6.58k|            ++chars_consumed;
 3735|  6.58k|        }
 3736|  4.35k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.33k, False: 22]
  ------------------
 3737|  4.33k|            m_begin = start_it;
 3738|  4.33k|            return std::nullopt;
 3739|  4.33k|        }
 3740|     22|        return options.front().second;
 3741|  4.35k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.33k|    {
 3710|  4.33k|        auto start_it = m_begin;
 3711|  4.33k|        std::size_t options_available = N;
 3712|  4.33k|        std::size_t chars_consumed = 0;
 3713|  10.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.55k, False: 3.59k]
  ------------------
 3714|  10.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 5.84k, False: 706]
  ------------------
 3715|  5.84k|            std::size_t i = 0;
 3716|  5.84k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 30, False: 5.81k]
  ------------------
 3717|     30|                options_available = 0;
 3718|     30|                break;
 3719|     30|            }
 3720|  5.81k|            const auto ch = *m_begin;
 3721|  5.81k|            ++m_begin;
 3722|  54.9k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 49.1k, False: 5.81k]
  ------------------
 3723|  49.1k|                const auto cmp = static_cast<unsigned>(
 3724|  49.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  49.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 49.1k]
  ------------------
 3726|  49.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 47.6k, False: 1.47k]
  |  Branch (3726:34): [True: 46.9k, False: 790]
  ------------------
 3727|  46.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  46.9k|                                options.end());
 3729|  46.9k|                    --options_available;
 3730|  46.9k|                    continue;
 3731|  46.9k|                }
 3732|  2.26k|                ++i;
 3733|  2.26k|            }
 3734|  5.81k|            ++chars_consumed;
 3735|  5.81k|        }
 3736|  4.33k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 3.62k, False: 706]
  ------------------
 3737|  3.62k|            m_begin = start_it;
 3738|  3.62k|            return std::nullopt;
 3739|  3.62k|        }
 3740|    706|        return options.front().second;
 3741|  4.33k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3138|  7.34k|    {
 3139|  7.34k|#if !SCN_DISABLE_LOCALE
 3140|  7.34k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 7.34k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  7.34k|#endif
 3147|       |
 3148|  7.34k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  7.34k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  7.34k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3170|  7.32k|    {
 3171|  7.32k|#if !SCN_DISABLE_LOCALE
 3172|  7.32k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 7.32k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  7.32k|#endif
 3179|       |
 3180|  7.32k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  7.32k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  7.32k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2660|  7.32k|    {
 2661|  7.32k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  7.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.24k, False: 82]
  |  |  |  Branch (986:45): [True: 7.23k, False: 90]
  |  |  |  Branch (986:45): [True: 8, False: 82]
  |  |  ------------------
  ------------------
 2662|  7.24k|            return h.set_error(
 2663|  7.24k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2664|  7.24k|        }
 2665|     82|        t.mday = d;
 2666|     82|        st.set_mday(h);
 2667|     82|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3185|  3.64k|    {
 3186|  3.64k|#if !SCN_DISABLE_LOCALE
 3187|  3.64k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.64k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.64k|#endif
 3194|       |
 3195|  3.64k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.64k|            {"Sunday", 0},
 3197|  3.64k|            {"Monday", 1},
 3198|  3.64k|            {"Tuesday", 2},
 3199|  3.64k|            {"Wednesday", 3},
 3200|  3.64k|            {"Thursday", 4},
 3201|  3.64k|            {"Friday", 5},
 3202|  3.64k|            {"Saturday", 6},
 3203|  3.64k|        }};
 3204|  3.64k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.64k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.64k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.64k|            {"Sun", 0},
 3209|  3.64k|            {"Mon", 1},
 3210|  3.64k|            {"Tue", 2},
 3211|  3.64k|            {"Wed", 3},
 3212|  3.64k|            {"Thu", 4},
 3213|  3.64k|            {"Fri", 5},
 3214|  3.64k|            {"Sat", 6},
 3215|  3.64k|        }};
 3216|  3.64k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 0, False: 3.64k]
  ------------------
 3217|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|      0|        }
 3219|  3.64k|        return set_error(
 3220|  3.64k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.64k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  7.28k|    {
 3710|  7.28k|        auto start_it = m_begin;
 3711|  7.28k|        std::size_t options_available = N;
 3712|  7.28k|        std::size_t chars_consumed = 0;
 3713|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 7.49k, False: 7.26k]
  ------------------
 3714|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 7.49k, False: 0]
  ------------------
 3715|  7.49k|            std::size_t i = 0;
 3716|  7.49k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 24, False: 7.47k]
  ------------------
 3717|     24|                options_available = 0;
 3718|     24|                break;
 3719|     24|            }
 3720|  7.47k|            const auto ch = *m_begin;
 3721|  7.47k|            ++m_begin;
 3722|  58.6k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 51.1k, False: 7.47k]
  ------------------
 3723|  51.1k|                const auto cmp = static_cast<unsigned>(
 3724|  51.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  51.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 51.1k]
  ------------------
 3726|  51.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.9k, False: 224]
  |  Branch (3726:34): [True: 50.9k, False: 16]
  ------------------
 3727|  50.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  50.9k|                                options.end());
 3729|  50.9k|                    --options_available;
 3730|  50.9k|                    continue;
 3731|  50.9k|                }
 3732|    240|                ++i;
 3733|    240|            }
 3734|  7.47k|            ++chars_consumed;
 3735|  7.47k|        }
 3736|  7.28k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 7.28k, False: 0]
  ------------------
 3737|  7.28k|            m_begin = start_it;
 3738|  7.28k|            return std::nullopt;
 3739|  7.28k|        }
 3740|      0|        return options.front().second;
 3741|  7.28k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 3259|  14.3k|    {
 3260|  14.3k|#if !SCN_DISABLE_LOCALE
 3261|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 14.3k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  14.3k|#endif
 3268|       |
 3269|  14.3k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  14.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  14.3k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2634|  14.3k|    {
 2635|  14.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.82k, False: 7.51k]
  |  |  |  Branch (986:45): [True: 6.73k, False: 7.60k]
  |  |  |  Branch (986:45): [True: 90, False: 7.51k]
  |  |  ------------------
  ------------------
 2636|  6.82k|            return hdl.set_error(
 2637|  6.82k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2638|  6.82k|        }
 2639|  7.51k|        t.hour = h;
 2640|  7.51k|        st.set_hour24(hdl);
 2641|  7.51k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 3287|  14.3k|    {
 3288|  14.3k|#if !SCN_DISABLE_LOCALE
 3289|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 14.3k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  14.3k|#endif
 3296|       |
 3297|  14.3k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  14.3k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  14.3k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2621|  14.3k|    {
 2622|  14.3k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.84k, False: 7.48k]
  |  |  |  Branch (986:45): [True: 6.83k, False: 7.49k]
  |  |  |  Branch (986:45): [True: 12, False: 7.48k]
  |  |  ------------------
  ------------------
 2623|  6.84k|            return h.set_error({scan_error::invalid_scanned_value,
 2624|  6.84k|                                "Invalid value for minutes"});
 2625|  6.84k|        }
 2626|  7.48k|        t.min = m;
 2627|  7.48k|        st.set_min(h);
 2628|  7.48k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3301|  3.84k|    {
 3302|  3.84k|#if !SCN_DISABLE_LOCALE
 3303|  3.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.84k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.84k|#endif
 3310|       |
 3311|  3.84k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.84k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.84k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2608|  3.84k|    {
 2609|  3.84k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  4.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.61k, False: 236]
  |  |  |  Branch (986:45): [True: 3.61k, False: 238]
  |  |  |  Branch (986:45): [True: 2, False: 236]
  |  |  ------------------
  ------------------
 2610|  3.61k|            return h.set_error({scan_error::invalid_scanned_value,
 2611|  3.61k|                                "Invalid value for seconds"});
 2612|  3.61k|        }
 2613|    236|        t.sec = s;
 2614|    236|        st.set_sec(h);
 2615|    236|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3543|  3.64k|    {
 3544|       |        // %m/%d/%y
 3545|  3.64k|        constexpr CharT slash = '/';
 3546|  3.64k|        on_dec_month();
 3547|  3.64k|        on_text(&slash, &slash + 1);
 3548|  3.64k|        on_day_of_month();
 3549|  3.64k|        on_text(&slash, &slash + 1);
 3550|  3.64k|        on_short_year();
 3551|  3.64k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3553|  3.65k|    {
 3554|       |        // %Y-%m-%d
 3555|  3.65k|        constexpr CharT dash = '-';
 3556|  3.65k|        on_full_year();
 3557|  3.65k|        on_text(&dash, &dash + 1);
 3558|  3.65k|        on_dec_month();
 3559|  3.65k|        on_text(&dash, &dash + 1);
 3560|  3.65k|        on_day_of_month();
 3561|  3.65k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3585|  10.4k|    {
 3586|       |        // %H:%M
 3587|  10.4k|        constexpr CharT colon = ':';
 3588|  10.4k|        on_24_hour();
 3589|  10.4k|        on_text(&colon, &colon + 1);
 3590|  10.4k|        on_minute();
 3591|  10.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3593|  3.84k|    {
 3594|       |        // %H:%M:%S
 3595|  3.84k|        constexpr CharT colon = ':';
 3596|  3.84k|        on_24_hour();
 3597|  3.84k|        on_text(&colon, &colon + 1);
 3598|  3.84k|        on_minute();
 3599|  3.84k|        on_text(&colon, &colon + 1);
 3600|  3.84k|        on_second();
 3601|  3.84k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3632|  7.83k|    {
 3633|  7.83k|        m_st.verify(*this);
 3634|  7.83k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 7.83k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  7.83k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 7.82k, False: 12]
  |  Branch (3637:37): [True: 10, False: 7.81k]
  |  Branch (3637:60): [True: 0, False: 7.81k]
  ------------------
 3638|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|     10|        }
 3640|  7.83k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3643|  66.5k|    {
 3644|  66.5k|        return m_error;
 3645|  66.5k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3660|  7.83k|    {
 3661|  7.83k|        return m_begin;
 3662|  7.83k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3853|  33.6k|{
 3854|  33.6k|    {
 3855|  33.6k|        SCN_TRY(it,
  ------------------
  |  | 3939|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 360, False: 33.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    360|    }                                                  \
  |  |  |  | 3938|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  33.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  33.2k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  33.2k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  33.2k|    static_cast<    \
  |  | 1056|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  33.2k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  33.2k|        ctx.range(), t, ctx.locale());
 3862|  33.2k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  33.2k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 25.4k, False: 7.83k]
  |  |  ------------------
  ------------------
 3864|  25.4k|        return unexpected(e.error());
 3865|  25.4k|    }
 3866|  7.83k|    return r.get_iterator();
 3867|  33.2k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2997|  33.2k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  33.2k|    static_cast<    \
  |  | 1056|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  33.2k|          m_begin(ranges::begin(m_range)),
 2999|  33.2k|          m_tm(t),
 3000|  33.2k|          m_loc(loc)
 3001|  33.2k|    {
 3002|  33.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3648|  24.8k|    {
 3649|  24.8k|        set_error({scan_error::invalid_format_string, msg});
 3650|  24.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3653|   105k|    {
 3654|   105k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 25.4k, False: 80.3k]
  ------------------
 3655|  25.4k|            m_error = unexpected(e);
 3656|  25.4k|        }
 3657|   105k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3005|  32.8k|    {
 3006|  40.7k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 32.8k, False: 7.88k]
  ------------------
 3007|  32.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 118, False: 32.7k]
  ------------------
 3008|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    118|            }
 3010|  32.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 24.8k, False: 7.88k]
  ------------------
 3011|  24.8k|                return on_error("Invalid literal character");
 3012|  24.8k|            }
 3013|  7.88k|            ++beg;
 3014|  7.88k|            ++m_begin;
 3015|  7.88k|        }
 3016|  32.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3035|  7.29k|    {
 3036|  7.29k|#if !SCN_DISABLE_LOCALE
 3037|  7.29k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 7.29k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  7.29k|#endif
 3044|       |
 3045|  7.29k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  7.29k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  7.29k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2686|  7.29k|    {
 2687|  7.29k|        t.year = y;
 2688|  7.29k|        st.set_full_year(h);
 2689|  7.29k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3671|  58.1k|    {
 3672|  58.1k|        int digits_read = 0;
 3673|  58.1k|        int accumulator = 0;
 3674|  75.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 74.7k, False: 260]
  ------------------
 3675|  74.7k|            const auto ch = *m_begin;
 3676|  74.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 32.3k, False: 42.3k]
  |  Branch (3676:36): [True: 22.8k, False: 19.5k]
  ------------------
 3677|  55.2k|                break;
 3678|  55.2k|            }
 3679|  19.5k|            ++m_begin;
 3680|  19.5k|            ++digits_read;
 3681|  19.5k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  19.5k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 2.65k, False: 16.8k]
  ------------------
 3683|  2.65k|                break;
 3684|  2.65k|            }
 3685|  19.5k|        }
 3686|  58.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 42.1k, False: 15.9k]
  ------------------
 3687|  42.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  42.1k|                                 "Too few integer digits"});
 3689|  42.1k|            return -1;
 3690|  42.1k|        }
 3691|  15.9k|        return accumulator;
 3692|  58.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3049|  3.64k|    {
 3050|  3.64k|#if !SCN_DISABLE_LOCALE
 3051|  3.64k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 3.64k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  3.64k|#endif
 3059|       |
 3060|  3.64k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  3.64k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  3.64k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2709|  3.64k|    {
 2710|  3.64k|        if (!t.year) {
  ------------------
  |  Branch (2710:13): [True: 3.64k, False: 0]
  ------------------
 2711|  3.64k|            t.year = y;
 2712|  3.64k|        }
 2713|      0|        else {
 2714|      0|            t.year = *t.year + y;
 2715|      0|        }
 2716|  3.64k|        st.set_short_year(h);
 2717|  3.64k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3092|  4.35k|    {
 3093|  4.35k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.35k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.35k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.35k|#endif
 3101|       |
 3102|  4.35k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.35k|            {"January", 1},
 3104|  4.35k|            {"February", 2},
 3105|  4.35k|            {"March", 3},
 3106|  4.35k|            {"April", 4},
 3107|  4.35k|            {"May", 5},
 3108|  4.35k|            {"June", 6},
 3109|  4.35k|            {"July", 7},
 3110|  4.35k|            {"August", 8},
 3111|  4.35k|            {"September", 9},
 3112|  4.35k|            {"October", 10},
 3113|  4.35k|            {"November", 11},
 3114|  4.35k|            {"December", 12},
 3115|  4.35k|        }};
 3116|  4.35k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 22, False: 4.33k]
  ------------------
 3117|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     22|        }
 3119|  4.33k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.33k|            {"Jan", 1},
 3121|  4.33k|            {"Feb", 2},
 3122|  4.33k|            {"Mar", 3},
 3123|  4.33k|            {"Apr", 4},
 3124|  4.33k|            {"Jun", 6},
 3125|  4.33k|            {"Jul", 7},
 3126|  4.33k|            {"Aug", 8},
 3127|  4.33k|            {"Sep", 9},
 3128|  4.33k|            {"Oct", 10},
 3129|  4.33k|            {"Nov", 11},
 3130|  4.33k|            {"Dec", 12},
 3131|  4.33k|        }};
 3132|  4.33k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 706, False: 3.62k]
  ------------------
 3133|    706|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|    706|        }
 3135|  3.62k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  3.62k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2673|  8.06k|    {
 2674|  8.06k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  9.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.93k, False: 1.13k]
  |  |  |  Branch (986:45): [True: 6.88k, False: 1.18k]
  |  |  |  Branch (986:45): [True: 58, False: 1.13k]
  |  |  ------------------
  ------------------
 2675|  6.93k|            return h.set_error(
 2676|  6.93k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2677|  6.93k|        }
 2678|  1.13k|        t.mon = month{static_cast<unsigned>(m)};
 2679|  1.13k|        st.set_mon(h);
 2680|  1.13k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.35k|    {
 3710|  4.35k|        auto start_it = m_begin;
 3711|  4.35k|        std::size_t options_available = N;
 3712|  4.35k|        std::size_t chars_consumed = 0;
 3713|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.64k, False: 4.29k]
  ------------------
 3714|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.62k, False: 22]
  ------------------
 3715|  6.62k|            std::size_t i = 0;
 3716|  6.62k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 40, False: 6.58k]
  ------------------
 3717|     40|                options_available = 0;
 3718|     40|                break;
 3719|     40|            }
 3720|  6.58k|            const auto ch = *m_begin;
 3721|  6.58k|            ++m_begin;
 3722|  62.5k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 55.9k, False: 6.58k]
  ------------------
 3723|  55.9k|                const auto cmp = static_cast<unsigned>(
 3724|  55.9k|                    ch ^ options[i].first[chars_consumed]);
 3725|  55.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 55.9k]
  ------------------
 3726|  55.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 53.0k, False: 2.98k]
  |  Branch (3726:34): [True: 52.1k, False: 844]
  ------------------
 3727|  52.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  52.1k|                                options.end());
 3729|  52.1k|                    --options_available;
 3730|  52.1k|                    continue;
 3731|  52.1k|                }
 3732|  3.82k|                ++i;
 3733|  3.82k|            }
 3734|  6.58k|            ++chars_consumed;
 3735|  6.58k|        }
 3736|  4.35k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.33k, False: 22]
  ------------------
 3737|  4.33k|            m_begin = start_it;
 3738|  4.33k|            return std::nullopt;
 3739|  4.33k|        }
 3740|     22|        return options.front().second;
 3741|  4.35k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.33k|    {
 3710|  4.33k|        auto start_it = m_begin;
 3711|  4.33k|        std::size_t options_available = N;
 3712|  4.33k|        std::size_t chars_consumed = 0;
 3713|  10.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.55k, False: 3.59k]
  ------------------
 3714|  10.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 5.84k, False: 706]
  ------------------
 3715|  5.84k|            std::size_t i = 0;
 3716|  5.84k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 30, False: 5.81k]
  ------------------
 3717|     30|                options_available = 0;
 3718|     30|                break;
 3719|     30|            }
 3720|  5.81k|            const auto ch = *m_begin;
 3721|  5.81k|            ++m_begin;
 3722|  54.9k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 49.1k, False: 5.81k]
  ------------------
 3723|  49.1k|                const auto cmp = static_cast<unsigned>(
 3724|  49.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  49.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 49.1k]
  ------------------
 3726|  49.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 47.6k, False: 1.47k]
  |  Branch (3726:34): [True: 46.9k, False: 790]
  ------------------
 3727|  46.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  46.9k|                                options.end());
 3729|  46.9k|                    --options_available;
 3730|  46.9k|                    continue;
 3731|  46.9k|                }
 3732|  2.26k|                ++i;
 3733|  2.26k|            }
 3734|  5.81k|            ++chars_consumed;
 3735|  5.81k|        }
 3736|  4.33k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 3.62k, False: 706]
  ------------------
 3737|  3.62k|            m_begin = start_it;
 3738|  3.62k|            return std::nullopt;
 3739|  3.62k|        }
 3740|    706|        return options.front().second;
 3741|  4.33k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3138|  7.34k|    {
 3139|  7.34k|#if !SCN_DISABLE_LOCALE
 3140|  7.34k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 7.34k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  7.34k|#endif
 3147|       |
 3148|  7.34k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  7.34k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  7.34k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3170|  7.32k|    {
 3171|  7.32k|#if !SCN_DISABLE_LOCALE
 3172|  7.32k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 7.32k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  7.32k|#endif
 3179|       |
 3180|  7.32k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  7.32k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  7.32k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2660|  7.32k|    {
 2661|  7.32k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  7.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.24k, False: 82]
  |  |  |  Branch (986:45): [True: 7.23k, False: 90]
  |  |  |  Branch (986:45): [True: 8, False: 82]
  |  |  ------------------
  ------------------
 2662|  7.24k|            return h.set_error(
 2663|  7.24k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2664|  7.24k|        }
 2665|     82|        t.mday = d;
 2666|     82|        st.set_mday(h);
 2667|     82|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3185|  3.64k|    {
 3186|  3.64k|#if !SCN_DISABLE_LOCALE
 3187|  3.64k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.64k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.64k|#endif
 3194|       |
 3195|  3.64k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.64k|            {"Sunday", 0},
 3197|  3.64k|            {"Monday", 1},
 3198|  3.64k|            {"Tuesday", 2},
 3199|  3.64k|            {"Wednesday", 3},
 3200|  3.64k|            {"Thursday", 4},
 3201|  3.64k|            {"Friday", 5},
 3202|  3.64k|            {"Saturday", 6},
 3203|  3.64k|        }};
 3204|  3.64k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.64k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.64k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.64k|            {"Sun", 0},
 3209|  3.64k|            {"Mon", 1},
 3210|  3.64k|            {"Tue", 2},
 3211|  3.64k|            {"Wed", 3},
 3212|  3.64k|            {"Thu", 4},
 3213|  3.64k|            {"Fri", 5},
 3214|  3.64k|            {"Sat", 6},
 3215|  3.64k|        }};
 3216|  3.64k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 0, False: 3.64k]
  ------------------
 3217|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|      0|        }
 3219|  3.64k|        return set_error(
 3220|  3.64k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.64k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  7.28k|    {
 3710|  7.28k|        auto start_it = m_begin;
 3711|  7.28k|        std::size_t options_available = N;
 3712|  7.28k|        std::size_t chars_consumed = 0;
 3713|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 7.49k, False: 7.26k]
  ------------------
 3714|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 7.49k, False: 0]
  ------------------
 3715|  7.49k|            std::size_t i = 0;
 3716|  7.49k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 24, False: 7.47k]
  ------------------
 3717|     24|                options_available = 0;
 3718|     24|                break;
 3719|     24|            }
 3720|  7.47k|            const auto ch = *m_begin;
 3721|  7.47k|            ++m_begin;
 3722|  58.6k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 51.1k, False: 7.47k]
  ------------------
 3723|  51.1k|                const auto cmp = static_cast<unsigned>(
 3724|  51.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  51.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 51.1k]
  ------------------
 3726|  51.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.9k, False: 224]
  |  Branch (3726:34): [True: 50.9k, False: 16]
  ------------------
 3727|  50.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  50.9k|                                options.end());
 3729|  50.9k|                    --options_available;
 3730|  50.9k|                    continue;
 3731|  50.9k|                }
 3732|    240|                ++i;
 3733|    240|            }
 3734|  7.47k|            ++chars_consumed;
 3735|  7.47k|        }
 3736|  7.28k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 7.28k, False: 0]
  ------------------
 3737|  7.28k|            m_begin = start_it;
 3738|  7.28k|            return std::nullopt;
 3739|  7.28k|        }
 3740|      0|        return options.front().second;
 3741|  7.28k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 3259|  14.3k|    {
 3260|  14.3k|#if !SCN_DISABLE_LOCALE
 3261|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 14.3k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  14.3k|#endif
 3268|       |
 3269|  14.3k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  14.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  14.3k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2634|  14.3k|    {
 2635|  14.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.82k, False: 7.51k]
  |  |  |  Branch (986:45): [True: 6.73k, False: 7.60k]
  |  |  |  Branch (986:45): [True: 90, False: 7.51k]
  |  |  ------------------
  ------------------
 2636|  6.82k|            return hdl.set_error(
 2637|  6.82k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2638|  6.82k|        }
 2639|  7.51k|        t.hour = h;
 2640|  7.51k|        st.set_hour24(hdl);
 2641|  7.51k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 3287|  14.3k|    {
 3288|  14.3k|#if !SCN_DISABLE_LOCALE
 3289|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 14.3k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  14.3k|#endif
 3296|       |
 3297|  14.3k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  14.3k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  14.3k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2621|  14.3k|    {
 2622|  14.3k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.84k, False: 7.48k]
  |  |  |  Branch (986:45): [True: 6.83k, False: 7.49k]
  |  |  |  Branch (986:45): [True: 12, False: 7.48k]
  |  |  ------------------
  ------------------
 2623|  6.84k|            return h.set_error({scan_error::invalid_scanned_value,
 2624|  6.84k|                                "Invalid value for minutes"});
 2625|  6.84k|        }
 2626|  7.48k|        t.min = m;
 2627|  7.48k|        st.set_min(h);
 2628|  7.48k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3301|  3.84k|    {
 3302|  3.84k|#if !SCN_DISABLE_LOCALE
 3303|  3.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.84k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.84k|#endif
 3310|       |
 3311|  3.84k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.84k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.84k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2608|  3.84k|    {
 2609|  3.84k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  4.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.61k, False: 236]
  |  |  |  Branch (986:45): [True: 3.61k, False: 238]
  |  |  |  Branch (986:45): [True: 2, False: 236]
  |  |  ------------------
  ------------------
 2610|  3.61k|            return h.set_error({scan_error::invalid_scanned_value,
 2611|  3.61k|                                "Invalid value for seconds"});
 2612|  3.61k|        }
 2613|    236|        t.sec = s;
 2614|    236|        st.set_sec(h);
 2615|    236|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3543|  3.64k|    {
 3544|       |        // %m/%d/%y
 3545|  3.64k|        constexpr CharT slash = '/';
 3546|  3.64k|        on_dec_month();
 3547|  3.64k|        on_text(&slash, &slash + 1);
 3548|  3.64k|        on_day_of_month();
 3549|  3.64k|        on_text(&slash, &slash + 1);
 3550|  3.64k|        on_short_year();
 3551|  3.64k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3553|  3.65k|    {
 3554|       |        // %Y-%m-%d
 3555|  3.65k|        constexpr CharT dash = '-';
 3556|  3.65k|        on_full_year();
 3557|  3.65k|        on_text(&dash, &dash + 1);
 3558|  3.65k|        on_dec_month();
 3559|  3.65k|        on_text(&dash, &dash + 1);
 3560|  3.65k|        on_day_of_month();
 3561|  3.65k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3585|  10.4k|    {
 3586|       |        // %H:%M
 3587|  10.4k|        constexpr CharT colon = ':';
 3588|  10.4k|        on_24_hour();
 3589|  10.4k|        on_text(&colon, &colon + 1);
 3590|  10.4k|        on_minute();
 3591|  10.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3593|  3.84k|    {
 3594|       |        // %H:%M:%S
 3595|  3.84k|        constexpr CharT colon = ':';
 3596|  3.84k|        on_24_hour();
 3597|  3.84k|        on_text(&colon, &colon + 1);
 3598|  3.84k|        on_minute();
 3599|  3.84k|        on_text(&colon, &colon + 1);
 3600|  3.84k|        on_second();
 3601|  3.84k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3632|  7.83k|    {
 3633|  7.83k|        m_st.verify(*this);
 3634|  7.83k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 7.83k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  7.83k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 7.82k, False: 12]
  |  Branch (3637:37): [True: 10, False: 7.81k]
  |  Branch (3637:60): [True: 0, False: 7.81k]
  ------------------
 3638|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|     10|        }
 3640|  7.83k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3643|  66.5k|    {
 3644|  66.5k|        return m_error;
 3645|  66.5k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3660|  7.83k|    {
 3661|  7.83k|        return m_begin;
 3662|  7.83k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    921|{
 1462|    921|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    921|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    921|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    921|            return transcode_to_string_impl_to32(src, dest);
 1473|    921|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    921|    SCN_EXPECT(false);
  ------------------
  |  | 1051|    921|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    921|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    921|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    921|{
 1355|    921|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    921|    auto it = src.begin();
 1358|   259k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 258k, False: 921]
  ------------------
 1359|   258k|        auto res = get_next_code_point(
 1360|   258k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   258k|                                                                 src.end()));
 1362|   258k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  986|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.07k, False: 251k]
  |  |  ------------------
  ------------------
 1363|  7.07k|            dest.push_back(DestCharT{0xfffd});
 1364|  7.07k|        }
 1365|   251k|        else {
 1366|   251k|            dest.push_back(res.value);
 1367|   251k|        }
 1368|   258k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   258k|    }
 1370|    921|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   276k|{
 1279|   276k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1051|   276k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   276k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   276k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   276k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 10.3k, False: 265k]
  |  |  ------------------
  ------------------
 1283|  10.3k|        return {get_start_for_next_code_point(input),
 1284|  10.3k|                detail::invalid_code_point};
 1285|  10.3k|    }
 1286|   265k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  986|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 325, False: 265k]
  |  |  ------------------
  ------------------
 1287|    325|        return {input.end(), detail::invalid_code_point};
 1288|    325|    }
 1289|       |
 1290|   265k|    return {input.begin() + len,
 1291|   265k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   265k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  10.3k|{
 1265|  10.3k|    auto it = input.begin();
 1266|   146k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 145k, False: 621]
  ------------------
 1267|   145k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 9.70k, False: 136k]
  ------------------
 1268|  9.70k|            break;
 1269|  9.70k|        }
 1270|   145k|    }
 1271|  10.3k|    return it;
 1272|  10.3k|}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   176k|{
  458|   176k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   176k|        static_cast<unsigned char>(ch))];
  460|   176k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  93.1k|{
  539|  93.1k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  93.1k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|   392k|{
  784|   392k|    return e != eof_error::good;
  785|   392k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  4.45k|{
  798|  4.45k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1051|  4.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  4.45k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  4.45k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  87.4k|    {
  304|  87.4k|        ranges::advance(x, n);
  305|  87.4k|        return x;
  306|  87.4k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  87.4k|    {
  268|  87.4k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  87.4k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  87.4k|    {
  151|  87.4k|        i += n;
  152|  87.4k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   229k|    {
  108|   229k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   229k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   229k|    {
   87|   229k|        return s - i;
   88|   229k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   124k|    {
  108|   124k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   124k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   124k|    {
   87|   124k|        return s - i;
   88|   124k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2INSt3__117basic_string_viewIcNSB_11char_traitsIcEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSO_10locale_refE:
 2985|  87.4k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|  87.4k|    static_cast<    \
  |  | 1056|  87.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  87.4k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  87.4k|          m_current(m_range.begin())
 2988|  87.4k|    {
 2989|  87.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   485k|    {
 2993|   485k|        return m_current;
 2994|   485k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2INSt3__117basic_string_viewIwNSB_11char_traitsIwEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSO_10locale_refE:
 2985|   100k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|   100k|    static_cast<    \
  |  | 1056|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   100k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   100k|          m_current(m_range.begin())
 2988|   100k|    {
 2989|   100k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   526k|    {
 2993|   526k|        return m_current;
 2994|   526k|    }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  1.18M|    {
  763|  1.18M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.18M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   305k|        : m_fptr([](storage fn,
  743|   305k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   305k|              cvref<T> obj = *get<T>(fn);
  745|   305k|              if constexpr (std::is_void_v<R>) {
  746|   305k|                  obj(static_cast<decltype(args)>(args)...);
  747|   305k|              }
  748|   305k|              else {
  749|   305k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   305k|              }
  751|   305k|          }),
  752|   305k|          m_storage(std::addressof(f))
  753|   305k|    {
  754|   305k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   594k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   594k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   594k|              else {
  749|   594k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   594k|              }
  751|   594k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   594k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   594k|        else if constexpr (std::is_object_v<T>) {
  688|   594k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   594k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   305k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   305k|        {
  662|   305k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  64.9k|    {
  108|  64.9k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  64.9k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  64.9k|    {
   94|  64.9k|        iter_difference_t<I> counter{0};
   95|   578k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 513k, False: 64.9k]
  ------------------
   96|   513k|            ++i;
   97|   513k|            ++counter;
   98|   513k|        }
   99|  64.9k|        return counter;
  100|  64.9k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   103k|{
  951|   103k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.52k, False: 102k]
  |  |  ------------------
  ------------------
  952|  1.52k|        return eof_error::eof;
  953|  1.52k|    }
  954|   102k|    return eof_error::good;
  955|   103k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   340k|{
  945|   340k|    return is_range_eof(r.begin(), r.end());
  946|   340k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   340k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   340k|    {
  938|   340k|        return begin == end;
  939|   340k|    }
  940|   340k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  87.4k|{
  951|  87.4k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 774, False: 86.7k]
  |  |  ------------------
  ------------------
  952|    774|        return eof_error::eof;
  953|    774|    }
  954|  86.7k|    return eof_error::good;
  955|  87.4k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  87.4k|{
  945|  87.4k|    return is_range_eof(r.begin(), r.end());
  946|  87.4k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  87.4k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  87.4k|    {
  938|  87.4k|        return begin == end;
  939|  87.4k|    }
  940|  87.4k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|   174k|    {
 1602|   174k|        return sv;
 1603|   174k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  87.4k|{
 3066|  87.4k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 87.4k, False: 0]
  ------------------
 3067|  87.4k|        auto it = read_while_classic_space(range);
 3068|  87.4k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  87.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 774, False: 86.7k]
  |  |  ------------------
  ------------------
 3070|    774|            return unexpected(e);
 3071|    774|        }
 3072|       |
 3073|  86.7k|        return it;
 3074|  87.4k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  87.4k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  87.4k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  87.4k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  87.4k|        auto buf = make_contiguous_buffer(range);
 2220|  87.4k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  87.4k|        return ranges::next(range.begin(),
 2222|  87.4k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  87.4k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  87.4k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  87.4k|                  ranges::sized_range<Range>) {
 1785|  87.4k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  87.4k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  87.4k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  87.4k|    {
 1589|  87.4k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   103k|    {
  268|   103k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   103k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   103k|    {
  181|   103k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 0, False: 103k]
  ------------------
  182|      0|            ++i;
  183|      0|        }
  184|   103k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   103k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   103k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   103k|        else {
 1055|   103k|            return r.begin().contiguous_segment();
 1056|   103k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   103k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   103k|{
 2160|   103k|    auto it = range.begin();
 2161|   238k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 236k, False: 1.52k]
  ------------------
 2162|   236k|        const auto val =
 2163|   236k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   236k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|   236k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 217k, False: 19.0k]
  |  |  ------------------
  ------------------
 2165|   217k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   217k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   217k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 102k, False: 115k]
  ------------------
 2168|   102k|                return it;
 2169|   102k|            }
 2170|   217k|        }
 2171|   134k|        it = val.iterator;
 2172|   134k|    }
 2173|       |
 2174|  1.52k|    return it;
 2175|   103k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   236k|{
 1998|   236k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|   236k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   236k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   236k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   236k|    auto it = range.begin();
 2002|   236k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   236k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 19.0k, False: 217k]
  |  |  ------------------
  ------------------
 2005|  19.0k|        ++it;
 2006|  19.0k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  19.0k|        return {it, {}};
 2008|  19.0k|    }
 2009|       |
 2010|   217k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 212k, False: 5.00k]
  ------------------
 2011|   212k|        ++it;
 2012|   212k|        return {it, string_type(1, *range.begin())};
 2013|   212k|    }
 2014|       |
 2015|  5.00k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  5.00k|    return {it, string_type{range.begin(), it}};
 2017|   217k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  19.0k|{
 1265|  19.0k|    auto it = input.begin();
 1266|   250k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 249k, False: 594]
  ------------------
 1267|   249k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 18.4k, False: 231k]
  ------------------
 1268|  18.4k|            break;
 1269|  18.4k|        }
 1270|   249k|    }
 1271|  19.0k|    return it;
 1272|  19.0k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  5.00k|    {
  283|  5.00k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  5.00k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  5.00k|    {
  252|  5.00k|        constexpr iter_difference_t<I> zero{0};
  253|  5.00k|        iter_difference_t<I> counter{0};
  254|       |
  255|  15.8k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 11.1k, False: 4.68k]
  |  Branch (255:30): [True: 10.8k, False: 324]
  ------------------
  256|  10.8k|            ++i;
  257|  10.8k|            ++counter;
  258|  10.8k|        }
  259|       |
  260|  5.00k|        return counter;
  261|  5.00k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   236k|    {
 1989|   236k|        return !codepoint.empty();
 1990|   236k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   103k|{
 2181|   103k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   103k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   103k|{
 3066|   103k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 103k, False: 0]
  ------------------
 3067|   103k|        auto it = read_while_classic_space(range);
 3068|   103k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   103k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.52k, False: 102k]
  |  |  ------------------
  ------------------
 3070|  1.52k|            return unexpected(e);
 3071|  1.52k|        }
 3072|       |
 3073|   102k|        return it;
 3074|   103k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   103k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   103k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   103k|    else {
 2225|   103k|        auto it = range.begin();
 2226|       |
 2227|   103k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|   103k|            auto seg = get_contiguous_beginning(range);
 2229|   103k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|   103k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 103k]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|   103k|            ranges::advance(it, seg.size());
 2234|   103k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   103k|            return detail::is_cp_space(cp);
 2238|   103k|        });
 2239|   103k|    }
 2240|   103k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   103k|        : m_fptr([](storage fn,
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
  752|   103k|          m_storage(std::addressof(f))
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   217k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   217k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   217k|              else {
  749|   217k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   217k|              }
  751|   217k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   217k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   217k|        else if constexpr (std::is_object_v<T>) {
  688|   217k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   217k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   217k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   217k|            return detail::is_cp_space(cp);
 2238|   217k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   103k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   103k|        {
  662|   103k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  23.5k|    {
  108|  23.5k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  23.5k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  23.5k|    {
   94|  23.5k|        iter_difference_t<I> counter{0};
   95|   163k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 139k, False: 23.5k]
  ------------------
   96|   139k|            ++i;
   97|   139k|            ++counter;
   98|   139k|        }
   99|  23.5k|        return counter;
  100|  23.5k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   100k|{
  951|   100k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.08k, False: 99.7k]
  |  |  ------------------
  ------------------
  952|  1.08k|        return eof_error::eof;
  953|  1.08k|    }
  954|  99.7k|    return eof_error::good;
  955|   100k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   289k|{
  945|   289k|    return is_range_eof(r.begin(), r.end());
  946|   289k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   289k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   289k|    {
  938|   289k|        return begin == end;
  939|   289k|    }
  940|   289k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   188k|{
 1998|   188k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|   188k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   188k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   188k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   188k|    auto it = range.begin();
 2002|   188k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   188k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 188k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   188k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 188k, False: 0]
  ------------------
 2011|   188k|        ++it;
 2012|   188k|        return {it, string_type(1, *range.begin())};
 2013|   188k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   188k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   289k|{
  945|   289k|    return is_range_eof(r.begin(), r.end());
  946|   289k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   289k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   289k|    {
  938|   289k|        return begin == end;
  939|   289k|    }
  940|   289k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   188k|    {
 1989|   188k|        return !codepoint.empty();
 1990|   188k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|   100k|{
  951|   100k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.08k, False: 99.7k]
  |  |  ------------------
  ------------------
  952|  1.08k|        return eof_error::eof;
  953|  1.08k|    }
  954|  99.7k|    return eof_error::good;
  955|   100k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   100k|{
 3066|   100k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 100k, False: 0]
  ------------------
 3067|   100k|        auto it = read_while_classic_space(range);
 3068|   100k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   100k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.08k, False: 99.7k]
  |  |  ------------------
  ------------------
 3070|  1.08k|            return unexpected(e);
 3071|  1.08k|        }
 3072|       |
 3073|  99.7k|        return it;
 3074|   100k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   100k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   100k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   100k|    else {
 2225|   100k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   100k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   100k|            return detail::is_cp_space(cp);
 2238|   100k|        });
 2239|   100k|    }
 2240|   100k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|   100k|{
 2181|   100k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   100k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|   100k|{
 2160|   100k|    auto it = range.begin();
 2161|   189k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 188k, False: 1.08k]
  ------------------
 2162|   188k|        const auto val =
 2163|   188k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   188k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|   188k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 188k, False: 0]
  |  |  ------------------
  ------------------
 2165|   188k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   188k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   188k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 99.7k, False: 88.4k]
  ------------------
 2168|  99.7k|                return it;
 2169|  99.7k|            }
 2170|   188k|        }
 2171|  88.4k|        it = val.iterator;
 2172|  88.4k|    }
 2173|       |
 2174|  1.08k|    return it;
 2175|   100k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   188k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   188k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   188k|              else {
  749|   188k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   188k|              }
  751|   188k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   188k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   188k|        else if constexpr (std::is_object_v<T>) {
  688|   188k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   188k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   188k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   188k|            return detail::is_cp_space(cp);
 2238|   188k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   100k|{
 2160|   100k|    auto it = range.begin();
 2161|   189k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 188k, False: 1.08k]
  ------------------
 2162|   188k|        const auto val =
 2163|   188k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   188k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|   188k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 188k, False: 0]
  |  |  ------------------
  ------------------
 2165|   188k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   188k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   188k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 99.7k, False: 88.4k]
  ------------------
 2168|  99.7k|                return it;
 2169|  99.7k|            }
 2170|   188k|        }
 2171|  88.4k|        it = val.iterator;
 2172|  88.4k|    }
 2173|       |
 2174|  1.08k|    return it;
 2175|   100k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   188k|{
 1998|   188k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|   188k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   188k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   188k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   188k|    auto it = range.begin();
 2002|   188k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   188k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 188k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   188k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 188k, False: 0]
  ------------------
 2011|   188k|        ++it;
 2012|   188k|        return {it, string_type(1, *range.begin())};
 2013|   188k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   188k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   188k|    {
 1989|   188k|        return !codepoint.empty();
 1990|   188k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   100k|{
 2181|   100k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   100k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   100k|{
 3066|   100k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 100k, False: 0]
  ------------------
 3067|   100k|        auto it = read_while_classic_space(range);
 3068|   100k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   100k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.08k, False: 99.7k]
  |  |  ------------------
  ------------------
 3070|  1.08k|            return unexpected(e);
 3071|  1.08k|        }
 3072|       |
 3073|  99.7k|        return it;
 3074|   100k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   100k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   100k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   100k|    else {
 2225|   100k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   100k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   100k|            return detail::is_cp_space(cp);
 2238|   100k|        });
 2239|   100k|    }
 2240|   100k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   188k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   188k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   188k|              else {
  749|   188k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   188k|              }
  751|   188k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   188k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   188k|        else if constexpr (std::is_object_v<T>) {
  688|   188k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   188k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   188k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   188k|            return detail::is_cp_space(cp);
 2238|   188k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEcEEE6handleE:
 5953|  2.76k|    {
 5954|  2.76k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.76k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  2.76k|                source_tag<range_type>, {}};
 5957|  2.76k|            auto ctx = make_custom_ctx();
 5958|  2.76k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3929|  2.76k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 2.76k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.76k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|      0|                              basic_contiguous_scan_context<char_type>>) {
 5963|      0|                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|       |            else {
 5966|       |                return ctx.begin();
 5967|       |            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  2.76k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE15make_custom_ctxEv:
 5935|  2.76k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  2.76k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  2.76k|            auto it =
 5940|  2.76k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  2.76k|                    std::basic_string_view<char_type>(range.data(),
 5942|  2.76k|                                                      range.size()),
 5943|  2.76k|                    0};
 5944|  2.76k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  2.76k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  2.76k|    {
 5954|  2.76k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.76k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  2.76k|                source_tag<range_type>, {}};
 5957|  2.76k|            auto ctx = make_custom_ctx();
 5958|  2.76k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3929|  2.76k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 2.76k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.76k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|       |                              basic_contiguous_scan_context<char_type>>) {
 5963|       |                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|      0|            else {
 5966|      0|                return ctx.begin();
 5967|      0|            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  2.76k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15make_custom_ctxEv:
 5935|  2.76k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  2.76k|        else {
 5947|  2.76k|            return {range.begin(), args, loc};
 5948|  2.76k|        }
 5949|  2.76k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  87.4k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|  87.4k|    static_cast<    \
  |  | 1056|  87.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  87.4k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  87.4k|          m_current(m_range.begin())
 2988|  87.4k|    {
 2989|  87.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   260k|    {
 2998|   260k|        return m_range.end();
 2999|   260k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  86.7k|    {
 3013|  86.7k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1051|  86.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  86.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  86.7k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  86.7k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 86.7k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  86.7k|        }
 3019|  86.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|  86.7k|    static_cast<    \
  |  | 1056|  86.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  86.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   174k|    {
 3003|   174k|        return ranges::subrange{begin(), end()};
 3004|   174k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 6285|   191k|    {
 6286|   191k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3929|   191k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 77.3k, False: 113k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  77.3k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  77.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  77.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  77.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  77.3k|    }
  ------------------
 6287|   113k|        return {ctx.begin()};
 6288|   191k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toERKNS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 3023|  48.8k|    {
 3024|  48.8k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  | 1051|  48.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  48.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  48.8k|        m_current = m_range.begin() + it.position();
 3026|  48.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE16underlying_rangeEv:
 3007|   262k|    {
 3008|   262k|        return m_range;
 3009|   262k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE14begin_positionEv:
 3029|  87.4k|    {
 3030|  87.4k|        return ranges::distance(m_range.begin(), begin());
 3031|  87.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEwEEE6handleE:
 5953|  5.52k|    {
 5954|  5.52k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  5.52k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  5.52k|                source_tag<range_type>, {}};
 5957|  5.52k|            auto ctx = make_custom_ctx();
 5958|  5.52k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3929|  5.52k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  5.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 5.52k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  5.52k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  5.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  5.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  5.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  5.52k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|      0|                              basic_contiguous_scan_context<char_type>>) {
 5963|      0|                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|       |            else {
 5966|       |                return ctx.begin();
 5967|       |            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  5.52k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE15make_custom_ctxEv:
 5935|  5.52k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  5.52k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  5.52k|            auto it =
 5940|  5.52k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  5.52k|                    std::basic_string_view<char_type>(range.data(),
 5942|  5.52k|                                                      range.size()),
 5943|  5.52k|                    0};
 5944|  5.52k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  5.52k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   100k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|   100k|    static_cast<    \
  |  | 1056|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   100k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   100k|          m_current(m_range.begin())
 2988|   100k|    {
 2989|   100k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   300k|    {
 2998|   300k|        return m_range.end();
 2999|   300k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|  99.7k|    {
 3013|  99.7k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1051|  99.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  99.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  99.7k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  99.7k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 99.7k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  99.7k|        }
 3019|  99.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|  99.7k|    static_cast<    \
  |  | 1056|  99.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  99.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   200k|    {
 3003|   200k|        return ranges::subrange{begin(), end()};
 3004|   200k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 6285|   201k|    {
 6286|   201k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3929|   201k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 154k, False: 47.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|   154k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|   154k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|   154k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|   154k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|   154k|    }
  ------------------
 6287|  47.0k|        return {ctx.begin()};
 6288|   201k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toERKNS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 3023|  23.5k|    {
 3024|  23.5k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  | 1051|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  23.5k|        m_current = m_range.begin() + it.position();
 3026|  23.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE16underlying_rangeEv:
 3007|   302k|    {
 3008|   302k|        return m_range;
 3009|   302k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE14begin_positionEv:
 3029|   100k|    {
 3030|   100k|        return ranges::distance(m_range.begin(), begin());
 3031|   100k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  5.52k|    {
 5954|  5.52k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  5.52k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  5.52k|                source_tag<range_type>, {}};
 5957|  5.52k|            auto ctx = make_custom_ctx();
 5958|  5.52k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3929|  5.52k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  5.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 5.52k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  5.52k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  5.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  5.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  5.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  5.52k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|       |                              basic_contiguous_scan_context<char_type>>) {
 5963|       |                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|      0|            else {
 5966|      0|                return ctx.begin();
 5967|      0|            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  5.52k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15make_custom_ctxEv:
 5935|  5.52k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  5.52k|        else {
 5947|  5.52k|            return {range.begin(), args, loc};
 5948|  5.52k|        }
 5949|  5.52k|    }

LLVMFuzzerTestOneInput:
   58|    921|{
   59|    921|    scn::fuzz::run(data, size);
   60|    921|    return 0;
   61|    921|}
chrono_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   34|    921|{
   35|    921|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (35:9): [True: 0, False: 921]
  |  Branch (35:35): [True: 0, False: 921]
  ------------------
   36|      0|        return;
   37|      0|    }
   38|       |
   39|    921|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   40|       |
   41|    921|    const auto& f =
   42|    921|        get_format_strings<char>("{:%T}", "{:%R}", "{:%D}", "{:%F}",
   43|    921|                                 "{:%Y-%m-%dT%H:%M:%S%z}", "{:%a}", "{:%b}");
   44|    921|    do_basic_run(sv, f);
   45|       |
   46|    921|    const auto& wf = get_format_strings<wchar_t>(
   47|    921|        L"{:%T}", L"{:%R}", L"{:%D}", L"{:%F}", L"{:%Y-%m-%dT%H:%M:%S%z}",
   48|    921|        L"{:%a}", L"{:%b}");
   49|    921|    do_basic_run(wsv_reinterpret, wf);
   50|    921|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (50:9): [True: 921, False: 0]
  ------------------
   51|    921|        do_basic_run(wsv_transcode, wf);
   52|    921|    }
   53|    921|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|    921|{
   27|    921|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    921|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    921|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    921|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|    921|{
   27|    921|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    921|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    921|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    921|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|  1.84k|{
   27|  1.84k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.84k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.84k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.84k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|  1.84k|{
   27|  1.84k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.84k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.84k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.84k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    921|{
   53|    921|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1051|    921|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    921|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    921|    string_buffer.resize(size);
   57|    921|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    921|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    921|    const auto wsv_reinterpret_size =
   62|    921|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 77, False: 844]
  ------------------
   63|    921|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    921|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    921|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    921|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    921|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    921|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    921|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    921|{
  123|    921|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    921|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    921|    buf.resize(sizeof...(Args));
  126|    921|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    921|    return buf;
  128|    921|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    921|{
  109|    921|    if constexpr (std::is_same_v<CharT, char>) {
  110|    921|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    921|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    921|{
  186|    921|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    921|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    921|                                   format_strings);
  189|    921|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|    921|{
  134|       |    // Regular scan
  135|  6.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.44k, False: 921]
  ------------------
  136|  6.44k|        auto it = scn::ranges::begin(source);
  137|  14.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.5k|            auto result = scn::scan<T>(
  140|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.5k|                scn::runtime_format(f));
  142|  14.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.44k, False: 8.13k]
  ------------------
  143|  6.44k|                break;
  144|  6.44k|            }
  145|  8.13k|            it = result->begin();
  146|  8.13k|        }
  147|  6.44k|    }
  148|       |
  149|       |    // scan localized
  150|  6.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.44k, False: 921]
  ------------------
  151|  6.44k|        auto it = scn::ranges::begin(source);
  152|  14.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.5k|            auto result = scn::scan<T>(
  155|  14.5k|                global_locale,
  156|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.5k|                scn::runtime_format(f));
  158|  14.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.44k, False: 8.13k]
  ------------------
  159|  6.44k|                break;
  160|  6.44k|            }
  161|  8.13k|            it = result->begin();
  162|  8.13k|        }
  163|  6.44k|    }
  164|       |
  165|       |    // scan_value
  166|    921|    {
  167|    921|        auto it = scn::ranges::begin(source);
  168|    921|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    921|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|    921|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    921|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    921|            auto result = scn::scan_value<T>(
  171|    921|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    921|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 921, False: 0]
  ------------------
  173|    921|                break;
  174|    921|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    921|    }
  178|    921|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    921|{
  134|       |    // Regular scan
  135|  6.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.44k, False: 921]
  ------------------
  136|  6.44k|        auto it = scn::ranges::begin(source);
  137|  14.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.5k|            auto result = scn::scan<T>(
  140|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.5k|                scn::runtime_format(f));
  142|  14.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.44k, False: 8.13k]
  ------------------
  143|  6.44k|                break;
  144|  6.44k|            }
  145|  8.13k|            it = result->begin();
  146|  8.13k|        }
  147|  6.44k|    }
  148|       |
  149|       |    // scan localized
  150|  6.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.44k, False: 921]
  ------------------
  151|  6.44k|        auto it = scn::ranges::begin(source);
  152|  14.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.5k|            auto result = scn::scan<T>(
  155|  14.5k|                global_locale,
  156|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.5k|                scn::runtime_format(f));
  158|  14.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.44k, False: 8.13k]
  ------------------
  159|  6.44k|                break;
  160|  6.44k|            }
  161|  8.13k|            it = result->begin();
  162|  8.13k|        }
  163|  6.44k|    }
  164|       |
  165|       |    // scan_value
  166|    921|    {
  167|    921|        auto it = scn::ranges::begin(source);
  168|    921|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    921|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|    921|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    921|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    921|            auto result = scn::scan_value<T>(
  171|    921|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    921|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 921, False: 0]
  ------------------
  173|    921|                break;
  174|    921|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    921|    }
  178|    921|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    921|{
  134|       |    // Regular scan
  135|  6.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.44k, False: 921]
  ------------------
  136|  6.44k|        auto it = scn::ranges::begin(source);
  137|  14.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.5k|            auto result = scn::scan<T>(
  140|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.5k|                scn::runtime_format(f));
  142|  14.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.44k, False: 8.13k]
  ------------------
  143|  6.44k|                break;
  144|  6.44k|            }
  145|  8.13k|            it = result->begin();
  146|  8.13k|        }
  147|  6.44k|    }
  148|       |
  149|       |    // scan localized
  150|  6.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.44k, False: 921]
  ------------------
  151|  6.44k|        auto it = scn::ranges::begin(source);
  152|  14.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.5k|            auto result = scn::scan<T>(
  155|  14.5k|                global_locale,
  156|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.5k|                scn::runtime_format(f));
  158|  14.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.44k, False: 8.13k]
  ------------------
  159|  6.44k|                break;
  160|  6.44k|            }
  161|  8.13k|            it = result->begin();
  162|  8.13k|        }
  163|  6.44k|    }
  164|       |
  165|       |    // scan_value
  166|    921|    {
  167|    921|        auto it = scn::ranges::begin(source);
  168|    921|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    921|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|    921|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    921|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    921|            auto result = scn::scan_value<T>(
  171|    921|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    921|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 921, False: 0]
  ------------------
  173|    921|                break;
  174|    921|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    921|    }
  178|    921|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmKNSt3__15dequeIcNS3_9allocatorIcEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|    921|{
  134|       |    // Regular scan
  135|  6.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.44k, False: 921]
  ------------------
  136|  6.44k|        auto it = scn::ranges::begin(source);
  137|  17.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  17.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  17.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  17.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  17.2k|            auto result = scn::scan<T>(
  140|  17.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  17.2k|                scn::runtime_format(f));
  142|  17.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.44k, False: 10.8k]
  ------------------
  143|  6.44k|                break;
  144|  6.44k|            }
  145|  10.8k|            it = result->begin();
  146|  10.8k|        }
  147|  6.44k|    }
  148|       |
  149|       |    // scan localized
  150|  6.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.44k, False: 921]
  ------------------
  151|  6.44k|        auto it = scn::ranges::begin(source);
  152|  17.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  17.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  17.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  17.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  17.2k|            auto result = scn::scan<T>(
  155|  17.2k|                global_locale,
  156|  17.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  17.2k|                scn::runtime_format(f));
  158|  17.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.44k, False: 10.8k]
  ------------------
  159|  6.44k|                break;
  160|  6.44k|            }
  161|  10.8k|            it = result->begin();
  162|  10.8k|        }
  163|  6.44k|    }
  164|       |
  165|       |    // scan_value
  166|    921|    {
  167|    921|        auto it = scn::ranges::begin(source);
  168|    921|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    921|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|    921|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    921|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    921|            auto result = scn::scan_value<T>(
  171|    921|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    921|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 921, False: 0]
  ------------------
  173|    921|                break;
  174|    921|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    921|    }
  178|    921|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    921|{
  134|       |    // Regular scan
  135|  6.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.44k, False: 921]
  ------------------
  136|  6.44k|        auto it = scn::ranges::begin(source);
  137|  17.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  17.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  17.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  17.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  17.2k|            auto result = scn::scan<T>(
  140|  17.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  17.2k|                scn::runtime_format(f));
  142|  17.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.44k, False: 10.8k]
  ------------------
  143|  6.44k|                break;
  144|  6.44k|            }
  145|  10.8k|            it = result->begin();
  146|  10.8k|        }
  147|  6.44k|    }
  148|       |
  149|       |    // scan localized
  150|  6.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.44k, False: 921]
  ------------------
  151|  6.44k|        auto it = scn::ranges::begin(source);
  152|  17.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  17.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  17.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  17.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  17.2k|            auto result = scn::scan<T>(
  155|  17.2k|                global_locale,
  156|  17.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  17.2k|                scn::runtime_format(f));
  158|  17.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.44k, False: 10.8k]
  ------------------
  159|  6.44k|                break;
  160|  6.44k|            }
  161|  10.8k|            it = result->begin();
  162|  10.8k|        }
  163|  6.44k|    }
  164|       |
  165|       |    // scan_value
  166|    921|    {
  167|    921|        auto it = scn::ranges::begin(source);
  168|    921|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    921|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|    921|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    921|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    921|            auto result = scn::scan_value<T>(
  171|    921|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    921|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 921, False: 0]
  ------------------
  173|    921|                break;
  174|    921|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    921|    }
  178|    921|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    921|{
  134|       |    // Regular scan
  135|  6.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.44k, False: 921]
  ------------------
  136|  6.44k|        auto it = scn::ranges::begin(source);
  137|  17.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  17.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  17.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  17.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  17.2k|            auto result = scn::scan<T>(
  140|  17.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  17.2k|                scn::runtime_format(f));
  142|  17.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.44k, False: 10.8k]
  ------------------
  143|  6.44k|                break;
  144|  6.44k|            }
  145|  10.8k|            it = result->begin();
  146|  10.8k|        }
  147|  6.44k|    }
  148|       |
  149|       |    // scan localized
  150|  6.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.44k, False: 921]
  ------------------
  151|  6.44k|        auto it = scn::ranges::begin(source);
  152|  17.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  17.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  17.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  17.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  17.2k|            auto result = scn::scan<T>(
  155|  17.2k|                global_locale,
  156|  17.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  17.2k|                scn::runtime_format(f));
  158|  17.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.44k, False: 10.8k]
  ------------------
  159|  6.44k|                break;
  160|  6.44k|            }
  161|  10.8k|            it = result->begin();
  162|  10.8k|        }
  163|  6.44k|    }
  164|       |
  165|       |    // scan_value
  166|    921|    {
  167|    921|        auto it = scn::ranges::begin(source);
  168|    921|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    921|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|    921|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    921|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    921|            auto result = scn::scan_value<T>(
  171|    921|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    921|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 921, False: 0]
  ------------------
  173|    921|                break;
  174|    921|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    921|    }
  178|    921|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    921|{
   91|    921|    using char_type = ranges::range_value_t<Source>;
   92|    921|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    921|    deque.clear();
   94|    921|    std::copy(ranges::begin(source), ranges::end(source),
   95|    921|              std::back_inserter(deque));
   96|    921|    return deque;
   97|    921|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    921|{
   80|    921|    if constexpr (std::is_same_v<CharT, char>) {
   81|    921|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    921|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    921|{
  123|    921|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    921|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    921|    buf.resize(sizeof...(Args));
  126|    921|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    921|    return buf;
  128|    921|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    921|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    921|    else {
  113|    921|        return wformat_string_view_buffer;
  114|    921|    }
  115|    921|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.84k|{
  186|  1.84k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.84k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.84k|                                   format_strings);
  189|  1.84k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|  1.84k|{
  134|       |    // Regular scan
  135|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.8k, False: 1.84k]
  ------------------
  136|  12.8k|        auto it = scn::ranges::begin(source);
  137|  16.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.8k|            auto result = scn::scan<T>(
  140|  16.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.8k|                scn::runtime_format(f));
  142|  16.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.8k, False: 3.91k]
  ------------------
  143|  12.8k|                break;
  144|  12.8k|            }
  145|  3.91k|            it = result->begin();
  146|  3.91k|        }
  147|  12.8k|    }
  148|       |
  149|       |    // scan localized
  150|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.8k, False: 1.84k]
  ------------------
  151|  12.8k|        auto it = scn::ranges::begin(source);
  152|  16.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.8k|            auto result = scn::scan<T>(
  155|  16.8k|                global_locale,
  156|  16.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.8k|                scn::runtime_format(f));
  158|  16.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.8k, False: 3.91k]
  ------------------
  159|  12.8k|                break;
  160|  12.8k|            }
  161|  3.91k|            it = result->begin();
  162|  3.91k|        }
  163|  12.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.84k|    {
  167|  1.84k|        auto it = scn::ranges::begin(source);
  168|  1.84k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.84k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.84k|            auto result = scn::scan_value<T>(
  171|  1.84k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.84k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.84k, False: 0]
  ------------------
  173|  1.84k|                break;
  174|  1.84k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.84k|    }
  178|  1.84k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.84k|{
  134|       |    // Regular scan
  135|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.8k, False: 1.84k]
  ------------------
  136|  12.8k|        auto it = scn::ranges::begin(source);
  137|  16.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.8k|            auto result = scn::scan<T>(
  140|  16.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.8k|                scn::runtime_format(f));
  142|  16.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.8k, False: 3.91k]
  ------------------
  143|  12.8k|                break;
  144|  12.8k|            }
  145|  3.91k|            it = result->begin();
  146|  3.91k|        }
  147|  12.8k|    }
  148|       |
  149|       |    // scan localized
  150|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.8k, False: 1.84k]
  ------------------
  151|  12.8k|        auto it = scn::ranges::begin(source);
  152|  16.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.8k|            auto result = scn::scan<T>(
  155|  16.8k|                global_locale,
  156|  16.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.8k|                scn::runtime_format(f));
  158|  16.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.8k, False: 3.91k]
  ------------------
  159|  12.8k|                break;
  160|  12.8k|            }
  161|  3.91k|            it = result->begin();
  162|  3.91k|        }
  163|  12.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.84k|    {
  167|  1.84k|        auto it = scn::ranges::begin(source);
  168|  1.84k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.84k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.84k|            auto result = scn::scan_value<T>(
  171|  1.84k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.84k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.84k, False: 0]
  ------------------
  173|  1.84k|                break;
  174|  1.84k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.84k|    }
  178|  1.84k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.84k|{
  134|       |    // Regular scan
  135|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.8k, False: 1.84k]
  ------------------
  136|  12.8k|        auto it = scn::ranges::begin(source);
  137|  16.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.8k|            auto result = scn::scan<T>(
  140|  16.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.8k|                scn::runtime_format(f));
  142|  16.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.8k, False: 3.91k]
  ------------------
  143|  12.8k|                break;
  144|  12.8k|            }
  145|  3.91k|            it = result->begin();
  146|  3.91k|        }
  147|  12.8k|    }
  148|       |
  149|       |    // scan localized
  150|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.8k, False: 1.84k]
  ------------------
  151|  12.8k|        auto it = scn::ranges::begin(source);
  152|  16.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.8k|            auto result = scn::scan<T>(
  155|  16.8k|                global_locale,
  156|  16.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.8k|                scn::runtime_format(f));
  158|  16.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.8k, False: 3.91k]
  ------------------
  159|  12.8k|                break;
  160|  12.8k|            }
  161|  3.91k|            it = result->begin();
  162|  3.91k|        }
  163|  12.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.84k|    {
  167|  1.84k|        auto it = scn::ranges::begin(source);
  168|  1.84k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.84k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.84k|            auto result = scn::scan_value<T>(
  171|  1.84k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.84k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.84k, False: 0]
  ------------------
  173|  1.84k|                break;
  174|  1.84k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.84k|    }
  178|  1.84k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmKNSt3__15dequeIwNS3_9allocatorIwEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|  1.84k|{
  134|       |    // Regular scan
  135|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.8k, False: 1.84k]
  ------------------
  136|  12.8k|        auto it = scn::ranges::begin(source);
  137|  16.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.8k|            auto result = scn::scan<T>(
  140|  16.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.8k|                scn::runtime_format(f));
  142|  16.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.8k, False: 3.91k]
  ------------------
  143|  12.8k|                break;
  144|  12.8k|            }
  145|  3.91k|            it = result->begin();
  146|  3.91k|        }
  147|  12.8k|    }
  148|       |
  149|       |    // scan localized
  150|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.8k, False: 1.84k]
  ------------------
  151|  12.8k|        auto it = scn::ranges::begin(source);
  152|  16.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.8k|            auto result = scn::scan<T>(
  155|  16.8k|                global_locale,
  156|  16.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.8k|                scn::runtime_format(f));
  158|  16.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.8k, False: 3.91k]
  ------------------
  159|  12.8k|                break;
  160|  12.8k|            }
  161|  3.91k|            it = result->begin();
  162|  3.91k|        }
  163|  12.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.84k|    {
  167|  1.84k|        auto it = scn::ranges::begin(source);
  168|  1.84k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.84k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.84k|            auto result = scn::scan_value<T>(
  171|  1.84k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.84k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.84k, False: 0]
  ------------------
  173|  1.84k|                break;
  174|  1.84k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.84k|    }
  178|  1.84k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.84k|{
  134|       |    // Regular scan
  135|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.8k, False: 1.84k]
  ------------------
  136|  12.8k|        auto it = scn::ranges::begin(source);
  137|  16.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.8k|            auto result = scn::scan<T>(
  140|  16.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.8k|                scn::runtime_format(f));
  142|  16.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.8k, False: 3.91k]
  ------------------
  143|  12.8k|                break;
  144|  12.8k|            }
  145|  3.91k|            it = result->begin();
  146|  3.91k|        }
  147|  12.8k|    }
  148|       |
  149|       |    // scan localized
  150|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.8k, False: 1.84k]
  ------------------
  151|  12.8k|        auto it = scn::ranges::begin(source);
  152|  16.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.8k|            auto result = scn::scan<T>(
  155|  16.8k|                global_locale,
  156|  16.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.8k|                scn::runtime_format(f));
  158|  16.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.8k, False: 3.91k]
  ------------------
  159|  12.8k|                break;
  160|  12.8k|            }
  161|  3.91k|            it = result->begin();
  162|  3.91k|        }
  163|  12.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.84k|    {
  167|  1.84k|        auto it = scn::ranges::begin(source);
  168|  1.84k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.84k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.84k|            auto result = scn::scan_value<T>(
  171|  1.84k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.84k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.84k, False: 0]
  ------------------
  173|  1.84k|                break;
  174|  1.84k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.84k|    }
  178|  1.84k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.84k|{
  134|       |    // Regular scan
  135|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.8k, False: 1.84k]
  ------------------
  136|  12.8k|        auto it = scn::ranges::begin(source);
  137|  16.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.8k|            auto result = scn::scan<T>(
  140|  16.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.8k|                scn::runtime_format(f));
  142|  16.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.8k, False: 3.91k]
  ------------------
  143|  12.8k|                break;
  144|  12.8k|            }
  145|  3.91k|            it = result->begin();
  146|  3.91k|        }
  147|  12.8k|    }
  148|       |
  149|       |    // scan localized
  150|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.8k, False: 1.84k]
  ------------------
  151|  12.8k|        auto it = scn::ranges::begin(source);
  152|  16.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.8k|            auto result = scn::scan<T>(
  155|  16.8k|                global_locale,
  156|  16.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.8k|                scn::runtime_format(f));
  158|  16.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.8k, False: 3.91k]
  ------------------
  159|  12.8k|                break;
  160|  12.8k|            }
  161|  3.91k|            it = result->begin();
  162|  3.91k|        }
  163|  12.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.84k|    {
  167|  1.84k|        auto it = scn::ranges::begin(source);
  168|  1.84k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.84k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.84k|            auto result = scn::scan_value<T>(
  171|  1.84k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.84k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.84k, False: 0]
  ------------------
  173|  1.84k|                break;
  174|  1.84k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.84k|    }
  178|  1.84k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.84k|{
   91|  1.84k|    using char_type = ranges::range_value_t<Source>;
   92|  1.84k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.84k|    deque.clear();
   94|  1.84k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.84k|              std::back_inserter(deque));
   96|  1.84k|    return deque;
   97|  1.84k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.84k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.84k|    else {
   84|  1.84k|        return wnoncontiguous_buffer;
   85|  1.84k|    }
   86|  1.84k|}

