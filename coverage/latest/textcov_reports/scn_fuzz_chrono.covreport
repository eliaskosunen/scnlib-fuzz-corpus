_ZN3scn2v46detail23chrono_datetime_scannerIc2tmE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  55.9k|    {
 1523|  55.9k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  55.9k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  55.9k|{
 1494|  55.9k|    auto it = pctx.begin();
 1495|  55.9k|    auto end = pctx.end();
 1496|  55.9k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.52k, False: 54.3k]
  |  Branch (1496:22): [True: 0, False: 54.3k]
  ------------------
 1497|  1.52k|        pctx.on_error(
 1498|  1.52k|            "Format string without specifiers is not valid for this type");
 1499|  1.52k|        return it;
 1500|  1.52k|    }
 1501|       |
 1502|  54.3k|    auto checker = detail::tm_format_checker<T>{};
 1503|  54.3k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  54.3k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 54.3k, False: 0]
  ------------------
 1505|  54.3k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  54.3k|    }
 1507|  54.3k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 54.3k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  54.3k|    return end;
 1512|  54.3k|}
_ZN3scn2v46detail12setter_stateC2Ev:
  742|   632k|        : localized(0),
  743|   632k|          subsec_set(0),
  744|   632k|          sec_set(0),
  745|   632k|          min_set(0),
  746|   632k|          hour24_set(0),
  747|   632k|          hour12_set(0),
  748|   632k|          mday_set(0),
  749|   632k|          mon_set(0),
  750|   632k|          full_year_set(0),
  751|   632k|          century_set(0),
  752|   632k|          short_year_set(0),
  753|   632k|          wday_set(0),
  754|   632k|          yday_set(0),
  755|   632k|          tzoff_set(0),
  756|   632k|          tzname_set(0),
  757|   632k|          am_pm_set(0),
  758|   632k|          epoch_ticks_set(0),
  759|   632k|          duration_ticks_set(0),
  760|   632k|          duration_suffix_set(0),
  761|   632k|          is_pm(0)
  762|   632k|    {
  763|   632k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  54.3k|{
  377|  54.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 54.3k]
  |  Branch (377:25): [True: 0, False: 54.3k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  54.3k|    auto p = begin;
  383|  54.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 54.3k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  54.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 54.3k]
  |  Branch (392:21): [True: 0, False: 54.3k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   142k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 142k, False: 0]
  ------------------
  399|   142k|        auto ch = *p;
  400|   142k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 54.3k, False: 87.8k]
  ------------------
  401|  54.3k|            break;
  402|  54.3k|        }
  403|  87.8k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 15.2k, False: 72.6k]
  ------------------
  404|  15.2k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 15.2k]
  |  Branch (404:32): [True: 15.2k, False: 0]
  |  Branch (404:46): [True: 0, False: 15.2k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  15.2k|            const auto cp_len =
  412|  15.2k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  15.2k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 15.2k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  15.2k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 15.2k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  15.2k|            ++p;
  439|  15.2k|            continue;
  440|  15.2k|        }
  441|  72.6k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 15.2k, False: 57.4k]
  ------------------
  442|  15.2k|            handler.on_text(begin, p);
  443|  15.2k|        }
  444|  72.6k|        ++p;  // Consume '%'
  445|  72.6k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 72.6k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  72.6k|        ch = *p;
  451|  72.6k|        ++p;
  452|       |
  453|  72.6k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 72.6k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 72.6k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 72.6k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.04k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.04k, False: 69.6k]
  ------------------
  463|  3.04k|                handler.on_full_year();
  464|  3.04k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 72.6k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 72.6k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 72.6k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 72.6k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  5.88k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 5.88k, False: 66.7k]
  ------------------
  479|  5.88k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 72.6k]
  ------------------
  480|  5.88k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 72.6k]
  ------------------
  481|  5.88k|                handler.on_month_name();
  482|  5.88k|                break;
  483|  3.04k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.04k, False: 69.6k]
  ------------------
  484|  3.04k|                handler.on_dec_month();
  485|  3.04k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 72.6k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 72.6k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 72.6k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 72.6k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.04k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.04k, False: 69.6k]
  ------------------
  502|  3.04k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 72.6k]
  ------------------
  503|  3.04k|                handler.on_day_of_month();
  504|  3.04k|                break;
  505|       |            // Day of week
  506|  3.05k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.05k, False: 69.5k]
  ------------------
  507|  3.05k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 72.6k]
  ------------------
  508|  3.05k|                handler.on_weekday_name();
  509|  3.05k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 72.6k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 72.6k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.04k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.04k, False: 69.6k]
  ------------------
  518|  3.04k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 72.6k]
  ------------------
  519|  3.04k|                handler.on_24_hour();
  520|  3.04k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 72.6k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 72.6k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.04k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.04k, False: 69.6k]
  ------------------
  527|  3.04k|                handler.on_minute();
  528|  3.04k|                break;
  529|       |            // Second
  530|  3.04k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.04k, False: 69.6k]
  ------------------
  531|  3.04k|                handler.on_second();
  532|  3.04k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 72.6k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.04k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.04k, False: 69.6k]
  ------------------
  563|  3.04k|                handler.on_tz_offset();
  564|  3.04k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 72.6k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 72.6k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 72.6k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 72.6k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.69k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.69k, False: 63.9k]
  ------------------
  579|  8.69k|                handler.on_us_date();
  580|  8.69k|                break;
  581|  3.24k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.24k, False: 69.3k]
  ------------------
  582|  3.24k|                handler.on_iso_date();
  583|  3.24k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 72.6k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  25.6k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 25.6k, False: 47.0k]
  ------------------
  588|  25.6k|                handler.on_24_hour_time();
  589|  25.6k|                break;
  590|  4.84k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 4.84k, False: 67.8k]
  ------------------
  591|  4.84k|                handler.on_iso_time();
  592|  4.84k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 72.6k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 72.6k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 72.6k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 72.6k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 72.6k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 72.6k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 72.6k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 72.6k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  72.6k|        }
  704|  72.6k|        begin = p;
  705|       |
  706|  72.6k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 72.6k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  72.6k|    }
  710|  54.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 54.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  54.3k|    handler.verify();
  714|  54.3k|    return p;
  715|  54.3k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIcEEvPKT_S8_:
 1176|  15.2k|    {
 1177|  15.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_full_yearENS1_14numeric_systemE:
 1188|  18.4k|    {
 1189|  18.4k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  18.4k|        st.set_full_year(*this);
 1193|  18.4k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  18.4k|    {                                                                \
  769|  18.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  18.4k|        field##_set = 1;                                             \
  774|  18.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_short_yearENS1_14numeric_systemE:
 1195|  14.7k|    {
 1196|  14.7k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.7k|        st.set_short_year(*this);
 1200|  14.7k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  14.7k|    {                                                                \
  769|  14.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.7k|        field##_set = 1;                                             \
  774|  14.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_month_nameEv:
 1231|  12.0k|    {
 1232|  12.0k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  12.0k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_dec_monthENS1_14numeric_systemE:
 1237|  33.2k|    {
 1238|  33.2k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  33.2k|        st.set_mon(*this);
 1242|  33.2k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  33.2k|    {                                                                \
  769|  33.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  33.2k|        field##_set = 1;                                             \
  774|  33.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_day_of_monthENS1_14numeric_systemE:
 1265|  33.2k|    {
 1266|  33.2k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  33.2k|        st.set_mday(*this);
 1270|  33.2k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  33.2k|    {                                                                \
  769|  33.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  33.2k|        field##_set = 1;                                             \
  774|  33.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_weekday_nameEv:
 1273|  9.14k|    {
 1274|  9.14k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  9.14k|        st.set_wday(*this);
 1278|  9.14k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  9.14k|    {                                                                \
  769|  9.14k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.14k|        field##_set = 1;                                             \
  774|  9.14k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_24_hourENS1_14numeric_systemE:
 1295|  60.7k|    {
 1296|  60.7k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  60.7k|        st.set_hour24(*this);
 1300|  60.7k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  60.7k|    {                                                                \
  769|  60.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  60.7k|        field##_set = 1;                                             \
  774|  60.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_minuteENS1_14numeric_systemE:
 1309|  60.7k|    {
 1310|  60.7k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  60.7k|        st.set_min(*this);
 1314|  60.7k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  60.7k|    {                                                                \
  769|  60.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  60.7k|        field##_set = 1;                                             \
  774|  60.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_secondENS1_14numeric_systemE:
 1316|  20.1k|    {
 1317|  20.1k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  20.1k|        st.set_sec(*this);
 1321|  20.1k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  20.1k|    {                                                                \
  769|  20.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.1k|        field##_set = 1;                                             \
  774|  20.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_tz_offsetENS1_14numeric_systemE:
 1335|  9.13k|    {
 1336|  9.13k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  9.13k|        st.set_tzoff(*this);
 1340|  9.13k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  9.13k|    {                                                                \
  769|  9.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.13k|        field##_set = 1;                                             \
  774|  9.13k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_us_dateEv:
 1368|  14.7k|    {
 1369|  14.7k|        on_dec_month();
 1370|  14.7k|        on_day_of_month();
 1371|  14.7k|        on_short_year();
 1372|  14.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_dateEv:
 1374|  9.33k|    {
 1375|  9.33k|        on_full_year();
 1376|  9.33k|        on_dec_month();
 1377|  9.33k|        on_day_of_month();
 1378|  9.33k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_24_hour_timeEv:
 1386|  40.5k|    {
 1387|  40.5k|        on_24_hour();
 1388|  40.5k|        on_minute();
 1389|  40.5k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_timeEv:
 1391|  10.9k|    {
 1392|  10.9k|        on_24_hour();
 1393|  10.9k|        on_minute();
 1394|  10.9k|        on_second();
 1395|  10.9k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE6verifyEv:
 1418|   106k|    {
 1419|   106k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   106k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   106k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   106k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   106k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   106k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   106k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   106k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   106k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   106k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   106k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   106k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   106k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   106k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   106k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   106k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   106k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   106k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   106k|        st.verify(*this);
 1463|   106k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerI2tmEEEEvRT_:
  799|   106k|    {
  800|   106k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 60.7k, False: 45.3k]
  |  Branch (800:27): [True: 0, False: 60.7k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   106k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 106k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   106k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 18.4k, False: 87.5k]
  |  Branch (818:31): [True: 0, False: 18.4k]
  |  Branch (818:46): [True: 0, False: 18.4k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   106k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 9.13k, False: 96.8k]
  |  Branch (824:26): [True: 0, False: 9.13k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   106k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 9.14k, False: 96.8k]
  |  Branch (829:26): [True: 33.2k, False: 63.6k]
  |  Branch (829:38): [True: 0, False: 63.6k]
  ------------------
  830|   106k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 42.4k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   106k|    }
_ZNK3scn2v46detail17tm_format_checkerI2tmE9get_errorEv:
 1466|   266k|    {
 1467|   266k|        return err;
 1468|   266k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIc2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  54.3k|    {
 1530|  54.3k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  54.3k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  55.9k|    {
 1523|  55.9k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  55.9k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  55.9k|{
 1494|  55.9k|    auto it = pctx.begin();
 1495|  55.9k|    auto end = pctx.end();
 1496|  55.9k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.52k, False: 54.3k]
  |  Branch (1496:22): [True: 0, False: 54.3k]
  ------------------
 1497|  1.52k|        pctx.on_error(
 1498|  1.52k|            "Format string without specifiers is not valid for this type");
 1499|  1.52k|        return it;
 1500|  1.52k|    }
 1501|       |
 1502|  54.3k|    auto checker = detail::tm_format_checker<T>{};
 1503|  54.3k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  54.3k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 54.3k, False: 0]
  ------------------
 1505|  54.3k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  54.3k|    }
 1507|  54.3k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 54.3k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  54.3k|    return end;
 1512|  54.3k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  54.3k|{
  377|  54.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 54.3k]
  |  Branch (377:25): [True: 0, False: 54.3k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  54.3k|    auto p = begin;
  383|  54.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 54.3k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  54.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 54.3k]
  |  Branch (392:21): [True: 0, False: 54.3k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   142k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 142k, False: 0]
  ------------------
  399|   142k|        auto ch = *p;
  400|   142k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 54.3k, False: 87.8k]
  ------------------
  401|  54.3k|            break;
  402|  54.3k|        }
  403|  87.8k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 15.2k, False: 72.6k]
  ------------------
  404|  15.2k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 15.2k]
  |  Branch (404:32): [True: 15.2k, False: 0]
  |  Branch (404:46): [True: 0, False: 15.2k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  15.2k|            const auto cp_len =
  412|  15.2k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  15.2k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 15.2k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  15.2k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 15.2k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  15.2k|            ++p;
  439|  15.2k|            continue;
  440|  15.2k|        }
  441|  72.6k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 15.2k, False: 57.4k]
  ------------------
  442|  15.2k|            handler.on_text(begin, p);
  443|  15.2k|        }
  444|  72.6k|        ++p;  // Consume '%'
  445|  72.6k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 72.6k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  72.6k|        ch = *p;
  451|  72.6k|        ++p;
  452|       |
  453|  72.6k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 72.6k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 72.6k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 72.6k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.04k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.04k, False: 69.6k]
  ------------------
  463|  3.04k|                handler.on_full_year();
  464|  3.04k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 72.6k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 72.6k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 72.6k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 72.6k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  5.88k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 5.88k, False: 66.7k]
  ------------------
  479|  5.88k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 72.6k]
  ------------------
  480|  5.88k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 72.6k]
  ------------------
  481|  5.88k|                handler.on_month_name();
  482|  5.88k|                break;
  483|  3.04k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.04k, False: 69.6k]
  ------------------
  484|  3.04k|                handler.on_dec_month();
  485|  3.04k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 72.6k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 72.6k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 72.6k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 72.6k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.04k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.04k, False: 69.6k]
  ------------------
  502|  3.04k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 72.6k]
  ------------------
  503|  3.04k|                handler.on_day_of_month();
  504|  3.04k|                break;
  505|       |            // Day of week
  506|  3.05k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.05k, False: 69.5k]
  ------------------
  507|  3.05k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 72.6k]
  ------------------
  508|  3.05k|                handler.on_weekday_name();
  509|  3.05k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 72.6k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 72.6k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.04k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.04k, False: 69.6k]
  ------------------
  518|  3.04k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 72.6k]
  ------------------
  519|  3.04k|                handler.on_24_hour();
  520|  3.04k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 72.6k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 72.6k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.04k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.04k, False: 69.6k]
  ------------------
  527|  3.04k|                handler.on_minute();
  528|  3.04k|                break;
  529|       |            // Second
  530|  3.04k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.04k, False: 69.6k]
  ------------------
  531|  3.04k|                handler.on_second();
  532|  3.04k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 72.6k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.04k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.04k, False: 69.6k]
  ------------------
  563|  3.04k|                handler.on_tz_offset();
  564|  3.04k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 72.6k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 72.6k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 72.6k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 72.6k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.69k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.69k, False: 63.9k]
  ------------------
  579|  8.69k|                handler.on_us_date();
  580|  8.69k|                break;
  581|  3.24k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.24k, False: 69.3k]
  ------------------
  582|  3.24k|                handler.on_iso_date();
  583|  3.24k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 72.6k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  25.6k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 25.6k, False: 47.0k]
  ------------------
  588|  25.6k|                handler.on_24_hour_time();
  589|  25.6k|                break;
  590|  4.84k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 4.84k, False: 67.8k]
  ------------------
  591|  4.84k|                handler.on_iso_time();
  592|  4.84k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 72.6k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 72.6k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 72.6k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 72.6k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 72.6k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 72.6k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 72.6k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 72.6k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  72.6k|        }
  704|  72.6k|        begin = p;
  705|       |
  706|  72.6k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 72.6k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  72.6k|    }
  710|  54.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 54.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  54.3k|    handler.verify();
  714|  54.3k|    return p;
  715|  54.3k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIcEEvPKT_S8_:
 1176|  15.2k|    {
 1177|  15.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_full_yearENS1_14numeric_systemE:
 1188|  18.4k|    {
 1189|  18.4k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  18.4k|        st.set_full_year(*this);
 1193|  18.4k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  18.4k|    {                                                                \
  769|  18.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  18.4k|        field##_set = 1;                                             \
  774|  18.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_short_yearENS1_14numeric_systemE:
 1195|  14.7k|    {
 1196|  14.7k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.7k|        st.set_short_year(*this);
 1200|  14.7k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  14.7k|    {                                                                \
  769|  14.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.7k|        field##_set = 1;                                             \
  774|  14.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_month_nameEv:
 1231|  12.0k|    {
 1232|  12.0k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  12.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_dec_monthENS1_14numeric_systemE:
 1237|  33.2k|    {
 1238|  33.2k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  33.2k|        st.set_mon(*this);
 1242|  33.2k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  33.2k|    {                                                                \
  769|  33.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  33.2k|        field##_set = 1;                                             \
  774|  33.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  33.2k|    {
 1266|  33.2k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  33.2k|        st.set_mday(*this);
 1270|  33.2k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  33.2k|    {                                                                \
  769|  33.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  33.2k|        field##_set = 1;                                             \
  774|  33.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_weekday_nameEv:
 1273|  9.14k|    {
 1274|  9.14k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  9.14k|        st.set_wday(*this);
 1278|  9.14k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  9.14k|    {                                                                \
  769|  9.14k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.14k|        field##_set = 1;                                             \
  774|  9.14k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_24_hourENS1_14numeric_systemE:
 1295|  60.7k|    {
 1296|  60.7k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  60.7k|        st.set_hour24(*this);
 1300|  60.7k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  60.7k|    {                                                                \
  769|  60.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  60.7k|        field##_set = 1;                                             \
  774|  60.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_minuteENS1_14numeric_systemE:
 1309|  60.7k|    {
 1310|  60.7k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  60.7k|        st.set_min(*this);
 1314|  60.7k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  60.7k|    {                                                                \
  769|  60.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  60.7k|        field##_set = 1;                                             \
  774|  60.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_secondENS1_14numeric_systemE:
 1316|  20.1k|    {
 1317|  20.1k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  20.1k|        st.set_sec(*this);
 1321|  20.1k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  20.1k|    {                                                                \
  769|  20.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.1k|        field##_set = 1;                                             \
  774|  20.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  9.13k|    {
 1336|  9.13k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  9.13k|        st.set_tzoff(*this);
 1340|  9.13k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  9.13k|    {                                                                \
  769|  9.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.13k|        field##_set = 1;                                             \
  774|  9.13k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_us_dateEv:
 1368|  14.7k|    {
 1369|  14.7k|        on_dec_month();
 1370|  14.7k|        on_day_of_month();
 1371|  14.7k|        on_short_year();
 1372|  14.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_dateEv:
 1374|  9.33k|    {
 1375|  9.33k|        on_full_year();
 1376|  9.33k|        on_dec_month();
 1377|  9.33k|        on_day_of_month();
 1378|  9.33k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_24_hour_timeEv:
 1386|  40.5k|    {
 1387|  40.5k|        on_24_hour();
 1388|  40.5k|        on_minute();
 1389|  40.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_timeEv:
 1391|  10.9k|    {
 1392|  10.9k|        on_24_hour();
 1393|  10.9k|        on_minute();
 1394|  10.9k|        on_second();
 1395|  10.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE6verifyEv:
 1418|   106k|    {
 1419|   106k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   106k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   106k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   106k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   106k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   106k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   106k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   106k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   106k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   106k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   106k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   106k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   106k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   106k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   106k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   106k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   106k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   106k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   106k|        st.verify(*this);
 1463|   106k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  799|   106k|    {
  800|   106k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 60.7k, False: 45.3k]
  |  Branch (800:27): [True: 0, False: 60.7k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   106k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 106k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   106k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 18.4k, False: 87.5k]
  |  Branch (818:31): [True: 0, False: 18.4k]
  |  Branch (818:46): [True: 0, False: 18.4k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   106k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 9.13k, False: 96.8k]
  |  Branch (824:26): [True: 0, False: 9.13k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   106k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 9.14k, False: 96.8k]
  |  Branch (829:26): [True: 33.2k, False: 63.6k]
  |  Branch (829:38): [True: 0, False: 63.6k]
  ------------------
  830|   106k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 42.4k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   106k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9get_errorEv:
 1466|   266k|    {
 1467|   266k|        return err;
 1468|   266k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  54.3k|    {
 1530|  54.3k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  54.3k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  55.9k|    {
 1523|  55.9k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  55.9k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  55.9k|{
 1494|  55.9k|    auto it = pctx.begin();
 1495|  55.9k|    auto end = pctx.end();
 1496|  55.9k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.52k, False: 54.3k]
  |  Branch (1496:22): [True: 0, False: 54.3k]
  ------------------
 1497|  1.52k|        pctx.on_error(
 1498|  1.52k|            "Format string without specifiers is not valid for this type");
 1499|  1.52k|        return it;
 1500|  1.52k|    }
 1501|       |
 1502|  54.3k|    auto checker = detail::tm_format_checker<T>{};
 1503|  54.3k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  54.3k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 54.3k, False: 0]
  ------------------
 1505|  54.3k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  54.3k|    }
 1507|  54.3k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 54.3k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  54.3k|    return end;
 1512|  54.3k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  54.3k|{
  377|  54.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 54.3k]
  |  Branch (377:25): [True: 0, False: 54.3k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  54.3k|    auto p = begin;
  383|  54.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 54.3k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  54.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 54.3k]
  |  Branch (392:21): [True: 0, False: 54.3k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   142k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 142k, False: 0]
  ------------------
  399|   142k|        auto ch = *p;
  400|   142k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 54.3k, False: 87.8k]
  ------------------
  401|  54.3k|            break;
  402|  54.3k|        }
  403|  87.8k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 15.2k, False: 72.6k]
  ------------------
  404|  15.2k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 15.2k]
  |  Branch (404:32): [True: 15.2k, False: 0]
  |  Branch (404:46): [True: 0, False: 15.2k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  15.2k|            const auto cp_len =
  412|  15.2k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  15.2k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 15.2k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  15.2k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 15.2k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  15.2k|            ++p;
  439|  15.2k|            continue;
  440|  15.2k|        }
  441|  72.6k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 15.2k, False: 57.4k]
  ------------------
  442|  15.2k|            handler.on_text(begin, p);
  443|  15.2k|        }
  444|  72.6k|        ++p;  // Consume '%'
  445|  72.6k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 72.6k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  72.6k|        ch = *p;
  451|  72.6k|        ++p;
  452|       |
  453|  72.6k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 72.6k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 72.6k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 72.6k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.04k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.04k, False: 69.6k]
  ------------------
  463|  3.04k|                handler.on_full_year();
  464|  3.04k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 72.6k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 72.6k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 72.6k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 72.6k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  5.88k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 5.88k, False: 66.7k]
  ------------------
  479|  5.88k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 72.6k]
  ------------------
  480|  5.88k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 72.6k]
  ------------------
  481|  5.88k|                handler.on_month_name();
  482|  5.88k|                break;
  483|  3.04k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.04k, False: 69.6k]
  ------------------
  484|  3.04k|                handler.on_dec_month();
  485|  3.04k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 72.6k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 72.6k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 72.6k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 72.6k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.04k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.04k, False: 69.6k]
  ------------------
  502|  3.04k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 72.6k]
  ------------------
  503|  3.04k|                handler.on_day_of_month();
  504|  3.04k|                break;
  505|       |            // Day of week
  506|  3.05k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.05k, False: 69.5k]
  ------------------
  507|  3.05k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 72.6k]
  ------------------
  508|  3.05k|                handler.on_weekday_name();
  509|  3.05k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 72.6k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 72.6k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.04k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.04k, False: 69.6k]
  ------------------
  518|  3.04k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 72.6k]
  ------------------
  519|  3.04k|                handler.on_24_hour();
  520|  3.04k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 72.6k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 72.6k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.04k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.04k, False: 69.6k]
  ------------------
  527|  3.04k|                handler.on_minute();
  528|  3.04k|                break;
  529|       |            // Second
  530|  3.04k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.04k, False: 69.6k]
  ------------------
  531|  3.04k|                handler.on_second();
  532|  3.04k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 72.6k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.04k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.04k, False: 69.6k]
  ------------------
  563|  3.04k|                handler.on_tz_offset();
  564|  3.04k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 72.6k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 72.6k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 72.6k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 72.6k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.69k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.69k, False: 63.9k]
  ------------------
  579|  8.69k|                handler.on_us_date();
  580|  8.69k|                break;
  581|  3.24k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.24k, False: 69.3k]
  ------------------
  582|  3.24k|                handler.on_iso_date();
  583|  3.24k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 72.6k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  25.6k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 25.6k, False: 47.0k]
  ------------------
  588|  25.6k|                handler.on_24_hour_time();
  589|  25.6k|                break;
  590|  4.84k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 4.84k, False: 67.8k]
  ------------------
  591|  4.84k|                handler.on_iso_time();
  592|  4.84k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 72.6k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 72.6k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 72.6k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 72.6k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 72.6k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 72.6k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 72.6k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 72.6k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  72.6k|        }
  704|  72.6k|        begin = p;
  705|       |
  706|  72.6k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 72.6k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  72.6k|    }
  710|  54.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 54.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  54.3k|    handler.verify();
  714|  54.3k|    return p;
  715|  54.3k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIcEEvPKT_S8_:
 1176|  15.2k|    {
 1177|  15.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_full_yearENS1_14numeric_systemE:
 1188|  18.4k|    {
 1189|  18.4k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  18.4k|        st.set_full_year(*this);
 1193|  18.4k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  18.4k|    {                                                                \
  769|  18.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  18.4k|        field##_set = 1;                                             \
  774|  18.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_short_yearENS1_14numeric_systemE:
 1195|  14.7k|    {
 1196|  14.7k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.7k|        st.set_short_year(*this);
 1200|  14.7k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  14.7k|    {                                                                \
  769|  14.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.7k|        field##_set = 1;                                             \
  774|  14.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_month_nameEv:
 1231|  12.0k|    {
 1232|  12.0k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  12.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_dec_monthENS1_14numeric_systemE:
 1237|  33.2k|    {
 1238|  33.2k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  33.2k|        st.set_mon(*this);
 1242|  33.2k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  33.2k|    {                                                                \
  769|  33.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  33.2k|        field##_set = 1;                                             \
  774|  33.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  33.2k|    {
 1266|  33.2k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  33.2k|        st.set_mday(*this);
 1270|  33.2k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  33.2k|    {                                                                \
  769|  33.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  33.2k|        field##_set = 1;                                             \
  774|  33.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_weekday_nameEv:
 1273|  9.14k|    {
 1274|  9.14k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  9.14k|        st.set_wday(*this);
 1278|  9.14k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  9.14k|    {                                                                \
  769|  9.14k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.14k|        field##_set = 1;                                             \
  774|  9.14k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_24_hourENS1_14numeric_systemE:
 1295|  60.7k|    {
 1296|  60.7k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  60.7k|        st.set_hour24(*this);
 1300|  60.7k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  60.7k|    {                                                                \
  769|  60.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  60.7k|        field##_set = 1;                                             \
  774|  60.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_minuteENS1_14numeric_systemE:
 1309|  60.7k|    {
 1310|  60.7k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  60.7k|        st.set_min(*this);
 1314|  60.7k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  60.7k|    {                                                                \
  769|  60.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  60.7k|        field##_set = 1;                                             \
  774|  60.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_secondENS1_14numeric_systemE:
 1316|  20.1k|    {
 1317|  20.1k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  20.1k|        st.set_sec(*this);
 1321|  20.1k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  20.1k|    {                                                                \
  769|  20.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.1k|        field##_set = 1;                                             \
  774|  20.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  9.13k|    {
 1336|  9.13k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  9.13k|        st.set_tzoff(*this);
 1340|  9.13k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  9.13k|    {                                                                \
  769|  9.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.13k|        field##_set = 1;                                             \
  774|  9.13k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_us_dateEv:
 1368|  14.7k|    {
 1369|  14.7k|        on_dec_month();
 1370|  14.7k|        on_day_of_month();
 1371|  14.7k|        on_short_year();
 1372|  14.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_dateEv:
 1374|  9.33k|    {
 1375|  9.33k|        on_full_year();
 1376|  9.33k|        on_dec_month();
 1377|  9.33k|        on_day_of_month();
 1378|  9.33k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_24_hour_timeEv:
 1386|  40.5k|    {
 1387|  40.5k|        on_24_hour();
 1388|  40.5k|        on_minute();
 1389|  40.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_timeEv:
 1391|  10.9k|    {
 1392|  10.9k|        on_24_hour();
 1393|  10.9k|        on_minute();
 1394|  10.9k|        on_second();
 1395|  10.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE6verifyEv:
 1418|   106k|    {
 1419|   106k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   106k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   106k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   106k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   106k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   106k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   106k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   106k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   106k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   106k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   106k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   106k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   106k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   106k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   106k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   106k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   106k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   106k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   106k|        st.verify(*this);
 1463|   106k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  799|   106k|    {
  800|   106k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 60.7k, False: 45.3k]
  |  Branch (800:27): [True: 0, False: 60.7k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   106k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 106k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   106k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 18.4k, False: 87.5k]
  |  Branch (818:31): [True: 0, False: 18.4k]
  |  Branch (818:46): [True: 0, False: 18.4k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   106k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 9.13k, False: 96.8k]
  |  Branch (824:26): [True: 0, False: 9.13k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   106k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 9.14k, False: 96.8k]
  |  Branch (829:26): [True: 33.2k, False: 63.6k]
  |  Branch (829:38): [True: 0, False: 63.6k]
  ------------------
  830|   106k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 42.4k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   106k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9get_errorEv:
 1466|   266k|    {
 1467|   266k|        return err;
 1468|   266k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  54.3k|    {
 1530|  54.3k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  54.3k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIw2tmE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  54.6k|    {
 1523|  54.6k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  54.6k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  54.6k|{
 1494|  54.6k|    auto it = pctx.begin();
 1495|  54.6k|    auto end = pctx.end();
 1496|  54.6k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.04k, False: 51.6k]
  |  Branch (1496:22): [True: 0, False: 51.6k]
  ------------------
 1497|  3.04k|        pctx.on_error(
 1498|  3.04k|            "Format string without specifiers is not valid for this type");
 1499|  3.04k|        return it;
 1500|  3.04k|    }
 1501|       |
 1502|  51.6k|    auto checker = detail::tm_format_checker<T>{};
 1503|  51.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  51.6k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 51.6k, False: 0]
  ------------------
 1505|  51.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  51.6k|    }
 1507|  51.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 51.6k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  51.6k|    return end;
 1512|  51.6k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  51.6k|{
  377|  51.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 51.6k]
  |  Branch (377:25): [True: 0, False: 51.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  51.6k|    auto p = begin;
  383|  51.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 51.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  51.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 51.6k]
  |  Branch (392:21): [True: 0, False: 51.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   170k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 170k, False: 0]
  ------------------
  399|   170k|        auto ch = *p;
  400|   170k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 51.6k, False: 118k]
  ------------------
  401|  51.6k|            break;
  402|  51.6k|        }
  403|   118k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 30.4k, False: 88.1k]
  ------------------
  404|  30.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 30.4k]
  |  Branch (404:32): [True: 30.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 30.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  30.4k|            const auto cp_len =
  412|  30.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  30.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 30.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  30.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 30.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  30.4k|            ++p;
  439|  30.4k|            continue;
  440|  30.4k|        }
  441|  88.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 30.4k, False: 57.7k]
  ------------------
  442|  30.4k|            handler.on_text(begin, p);
  443|  30.4k|        }
  444|  88.1k|        ++p;  // Consume '%'
  445|  88.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 88.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  88.1k|        ch = *p;
  451|  88.1k|        ++p;
  452|       |
  453|  88.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 88.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 88.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 88.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.08k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.08k, False: 82.0k]
  ------------------
  463|  6.08k|                handler.on_full_year();
  464|  6.08k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 88.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 88.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 88.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 88.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  6.15k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 6.15k, False: 82.0k]
  ------------------
  479|  6.15k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 88.1k]
  ------------------
  480|  6.15k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 88.1k]
  ------------------
  481|  6.15k|                handler.on_month_name();
  482|  6.15k|                break;
  483|  6.08k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.08k, False: 82.0k]
  ------------------
  484|  6.08k|                handler.on_dec_month();
  485|  6.08k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 88.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 88.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 88.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 88.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.08k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.08k, False: 82.0k]
  ------------------
  502|  6.08k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 88.1k]
  ------------------
  503|  6.08k|                handler.on_day_of_month();
  504|  6.08k|                break;
  505|       |            // Day of week
  506|  6.08k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.08k, False: 82.0k]
  ------------------
  507|  6.08k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 88.1k]
  ------------------
  508|  6.08k|                handler.on_weekday_name();
  509|  6.08k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 88.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 88.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.08k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.08k, False: 82.0k]
  ------------------
  518|  6.08k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 88.1k]
  ------------------
  519|  6.08k|                handler.on_24_hour();
  520|  6.08k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 88.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 88.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.08k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.08k, False: 82.0k]
  ------------------
  527|  6.08k|                handler.on_minute();
  528|  6.08k|                break;
  529|       |            // Second
  530|  6.08k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.08k, False: 82.0k]
  ------------------
  531|  6.08k|                handler.on_second();
  532|  6.08k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 88.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.08k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.08k, False: 82.0k]
  ------------------
  563|  6.08k|                handler.on_tz_offset();
  564|  6.08k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 88.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 88.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 88.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 88.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.10k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.10k, False: 82.0k]
  ------------------
  579|  6.10k|                handler.on_us_date();
  580|  6.10k|                break;
  581|  6.08k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.08k, False: 82.0k]
  ------------------
  582|  6.08k|                handler.on_iso_date();
  583|  6.08k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 88.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  14.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 14.9k, False: 73.1k]
  ------------------
  588|  14.9k|                handler.on_24_hour_time();
  589|  14.9k|                break;
  590|  6.13k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.13k, False: 82.0k]
  ------------------
  591|  6.13k|                handler.on_iso_time();
  592|  6.13k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 88.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 88.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 88.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 88.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 88.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 88.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 88.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 88.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  88.1k|        }
  704|  88.1k|        begin = p;
  705|       |
  706|  88.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 88.1k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  88.1k|    }
  710|  51.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 51.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  51.6k|    handler.verify();
  714|  51.6k|    return p;
  715|  51.6k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIwEEvPKT_S8_:
 1176|  30.4k|    {
 1177|  30.4k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIw2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  51.6k|    {
 1530|  51.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  51.6k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  54.6k|    {
 1523|  54.6k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  54.6k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  54.6k|{
 1494|  54.6k|    auto it = pctx.begin();
 1495|  54.6k|    auto end = pctx.end();
 1496|  54.6k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.04k, False: 51.6k]
  |  Branch (1496:22): [True: 0, False: 51.6k]
  ------------------
 1497|  3.04k|        pctx.on_error(
 1498|  3.04k|            "Format string without specifiers is not valid for this type");
 1499|  3.04k|        return it;
 1500|  3.04k|    }
 1501|       |
 1502|  51.6k|    auto checker = detail::tm_format_checker<T>{};
 1503|  51.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  51.6k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 51.6k, False: 0]
  ------------------
 1505|  51.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  51.6k|    }
 1507|  51.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 51.6k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  51.6k|    return end;
 1512|  51.6k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  51.6k|{
  377|  51.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 51.6k]
  |  Branch (377:25): [True: 0, False: 51.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  51.6k|    auto p = begin;
  383|  51.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 51.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  51.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 51.6k]
  |  Branch (392:21): [True: 0, False: 51.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   170k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 170k, False: 0]
  ------------------
  399|   170k|        auto ch = *p;
  400|   170k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 51.6k, False: 118k]
  ------------------
  401|  51.6k|            break;
  402|  51.6k|        }
  403|   118k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 30.4k, False: 88.1k]
  ------------------
  404|  30.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 30.4k]
  |  Branch (404:32): [True: 30.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 30.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  30.4k|            const auto cp_len =
  412|  30.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  30.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 30.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  30.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 30.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  30.4k|            ++p;
  439|  30.4k|            continue;
  440|  30.4k|        }
  441|  88.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 30.4k, False: 57.7k]
  ------------------
  442|  30.4k|            handler.on_text(begin, p);
  443|  30.4k|        }
  444|  88.1k|        ++p;  // Consume '%'
  445|  88.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 88.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  88.1k|        ch = *p;
  451|  88.1k|        ++p;
  452|       |
  453|  88.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 88.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 88.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 88.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.08k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.08k, False: 82.0k]
  ------------------
  463|  6.08k|                handler.on_full_year();
  464|  6.08k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 88.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 88.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 88.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 88.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  6.15k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 6.15k, False: 82.0k]
  ------------------
  479|  6.15k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 88.1k]
  ------------------
  480|  6.15k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 88.1k]
  ------------------
  481|  6.15k|                handler.on_month_name();
  482|  6.15k|                break;
  483|  6.08k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.08k, False: 82.0k]
  ------------------
  484|  6.08k|                handler.on_dec_month();
  485|  6.08k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 88.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 88.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 88.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 88.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.08k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.08k, False: 82.0k]
  ------------------
  502|  6.08k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 88.1k]
  ------------------
  503|  6.08k|                handler.on_day_of_month();
  504|  6.08k|                break;
  505|       |            // Day of week
  506|  6.08k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.08k, False: 82.0k]
  ------------------
  507|  6.08k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 88.1k]
  ------------------
  508|  6.08k|                handler.on_weekday_name();
  509|  6.08k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 88.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 88.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.08k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.08k, False: 82.0k]
  ------------------
  518|  6.08k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 88.1k]
  ------------------
  519|  6.08k|                handler.on_24_hour();
  520|  6.08k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 88.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 88.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.08k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.08k, False: 82.0k]
  ------------------
  527|  6.08k|                handler.on_minute();
  528|  6.08k|                break;
  529|       |            // Second
  530|  6.08k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.08k, False: 82.0k]
  ------------------
  531|  6.08k|                handler.on_second();
  532|  6.08k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 88.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.08k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.08k, False: 82.0k]
  ------------------
  563|  6.08k|                handler.on_tz_offset();
  564|  6.08k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 88.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 88.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 88.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 88.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.10k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.10k, False: 82.0k]
  ------------------
  579|  6.10k|                handler.on_us_date();
  580|  6.10k|                break;
  581|  6.08k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.08k, False: 82.0k]
  ------------------
  582|  6.08k|                handler.on_iso_date();
  583|  6.08k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 88.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  14.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 14.9k, False: 73.1k]
  ------------------
  588|  14.9k|                handler.on_24_hour_time();
  589|  14.9k|                break;
  590|  6.13k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.13k, False: 82.0k]
  ------------------
  591|  6.13k|                handler.on_iso_time();
  592|  6.13k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 88.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 88.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 88.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 88.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 88.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 88.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 88.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 88.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  88.1k|        }
  704|  88.1k|        begin = p;
  705|       |
  706|  88.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 88.1k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  88.1k|    }
  710|  51.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 51.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  51.6k|    handler.verify();
  714|  51.6k|    return p;
  715|  51.6k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIwEEvPKT_S8_:
 1176|  30.4k|    {
 1177|  30.4k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  51.6k|    {
 1530|  51.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  51.6k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  54.6k|    {
 1523|  54.6k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  54.6k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  54.6k|{
 1494|  54.6k|    auto it = pctx.begin();
 1495|  54.6k|    auto end = pctx.end();
 1496|  54.6k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.04k, False: 51.6k]
  |  Branch (1496:22): [True: 0, False: 51.6k]
  ------------------
 1497|  3.04k|        pctx.on_error(
 1498|  3.04k|            "Format string without specifiers is not valid for this type");
 1499|  3.04k|        return it;
 1500|  3.04k|    }
 1501|       |
 1502|  51.6k|    auto checker = detail::tm_format_checker<T>{};
 1503|  51.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  51.6k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 51.6k, False: 0]
  ------------------
 1505|  51.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  51.6k|    }
 1507|  51.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 51.6k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  51.6k|    return end;
 1512|  51.6k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  51.6k|{
  377|  51.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 51.6k]
  |  Branch (377:25): [True: 0, False: 51.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  51.6k|    auto p = begin;
  383|  51.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 51.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  51.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 51.6k]
  |  Branch (392:21): [True: 0, False: 51.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   170k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 170k, False: 0]
  ------------------
  399|   170k|        auto ch = *p;
  400|   170k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 51.6k, False: 118k]
  ------------------
  401|  51.6k|            break;
  402|  51.6k|        }
  403|   118k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 30.4k, False: 88.1k]
  ------------------
  404|  30.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 30.4k]
  |  Branch (404:32): [True: 30.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 30.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  30.4k|            const auto cp_len =
  412|  30.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  30.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 30.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  30.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 30.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  30.4k|            ++p;
  439|  30.4k|            continue;
  440|  30.4k|        }
  441|  88.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 30.4k, False: 57.7k]
  ------------------
  442|  30.4k|            handler.on_text(begin, p);
  443|  30.4k|        }
  444|  88.1k|        ++p;  // Consume '%'
  445|  88.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 88.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  88.1k|        ch = *p;
  451|  88.1k|        ++p;
  452|       |
  453|  88.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 88.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 88.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 88.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.08k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.08k, False: 82.0k]
  ------------------
  463|  6.08k|                handler.on_full_year();
  464|  6.08k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 88.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 88.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 88.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 88.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  6.15k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 6.15k, False: 82.0k]
  ------------------
  479|  6.15k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 88.1k]
  ------------------
  480|  6.15k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 88.1k]
  ------------------
  481|  6.15k|                handler.on_month_name();
  482|  6.15k|                break;
  483|  6.08k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.08k, False: 82.0k]
  ------------------
  484|  6.08k|                handler.on_dec_month();
  485|  6.08k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 88.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 88.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 88.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 88.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.08k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.08k, False: 82.0k]
  ------------------
  502|  6.08k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 88.1k]
  ------------------
  503|  6.08k|                handler.on_day_of_month();
  504|  6.08k|                break;
  505|       |            // Day of week
  506|  6.08k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.08k, False: 82.0k]
  ------------------
  507|  6.08k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 88.1k]
  ------------------
  508|  6.08k|                handler.on_weekday_name();
  509|  6.08k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 88.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 88.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.08k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.08k, False: 82.0k]
  ------------------
  518|  6.08k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 88.1k]
  ------------------
  519|  6.08k|                handler.on_24_hour();
  520|  6.08k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 88.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 88.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.08k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.08k, False: 82.0k]
  ------------------
  527|  6.08k|                handler.on_minute();
  528|  6.08k|                break;
  529|       |            // Second
  530|  6.08k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.08k, False: 82.0k]
  ------------------
  531|  6.08k|                handler.on_second();
  532|  6.08k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 88.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.08k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.08k, False: 82.0k]
  ------------------
  563|  6.08k|                handler.on_tz_offset();
  564|  6.08k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 88.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 88.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 88.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 88.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.10k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.10k, False: 82.0k]
  ------------------
  579|  6.10k|                handler.on_us_date();
  580|  6.10k|                break;
  581|  6.08k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.08k, False: 82.0k]
  ------------------
  582|  6.08k|                handler.on_iso_date();
  583|  6.08k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 88.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  14.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 14.9k, False: 73.1k]
  ------------------
  588|  14.9k|                handler.on_24_hour_time();
  589|  14.9k|                break;
  590|  6.13k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.13k, False: 82.0k]
  ------------------
  591|  6.13k|                handler.on_iso_time();
  592|  6.13k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 88.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 88.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 88.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 88.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 88.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 88.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 88.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 88.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  88.1k|        }
  704|  88.1k|        begin = p;
  705|       |
  706|  88.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 88.1k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  88.1k|    }
  710|  51.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 51.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  51.6k|    handler.verify();
  714|  51.6k|    return p;
  715|  51.6k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIwEEvPKT_S8_:
 1176|  30.4k|    {
 1177|  30.4k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  51.6k|    {
 1530|  51.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  51.6k|    }
_ZN3scn2v47weekdayC2Ej:
   71|      8|        : m_value(static_cast<unsigned char>(wd != 7 ? wd : 0))
  ------------------
  |  Branch (71:46): [True: 8, False: 0]
  ------------------
   72|      8|    {
   73|      8|    }
_ZN3scn2v45monthC2Ej:
  119|  10.4k|        : m_value(static_cast<unsigned char>(d))
  120|  10.4k|    {
  121|  10.4k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  29.8k|{
  377|  29.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 29.8k]
  |  Branch (377:25): [True: 0, False: 29.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  29.8k|    auto p = begin;
  383|  29.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 29.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  29.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 29.8k]
  |  Branch (392:21): [True: 0, False: 29.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  49.7k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.1k, False: 19.6k]
  ------------------
  399|  30.1k|        auto ch = *p;
  400|  30.1k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.1k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.1k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 136, False: 29.9k]
  ------------------
  404|    136|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 136]
  |  Branch (404:32): [True: 136, False: 0]
  |  Branch (404:46): [True: 0, False: 136]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    136|            const auto cp_len =
  412|    136|                detail::code_point_length_by_starting_code_unit(ch);
  413|    136|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 136]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    136|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 136]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    136|            ++p;
  439|    136|            continue;
  440|    136|        }
  441|  29.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 136, False: 29.8k]
  ------------------
  442|    136|            handler.on_text(begin, p);
  443|    136|        }
  444|  29.9k|        ++p;  // Consume '%'
  445|  29.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 29.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  29.9k|        ch = *p;
  451|  29.9k|        ++p;
  452|       |
  453|  29.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 29.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 29.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 29.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.46k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.46k, False: 28.5k]
  ------------------
  463|  1.46k|                handler.on_full_year();
  464|  1.46k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 29.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 29.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 29.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 29.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.87k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.87k, False: 27.1k]
  ------------------
  479|  2.87k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 29.9k]
  ------------------
  480|  2.87k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 29.9k]
  ------------------
  481|  2.87k|                handler.on_month_name();
  482|  2.87k|                break;
  483|     62|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 62, False: 29.9k]
  ------------------
  484|     62|                handler.on_dec_month();
  485|     62|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 29.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 29.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 29.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 29.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     42|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 42, False: 29.9k]
  ------------------
  502|     42|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 29.9k]
  ------------------
  503|     42|                handler.on_day_of_month();
  504|     42|                break;
  505|       |            // Day of week
  506|  1.47k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.47k, False: 28.5k]
  ------------------
  507|  1.47k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 29.9k]
  ------------------
  508|  1.47k|                handler.on_weekday_name();
  509|  1.47k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 29.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 29.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     32|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 32, False: 29.9k]
  ------------------
  518|     32|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 29.9k]
  ------------------
  519|     32|                handler.on_24_hour();
  520|     32|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 29.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 29.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 29.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 29.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 29.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 29.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 29.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 29.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 29.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 29.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.01k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.01k, False: 22.9k]
  ------------------
  579|  7.01k|                handler.on_us_date();
  580|  7.01k|                break;
  581|  1.56k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.56k, False: 28.4k]
  ------------------
  582|  1.56k|                handler.on_iso_date();
  583|  1.56k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 29.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  13.0k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 13.0k, False: 16.8k]
  ------------------
  588|  13.0k|                handler.on_24_hour_time();
  589|  13.0k|                break;
  590|  2.36k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.36k, False: 27.6k]
  ------------------
  591|  2.36k|                handler.on_iso_time();
  592|  2.36k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 29.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 29.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 29.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 29.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 29.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 29.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 29.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 29.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  29.9k|        }
  704|  29.9k|        begin = p;
  705|       |
  706|  29.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.1k, False: 19.8k]
  ------------------
  707|  10.1k|            return p;
  708|  10.1k|        }
  709|  29.9k|    }
  710|  19.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.6k|    handler.verify();
  714|  19.6k|    return p;
  715|  29.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.02k|    {                                                                \
  769|  3.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.02k|        field##_set = 1;                                             \
  774|  3.02k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.56k|    {                                                                \
  769|  5.56k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.56k|        field##_set = 1;                                             \
  774|  5.56k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.61k|    {                                                                \
  769|  7.61k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.61k|        field##_set = 1;                                             \
  774|  7.61k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.74k|    {                                                                \
  769|  5.74k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.74k|        field##_set = 1;                                             \
  774|  5.74k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|      4|    {                                                                \
  769|      4|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|      4|        field##_set = 1;                                             \
  774|      4|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  13.4k|    {                                                                \
  769|  13.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.4k|        field##_set = 1;                                             \
  774|  13.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  13.0k|    {                                                                \
  769|  13.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.0k|        field##_set = 1;                                             \
  774|  13.0k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|    926|    {                                                                \
  769|    926|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    926|        field##_set = 1;                                             \
  774|    926|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.6k|    {
  800|  19.6k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 12.5k, False: 7.08k]
  |  Branch (800:27): [True: 0, False: 12.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.6k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.6k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.6k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 102, False: 19.5k]
  |  Branch (818:31): [True: 0, False: 102]
  |  Branch (818:46): [True: 0, False: 102]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.6k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.6k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.6k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 4, False: 19.6k]
  |  Branch (829:26): [True: 5.65k, False: 14.0k]
  |  Branch (829:38): [True: 0, False: 14.0k]
  ------------------
  830|  19.6k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 5.65k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.6k|    }
_ZN3scn2v46detail12setter_state29handle_short_year_and_centuryIiEEvRT_S4_:
  866|  16.9k|    {
  867|  16.9k|        assert(!full_year_set);
  868|  16.9k|        if (short_year_set && century_set) {
  ------------------
  |  Branch (868:13): [True: 16.9k, False: 0]
  |  Branch (868:31): [True: 0, False: 16.9k]
  ------------------
  869|      0|            year = century_value * 100 + short_year_value - offset;
  870|      0|        }
  871|  16.9k|        else if (short_year_set) {
  ------------------
  |  Branch (871:18): [True: 16.9k, False: 0]
  ------------------
  872|  16.9k|            if (short_year_value >= 69) {
  ------------------
  |  Branch (872:17): [True: 56, False: 16.9k]
  ------------------
  873|     56|                year = 1900 + short_year_value - offset;
  874|     56|            }
  875|  16.9k|            else {
  876|  16.9k|                year = 2000 + short_year_value - offset;
  877|  16.9k|            }
  878|  16.9k|        }
  879|      0|        else if (century_set) {
  ------------------
  |  Branch (879:18): [True: 0, False: 0]
  ------------------
  880|      0|            year = 100 * century_value - offset;
  881|      0|        }
  882|  16.9k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  23.8k|{
  377|  23.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 23.8k]
  |  Branch (377:25): [True: 0, False: 23.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  23.8k|    auto p = begin;
  383|  23.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 23.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  23.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 23.8k]
  |  Branch (392:21): [True: 0, False: 23.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 24.0k, False: 13.4k]
  ------------------
  399|  24.0k|        auto ch = *p;
  400|  24.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 24.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  24.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 132, False: 23.9k]
  ------------------
  404|    132|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 132]
  |  Branch (404:32): [True: 132, False: 0]
  |  Branch (404:46): [True: 0, False: 132]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    132|            const auto cp_len =
  412|    132|                detail::code_point_length_by_starting_code_unit(ch);
  413|    132|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 132]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    132|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 132]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    132|            ++p;
  439|    132|            continue;
  440|    132|        }
  441|  23.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 132, False: 23.8k]
  ------------------
  442|    132|            handler.on_text(begin, p);
  443|    132|        }
  444|  23.9k|        ++p;  // Consume '%'
  445|  23.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 23.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  23.9k|        ch = *p;
  451|  23.9k|        ++p;
  452|       |
  453|  23.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 23.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 23.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 23.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.49k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.49k, False: 22.4k]
  ------------------
  463|  1.49k|                handler.on_full_year();
  464|  1.49k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 23.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 23.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 23.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 23.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.90k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.90k, False: 21.0k]
  ------------------
  479|  2.90k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 23.9k]
  ------------------
  480|  2.90k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 23.9k]
  ------------------
  481|  2.90k|                handler.on_month_name();
  482|  2.90k|                break;
  483|     58|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 58, False: 23.8k]
  ------------------
  484|     58|                handler.on_dec_month();
  485|     58|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 23.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 23.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 23.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 23.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     42|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 42, False: 23.8k]
  ------------------
  502|     42|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 23.9k]
  ------------------
  503|     42|                handler.on_day_of_month();
  504|     42|                break;
  505|       |            // Day of week
  506|  1.49k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.49k, False: 22.4k]
  ------------------
  507|  1.49k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 23.9k]
  ------------------
  508|  1.49k|                handler.on_weekday_name();
  509|  1.49k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 23.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 23.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     32|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 32, False: 23.9k]
  ------------------
  518|     32|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 23.9k]
  ------------------
  519|     32|                handler.on_24_hour();
  520|     32|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 23.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 23.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 23.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 23.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 23.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 23.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 23.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 23.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 23.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 23.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.58k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.58k, False: 22.3k]
  ------------------
  579|  1.58k|                handler.on_us_date();
  580|  1.58k|                break;
  581|  1.59k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.59k, False: 22.3k]
  ------------------
  582|  1.59k|                handler.on_iso_date();
  583|  1.59k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 23.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  12.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 12.3k, False: 11.5k]
  ------------------
  588|  12.3k|                handler.on_24_hour_time();
  589|  12.3k|                break;
  590|  2.38k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.38k, False: 21.5k]
  ------------------
  591|  2.38k|                handler.on_iso_time();
  592|  2.38k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 23.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 23.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 23.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 23.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 23.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 23.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 23.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 23.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  23.9k|        }
  704|  23.9k|        begin = p;
  705|       |
  706|  23.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.3k, False: 13.5k]
  ------------------
  707|  10.3k|            return p;
  708|  10.3k|        }
  709|  23.9k|    }
  710|  13.4k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 13.4k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  13.4k|    handler.verify();
  714|  13.4k|    return p;
  715|  23.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.08k|    {                                                                \
  769|  3.08k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.08k|        field##_set = 1;                                             \
  774|  3.08k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    104|    {                                                                \
  769|    104|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    104|        field##_set = 1;                                             \
  774|    104|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  2.10k|    {                                                                \
  769|  2.10k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.10k|        field##_set = 1;                                             \
  774|  2.10k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    264|    {                                                                \
  769|    264|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    264|        field##_set = 1;                                             \
  774|    264|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|      4|    {                                                                \
  769|      4|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|      4|        field##_set = 1;                                             \
  774|      4|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.4k|    {                                                                \
  769|  12.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.4k|        field##_set = 1;                                             \
  774|  12.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.2k|    {                                                                \
  769|  12.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.2k|        field##_set = 1;                                             \
  774|  12.2k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    918|    {                                                                \
  769|    918|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    918|        field##_set = 1;                                             \
  774|    918|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  13.4k|    {
  800|  13.4k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.7k, False: 1.62k]
  |  Branch (800:27): [True: 0, False: 11.7k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  13.4k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 13.4k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  13.4k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 102, False: 13.3k]
  |  Branch (818:31): [True: 0, False: 102]
  |  Branch (818:46): [True: 0, False: 102]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  13.4k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 13.4k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  13.4k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 4, False: 13.4k]
  |  Branch (829:26): [True: 198, False: 13.2k]
  |  Branch (829:38): [True: 0, False: 13.2k]
  ------------------
  830|  13.4k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 202]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  13.4k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  29.8k|{
  377|  29.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 29.8k]
  |  Branch (377:25): [True: 0, False: 29.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  29.8k|    auto p = begin;
  383|  29.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 29.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  29.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 29.8k]
  |  Branch (392:21): [True: 0, False: 29.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  49.7k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.1k, False: 19.6k]
  ------------------
  399|  30.1k|        auto ch = *p;
  400|  30.1k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.1k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.1k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 136, False: 29.9k]
  ------------------
  404|    136|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 136]
  |  Branch (404:32): [True: 136, False: 0]
  |  Branch (404:46): [True: 0, False: 136]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    136|            const auto cp_len =
  412|    136|                detail::code_point_length_by_starting_code_unit(ch);
  413|    136|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 136]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    136|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 136]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    136|            ++p;
  439|    136|            continue;
  440|    136|        }
  441|  29.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 136, False: 29.8k]
  ------------------
  442|    136|            handler.on_text(begin, p);
  443|    136|        }
  444|  29.9k|        ++p;  // Consume '%'
  445|  29.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 29.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  29.9k|        ch = *p;
  451|  29.9k|        ++p;
  452|       |
  453|  29.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 29.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 29.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 29.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.46k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.46k, False: 28.5k]
  ------------------
  463|  1.46k|                handler.on_full_year();
  464|  1.46k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 29.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 29.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 29.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 29.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.87k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.87k, False: 27.1k]
  ------------------
  479|  2.87k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 29.9k]
  ------------------
  480|  2.87k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 29.9k]
  ------------------
  481|  2.87k|                handler.on_month_name();
  482|  2.87k|                break;
  483|     62|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 62, False: 29.9k]
  ------------------
  484|     62|                handler.on_dec_month();
  485|     62|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 29.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 29.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 29.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 29.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     42|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 42, False: 29.9k]
  ------------------
  502|     42|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 29.9k]
  ------------------
  503|     42|                handler.on_day_of_month();
  504|     42|                break;
  505|       |            // Day of week
  506|  1.47k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.47k, False: 28.5k]
  ------------------
  507|  1.47k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 29.9k]
  ------------------
  508|  1.47k|                handler.on_weekday_name();
  509|  1.47k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 29.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 29.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     32|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 32, False: 29.9k]
  ------------------
  518|     32|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 29.9k]
  ------------------
  519|     32|                handler.on_24_hour();
  520|     32|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 29.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 29.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 29.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 29.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 29.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 29.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 29.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 29.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 29.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 29.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.01k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.01k, False: 22.9k]
  ------------------
  579|  7.01k|                handler.on_us_date();
  580|  7.01k|                break;
  581|  1.56k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.56k, False: 28.4k]
  ------------------
  582|  1.56k|                handler.on_iso_date();
  583|  1.56k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 29.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  13.0k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 13.0k, False: 16.8k]
  ------------------
  588|  13.0k|                handler.on_24_hour_time();
  589|  13.0k|                break;
  590|  2.36k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.36k, False: 27.6k]
  ------------------
  591|  2.36k|                handler.on_iso_time();
  592|  2.36k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 29.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 29.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 29.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 29.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 29.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 29.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 29.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 29.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  29.9k|        }
  704|  29.9k|        begin = p;
  705|       |
  706|  29.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.1k, False: 19.8k]
  ------------------
  707|  10.1k|            return p;
  708|  10.1k|        }
  709|  29.9k|    }
  710|  19.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.6k|    handler.verify();
  714|  19.6k|    return p;
  715|  29.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.02k|    {                                                                \
  769|  3.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.02k|        field##_set = 1;                                             \
  774|  3.02k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.56k|    {                                                                \
  769|  5.56k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.56k|        field##_set = 1;                                             \
  774|  5.56k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.61k|    {                                                                \
  769|  7.61k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.61k|        field##_set = 1;                                             \
  774|  7.61k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.74k|    {                                                                \
  769|  5.74k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.74k|        field##_set = 1;                                             \
  774|  5.74k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|      4|    {                                                                \
  769|      4|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|      4|        field##_set = 1;                                             \
  774|      4|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  13.4k|    {                                                                \
  769|  13.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.4k|        field##_set = 1;                                             \
  774|  13.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  13.0k|    {                                                                \
  769|  13.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.0k|        field##_set = 1;                                             \
  774|  13.0k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|    926|    {                                                                \
  769|    926|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    926|        field##_set = 1;                                             \
  774|    926|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.6k|    {
  800|  19.6k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 12.5k, False: 7.08k]
  |  Branch (800:27): [True: 0, False: 12.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.6k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.6k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.6k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 102, False: 19.5k]
  |  Branch (818:31): [True: 0, False: 102]
  |  Branch (818:46): [True: 0, False: 102]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.6k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.6k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.6k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 4, False: 19.6k]
  |  Branch (829:26): [True: 5.65k, False: 14.0k]
  |  Branch (829:38): [True: 0, False: 14.0k]
  ------------------
  830|  19.6k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 5.65k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.6k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  23.8k|{
  377|  23.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 23.8k]
  |  Branch (377:25): [True: 0, False: 23.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  23.8k|    auto p = begin;
  383|  23.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 23.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  23.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 23.8k]
  |  Branch (392:21): [True: 0, False: 23.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 24.0k, False: 13.4k]
  ------------------
  399|  24.0k|        auto ch = *p;
  400|  24.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 24.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  24.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 132, False: 23.9k]
  ------------------
  404|    132|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 132]
  |  Branch (404:32): [True: 132, False: 0]
  |  Branch (404:46): [True: 0, False: 132]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    132|            const auto cp_len =
  412|    132|                detail::code_point_length_by_starting_code_unit(ch);
  413|    132|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 132]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    132|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 132]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    132|            ++p;
  439|    132|            continue;
  440|    132|        }
  441|  23.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 132, False: 23.8k]
  ------------------
  442|    132|            handler.on_text(begin, p);
  443|    132|        }
  444|  23.9k|        ++p;  // Consume '%'
  445|  23.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 23.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  23.9k|        ch = *p;
  451|  23.9k|        ++p;
  452|       |
  453|  23.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 23.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 23.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 23.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.49k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.49k, False: 22.4k]
  ------------------
  463|  1.49k|                handler.on_full_year();
  464|  1.49k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 23.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 23.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 23.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 23.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.90k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.90k, False: 21.0k]
  ------------------
  479|  2.90k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 23.9k]
  ------------------
  480|  2.90k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 23.9k]
  ------------------
  481|  2.90k|                handler.on_month_name();
  482|  2.90k|                break;
  483|     58|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 58, False: 23.8k]
  ------------------
  484|     58|                handler.on_dec_month();
  485|     58|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 23.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 23.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 23.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 23.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     42|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 42, False: 23.8k]
  ------------------
  502|     42|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 23.9k]
  ------------------
  503|     42|                handler.on_day_of_month();
  504|     42|                break;
  505|       |            // Day of week
  506|  1.49k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.49k, False: 22.4k]
  ------------------
  507|  1.49k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 23.9k]
  ------------------
  508|  1.49k|                handler.on_weekday_name();
  509|  1.49k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 23.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 23.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     32|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 32, False: 23.9k]
  ------------------
  518|     32|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 23.9k]
  ------------------
  519|     32|                handler.on_24_hour();
  520|     32|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 23.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 23.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 23.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 23.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 23.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 23.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 23.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 23.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 23.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 23.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.58k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.58k, False: 22.3k]
  ------------------
  579|  1.58k|                handler.on_us_date();
  580|  1.58k|                break;
  581|  1.59k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.59k, False: 22.3k]
  ------------------
  582|  1.59k|                handler.on_iso_date();
  583|  1.59k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 23.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  12.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 12.3k, False: 11.5k]
  ------------------
  588|  12.3k|                handler.on_24_hour_time();
  589|  12.3k|                break;
  590|  2.38k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.38k, False: 21.5k]
  ------------------
  591|  2.38k|                handler.on_iso_time();
  592|  2.38k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 23.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 23.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 23.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 23.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 23.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 23.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 23.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 23.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  23.9k|        }
  704|  23.9k|        begin = p;
  705|       |
  706|  23.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.3k, False: 13.5k]
  ------------------
  707|  10.3k|            return p;
  708|  10.3k|        }
  709|  23.9k|    }
  710|  13.4k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 13.4k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  13.4k|    handler.verify();
  714|  13.4k|    return p;
  715|  23.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.08k|    {                                                                \
  769|  3.08k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.08k|        field##_set = 1;                                             \
  774|  3.08k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    104|    {                                                                \
  769|    104|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    104|        field##_set = 1;                                             \
  774|    104|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  2.10k|    {                                                                \
  769|  2.10k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.10k|        field##_set = 1;                                             \
  774|  2.10k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    264|    {                                                                \
  769|    264|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    264|        field##_set = 1;                                             \
  774|    264|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|      4|    {                                                                \
  769|      4|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|      4|        field##_set = 1;                                             \
  774|      4|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.4k|    {                                                                \
  769|  12.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.4k|        field##_set = 1;                                             \
  774|  12.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.2k|    {                                                                \
  769|  12.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.2k|        field##_set = 1;                                             \
  774|  12.2k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    918|    {                                                                \
  769|    918|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    918|        field##_set = 1;                                             \
  774|    918|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  13.4k|    {
  800|  13.4k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.7k, False: 1.62k]
  |  Branch (800:27): [True: 0, False: 11.7k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  13.4k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 13.4k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  13.4k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 102, False: 13.3k]
  |  Branch (818:31): [True: 0, False: 102]
  |  Branch (818:46): [True: 0, False: 102]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  13.4k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 13.4k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  13.4k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 4, False: 13.4k]
  |  Branch (829:26): [True: 198, False: 13.2k]
  |  Branch (829:38): [True: 0, False: 13.2k]
  ------------------
  830|  13.4k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 202]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  13.4k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  29.8k|{
  377|  29.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 29.8k]
  |  Branch (377:25): [True: 0, False: 29.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  29.8k|    auto p = begin;
  383|  29.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 29.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  29.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 29.8k]
  |  Branch (392:21): [True: 0, False: 29.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  49.7k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.1k, False: 19.6k]
  ------------------
  399|  30.1k|        auto ch = *p;
  400|  30.1k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.1k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.1k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 136, False: 29.9k]
  ------------------
  404|    136|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 136]
  |  Branch (404:32): [True: 136, False: 0]
  |  Branch (404:46): [True: 0, False: 136]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    136|            const auto cp_len =
  412|    136|                detail::code_point_length_by_starting_code_unit(ch);
  413|    136|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 136]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    136|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 136]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    136|            ++p;
  439|    136|            continue;
  440|    136|        }
  441|  29.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 136, False: 29.8k]
  ------------------
  442|    136|            handler.on_text(begin, p);
  443|    136|        }
  444|  29.9k|        ++p;  // Consume '%'
  445|  29.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 29.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  29.9k|        ch = *p;
  451|  29.9k|        ++p;
  452|       |
  453|  29.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 29.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 29.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 29.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.46k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.46k, False: 28.5k]
  ------------------
  463|  1.46k|                handler.on_full_year();
  464|  1.46k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 29.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 29.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 29.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 29.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.87k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.87k, False: 27.1k]
  ------------------
  479|  2.87k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 29.9k]
  ------------------
  480|  2.87k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 29.9k]
  ------------------
  481|  2.87k|                handler.on_month_name();
  482|  2.87k|                break;
  483|     62|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 62, False: 29.9k]
  ------------------
  484|     62|                handler.on_dec_month();
  485|     62|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 29.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 29.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 29.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 29.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     42|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 42, False: 29.9k]
  ------------------
  502|     42|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 29.9k]
  ------------------
  503|     42|                handler.on_day_of_month();
  504|     42|                break;
  505|       |            // Day of week
  506|  1.47k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.47k, False: 28.5k]
  ------------------
  507|  1.47k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 29.9k]
  ------------------
  508|  1.47k|                handler.on_weekday_name();
  509|  1.47k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 29.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 29.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     32|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 32, False: 29.9k]
  ------------------
  518|     32|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 29.9k]
  ------------------
  519|     32|                handler.on_24_hour();
  520|     32|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 29.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 29.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 29.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 29.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 29.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 29.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 29.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 29.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 29.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 29.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.01k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.01k, False: 22.9k]
  ------------------
  579|  7.01k|                handler.on_us_date();
  580|  7.01k|                break;
  581|  1.56k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.56k, False: 28.4k]
  ------------------
  582|  1.56k|                handler.on_iso_date();
  583|  1.56k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 29.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  13.0k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 13.0k, False: 16.8k]
  ------------------
  588|  13.0k|                handler.on_24_hour_time();
  589|  13.0k|                break;
  590|  2.36k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.36k, False: 27.6k]
  ------------------
  591|  2.36k|                handler.on_iso_time();
  592|  2.36k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 29.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 29.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 29.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 29.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 29.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 29.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 29.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 29.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  29.9k|        }
  704|  29.9k|        begin = p;
  705|       |
  706|  29.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.1k, False: 19.8k]
  ------------------
  707|  10.1k|            return p;
  708|  10.1k|        }
  709|  29.9k|    }
  710|  19.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.6k|    handler.verify();
  714|  19.6k|    return p;
  715|  29.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.02k|    {                                                                \
  769|  3.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.02k|        field##_set = 1;                                             \
  774|  3.02k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.01k|    {                                                                \
  769|  7.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.01k|        field##_set = 1;                                             \
  774|  7.01k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.61k|    {                                                                \
  769|  7.61k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.61k|        field##_set = 1;                                             \
  774|  7.61k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.74k|    {                                                                \
  769|  5.74k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.74k|        field##_set = 1;                                             \
  774|  5.74k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|      4|    {                                                                \
  769|      4|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|      4|        field##_set = 1;                                             \
  774|      4|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  13.4k|    {                                                                \
  769|  13.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.4k|        field##_set = 1;                                             \
  774|  13.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  13.0k|    {                                                                \
  769|  13.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.0k|        field##_set = 1;                                             \
  774|  13.0k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|    926|    {                                                                \
  769|    926|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    926|        field##_set = 1;                                             \
  774|    926|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.6k|    {
  800|  19.6k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 12.5k, False: 7.08k]
  |  Branch (800:27): [True: 0, False: 12.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.6k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.6k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.6k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 102, False: 19.5k]
  |  Branch (818:31): [True: 0, False: 102]
  |  Branch (818:46): [True: 0, False: 102]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.6k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.6k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.6k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 4, False: 19.6k]
  |  Branch (829:26): [True: 5.65k, False: 14.0k]
  |  Branch (829:38): [True: 0, False: 14.0k]
  ------------------
  830|  19.6k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 5.65k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.6k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  23.8k|{
  377|  23.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 23.8k]
  |  Branch (377:25): [True: 0, False: 23.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  23.8k|    auto p = begin;
  383|  23.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 23.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  23.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 23.8k]
  |  Branch (392:21): [True: 0, False: 23.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 24.0k, False: 13.4k]
  ------------------
  399|  24.0k|        auto ch = *p;
  400|  24.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 24.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  24.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 132, False: 23.9k]
  ------------------
  404|    132|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 132]
  |  Branch (404:32): [True: 132, False: 0]
  |  Branch (404:46): [True: 0, False: 132]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    132|            const auto cp_len =
  412|    132|                detail::code_point_length_by_starting_code_unit(ch);
  413|    132|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 132]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    132|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 132]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    132|            ++p;
  439|    132|            continue;
  440|    132|        }
  441|  23.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 132, False: 23.8k]
  ------------------
  442|    132|            handler.on_text(begin, p);
  443|    132|        }
  444|  23.9k|        ++p;  // Consume '%'
  445|  23.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 23.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  23.9k|        ch = *p;
  451|  23.9k|        ++p;
  452|       |
  453|  23.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 23.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 23.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 23.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.49k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.49k, False: 22.4k]
  ------------------
  463|  1.49k|                handler.on_full_year();
  464|  1.49k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 23.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 23.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 23.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 23.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.90k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.90k, False: 21.0k]
  ------------------
  479|  2.90k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 23.9k]
  ------------------
  480|  2.90k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 23.9k]
  ------------------
  481|  2.90k|                handler.on_month_name();
  482|  2.90k|                break;
  483|     58|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 58, False: 23.8k]
  ------------------
  484|     58|                handler.on_dec_month();
  485|     58|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 23.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 23.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 23.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 23.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     42|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 42, False: 23.8k]
  ------------------
  502|     42|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 23.9k]
  ------------------
  503|     42|                handler.on_day_of_month();
  504|     42|                break;
  505|       |            // Day of week
  506|  1.49k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.49k, False: 22.4k]
  ------------------
  507|  1.49k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 23.9k]
  ------------------
  508|  1.49k|                handler.on_weekday_name();
  509|  1.49k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 23.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 23.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     32|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 32, False: 23.9k]
  ------------------
  518|     32|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 23.9k]
  ------------------
  519|     32|                handler.on_24_hour();
  520|     32|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 23.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 23.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 23.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 23.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 23.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 23.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 23.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 23.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 23.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 23.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.58k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.58k, False: 22.3k]
  ------------------
  579|  1.58k|                handler.on_us_date();
  580|  1.58k|                break;
  581|  1.59k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.59k, False: 22.3k]
  ------------------
  582|  1.59k|                handler.on_iso_date();
  583|  1.59k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 23.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  12.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 12.3k, False: 11.5k]
  ------------------
  588|  12.3k|                handler.on_24_hour_time();
  589|  12.3k|                break;
  590|  2.38k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.38k, False: 21.5k]
  ------------------
  591|  2.38k|                handler.on_iso_time();
  592|  2.38k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 23.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 23.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 23.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 23.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 23.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 23.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 23.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 23.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  23.9k|        }
  704|  23.9k|        begin = p;
  705|       |
  706|  23.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.3k, False: 13.5k]
  ------------------
  707|  10.3k|            return p;
  708|  10.3k|        }
  709|  23.9k|    }
  710|  13.4k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 13.4k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  13.4k|    handler.verify();
  714|  13.4k|    return p;
  715|  23.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.08k|    {                                                                \
  769|  3.08k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.08k|        field##_set = 1;                                             \
  774|  3.08k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.58k|    {                                                                \
  769|  1.58k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.58k|        field##_set = 1;                                             \
  774|  1.58k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  2.10k|    {                                                                \
  769|  2.10k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.10k|        field##_set = 1;                                             \
  774|  2.10k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    264|    {                                                                \
  769|    264|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    264|        field##_set = 1;                                             \
  774|    264|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|      4|    {                                                                \
  769|      4|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|      4|        field##_set = 1;                                             \
  774|      4|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.4k|    {                                                                \
  769|  12.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.4k|        field##_set = 1;                                             \
  774|  12.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.2k|    {                                                                \
  769|  12.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.2k|        field##_set = 1;                                             \
  774|  12.2k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    918|    {                                                                \
  769|    918|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    918|        field##_set = 1;                                             \
  774|    918|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  13.4k|    {
  800|  13.4k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.7k, False: 1.62k]
  |  Branch (800:27): [True: 0, False: 11.7k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  13.4k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 13.4k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  13.4k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 102, False: 13.3k]
  |  Branch (818:31): [True: 0, False: 102]
  |  Branch (818:46): [True: 0, False: 102]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  13.4k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 13.4k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  13.4k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 4, False: 13.4k]
  |  Branch (829:26): [True: 198, False: 13.2k]
  |  Branch (829:38): [True: 0, False: 13.2k]
  ------------------
  830|  13.4k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 202]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  13.4k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  25.5k|{
  377|  25.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 25.5k]
  |  Branch (377:25): [True: 0, False: 25.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  25.5k|    auto p = begin;
  383|  25.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 25.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  25.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 25.5k]
  |  Branch (392:21): [True: 0, False: 25.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  30.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 25.5k, False: 4.51k]
  ------------------
  399|  25.5k|        auto ch = *p;
  400|  25.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 25.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  25.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14, False: 25.5k]
  ------------------
  404|     14|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14]
  |  Branch (404:32): [True: 14, False: 0]
  |  Branch (404:46): [True: 0, False: 14]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     14|            const auto cp_len =
  412|     14|                detail::code_point_length_by_starting_code_unit(ch);
  413|     14|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     14|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     14|            ++p;
  439|     14|            continue;
  440|     14|        }
  441|  25.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14, False: 25.5k]
  ------------------
  442|     14|            handler.on_text(begin, p);
  443|     14|        }
  444|  25.5k|        ++p;  // Consume '%'
  445|  25.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 25.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  25.5k|        ch = *p;
  451|  25.5k|        ++p;
  452|       |
  453|  25.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 25.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 25.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 25.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.01k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.01k, False: 22.5k]
  ------------------
  463|  3.01k|                handler.on_full_year();
  464|  3.01k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 25.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 25.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 25.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 25.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.04k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.04k, False: 22.5k]
  ------------------
  479|  3.04k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 25.5k]
  ------------------
  480|  3.04k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 25.5k]
  ------------------
  481|  3.04k|                handler.on_month_name();
  482|  3.04k|                break;
  483|     14|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 14, False: 25.5k]
  ------------------
  484|     14|                handler.on_dec_month();
  485|     14|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 25.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 25.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 25.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 25.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 25.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 25.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.01k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.01k, False: 22.5k]
  ------------------
  507|  3.01k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 25.5k]
  ------------------
  508|  3.01k|                handler.on_weekday_name();
  509|  3.01k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 25.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 25.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 25.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 25.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 25.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 25.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 25.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 25.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 25.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 25.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 25.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 25.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 25.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 25.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.01k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.01k, False: 22.5k]
  ------------------
  579|  3.01k|                handler.on_us_date();
  580|  3.01k|                break;
  581|  3.01k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.01k, False: 22.5k]
  ------------------
  582|  3.01k|                handler.on_iso_date();
  583|  3.01k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 25.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  7.42k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 7.42k, False: 18.1k]
  ------------------
  588|  7.42k|                handler.on_24_hour_time();
  589|  7.42k|                break;
  590|  3.03k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.03k, False: 22.5k]
  ------------------
  591|  3.03k|                handler.on_iso_time();
  592|  3.03k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 25.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 25.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 25.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 25.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 25.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 25.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 25.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 25.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  25.5k|        }
  704|  25.5k|        begin = p;
  705|       |
  706|  25.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 21.0k, False: 4.52k]
  ------------------
  707|  21.0k|            return p;
  708|  21.0k|        }
  709|  25.5k|    }
  710|  4.51k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 4.51k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  4.51k|    handler.verify();
  714|  4.51k|    return p;
  715|  25.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.02k|    {                                                                \
  769|  6.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.02k|        field##_set = 1;                                             \
  774|  6.02k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     16|    {                                                                \
  769|     16|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     16|        field##_set = 1;                                             \
  774|     16|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    360|    {                                                                \
  769|    360|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    360|        field##_set = 1;                                             \
  774|    360|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     28|    {                                                                \
  769|     28|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     28|        field##_set = 1;                                             \
  774|     28|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  4.90k|    {                                                                \
  769|  4.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.90k|        field##_set = 1;                                             \
  774|  4.90k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  4.76k|    {                                                                \
  769|  4.76k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.76k|        field##_set = 1;                                             \
  774|  4.76k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     50|    {                                                                \
  769|     50|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     50|        field##_set = 1;                                             \
  774|     50|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  4.51k|    {
  800|  4.51k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 4.47k, False: 40]
  |  Branch (800:27): [True: 0, False: 4.47k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  4.51k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 4.51k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  4.51k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 4.51k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  4.51k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 4.51k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  4.51k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 4.51k]
  |  Branch (829:26): [True: 8, False: 4.50k]
  |  Branch (829:38): [True: 0, False: 4.50k]
  ------------------
  830|  4.51k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  4.51k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  25.5k|{
  377|  25.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 25.5k]
  |  Branch (377:25): [True: 0, False: 25.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  25.5k|    auto p = begin;
  383|  25.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 25.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  25.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 25.5k]
  |  Branch (392:21): [True: 0, False: 25.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  30.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 25.5k, False: 4.51k]
  ------------------
  399|  25.5k|        auto ch = *p;
  400|  25.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 25.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  25.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14, False: 25.5k]
  ------------------
  404|     14|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14]
  |  Branch (404:32): [True: 14, False: 0]
  |  Branch (404:46): [True: 0, False: 14]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     14|            const auto cp_len =
  412|     14|                detail::code_point_length_by_starting_code_unit(ch);
  413|     14|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     14|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     14|            ++p;
  439|     14|            continue;
  440|     14|        }
  441|  25.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14, False: 25.5k]
  ------------------
  442|     14|            handler.on_text(begin, p);
  443|     14|        }
  444|  25.5k|        ++p;  // Consume '%'
  445|  25.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 25.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  25.5k|        ch = *p;
  451|  25.5k|        ++p;
  452|       |
  453|  25.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 25.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 25.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 25.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.01k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.01k, False: 22.5k]
  ------------------
  463|  3.01k|                handler.on_full_year();
  464|  3.01k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 25.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 25.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 25.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 25.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.04k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.04k, False: 22.5k]
  ------------------
  479|  3.04k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 25.5k]
  ------------------
  480|  3.04k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 25.5k]
  ------------------
  481|  3.04k|                handler.on_month_name();
  482|  3.04k|                break;
  483|     14|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 14, False: 25.5k]
  ------------------
  484|     14|                handler.on_dec_month();
  485|     14|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 25.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 25.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 25.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 25.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 25.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 25.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.01k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.01k, False: 22.5k]
  ------------------
  507|  3.01k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 25.5k]
  ------------------
  508|  3.01k|                handler.on_weekday_name();
  509|  3.01k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 25.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 25.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 25.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 25.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 25.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 25.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 25.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 25.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 25.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 25.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 25.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 25.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 25.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 25.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.01k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.01k, False: 22.5k]
  ------------------
  579|  3.01k|                handler.on_us_date();
  580|  3.01k|                break;
  581|  3.01k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.01k, False: 22.5k]
  ------------------
  582|  3.01k|                handler.on_iso_date();
  583|  3.01k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 25.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  7.42k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 7.42k, False: 18.1k]
  ------------------
  588|  7.42k|                handler.on_24_hour_time();
  589|  7.42k|                break;
  590|  3.03k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.03k, False: 22.5k]
  ------------------
  591|  3.03k|                handler.on_iso_time();
  592|  3.03k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 25.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 25.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 25.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 25.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 25.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 25.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 25.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 25.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  25.5k|        }
  704|  25.5k|        begin = p;
  705|       |
  706|  25.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 21.0k, False: 4.52k]
  ------------------
  707|  21.0k|            return p;
  708|  21.0k|        }
  709|  25.5k|    }
  710|  4.51k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 4.51k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  4.51k|    handler.verify();
  714|  4.51k|    return p;
  715|  25.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.02k|    {                                                                \
  769|  6.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.02k|        field##_set = 1;                                             \
  774|  6.02k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     16|    {                                                                \
  769|     16|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     16|        field##_set = 1;                                             \
  774|     16|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    360|    {                                                                \
  769|    360|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    360|        field##_set = 1;                                             \
  774|    360|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     28|    {                                                                \
  769|     28|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     28|        field##_set = 1;                                             \
  774|     28|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  4.90k|    {                                                                \
  769|  4.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.90k|        field##_set = 1;                                             \
  774|  4.90k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  4.76k|    {                                                                \
  769|  4.76k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.76k|        field##_set = 1;                                             \
  774|  4.76k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     50|    {                                                                \
  769|     50|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     50|        field##_set = 1;                                             \
  774|     50|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  4.51k|    {
  800|  4.51k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 4.47k, False: 40]
  |  Branch (800:27): [True: 0, False: 4.47k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  4.51k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 4.51k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  4.51k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 4.51k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  4.51k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 4.51k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  4.51k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 4.51k]
  |  Branch (829:26): [True: 8, False: 4.50k]
  |  Branch (829:38): [True: 0, False: 4.50k]
  ------------------
  830|  4.51k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  4.51k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  25.5k|{
  377|  25.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 25.5k]
  |  Branch (377:25): [True: 0, False: 25.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  25.5k|    auto p = begin;
  383|  25.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 25.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  25.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 25.5k]
  |  Branch (392:21): [True: 0, False: 25.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  30.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 25.5k, False: 4.51k]
  ------------------
  399|  25.5k|        auto ch = *p;
  400|  25.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 25.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  25.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14, False: 25.5k]
  ------------------
  404|     14|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14]
  |  Branch (404:32): [True: 14, False: 0]
  |  Branch (404:46): [True: 0, False: 14]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     14|            const auto cp_len =
  412|     14|                detail::code_point_length_by_starting_code_unit(ch);
  413|     14|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     14|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     14|            ++p;
  439|     14|            continue;
  440|     14|        }
  441|  25.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14, False: 25.5k]
  ------------------
  442|     14|            handler.on_text(begin, p);
  443|     14|        }
  444|  25.5k|        ++p;  // Consume '%'
  445|  25.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 25.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  25.5k|        ch = *p;
  451|  25.5k|        ++p;
  452|       |
  453|  25.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 25.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 25.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 25.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.01k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.01k, False: 22.5k]
  ------------------
  463|  3.01k|                handler.on_full_year();
  464|  3.01k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 25.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 25.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 25.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 25.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.04k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.04k, False: 22.5k]
  ------------------
  479|  3.04k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 25.5k]
  ------------------
  480|  3.04k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 25.5k]
  ------------------
  481|  3.04k|                handler.on_month_name();
  482|  3.04k|                break;
  483|     14|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 14, False: 25.5k]
  ------------------
  484|     14|                handler.on_dec_month();
  485|     14|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 25.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 25.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 25.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 25.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 25.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 25.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.01k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.01k, False: 22.5k]
  ------------------
  507|  3.01k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 25.5k]
  ------------------
  508|  3.01k|                handler.on_weekday_name();
  509|  3.01k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 25.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 25.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 25.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 25.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 25.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 25.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 25.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 25.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 25.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 25.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 25.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 25.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 25.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 25.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.01k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.01k, False: 22.5k]
  ------------------
  579|  3.01k|                handler.on_us_date();
  580|  3.01k|                break;
  581|  3.01k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.01k, False: 22.5k]
  ------------------
  582|  3.01k|                handler.on_iso_date();
  583|  3.01k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 25.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  7.42k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 7.42k, False: 18.1k]
  ------------------
  588|  7.42k|                handler.on_24_hour_time();
  589|  7.42k|                break;
  590|  3.03k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.03k, False: 22.5k]
  ------------------
  591|  3.03k|                handler.on_iso_time();
  592|  3.03k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 25.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 25.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 25.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 25.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 25.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 25.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 25.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 25.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  25.5k|        }
  704|  25.5k|        begin = p;
  705|       |
  706|  25.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 21.0k, False: 4.52k]
  ------------------
  707|  21.0k|            return p;
  708|  21.0k|        }
  709|  25.5k|    }
  710|  4.51k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 4.51k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  4.51k|    handler.verify();
  714|  4.51k|    return p;
  715|  25.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.02k|    {                                                                \
  769|  6.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.02k|        field##_set = 1;                                             \
  774|  6.02k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     16|    {                                                                \
  769|     16|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     16|        field##_set = 1;                                             \
  774|     16|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    360|    {                                                                \
  769|    360|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    360|        field##_set = 1;                                             \
  774|    360|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     28|    {                                                                \
  769|     28|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     28|        field##_set = 1;                                             \
  774|     28|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  4.90k|    {                                                                \
  769|  4.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.90k|        field##_set = 1;                                             \
  774|  4.90k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  4.76k|    {                                                                \
  769|  4.76k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.76k|        field##_set = 1;                                             \
  774|  4.76k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     50|    {                                                                \
  769|     50|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     50|        field##_set = 1;                                             \
  774|     50|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  4.51k|    {
  800|  4.51k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 4.47k, False: 40]
  |  Branch (800:27): [True: 0, False: 4.47k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  4.51k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 4.51k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  4.51k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 4.51k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  4.51k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 4.51k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  4.51k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 4.51k]
  |  Branch (829:26): [True: 8, False: 4.50k]
  |  Branch (829:38): [True: 0, False: 4.50k]
  ------------------
  830|  4.51k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  4.51k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  25.5k|{
  377|  25.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 25.5k]
  |  Branch (377:25): [True: 0, False: 25.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  25.5k|    auto p = begin;
  383|  25.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 25.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  25.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 25.5k]
  |  Branch (392:21): [True: 0, False: 25.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  30.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 25.5k, False: 4.51k]
  ------------------
  399|  25.5k|        auto ch = *p;
  400|  25.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 25.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  25.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14, False: 25.5k]
  ------------------
  404|     14|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14]
  |  Branch (404:32): [True: 14, False: 0]
  |  Branch (404:46): [True: 0, False: 14]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     14|            const auto cp_len =
  412|     14|                detail::code_point_length_by_starting_code_unit(ch);
  413|     14|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     14|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     14|            ++p;
  439|     14|            continue;
  440|     14|        }
  441|  25.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14, False: 25.5k]
  ------------------
  442|     14|            handler.on_text(begin, p);
  443|     14|        }
  444|  25.5k|        ++p;  // Consume '%'
  445|  25.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 25.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  25.5k|        ch = *p;
  451|  25.5k|        ++p;
  452|       |
  453|  25.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 25.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 25.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 25.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.01k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.01k, False: 22.5k]
  ------------------
  463|  3.01k|                handler.on_full_year();
  464|  3.01k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 25.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 25.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 25.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 25.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.04k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.04k, False: 22.5k]
  ------------------
  479|  3.04k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 25.5k]
  ------------------
  480|  3.04k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 25.5k]
  ------------------
  481|  3.04k|                handler.on_month_name();
  482|  3.04k|                break;
  483|     14|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 14, False: 25.5k]
  ------------------
  484|     14|                handler.on_dec_month();
  485|     14|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 25.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 25.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 25.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 25.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 25.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 25.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.01k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.01k, False: 22.5k]
  ------------------
  507|  3.01k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 25.5k]
  ------------------
  508|  3.01k|                handler.on_weekday_name();
  509|  3.01k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 25.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 25.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 25.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 25.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 25.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 25.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 25.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 25.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 25.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 25.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 25.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 25.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 25.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 25.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.01k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.01k, False: 22.5k]
  ------------------
  579|  3.01k|                handler.on_us_date();
  580|  3.01k|                break;
  581|  3.01k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.01k, False: 22.5k]
  ------------------
  582|  3.01k|                handler.on_iso_date();
  583|  3.01k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 25.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  7.42k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 7.42k, False: 18.1k]
  ------------------
  588|  7.42k|                handler.on_24_hour_time();
  589|  7.42k|                break;
  590|  3.03k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.03k, False: 22.5k]
  ------------------
  591|  3.03k|                handler.on_iso_time();
  592|  3.03k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 25.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 25.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 25.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 25.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 25.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 25.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 25.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 25.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  25.5k|        }
  704|  25.5k|        begin = p;
  705|       |
  706|  25.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 21.0k, False: 4.52k]
  ------------------
  707|  21.0k|            return p;
  708|  21.0k|        }
  709|  25.5k|    }
  710|  4.51k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 4.51k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  4.51k|    handler.verify();
  714|  4.51k|    return p;
  715|  25.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.02k|    {                                                                \
  769|  6.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.02k|        field##_set = 1;                                             \
  774|  6.02k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     16|    {                                                                \
  769|     16|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     16|        field##_set = 1;                                             \
  774|     16|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    360|    {                                                                \
  769|    360|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    360|        field##_set = 1;                                             \
  774|    360|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     28|    {                                                                \
  769|     28|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     28|        field##_set = 1;                                             \
  774|     28|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  4.90k|    {                                                                \
  769|  4.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.90k|        field##_set = 1;                                             \
  774|  4.90k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  4.76k|    {                                                                \
  769|  4.76k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.76k|        field##_set = 1;                                             \
  774|  4.76k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     50|    {                                                                \
  769|     50|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     50|        field##_set = 1;                                             \
  774|     50|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  4.51k|    {
  800|  4.51k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 4.47k, False: 40]
  |  Branch (800:27): [True: 0, False: 4.47k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  4.51k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 4.51k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  4.51k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 4.51k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  4.51k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 4.51k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  4.51k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 4.51k]
  |  Branch (829:26): [True: 8, False: 4.50k]
  |  Branch (829:38): [True: 0, False: 4.50k]
  ------------------
  830|  4.51k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  4.51k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  25.5k|{
  377|  25.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 25.5k]
  |  Branch (377:25): [True: 0, False: 25.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  25.5k|    auto p = begin;
  383|  25.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 25.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  25.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 25.5k]
  |  Branch (392:21): [True: 0, False: 25.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  30.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 25.5k, False: 4.51k]
  ------------------
  399|  25.5k|        auto ch = *p;
  400|  25.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 25.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  25.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14, False: 25.5k]
  ------------------
  404|     14|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14]
  |  Branch (404:32): [True: 14, False: 0]
  |  Branch (404:46): [True: 0, False: 14]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     14|            const auto cp_len =
  412|     14|                detail::code_point_length_by_starting_code_unit(ch);
  413|     14|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     14|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     14|            ++p;
  439|     14|            continue;
  440|     14|        }
  441|  25.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14, False: 25.5k]
  ------------------
  442|     14|            handler.on_text(begin, p);
  443|     14|        }
  444|  25.5k|        ++p;  // Consume '%'
  445|  25.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 25.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  25.5k|        ch = *p;
  451|  25.5k|        ++p;
  452|       |
  453|  25.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 25.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 25.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 25.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.01k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.01k, False: 22.5k]
  ------------------
  463|  3.01k|                handler.on_full_year();
  464|  3.01k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 25.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 25.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 25.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 25.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.04k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.04k, False: 22.5k]
  ------------------
  479|  3.04k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 25.5k]
  ------------------
  480|  3.04k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 25.5k]
  ------------------
  481|  3.04k|                handler.on_month_name();
  482|  3.04k|                break;
  483|     14|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 14, False: 25.5k]
  ------------------
  484|     14|                handler.on_dec_month();
  485|     14|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 25.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 25.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 25.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 25.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 25.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 25.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.01k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.01k, False: 22.5k]
  ------------------
  507|  3.01k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 25.5k]
  ------------------
  508|  3.01k|                handler.on_weekday_name();
  509|  3.01k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 25.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 25.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 25.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 25.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 25.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 25.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 25.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 25.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 25.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 25.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 25.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 25.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 25.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 25.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.01k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.01k, False: 22.5k]
  ------------------
  579|  3.01k|                handler.on_us_date();
  580|  3.01k|                break;
  581|  3.01k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.01k, False: 22.5k]
  ------------------
  582|  3.01k|                handler.on_iso_date();
  583|  3.01k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 25.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  7.42k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 7.42k, False: 18.1k]
  ------------------
  588|  7.42k|                handler.on_24_hour_time();
  589|  7.42k|                break;
  590|  3.03k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.03k, False: 22.5k]
  ------------------
  591|  3.03k|                handler.on_iso_time();
  592|  3.03k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 25.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 25.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 25.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 25.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 25.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 25.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 25.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 25.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  25.5k|        }
  704|  25.5k|        begin = p;
  705|       |
  706|  25.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 21.0k, False: 4.52k]
  ------------------
  707|  21.0k|            return p;
  708|  21.0k|        }
  709|  25.5k|    }
  710|  4.51k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 4.51k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  4.51k|    handler.verify();
  714|  4.51k|    return p;
  715|  25.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.02k|    {                                                                \
  769|  6.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.02k|        field##_set = 1;                                             \
  774|  6.02k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  3.01k|    {                                                                \
  769|  3.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.01k|        field##_set = 1;                                             \
  774|  3.01k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    360|    {                                                                \
  769|    360|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    360|        field##_set = 1;                                             \
  774|    360|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     28|    {                                                                \
  769|     28|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     28|        field##_set = 1;                                             \
  774|     28|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  4.90k|    {                                                                \
  769|  4.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.90k|        field##_set = 1;                                             \
  774|  4.90k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  4.76k|    {                                                                \
  769|  4.76k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.76k|        field##_set = 1;                                             \
  774|  4.76k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     50|    {                                                                \
  769|     50|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     50|        field##_set = 1;                                             \
  774|     50|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  4.51k|    {
  800|  4.51k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 4.47k, False: 40]
  |  Branch (800:27): [True: 0, False: 4.47k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  4.51k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 4.51k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  4.51k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 4.51k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  4.51k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 4.51k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  4.51k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 4.51k]
  |  Branch (829:26): [True: 8, False: 4.50k]
  |  Branch (829:38): [True: 0, False: 4.50k]
  ------------------
  830|  4.51k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  4.51k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  25.5k|{
  377|  25.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 25.5k]
  |  Branch (377:25): [True: 0, False: 25.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  25.5k|    auto p = begin;
  383|  25.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 25.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  25.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 25.5k]
  |  Branch (392:21): [True: 0, False: 25.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  30.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 25.5k, False: 4.51k]
  ------------------
  399|  25.5k|        auto ch = *p;
  400|  25.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 25.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  25.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14, False: 25.5k]
  ------------------
  404|     14|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14]
  |  Branch (404:32): [True: 14, False: 0]
  |  Branch (404:46): [True: 0, False: 14]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     14|            const auto cp_len =
  412|     14|                detail::code_point_length_by_starting_code_unit(ch);
  413|     14|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     14|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     14|            ++p;
  439|     14|            continue;
  440|     14|        }
  441|  25.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14, False: 25.5k]
  ------------------
  442|     14|            handler.on_text(begin, p);
  443|     14|        }
  444|  25.5k|        ++p;  // Consume '%'
  445|  25.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 25.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  25.5k|        ch = *p;
  451|  25.5k|        ++p;
  452|       |
  453|  25.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 25.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 25.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 25.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.01k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.01k, False: 22.5k]
  ------------------
  463|  3.01k|                handler.on_full_year();
  464|  3.01k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 25.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 25.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 25.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 25.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.04k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.04k, False: 22.5k]
  ------------------
  479|  3.04k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 25.5k]
  ------------------
  480|  3.04k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 25.5k]
  ------------------
  481|  3.04k|                handler.on_month_name();
  482|  3.04k|                break;
  483|     14|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 14, False: 25.5k]
  ------------------
  484|     14|                handler.on_dec_month();
  485|     14|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 25.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 25.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 25.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 25.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 25.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 25.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.01k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.01k, False: 22.5k]
  ------------------
  507|  3.01k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 25.5k]
  ------------------
  508|  3.01k|                handler.on_weekday_name();
  509|  3.01k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 25.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 25.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 25.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 25.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 25.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 25.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 25.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 25.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 25.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 25.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 25.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 25.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 25.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 25.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.01k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.01k, False: 22.5k]
  ------------------
  579|  3.01k|                handler.on_us_date();
  580|  3.01k|                break;
  581|  3.01k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.01k, False: 22.5k]
  ------------------
  582|  3.01k|                handler.on_iso_date();
  583|  3.01k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 25.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  7.42k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 7.42k, False: 18.1k]
  ------------------
  588|  7.42k|                handler.on_24_hour_time();
  589|  7.42k|                break;
  590|  3.03k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.03k, False: 22.5k]
  ------------------
  591|  3.03k|                handler.on_iso_time();
  592|  3.03k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 25.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 25.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 25.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 25.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 25.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 25.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 25.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 25.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  25.5k|        }
  704|  25.5k|        begin = p;
  705|       |
  706|  25.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 21.0k, False: 4.52k]
  ------------------
  707|  21.0k|            return p;
  708|  21.0k|        }
  709|  25.5k|    }
  710|  4.51k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 4.51k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  4.51k|    handler.verify();
  714|  4.51k|    return p;
  715|  25.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.02k|    {                                                                \
  769|  6.02k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.02k|        field##_set = 1;                                             \
  774|  6.02k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  3.01k|    {                                                                \
  769|  3.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.01k|        field##_set = 1;                                             \
  774|  3.01k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    360|    {                                                                \
  769|    360|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    360|        field##_set = 1;                                             \
  774|    360|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     28|    {                                                                \
  769|     28|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     28|        field##_set = 1;                                             \
  774|     28|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  4.90k|    {                                                                \
  769|  4.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.90k|        field##_set = 1;                                             \
  774|  4.90k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  4.76k|    {                                                                \
  769|  4.76k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.76k|        field##_set = 1;                                             \
  774|  4.76k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     50|    {                                                                \
  769|     50|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     50|        field##_set = 1;                                             \
  774|     50|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  4.51k|    {
  800|  4.51k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 4.47k, False: 40]
  |  Branch (800:27): [True: 0, False: 4.47k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  4.51k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 4.51k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  4.51k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 4.51k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  4.51k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 4.51k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  4.51k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 4.51k]
  |  Branch (829:26): [True: 8, False: 4.50k]
  |  Branch (829:38): [True: 0, False: 4.50k]
  ------------------
  830|  4.51k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  4.51k|    }

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|   974k|{
 4068|   974k|    if constexpr (sizeof(U) == 1) {
 4069|   974k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|   974k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|   974k|{
 4032|   974k|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|   974k|    SCN_GCC_COMPAT_PUSH
 4035|   974k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|   974k|    constexpr char lengths[] =
 4037|   974k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|   974k|        "\1\1\1\1\1\1\1\1"
 4039|   974k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|   974k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|   974k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|   974k|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|   974k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|   974k|    SCN_GCC_COMPAT_POP
 4046|   974k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   424k|{
 4274|   424k|    if constexpr (sizeof(CharT) == 1) {
 4275|   424k|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|   424k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|   424k|{
 4087|   424k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|   424k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   424k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|   424k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   424k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   424k|    };
 4092|       |
 4093|   424k|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 416k, False: 8.42k]
  ------------------
 4094|   416k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 174, False: 416k]
  ------------------
 4095|    174|            SCN_UNLIKELY_ATTR
 4096|    174|            return invalid_code_point;
 4097|    174|        }
 4098|   416k|        return static_cast<char32_t>(input[0]);
 4099|   416k|    }
 4100|       |
 4101|  8.42k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 6.20k, False: 2.21k]
  ------------------
 4102|  6.20k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 48, False: 6.16k]
  ------------------
 4103|     48|            SCN_UNLIKELY_ATTR
 4104|     48|            return invalid_code_point;
 4105|     48|        }
 4106|  6.16k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 2.20k, False: 3.95k]
  ------------------
 4107|  2.20k|            SCN_UNLIKELY_ATTR
 4108|  2.20k|            return invalid_code_point;
 4109|  2.20k|        }
 4110|       |
 4111|  3.95k|        char32_t cp{};
 4112|  3.95k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  3.95k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  3.95k|        return cp;
 4115|  6.16k|    }
 4116|       |
 4117|  2.21k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 1.20k, False: 1.01k]
  ------------------
 4118|  1.20k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 48, False: 1.15k]
  ------------------
 4119|     48|            SCN_UNLIKELY_ATTR
 4120|     48|            return invalid_code_point;
 4121|     48|        }
 4122|  1.15k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 637, False: 521]
  ------------------
 4123|  1.15k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 219, False: 302]
  ------------------
 4124|    856|            SCN_UNLIKELY_ATTR
 4125|    856|            return invalid_code_point;
 4126|    856|        }
 4127|       |
 4128|    302|        char32_t cp{};
 4129|    302|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|    302|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|    302|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|    302|        return cp;
 4133|  1.15k|    }
 4134|       |
 4135|  1.01k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 1.01k, False: 0]
  ------------------
 4136|  1.01k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 1.01k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  1.01k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 307, False: 703]
  ------------------
 4141|    307|            SCN_UNLIKELY_ATTR
 4142|    307|            return invalid_code_point;
 4143|    307|        }
 4144|    703|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 282, False: 421]
  ------------------
 4145|    703|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 152, False: 269]
  ------------------
 4146|    703|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 134, False: 135]
  ------------------
 4147|    568|            SCN_UNLIKELY_ATTR
 4148|    568|            return invalid_code_point;
 4149|    568|        }
 4150|       |
 4151|    135|        char32_t cp{};
 4152|    135|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    135|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    135|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    135|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    135|        return cp;
 4157|    703|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  9.23k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  9.23k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  9.23k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   299k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   299k|    else {
 3966|   299k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   299k|                                       to_address(first), to_address(last)))};
 3968|   299k|    }
 3969|   299k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   903k|{
  316|   903k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   903k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   903k|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  1.19M|{
  294|  1.19M|    return p;
  295|  1.19M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|   428k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|   428k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|   428k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|   428k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|   428k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|   428k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  35.0k|    {
 2869|  35.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  35.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  35.0k|    {
 2850|  35.0k|        return decay_copy(t.begin());
 2851|  35.0k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|   885k|{
 2094|   885k|    return SCN_FWD(t);
  ------------------
  |  |  936|   885k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   885k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   149k|    {
 2926|   149k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   149k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   149k|    {
 2908|   149k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   149k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9680|  12.0k|{
 9681|  12.0k|    auto result = make_scan_result<Source, Args...>();
 9682|  12.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  12.0k|                                   make_scan_args(result->values())));
 9684|  12.0k|    return result;
 9685|  12.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEEDav:
 9636|  24.8k|{
 9637|  24.8k|    return scan_result_type<Source, Args...>();
 9638|  24.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  24.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  24.8k|        : m_value(T{}), m_has_value(true)
  427|  24.8k|    {
  428|  24.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2Ev:
 6570|  24.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6413|  74.4k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  74.4k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJ2tmEEC2Ev:
 6344|   110k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  24.8k|{
 9622|  24.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.4k, False: 13.4k]
  |  |  ------------------
  ------------------
 9623|  11.4k|        out = unexpected(in.error());
 9624|  11.4k|    }
 9625|  13.4k|    else {
 9626|  13.4k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  13.4k|    static_cast<    \
  |  |  935|  13.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  13.4k|    }
 9628|  24.8k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  74.4k|    {
 1740|  74.4k|        return has_value();
 1741|  74.4k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   148k|    {
  490|   148k|        return m_has_value;
  491|   148k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  34.2k|    {
 1746|  34.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  34.2k|        return this->get_unexpected().error();
 1748|  34.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  34.2k|    {
  473|  34.2k|        return m_unexpected;
  474|  34.2k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  3.20M|    {
  365|  3.20M|        return m_unexpected;
  366|  3.20M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  1.68M|        : m_unexpected(std::forward<Err>(e))
  350|  1.68M|    {
  351|  1.68M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.68M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.68M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  11.4k|        : base(unexpect, std::move(e.error())),
 1616|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.4k|    {
 1618|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  11.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.4k|          m_has_value(false)
  451|  11.4k|    {
  452|  11.4k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  1.69M|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.69M|    {
  360|  1.69M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.69M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.69M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.4k|    {
 1316|  11.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1556|  11.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  902|  11.4k|    {
  903|  11.4k|        assign_common(std::move(other));
  904|  11.4k|        return *this;
  905|  11.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  11.4k|    {
  950|  11.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.4k, False: 0]
  ------------------
  951|  11.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  99.2k|    {
  490|  99.2k|        return m_has_value;
  491|  99.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  51.6k|    {
  456|  51.6k|        return m_value;
  457|  51.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  11.4k|    {
 1046|  11.4k|        this->destroy_value();
 1047|  11.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  11.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  11.4k|    {
  504|  11.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  11.4k|                                  std::forward<Args>(args)...);
  506|  11.4k|        m_has_value = false;
  507|  11.4k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   205k|{
  396|   205k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   205k|        T(std::forward<Args>(args)...);
  398|   205k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.4k|    {
  473|  11.4k|        return m_unexpected;
  474|  11.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  11.4k|    {
  481|  11.4k|        return std::move(m_unexpected);
  482|  11.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6444|  40.2k|    {
 6445|  40.2k|        m_range = std::forward<Other>(r);
 6446|  40.2k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  40.2k|    {
 1795|  40.2k|        return value();
 1796|  40.2k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  40.2k|    {
 1769|  40.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  40.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  40.2k|        return this->get_value();
 1771|  40.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  40.2k|    {
  456|  40.2k|        return m_value;
  457|  40.2k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9460|  36.0k|{
 9461|  36.0k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  36.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|  36.0k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|  36.0k|{
 9398|  36.0k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  36.0k|    auto result = vscan_impl(buffer, format, args);
 9401|  36.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  36.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.9k, False: 20.1k]
  |  |  ------------------
  ------------------
 9402|  15.9k|        return unexpected(result.error());
 9403|  15.9k|    }
 9404|  20.1k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  36.0k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|  74.4k|{
 5381|  74.4k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  74.4k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  74.4k|                  "\n"
 5385|  74.4k|                  "Unsupported range type given as input to a scanning "
 5386|  74.4k|                  "function.\n"
 5387|  74.4k|                  "A range needs to have a character type (value type) "
 5388|  74.4k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  74.4k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  74.4k|                  "to be included.\n"
 5391|  74.4k|                  "See the scnlib documentation for more details.");
 5392|  74.4k|    static_assert(
 5393|  74.4k|        !std::is_same_v<T, custom_char_traits>,
 5394|  74.4k|        "\n"
 5395|  74.4k|        "Unsupported range type given as input to a scanning "
 5396|  74.4k|        "function.\n"
 5397|  74.4k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  74.4k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  74.4k|        "not supported.");
 5400|  74.4k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  74.4k|                  "\n"
 5402|  74.4k|                  "Unsupported range type given as input to a scanning "
 5403|  74.4k|                  "function.\n"
 5404|  74.4k|                  "file_marker_found cannot be used as an "
 5405|  74.4k|                  "source range type to scn::scan.\n"
 5406|  74.4k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  74.4k|                  "and do not provide an explicit source range, "
 5408|  74.4k|                  "or use scn::scan with a FILE* directly.");
 5409|  74.4k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  74.4k|                  "\n"
 5411|  74.4k|                  "Unsupported range type given as input to a scanning "
 5412|  74.4k|                  "function.\n"
 5413|  74.4k|                  "In order to be scannable, a range needs to satisfy "
 5414|  74.4k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  74.4k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  74.4k|                  "\n"
 5417|  74.4k|                  "Unsupported range type given as input to a scanning "
 5418|  74.4k|                  "function.\n"
 5419|  74.4k|                  "A range needs to model forward_range and have a valid "
 5420|  74.4k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  74.4k|                  "Examples of scannable ranges are std::string, "
 5422|  74.4k|                  "std::string_view, "
 5423|  74.4k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  74.4k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  74.4k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  74.4k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  74.4k|{
 5320|  74.4k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  74.4k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  74.4k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  74.4k|    {
 3000|  74.4k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  74.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  74.4k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  74.4k|    {
 2981|  74.4k|        return t.data();
 2982|  74.4k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|  74.4k|    {
 3383|  74.4k|        return detail::to_address(ranges::begin(derived()));
 3384|  74.4k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   293k|{
  316|   293k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   293k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   114k|    {
 2869|   114k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   114k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   114k|    {
 2850|   114k|        return decay_copy(t.begin());
 2851|   114k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|   990k|    {
 3480|   990k|        return m_iterator;
 3481|   990k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|  74.4k|    {
 3339|  74.4k|        return static_cast<const D&>(*this);
 3340|  74.4k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  74.4k|    {
 3075|  74.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  74.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  74.4k|    {
 3041|  74.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  74.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  74.4k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|   605k|{
 2094|   605k|    return SCN_FWD(t);
  ------------------
  |  |  936|   605k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   605k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   333k|    {
 3496|   333k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   333k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|   507k|    {
 1740|   507k|        return has_value();
 1741|   507k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|   911k|    {
  490|   911k|        return m_has_value;
  491|   911k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   205k|    {
 1746|   205k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   205k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   205k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   205k|        return this->get_unexpected().error();
 1748|   205k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   205k|    {
  473|   205k|        return m_unexpected;
  474|   205k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  34.2k|        : base(unexpect, std::move(e.error())),
 1616|  34.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  34.2k|    {
 1618|  34.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  34.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  34.2k|          m_has_value(false)
  451|  34.2k|    {
  452|  34.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  74.4k|    {
 1316|  74.4k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|  40.2k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  40.2k|                      ranges::iterator_t<SourceRange>>) {
 6677|  40.2k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  40.2k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   330k|    {
 2869|   330k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   330k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   330k|    {
 2850|   330k|        return decay_copy(t.begin());
 2851|   330k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6661|  40.2k|{
 6662|  40.2k|    return ranges::end(source);
 6663|  40.2k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   111k|    {
 2926|   111k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   111k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   111k|    {
 2908|   111k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   111k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|   733k|    {
 3484|   733k|        return m_sentinel;
 3485|   733k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|   198k|    {
 1795|   198k|        return value();
 1796|   198k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|   198k|    {
 1769|   198k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   198k|        return this->get_value();
 1771|   198k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|   198k|    {
  456|   198k|        return m_value;
  457|   198k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  40.2k|        : base(std::in_place, std::forward<U>(val)),
 1570|  40.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  40.2k|    {
 1572|  40.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  40.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  40.2k|    {
  442|  40.2k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8767|  24.0k|    {
 8768|  24.0k|        return m_str;
 8769|  24.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  54.3k|{
 6110|  54.3k|    detail::check_scan_arg_types<Args...>();
 6111|  54.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  54.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJ2tmEEEbv:
 5824|   110k|{
 5825|   110k|    constexpr bool default_constructible_constraint =
 5826|   110k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   110k|    static_assert(default_constructible_constraint,
 5828|   110k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   110k|    constexpr bool destructible_constraint =
 5831|   110k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   110k|    static_assert(destructible_constraint,
 5833|   110k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   110k|    constexpr bool non_reference_constraint =
 5836|   110k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   110k|    static_assert(non_reference_constraint,
 5838|   110k|                  "Scan argument types must not be references");
 5839|       |
 5840|   110k|    constexpr bool movable_constraint =
 5841|   110k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   110k|    static_assert(movable_constraint,
 5843|   110k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   110k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   110k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   110k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  54.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  54.3k|    {
 6087|  54.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  54.3k|    {
 6095|  54.3k|        return {detail::make_arg<
 6096|  54.3k|            kind, Context,
 6097|  54.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  54.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  54.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25E2tmvEENS1_9arg_valueERT2_:
 5883|  54.3k|{
 5884|  54.3k|    return make_value<Context>(value);
 5885|  54.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEEDaRT0_:
 5809|  55.9k|{
 5810|  55.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  55.9k|    else {
 5817|  55.9k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  55.9k|            value, context_tag<Context>{}));
 5819|  55.9k|    }
 5820|  55.9k|}
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  55.9k|    {
 5715|  55.9k|        return {};
 5716|  55.9k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5778|  55.9k|{
 5779|  55.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  55.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  55.9k|    constexpr bool scannable_char =
 5783|  55.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  55.9k|    static_assert(scannable_char,
 5785|  55.9k|                  "Cannot scan an argument of an unsupported character "
 5786|  55.9k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  55.9k|    constexpr bool scannable_const =
 5789|  55.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  55.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  55.9k|    constexpr bool scannable_disabled =
 5793|  55.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  55.9k|    static_assert(scannable_disabled,
 5795|  55.9k|                  "Cannot scan an argument that has been disabled by "
 5796|  55.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  55.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  55.9k|    static_assert(
 5800|  55.9k|        scannable,
 5801|  55.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  55.9k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  55.9k|    return arg_value{arg};
 5805|  55.9k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  55.9k|        : custom_value{static_cast<void*>(&val.val),
 5569|  55.9k|                       scan_custom_arg<T, Context>}
 5570|  55.9k|    {
 5571|  55.9k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  55.9k|    {
 5587|  55.9k|        static_assert(!is_type_disabled<T>,
 5588|  55.9k|                      "Scanning of custom types is disabled by "
 5589|  55.9k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  55.9k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  55.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  55.9k|        using context_type = Context;
 5593|  55.9k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  55.9k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  55.9k|        auto s = scanner_type{};
 5597|       |
 5598|  55.9k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  55.9k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  55.9k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  55.9k|#if SCN_HAS_EXCEPTIONS
 5603|  55.9k|        auto fmt_it = pctx_ref.begin();
 5604|  55.9k|        try {
 5605|  55.9k|            fmt_it = s.parse(pctx_ref);
 5606|  55.9k|        }
 5607|  55.9k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  55.9k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  55.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.52k, False: 54.3k]
  |  |  ------------------
  ------------------
 5628|  1.52k|            return e;
 5629|  1.52k|        }
 5630|  54.3k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  54.3k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  54.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.3k, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.3k|    }                                                  \
  |  |  |  | 3939|  54.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  33.0k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  33.0k|    static_cast<    \
  |  |  935|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  33.0k|        return {};
 5636|  54.3k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6269|   824k|    {
 6270|   824k|        return m_format.data();
 6271|   824k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE3endEv:
 6274|   167k|    {
 6275|   167k|        return m_format.data() + m_format.size();
 6276|   167k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6315|  4.56k|    {
 6316|  4.56k|        m_error = unexpected(detail::handle_error(
 6317|  4.56k|            scan_error{scan_error::invalid_format_string, msg}));
 6318|  4.56k|        return m_error.error();
 6319|  4.56k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   797k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   797k|    {
 3742|   797k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   797k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   797k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  13.6k|        : m_unexpected(std::forward<Err>(e))
  350|  13.6k|    {
  351|  13.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  13.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  13.6k|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  4.42M|    {
  572|  4.42M|        return m_has_value;
  573|  4.42M|    }
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|   520k|{
 4308|       |    // Pattern_White_Space property
 4309|   520k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 446k, False: 73.3k]
  |  Branch (4309:27): [True: 8.54k, False: 438k]
  ------------------
 4310|   520k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 251k, False: 260k]
  ------------------
 4311|   520k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 4.62k, False: 255k]
  ------------------
 4312|   520k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 660, False: 254k]
  ------------------
 4313|   520k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 972, False: 253k]
  ------------------
 4314|   520k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 96, False: 253k]
  ------------------
 4315|   520k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 253k]
  ------------------
 4316|   520k|}
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   307k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   307k|    else {
 3981|   307k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   307k|    }
 3983|   307k|}
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   598k|    {
 1746|   598k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   598k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   598k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   598k|        return this->get_unexpected().error();
 1748|   598k|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   598k|    {
  555|   598k|        return m_unexpected;
  556|   598k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   585k|        : base(unexpect, std::move(e.error())),
 1616|   585k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   585k|    {
 1618|   585k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   585k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   585k|          m_has_value(false)
  550|   585k|    {
  551|   585k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   585k|    {
 1316|   585k|    }
_ZN3scn2v424basic_scan_parse_contextIcE9get_errorEv:
 6322|   167k|    {
 6323|   167k|        return m_error;
 6324|   167k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  3.04M|    {
 1740|  3.04M|        return has_value();
 1741|  3.04M|    }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6280|   326k|    {
 6281|   326k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   326k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   419k|    {
 1740|   419k|        return has_value();
 1741|   419k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   839k|    {
  490|   839k|        return m_has_value;
  491|   839k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   131k|    {
 1746|   131k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   131k|        return this->get_unexpected().error();
 1748|   131k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   131k|    {
  473|   131k|        return m_unexpected;
  474|   131k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   188k|    {
 1805|   188k|        return std::move(value());
 1806|   188k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   287k|    {
 1769|   287k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   287k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   287k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   287k|        return this->get_value();
 1771|   287k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   287k|    {
  456|   287k|        return m_value;
  457|   287k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8970|   247k|    {
 8971|   247k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   247k|    static_cast<    \
  |  |  935|   247k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|   247k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  1.40M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  1.40M|        : m_deferred_init(), m_has_value(true)
  529|  1.40M|    {
  530|  1.40M|    }
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  55.9k|    {
 5723|  55.9k|        return {val};
 5724|  55.9k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE6valuesEv:
 6353|   106k|    {
 6354|   106k|        return m_values;
 6355|   106k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  54.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  54.3k|    {
 6137|  54.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKNS3_9arg_valueE:
 6192|   163k|        : m_desc(desc), m_values(data)
 6193|   163k|    {
 6194|   163k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   549k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   549k|    static_cast<    \
  |  |  935|   549k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   549k|    static_cast<    \
  |  |  935|   549k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   549k|    {
 3466|   549k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8440|   163k|{
 8441|   163k|    return s;
 8442|   163k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8417|   163k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  24.0k|        : m_str(r.str)
 8763|  24.0k|    {
 8764|  24.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  24.8k|    {
 1740|  24.8k|        return has_value();
 1741|  24.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  51.6k|    {
 1815|  51.6k|        return &value();
 1816|  51.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  51.6k|    {
 1769|  51.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  51.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  51.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  51.6k|        return this->get_value();
 1771|  51.6k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6433|  40.2k|    {
 6434|  40.2k|        return ranges::begin(m_range);
 6435|  40.2k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9749|  12.0k|{
 9750|  12.0k|    auto result = make_scan_result<Source, Args...>();
 9751|  12.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  12.0k|                                   make_scan_args(result->values())));
 9753|  12.0k|    return result;
 9754|  12.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9478|  36.0k|{
 9479|  36.0k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  36.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|  36.0k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|  36.0k|{
 9414|  36.0k|#if !SCN_DISABLE_LOCALE
 9415|  36.0k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  36.0k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  36.0k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  36.0k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  36.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  36.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.9k, False: 20.1k]
  |  |  ------------------
  ------------------
 9422|  15.9k|        return unexpected(result.error());
 9423|  15.9k|    }
 9424|  20.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  36.0k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9790|    761|{
 9791|    761|    auto result = make_scan_result<Source, T>();
 9792|    761|    fill_scan_result(
 9793|    761|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    761|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    761|                            detail::make_arg<scan_context>(result->value())));
 9795|    761|    return result;
 9796|    761|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9491|  2.28k|{
 9492|  2.28k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  2.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  2.28k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  2.28k|{
 9438|  2.28k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  2.28k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  2.28k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.28k, False: 0]
  |  |  ------------------
  ------------------
 9442|  2.28k|        return unexpected(result.error());
 9443|  2.28k|    }
 9444|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  2.28k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5859|  1.52k|{
 5860|  1.52k|    check_scan_arg_types<T>();
 5861|       |
 5862|  1.52k|    basic_scan_arg<Context> arg;
 5863|  1.52k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  1.52k|    arg.m_value = make_value<Context>(value);
 5865|  1.52k|    return arg;
 5866|  1.52k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5954|   167k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5559|   331k|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  4.56k|    {
 6376|  4.56k|        return std::get<0>(m_values);
 6377|  4.56k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9680|  12.0k|{
 9681|  12.0k|    auto result = make_scan_result<Source, Args...>();
 9682|  12.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  12.0k|                                   make_scan_args(result->values())));
 9684|  12.0k|    return result;
 9685|  12.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEEDav:
 9636|  24.8k|{
 9637|  24.8k|    return scan_result_type<Source, Args...>();
 9638|  24.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  24.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  24.8k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  24.8k|    {
  613|  24.8k|        construct();
  614|  24.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  24.8k|    {
  694|  24.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  24.8k|        m_has_value = true;
  696|  24.8k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  24.8k|{
  396|  24.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  24.8k|        T(std::forward<Args>(args)...);
  398|  24.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6570|  24.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEEC2Ev:
 6344|   110k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   101k|    {
  718|   101k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   101k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   101k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  24.8k|{
 9622|  24.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.4k, False: 13.4k]
  |  |  ------------------
  ------------------
 9623|  11.4k|        out = unexpected(in.error());
 9624|  11.4k|    }
 9625|  13.4k|    else {
 9626|  13.4k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  13.4k|    static_cast<    \
  |  |  935|  13.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  13.4k|    }
 9628|  24.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  11.4k|        : base(unexpect, std::move(e.error())),
 1616|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.4k|    {
 1618|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  11.4k|        : m_has_value(false)
  637|  11.4k|    {
  638|  11.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  11.4k|    {
  701|  11.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.4k|                                  std::forward<Args>(args)...);
  703|  11.4k|        m_has_value = false;
  704|  11.4k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|   136k|{
  396|   136k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   136k|        T(std::forward<Args>(args)...);
  398|   136k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  57.0k|    {
  730|  57.0k|        return reinterpret_cast<unexpected<E>*>(
  731|  57.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  57.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  57.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.4k|    {
 1316|  11.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1556|  11.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  902|  11.4k|    {
  903|  11.4k|        assign_common(std::move(other));
  904|  11.4k|        return *this;
  905|  11.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  11.4k|    {
  950|  11.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.4k, False: 0]
  ------------------
  951|  11.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   135k|    {
  687|   135k|        return m_has_value;
  688|   135k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  51.6k|    {
  653|  51.6k|        return *value_ptr();
  654|  51.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  11.4k|    {
 1046|  11.4k|        this->destroy_value();
 1047|  11.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  24.8k|    {
  708|  24.8k|        scn::detail::destroy_at(value_ptr());
  709|  24.8k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  24.8k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  24.8k|    else {
  408|  24.8k|        p->~T();
  409|  24.8k|    }
  410|  24.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEED2Ev:
 6577|  24.8k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  11.4k|    {
  701|  11.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.4k|                                  std::forward<Args>(args)...);
  703|  11.4k|        m_has_value = false;
  704|  11.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.4k|    {
  678|  11.4k|        return std::move(*unexpected_ptr());
  679|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  22.8k|    {
  712|  22.8k|        scn::detail::destroy_at(unexpected_ptr());
  713|  22.8k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   273k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   273k|    else {
  408|   273k|        p->~T();
  409|   273k|    }
  410|   273k|}
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8767|  24.0k|    {
 8768|  24.0k|        return m_str;
 8769|  24.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  54.3k|{
 6110|  54.3k|    detail::check_scan_arg_types<Args...>();
 6111|  54.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  54.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_10tm_with_tzEEEEbv:
 5824|   110k|{
 5825|   110k|    constexpr bool default_constructible_constraint =
 5826|   110k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   110k|    static_assert(default_constructible_constraint,
 5828|   110k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   110k|    constexpr bool destructible_constraint =
 5831|   110k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   110k|    static_assert(destructible_constraint,
 5833|   110k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   110k|    constexpr bool non_reference_constraint =
 5836|   110k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   110k|    static_assert(non_reference_constraint,
 5838|   110k|                  "Scan argument types must not be references");
 5839|       |
 5840|   110k|    constexpr bool movable_constraint =
 5841|   110k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   110k|    static_assert(movable_constraint,
 5843|   110k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   110k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   110k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   110k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  54.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  54.3k|    {
 6087|  54.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  54.3k|    {
 6095|  54.3k|        return {detail::make_arg<
 6096|  54.3k|            kind, Context,
 6097|  54.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  54.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  54.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5883|  54.3k|{
 5884|  54.3k|    return make_value<Context>(value);
 5885|  54.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEEDaRT0_:
 5809|  55.9k|{
 5810|  55.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  55.9k|    else {
 5817|  55.9k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  55.9k|            value, context_tag<Context>{}));
 5819|  55.9k|    }
 5820|  55.9k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  55.9k|    {
 5715|  55.9k|        return {};
 5716|  55.9k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5778|  55.9k|{
 5779|  55.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  55.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  55.9k|    constexpr bool scannable_char =
 5783|  55.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  55.9k|    static_assert(scannable_char,
 5785|  55.9k|                  "Cannot scan an argument of an unsupported character "
 5786|  55.9k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  55.9k|    constexpr bool scannable_const =
 5789|  55.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  55.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  55.9k|    constexpr bool scannable_disabled =
 5793|  55.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  55.9k|    static_assert(scannable_disabled,
 5795|  55.9k|                  "Cannot scan an argument that has been disabled by "
 5796|  55.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  55.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  55.9k|    static_assert(
 5800|  55.9k|        scannable,
 5801|  55.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  55.9k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  55.9k|    return arg_value{arg};
 5805|  55.9k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  55.9k|        : custom_value{static_cast<void*>(&val.val),
 5569|  55.9k|                       scan_custom_arg<T, Context>}
 5570|  55.9k|    {
 5571|  55.9k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  55.9k|    {
 5587|  55.9k|        static_assert(!is_type_disabled<T>,
 5588|  55.9k|                      "Scanning of custom types is disabled by "
 5589|  55.9k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  55.9k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  55.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  55.9k|        using context_type = Context;
 5593|  55.9k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  55.9k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  55.9k|        auto s = scanner_type{};
 5597|       |
 5598|  55.9k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  55.9k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  55.9k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  55.9k|#if SCN_HAS_EXCEPTIONS
 5603|  55.9k|        auto fmt_it = pctx_ref.begin();
 5604|  55.9k|        try {
 5605|  55.9k|            fmt_it = s.parse(pctx_ref);
 5606|  55.9k|        }
 5607|  55.9k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  55.9k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  55.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.52k, False: 54.3k]
  |  |  ------------------
  ------------------
 5628|  1.52k|            return e;
 5629|  1.52k|        }
 5630|  54.3k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  54.3k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  54.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.3k, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.3k|    }                                                  \
  |  |  |  | 3939|  54.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  33.0k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  33.0k|    static_cast<    \
  |  |  935|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  33.0k|        return {};
 5636|  54.3k|    }
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  55.9k|    {
 5723|  55.9k|        return {val};
 5724|  55.9k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE6valuesEv:
 6353|   106k|    {
 6354|   106k|        return m_values;
 6355|   106k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  54.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  54.3k|    {
 6137|  54.3k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  24.0k|        : m_str(r.str)
 8763|  24.0k|    {
 8764|  24.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  24.8k|    {
 1740|  24.8k|        return has_value();
 1741|  24.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  51.6k|    {
 1815|  51.6k|        return &value();
 1816|  51.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  51.6k|    {
 1769|  51.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  51.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  51.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  51.6k|        return this->get_value();
 1771|  51.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  36.2k|    {
  643|  36.2k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 13.4k, False: 22.8k]
  ------------------
  644|  13.4k|            destroy_value();
  645|  13.4k|        }
  646|  22.8k|        else {
  647|  22.8k|            destroy_unexpected();
  648|  22.8k|        }
  649|  36.2k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9749|  12.0k|{
 9750|  12.0k|    auto result = make_scan_result<Source, Args...>();
 9751|  12.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  12.0k|                                   make_scan_args(result->values())));
 9753|  12.0k|    return result;
 9754|  12.0k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9790|    761|{
 9791|    761|    auto result = make_scan_result<Source, T>();
 9792|    761|    fill_scan_result(
 9793|    761|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    761|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    761|                            detail::make_arg<scan_context>(result->value())));
 9795|    761|    return result;
 9796|    761|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5859|  1.52k|{
 5860|  1.52k|    check_scan_arg_types<T>();
 5861|       |
 5862|  1.52k|    basic_scan_arg<Context> arg;
 5863|  1.52k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  1.52k|    arg.m_value = make_value<Context>(value);
 5865|  1.52k|    return arg;
 5866|  1.52k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  4.56k|    {
 6376|  4.56k|        return std::get<0>(m_values);
 6377|  4.56k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9680|  12.0k|{
 9681|  12.0k|    auto result = make_scan_result<Source, Args...>();
 9682|  12.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  12.0k|                                   make_scan_args(result->values())));
 9684|  12.0k|    return result;
 9685|  12.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEEDav:
 9636|  24.8k|{
 9637|  24.8k|    return scan_result_type<Source, Args...>();
 9638|  24.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  24.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  24.8k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  24.8k|    {
  613|  24.8k|        construct();
  614|  24.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  24.8k|    {
  694|  24.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  24.8k|        m_has_value = true;
  696|  24.8k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  24.8k|{
  396|  24.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  24.8k|        T(std::forward<Args>(args)...);
  398|  24.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6570|  24.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEEC2Ev:
 6344|   110k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   101k|    {
  718|   101k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   101k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   101k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  24.8k|{
 9622|  24.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.4k, False: 13.4k]
  |  |  ------------------
  ------------------
 9623|  11.4k|        out = unexpected(in.error());
 9624|  11.4k|    }
 9625|  13.4k|    else {
 9626|  13.4k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  13.4k|    static_cast<    \
  |  |  935|  13.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  13.4k|    }
 9628|  24.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  11.4k|        : base(unexpect, std::move(e.error())),
 1616|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.4k|    {
 1618|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  11.4k|        : m_has_value(false)
  637|  11.4k|    {
  638|  11.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  11.4k|    {
  701|  11.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.4k|                                  std::forward<Args>(args)...);
  703|  11.4k|        m_has_value = false;
  704|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  57.0k|    {
  730|  57.0k|        return reinterpret_cast<unexpected<E>*>(
  731|  57.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  57.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  57.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.4k|    {
 1316|  11.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1556|  11.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  902|  11.4k|    {
  903|  11.4k|        assign_common(std::move(other));
  904|  11.4k|        return *this;
  905|  11.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  11.4k|    {
  950|  11.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.4k, False: 0]
  ------------------
  951|  11.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   135k|    {
  687|   135k|        return m_has_value;
  688|   135k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  51.6k|    {
  653|  51.6k|        return *value_ptr();
  654|  51.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  11.4k|    {
 1046|  11.4k|        this->destroy_value();
 1047|  11.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  24.8k|    {
  708|  24.8k|        scn::detail::destroy_at(value_ptr());
  709|  24.8k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  24.8k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  24.8k|    else {
  408|  24.8k|        p->~T();
  409|  24.8k|    }
  410|  24.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEED2Ev:
 6577|  24.8k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  11.4k|    {
  701|  11.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.4k|                                  std::forward<Args>(args)...);
  703|  11.4k|        m_has_value = false;
  704|  11.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.4k|    {
  678|  11.4k|        return std::move(*unexpected_ptr());
  679|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  22.8k|    {
  712|  22.8k|        scn::detail::destroy_at(unexpected_ptr());
  713|  22.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8767|  24.0k|    {
 8768|  24.0k|        return m_str;
 8769|  24.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  54.3k|{
 6110|  54.3k|    detail::check_scan_arg_types<Args...>();
 6111|  54.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  54.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_19datetime_componentsEEEEbv:
 5824|   110k|{
 5825|   110k|    constexpr bool default_constructible_constraint =
 5826|   110k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   110k|    static_assert(default_constructible_constraint,
 5828|   110k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   110k|    constexpr bool destructible_constraint =
 5831|   110k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   110k|    static_assert(destructible_constraint,
 5833|   110k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   110k|    constexpr bool non_reference_constraint =
 5836|   110k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   110k|    static_assert(non_reference_constraint,
 5838|   110k|                  "Scan argument types must not be references");
 5839|       |
 5840|   110k|    constexpr bool movable_constraint =
 5841|   110k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   110k|    static_assert(movable_constraint,
 5843|   110k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   110k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   110k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   110k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  54.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  54.3k|    {
 6087|  54.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  54.3k|    {
 6095|  54.3k|        return {detail::make_arg<
 6096|  54.3k|            kind, Context,
 6097|  54.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  54.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  54.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5883|  54.3k|{
 5884|  54.3k|    return make_value<Context>(value);
 5885|  54.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEEDaRT0_:
 5809|  55.9k|{
 5810|  55.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  55.9k|    else {
 5817|  55.9k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  55.9k|            value, context_tag<Context>{}));
 5819|  55.9k|    }
 5820|  55.9k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  55.9k|    {
 5715|  55.9k|        return {};
 5716|  55.9k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5778|  55.9k|{
 5779|  55.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  55.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  55.9k|    constexpr bool scannable_char =
 5783|  55.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  55.9k|    static_assert(scannable_char,
 5785|  55.9k|                  "Cannot scan an argument of an unsupported character "
 5786|  55.9k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  55.9k|    constexpr bool scannable_const =
 5789|  55.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  55.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  55.9k|    constexpr bool scannable_disabled =
 5793|  55.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  55.9k|    static_assert(scannable_disabled,
 5795|  55.9k|                  "Cannot scan an argument that has been disabled by "
 5796|  55.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  55.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  55.9k|    static_assert(
 5800|  55.9k|        scannable,
 5801|  55.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  55.9k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  55.9k|    return arg_value{arg};
 5805|  55.9k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  55.9k|        : custom_value{static_cast<void*>(&val.val),
 5569|  55.9k|                       scan_custom_arg<T, Context>}
 5570|  55.9k|    {
 5571|  55.9k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  55.9k|    {
 5587|  55.9k|        static_assert(!is_type_disabled<T>,
 5588|  55.9k|                      "Scanning of custom types is disabled by "
 5589|  55.9k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  55.9k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  55.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  55.9k|        using context_type = Context;
 5593|  55.9k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  55.9k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  55.9k|        auto s = scanner_type{};
 5597|       |
 5598|  55.9k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  55.9k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  55.9k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  55.9k|#if SCN_HAS_EXCEPTIONS
 5603|  55.9k|        auto fmt_it = pctx_ref.begin();
 5604|  55.9k|        try {
 5605|  55.9k|            fmt_it = s.parse(pctx_ref);
 5606|  55.9k|        }
 5607|  55.9k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  55.9k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  55.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.52k, False: 54.3k]
  |  |  ------------------
  ------------------
 5628|  1.52k|            return e;
 5629|  1.52k|        }
 5630|  54.3k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  54.3k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  54.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.3k, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.3k|    }                                                  \
  |  |  |  | 3939|  54.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  33.0k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  33.0k|    static_cast<    \
  |  |  935|  33.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  33.0k|        return {};
 5636|  54.3k|    }
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  55.9k|    {
 5723|  55.9k|        return {val};
 5724|  55.9k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE6valuesEv:
 6353|   106k|    {
 6354|   106k|        return m_values;
 6355|   106k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  54.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  54.3k|    {
 6137|  54.3k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  24.0k|        : m_str(r.str)
 8763|  24.0k|    {
 8764|  24.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  24.8k|    {
 1740|  24.8k|        return has_value();
 1741|  24.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  51.6k|    {
 1815|  51.6k|        return &value();
 1816|  51.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  51.6k|    {
 1769|  51.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  51.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  51.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  51.6k|        return this->get_value();
 1771|  51.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  36.2k|    {
  643|  36.2k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 13.4k, False: 22.8k]
  ------------------
  644|  13.4k|            destroy_value();
  645|  13.4k|        }
  646|  22.8k|        else {
  647|  22.8k|            destroy_unexpected();
  648|  22.8k|        }
  649|  36.2k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9749|  12.0k|{
 9750|  12.0k|    auto result = make_scan_result<Source, Args...>();
 9751|  12.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  12.0k|                                   make_scan_args(result->values())));
 9753|  12.0k|    return result;
 9754|  12.0k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9790|    761|{
 9791|    761|    auto result = make_scan_result<Source, T>();
 9792|    761|    fill_scan_result(
 9793|    761|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    761|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    761|                            detail::make_arg<scan_context>(result->value())));
 9795|    761|    return result;
 9796|    761|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5859|  1.52k|{
 5860|  1.52k|    check_scan_arg_types<T>();
 5861|       |
 5862|  1.52k|    basic_scan_arg<Context> arg;
 5863|  1.52k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  1.52k|    arg.m_value = make_value<Context>(value);
 5865|  1.52k|    return arg;
 5866|  1.52k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  4.56k|    {
 6376|  4.56k|        return std::get<0>(m_values);
 6377|  4.56k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  34.2k|    {
 2869|  34.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  34.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  34.2k|    {
 2850|  34.2k|        return decay_copy(t.begin());
 2851|  34.2k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  2.92M|{
 2094|  2.92M|    return SCN_FWD(t);
  ------------------
  |  |  936|  2.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.92M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   186k|    {
 2926|   186k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   186k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   186k|    {
 2908|   186k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   186k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9680|  15.1k|{
 9681|  15.1k|    auto result = make_scan_result<Source, Args...>();
 9682|  15.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  15.1k|                                   make_scan_args(result->values())));
 9684|  15.1k|    return result;
 9685|  15.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEEDav:
 9636|  31.0k|{
 9637|  31.0k|    return scan_result_type<Source, Args...>();
 9638|  31.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  31.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  31.0k|        : m_value(T{}), m_has_value(true)
  427|  31.0k|    {
  428|  31.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2Ev:
 6570|  31.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6413|  93.2k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|  93.2k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  31.0k|{
 9622|  31.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.4k, False: 19.6k]
  |  |  ------------------
  ------------------
 9623|  11.4k|        out = unexpected(in.error());
 9624|  11.4k|    }
 9625|  19.6k|    else {
 9626|  19.6k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  19.6k|    static_cast<    \
  |  |  935|  19.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  19.6k|    }
 9628|  31.0k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  93.2k|    {
 1740|  93.2k|        return has_value();
 1741|  93.2k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   186k|    {
  490|   186k|        return m_has_value;
  491|   186k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  34.2k|    {
 1746|  34.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  34.2k|        return this->get_unexpected().error();
 1748|  34.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  34.2k|    {
  473|  34.2k|        return m_unexpected;
  474|  34.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  11.4k|        : base(unexpect, std::move(e.error())),
 1616|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.4k|    {
 1618|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  11.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.4k|          m_has_value(false)
  451|  11.4k|    {
  452|  11.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.4k|    {
 1316|  11.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1556|  11.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  902|  11.4k|    {
  903|  11.4k|        assign_common(std::move(other));
  904|  11.4k|        return *this;
  905|  11.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  11.4k|    {
  950|  11.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.4k, False: 0]
  ------------------
  951|  11.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   124k|    {
  490|   124k|        return m_has_value;
  491|   124k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  70.4k|    {
  456|  70.4k|        return m_value;
  457|  70.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  11.4k|    {
 1046|  11.4k|        this->destroy_value();
 1047|  11.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  11.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  11.4k|    {
  504|  11.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  11.4k|                                  std::forward<Args>(args)...);
  506|  11.4k|        m_has_value = false;
  507|  11.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.4k|    {
  473|  11.4k|        return m_unexpected;
  474|  11.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  11.4k|    {
  481|  11.4k|        return std::move(m_unexpected);
  482|  11.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6444|  59.0k|    {
 6445|  59.0k|        m_range = std::forward<Other>(r);
 6446|  59.0k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  59.0k|    {
 1795|  59.0k|        return value();
 1796|  59.0k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  59.0k|    {
 1769|  59.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  59.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  59.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  59.0k|        return this->get_value();
 1771|  59.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  59.0k|    {
  456|  59.0k|        return m_value;
  457|  59.0k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9460|  45.4k|{
 9461|  45.4k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|  45.4k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|  45.4k|{
 9398|  45.4k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  45.4k|    auto result = vscan_impl(buffer, format, args);
 9401|  45.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.9k, False: 29.5k]
  |  |  ------------------
  ------------------
 9402|  15.9k|        return unexpected(result.error());
 9403|  15.9k|    }
 9404|  29.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  45.4k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|  93.2k|{
 5381|  93.2k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  93.2k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  93.2k|                  "\n"
 5385|  93.2k|                  "Unsupported range type given as input to a scanning "
 5386|  93.2k|                  "function.\n"
 5387|  93.2k|                  "A range needs to have a character type (value type) "
 5388|  93.2k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  93.2k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  93.2k|                  "to be included.\n"
 5391|  93.2k|                  "See the scnlib documentation for more details.");
 5392|  93.2k|    static_assert(
 5393|  93.2k|        !std::is_same_v<T, custom_char_traits>,
 5394|  93.2k|        "\n"
 5395|  93.2k|        "Unsupported range type given as input to a scanning "
 5396|  93.2k|        "function.\n"
 5397|  93.2k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  93.2k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  93.2k|        "not supported.");
 5400|  93.2k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  93.2k|                  "\n"
 5402|  93.2k|                  "Unsupported range type given as input to a scanning "
 5403|  93.2k|                  "function.\n"
 5404|  93.2k|                  "file_marker_found cannot be used as an "
 5405|  93.2k|                  "source range type to scn::scan.\n"
 5406|  93.2k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  93.2k|                  "and do not provide an explicit source range, "
 5408|  93.2k|                  "or use scn::scan with a FILE* directly.");
 5409|  93.2k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  93.2k|                  "\n"
 5411|  93.2k|                  "Unsupported range type given as input to a scanning "
 5412|  93.2k|                  "function.\n"
 5413|  93.2k|                  "In order to be scannable, a range needs to satisfy "
 5414|  93.2k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  93.2k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  93.2k|                  "\n"
 5417|  93.2k|                  "Unsupported range type given as input to a scanning "
 5418|  93.2k|                  "function.\n"
 5419|  93.2k|                  "A range needs to model forward_range and have a valid "
 5420|  93.2k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  93.2k|                  "Examples of scannable ranges are std::string, "
 5422|  93.2k|                  "std::string_view, "
 5423|  93.2k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  93.2k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  93.2k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  93.2k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  93.2k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  93.2k|    else {
 5366|  93.2k|        return make_forward_scan_buffer(r);
 5367|  93.2k|    }
 5368|  93.2k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|  93.2k|{
 5185|  93.2k|    return basic_scan_forward_buffer_impl(range);
 5186|  93.2k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  93.2k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  93.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  93.2k|          m_cursor(ranges::begin(*m_range))
 4766|  93.2k|    {
 4767|  93.2k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|  93.2k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  93.2k|    {
 4738|  93.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|  93.2k|        : m_current_view(sv), m_is_contiguous(false)
 4428|  93.2k|    {
 4429|  93.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   165k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   152k|    {
 2869|   152k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   152k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   152k|    {
 2850|   152k|        return decay_copy(t.begin());
 2851|   152k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|   211k|    {
 3480|   211k|        return m_iterator;
 3481|   211k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|   820k|    {
 4771|   820k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 12.8k, False: 807k]
  ------------------
 4772|  12.8k|            return false;
 4773|  12.8k|        }
 4774|   807k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|   807k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|   807k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   807k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|   807k|        }
 4777|   807k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 717k, False: 90.8k]
  ------------------
 4778|   717k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|   717k|                                          this->m_current_view.begin(),
 4780|   717k|                                          this->m_current_view.end());
 4781|   717k|        }
 4782|   807k|        m_latest = *m_cursor;
 4783|   807k|        ++m_cursor;
 4784|   807k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|   807k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|   807k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|   807k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   807k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|   807k|        }
 4788|   807k|        return true;
 4789|   820k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.43M|    {
 2926|  2.43M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.43M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.43M|    {
 2908|  2.43M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.43M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  2.49M|    {
 3484|  2.49M|        return m_sentinel;
 3485|  2.49M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|  93.2k|    {
 4346|  93.2k|        SCN_UNUSED(position);
  ------------------
  |  |  915|  93.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  93.2k|        return true;
 4348|  93.2k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  34.2k|        : base(unexpect, std::move(e.error())),
 1616|  34.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  34.2k|    {
 1618|  34.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  34.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  34.2k|          m_has_value(false)
  451|  34.2k|    {
  452|  34.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  93.2k|    {
 1316|  93.2k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|  59.0k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  59.0k|                      ranges::iterator_t<SourceRange>>) {
 6677|  59.0k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  59.0k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  59.0k|    {
 2869|  59.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  59.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  59.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  59.0k|    {
 2850|  59.0k|        return decay_copy(t.begin());
 2851|  59.0k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6661|  59.0k|{
 6662|  59.0k|    return ranges::end(source);
 6663|  59.0k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  59.0k|    {
 2926|  59.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  59.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  59.0k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  59.0k|    {
 2908|  59.0k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  59.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  59.0k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  59.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  59.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  59.0k|    {
 1572|  59.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  59.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  59.0k|    {
  442|  59.0k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  30.3k|    {
 8768|  30.3k|        return m_str;
 8769|  30.3k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   152k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   152k|    static_cast<    \
  |  |  935|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   152k|    static_cast<    \
  |  |  935|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   152k|    {
 3466|   152k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  30.3k|        : m_str(r.str)
 8763|  30.3k|    {
 8764|  30.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  31.0k|    {
 1740|  31.0k|        return has_value();
 1741|  31.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  70.4k|    {
 1815|  70.4k|        return &value();
 1816|  70.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  70.4k|    {
 1769|  70.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  70.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  70.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  70.4k|        return this->get_value();
 1771|  70.4k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6433|  59.0k|    {
 6434|  59.0k|        return ranges::begin(m_range);
 6435|  59.0k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9749|  15.1k|{
 9750|  15.1k|    auto result = make_scan_result<Source, Args...>();
 9751|  15.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  15.1k|                                   make_scan_args(result->values())));
 9753|  15.1k|    return result;
 9754|  15.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9478|  45.4k|{
 9479|  45.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|  45.4k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|  45.4k|{
 9414|  45.4k|#if !SCN_DISABLE_LOCALE
 9415|  45.4k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  45.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  45.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  45.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  45.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.9k, False: 29.5k]
  |  |  ------------------
  ------------------
 9422|  15.9k|        return unexpected(result.error());
 9423|  15.9k|    }
 9424|  29.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  45.4k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9790|    761|{
 9791|    761|    auto result = make_scan_result<Source, T>();
 9792|    761|    fill_scan_result(
 9793|    761|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    761|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    761|                            detail::make_arg<scan_context>(result->value())));
 9795|    761|    return result;
 9796|    761|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9491|  2.28k|{
 9492|  2.28k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  2.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  2.28k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  2.28k|{
 9438|  2.28k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  2.28k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  2.28k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.28k, False: 0]
  |  |  ------------------
  ------------------
 9442|  2.28k|        return unexpected(result.error());
 9443|  2.28k|    }
 9444|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  2.28k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9680|  15.1k|{
 9681|  15.1k|    auto result = make_scan_result<Source, Args...>();
 9682|  15.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  15.1k|                                   make_scan_args(result->values())));
 9684|  15.1k|    return result;
 9685|  15.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9636|  31.0k|{
 9637|  31.0k|    return scan_result_type<Source, Args...>();
 9638|  31.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  31.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  31.0k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  31.0k|    {
  613|  31.0k|        construct();
  614|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  31.0k|    {
  694|  31.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  31.0k|        m_has_value = true;
  696|  31.0k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  31.0k|{
  396|  31.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  31.0k|        T(std::forward<Args>(args)...);
  398|  31.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6570|  31.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   132k|    {
  718|   132k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   132k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   132k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  31.0k|{
 9622|  31.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.4k, False: 19.6k]
  |  |  ------------------
  ------------------
 9623|  11.4k|        out = unexpected(in.error());
 9624|  11.4k|    }
 9625|  19.6k|    else {
 9626|  19.6k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  19.6k|    static_cast<    \
  |  |  935|  19.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  19.6k|    }
 9628|  31.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  11.4k|        : base(unexpect, std::move(e.error())),
 1616|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.4k|    {
 1618|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  11.4k|        : m_has_value(false)
  637|  11.4k|    {
  638|  11.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  11.4k|    {
  701|  11.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.4k|                                  std::forward<Args>(args)...);
  703|  11.4k|        m_has_value = false;
  704|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  57.0k|    {
  730|  57.0k|        return reinterpret_cast<unexpected<E>*>(
  731|  57.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  57.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  57.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.4k|    {
 1316|  11.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  11.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  902|  11.4k|    {
  903|  11.4k|        assign_common(std::move(other));
  904|  11.4k|        return *this;
  905|  11.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  11.4k|    {
  950|  11.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.4k, False: 0]
  ------------------
  951|  11.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   166k|    {
  687|   166k|        return m_has_value;
  688|   166k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  70.4k|    {
  653|  70.4k|        return *value_ptr();
  654|  70.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  11.4k|    {
 1046|  11.4k|        this->destroy_value();
 1047|  11.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  31.0k|    {
  708|  31.0k|        scn::detail::destroy_at(value_ptr());
  709|  31.0k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  31.0k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  31.0k|    else {
  408|  31.0k|        p->~T();
  409|  31.0k|    }
  410|  31.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6577|  31.0k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  11.4k|    {
  701|  11.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.4k|                                  std::forward<Args>(args)...);
  703|  11.4k|        m_has_value = false;
  704|  11.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.4k|    {
  678|  11.4k|        return std::move(*unexpected_ptr());
  679|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  22.8k|    {
  712|  22.8k|        scn::detail::destroy_at(unexpected_ptr());
  713|  22.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  30.3k|    {
 8768|  30.3k|        return m_str;
 8769|  30.3k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  30.3k|        : m_str(r.str)
 8763|  30.3k|    {
 8764|  30.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  31.0k|    {
 1740|  31.0k|        return has_value();
 1741|  31.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  70.4k|    {
 1815|  70.4k|        return &value();
 1816|  70.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  70.4k|    {
 1769|  70.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  70.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  70.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  70.4k|        return this->get_value();
 1771|  70.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  42.4k|    {
  643|  42.4k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 19.6k, False: 22.8k]
  ------------------
  644|  19.6k|            destroy_value();
  645|  19.6k|        }
  646|  22.8k|        else {
  647|  22.8k|            destroy_unexpected();
  648|  22.8k|        }
  649|  42.4k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9749|  15.1k|{
 9750|  15.1k|    auto result = make_scan_result<Source, Args...>();
 9751|  15.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  15.1k|                                   make_scan_args(result->values())));
 9753|  15.1k|    return result;
 9754|  15.1k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9790|    761|{
 9791|    761|    auto result = make_scan_result<Source, T>();
 9792|    761|    fill_scan_result(
 9793|    761|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    761|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    761|                            detail::make_arg<scan_context>(result->value())));
 9795|    761|    return result;
 9796|    761|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9680|  15.1k|{
 9681|  15.1k|    auto result = make_scan_result<Source, Args...>();
 9682|  15.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  15.1k|                                   make_scan_args(result->values())));
 9684|  15.1k|    return result;
 9685|  15.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9636|  31.0k|{
 9637|  31.0k|    return scan_result_type<Source, Args...>();
 9638|  31.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  31.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  31.0k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  31.0k|    {
  613|  31.0k|        construct();
  614|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  31.0k|    {
  694|  31.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  31.0k|        m_has_value = true;
  696|  31.0k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  31.0k|{
  396|  31.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  31.0k|        T(std::forward<Args>(args)...);
  398|  31.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6570|  31.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   132k|    {
  718|   132k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   132k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   132k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  31.0k|{
 9622|  31.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.4k, False: 19.6k]
  |  |  ------------------
  ------------------
 9623|  11.4k|        out = unexpected(in.error());
 9624|  11.4k|    }
 9625|  19.6k|    else {
 9626|  19.6k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  19.6k|    static_cast<    \
  |  |  935|  19.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  19.6k|    }
 9628|  31.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  11.4k|        : base(unexpect, std::move(e.error())),
 1616|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.4k|    {
 1618|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  11.4k|        : m_has_value(false)
  637|  11.4k|    {
  638|  11.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  11.4k|    {
  701|  11.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.4k|                                  std::forward<Args>(args)...);
  703|  11.4k|        m_has_value = false;
  704|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  57.0k|    {
  730|  57.0k|        return reinterpret_cast<unexpected<E>*>(
  731|  57.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  57.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  57.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.4k|    {
 1316|  11.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  11.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  902|  11.4k|    {
  903|  11.4k|        assign_common(std::move(other));
  904|  11.4k|        return *this;
  905|  11.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  11.4k|    {
  950|  11.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.4k, False: 0]
  ------------------
  951|  11.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   166k|    {
  687|   166k|        return m_has_value;
  688|   166k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  70.4k|    {
  653|  70.4k|        return *value_ptr();
  654|  70.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  11.4k|    {
 1046|  11.4k|        this->destroy_value();
 1047|  11.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  31.0k|    {
  708|  31.0k|        scn::detail::destroy_at(value_ptr());
  709|  31.0k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  31.0k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  31.0k|    else {
  408|  31.0k|        p->~T();
  409|  31.0k|    }
  410|  31.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6577|  31.0k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  11.4k|    {
  701|  11.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.4k|                                  std::forward<Args>(args)...);
  703|  11.4k|        m_has_value = false;
  704|  11.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.4k|    {
  678|  11.4k|        return std::move(*unexpected_ptr());
  679|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  22.8k|    {
  712|  22.8k|        scn::detail::destroy_at(unexpected_ptr());
  713|  22.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  30.3k|    {
 8768|  30.3k|        return m_str;
 8769|  30.3k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  30.3k|        : m_str(r.str)
 8763|  30.3k|    {
 8764|  30.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  31.0k|    {
 1740|  31.0k|        return has_value();
 1741|  31.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  70.4k|    {
 1815|  70.4k|        return &value();
 1816|  70.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  70.4k|    {
 1769|  70.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  70.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  70.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  70.4k|        return this->get_value();
 1771|  70.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  42.4k|    {
  643|  42.4k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 19.6k, False: 22.8k]
  ------------------
  644|  19.6k|            destroy_value();
  645|  19.6k|        }
  646|  22.8k|        else {
  647|  22.8k|            destroy_unexpected();
  648|  22.8k|        }
  649|  42.4k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9749|  15.1k|{
 9750|  15.1k|    auto result = make_scan_result<Source, Args...>();
 9751|  15.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  15.1k|                                   make_scan_args(result->values())));
 9753|  15.1k|    return result;
 9754|  15.1k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9790|    761|{
 9791|    761|    auto result = make_scan_result<Source, T>();
 9792|    761|    fill_scan_result(
 9793|    761|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    761|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    761|                            detail::make_arg<scan_context>(result->value())));
 9795|    761|    return result;
 9796|    761|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  70.0k|    {
 2869|  70.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  70.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  70.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  70.0k|    {
 2850|  70.0k|        return decay_copy(t.begin());
 2851|  70.0k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|   825k|{
 2094|   825k|    return SCN_FWD(t);
  ------------------
  |  |  936|   825k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   825k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   165k|    {
 2926|   165k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   165k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   165k|    {
 2908|   165k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   165k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEEDav:
 9636|  27.3k|{
 9637|  27.3k|    return scan_result_type<Source, Args...>();
 9638|  27.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  27.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  27.3k|        : m_value(T{}), m_has_value(true)
  427|  27.3k|    {
  428|  27.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2Ev:
 6570|  27.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6413|  82.0k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  82.0k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  27.3k|{
 9622|  27.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.8k, False: 4.51k]
  |  |  ------------------
  ------------------
 9623|  22.8k|        out = unexpected(in.error());
 9624|  22.8k|    }
 9625|  4.51k|    else {
 9626|  4.51k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  4.51k|    static_cast<    \
  |  |  935|  4.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  4.51k|    }
 9628|  27.3k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  82.0k|    {
 1740|  82.0k|        return has_value();
 1741|  82.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   164k|    {
  490|   164k|        return m_has_value;
  491|   164k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  68.4k|    {
 1746|  68.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  68.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  68.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  68.4k|        return this->get_unexpected().error();
 1748|  68.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  68.4k|    {
  473|  68.4k|        return m_unexpected;
  474|  68.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  22.8k|        : base(unexpect, std::move(e.error())),
 1616|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  22.8k|    {
 1618|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  22.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  22.8k|          m_has_value(false)
  451|  22.8k|    {
  452|  22.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  22.8k|    {
 1316|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1556|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  902|  22.8k|    {
  903|  22.8k|        assign_common(std::move(other));
  904|  22.8k|        return *this;
  905|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  22.8k|    {
  950|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 22.8k, False: 0]
  ------------------
  951|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 22.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  22.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   109k|    {
  490|   109k|        return m_has_value;
  491|   109k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  36.3k|    {
  456|  36.3k|        return m_value;
  457|  36.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  22.8k|    {
 1046|  22.8k|        this->destroy_value();
 1047|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  22.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  22.8k|    {
  504|  22.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  22.8k|                                  std::forward<Args>(args)...);
  506|  22.8k|        m_has_value = false;
  507|  22.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  22.8k|    {
  473|  22.8k|        return m_unexpected;
  474|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  22.8k|    {
  481|  22.8k|        return std::move(m_unexpected);
  482|  22.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6444|  13.5k|    {
 6445|  13.5k|        m_range = std::forward<Other>(r);
 6446|  13.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  13.5k|    {
 1795|  13.5k|        return value();
 1796|  13.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  13.5k|    {
 1769|  13.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  13.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  13.5k|        return this->get_value();
 1771|  13.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  13.5k|    {
  456|  13.5k|        return m_value;
  457|  13.5k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|  38.7k|{
 9398|  38.7k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  38.7k|    auto result = vscan_impl(buffer, format, args);
 9401|  38.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.9k, False: 6.76k]
  |  |  ------------------
  ------------------
 9402|  31.9k|        return unexpected(result.error());
 9403|  31.9k|    }
 9404|  6.76k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  6.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  38.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|  82.0k|{
 5381|  82.0k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  82.0k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  82.0k|                  "\n"
 5385|  82.0k|                  "Unsupported range type given as input to a scanning "
 5386|  82.0k|                  "function.\n"
 5387|  82.0k|                  "A range needs to have a character type (value type) "
 5388|  82.0k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  82.0k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  82.0k|                  "to be included.\n"
 5391|  82.0k|                  "See the scnlib documentation for more details.");
 5392|  82.0k|    static_assert(
 5393|  82.0k|        !std::is_same_v<T, custom_char_traits>,
 5394|  82.0k|        "\n"
 5395|  82.0k|        "Unsupported range type given as input to a scanning "
 5396|  82.0k|        "function.\n"
 5397|  82.0k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  82.0k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  82.0k|        "not supported.");
 5400|  82.0k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  82.0k|                  "\n"
 5402|  82.0k|                  "Unsupported range type given as input to a scanning "
 5403|  82.0k|                  "function.\n"
 5404|  82.0k|                  "file_marker_found cannot be used as an "
 5405|  82.0k|                  "source range type to scn::scan.\n"
 5406|  82.0k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  82.0k|                  "and do not provide an explicit source range, "
 5408|  82.0k|                  "or use scn::scan with a FILE* directly.");
 5409|  82.0k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  82.0k|                  "\n"
 5411|  82.0k|                  "Unsupported range type given as input to a scanning "
 5412|  82.0k|                  "function.\n"
 5413|  82.0k|                  "In order to be scannable, a range needs to satisfy "
 5414|  82.0k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  82.0k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  82.0k|                  "\n"
 5417|  82.0k|                  "Unsupported range type given as input to a scanning "
 5418|  82.0k|                  "function.\n"
 5419|  82.0k|                  "A range needs to model forward_range and have a valid "
 5420|  82.0k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  82.0k|                  "Examples of scannable ranges are std::string, "
 5422|  82.0k|                  "std::string_view, "
 5423|  82.0k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  82.0k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  82.0k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  82.0k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  82.0k|{
 5320|  82.0k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  82.0k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  82.0k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  82.0k|    {
 3000|  82.0k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  82.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  82.0k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  82.0k|    {
 2981|  82.0k|        return t.data();
 2982|  82.0k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|  82.0k|    {
 3383|  82.0k|        return detail::to_address(ranges::begin(derived()));
 3384|  82.0k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   241k|{
  316|   241k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   241k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   241k|{
  294|   241k|    return p;
  295|   241k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  95.5k|    {
 2869|  95.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  95.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  95.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  95.5k|    {
 2850|  95.5k|        return decay_copy(t.begin());
 2851|  95.5k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  1.41M|    {
 3480|  1.41M|        return m_iterator;
 3481|  1.41M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|  82.0k|    {
 3339|  82.0k|        return static_cast<const D&>(*this);
 3340|  82.0k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  82.0k|    {
 3075|  82.0k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  82.0k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  82.0k|    {
 3041|  82.0k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  82.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  82.0k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   255k|    {
 3496|   255k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   255k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  68.4k|        : base(unexpect, std::move(e.error())),
 1616|  68.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  68.4k|    {
 1618|  68.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  68.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  68.4k|          m_has_value(false)
  451|  68.4k|    {
  452|  68.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  82.0k|    {
 1316|  82.0k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|  13.5k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  13.5k|                      ranges::iterator_t<SourceRange>>) {
 6677|  13.5k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  13.5k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   249k|    {
 2869|   249k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   249k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   249k|    {
 2850|   249k|        return decay_copy(t.begin());
 2851|   249k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6661|  13.5k|{
 6662|  13.5k|    return ranges::end(source);
 6663|  13.5k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  90.2k|    {
 2926|  90.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  90.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  90.2k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  90.2k|    {
 2908|  90.2k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  90.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  90.2k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  1.11M|    {
 3484|  1.11M|        return m_sentinel;
 3485|  1.11M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  13.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  13.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  13.5k|    {
 1572|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  13.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  13.5k|    {
  442|  13.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8767|  25.8k|    {
 8768|  25.8k|        return m_str;
 8769|  25.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  51.6k|{
 6110|  51.6k|    detail::check_scan_arg_types<Args...>();
 6111|  51.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  51.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  51.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  51.6k|    {
 6087|  51.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  51.6k|    {
 6095|  51.6k|        return {detail::make_arg<
 6096|  51.6k|            kind, Context,
 6097|  51.6k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  51.6k|                                 typename Context::char_type>::value>(args)...};
 6099|  51.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25E2tmvEENS1_9arg_valueERT2_:
 5883|  51.6k|{
 5884|  51.6k|    return make_value<Context>(value);
 5885|  51.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEEDaRT0_:
 5809|  54.6k|{
 5810|  54.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  54.6k|    else {
 5817|  54.6k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  54.6k|            value, context_tag<Context>{}));
 5819|  54.6k|    }
 5820|  54.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  54.6k|    {
 5715|  54.6k|        return {};
 5716|  54.6k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5778|  54.6k|{
 5779|  54.6k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  54.6k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  54.6k|    constexpr bool scannable_char =
 5783|  54.6k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  54.6k|    static_assert(scannable_char,
 5785|  54.6k|                  "Cannot scan an argument of an unsupported character "
 5786|  54.6k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  54.6k|    constexpr bool scannable_const =
 5789|  54.6k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  54.6k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  54.6k|    constexpr bool scannable_disabled =
 5793|  54.6k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  54.6k|    static_assert(scannable_disabled,
 5795|  54.6k|                  "Cannot scan an argument that has been disabled by "
 5796|  54.6k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  54.6k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  54.6k|    static_assert(
 5800|  54.6k|        scannable,
 5801|  54.6k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  54.6k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  54.6k|    return arg_value{arg};
 5805|  54.6k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  54.6k|        : custom_value{static_cast<void*>(&val.val),
 5569|  54.6k|                       scan_custom_arg<T, Context>}
 5570|  54.6k|    {
 5571|  54.6k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  54.6k|    {
 5587|  54.6k|        static_assert(!is_type_disabled<T>,
 5588|  54.6k|                      "Scanning of custom types is disabled by "
 5589|  54.6k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  54.6k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  54.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  54.6k|        using context_type = Context;
 5593|  54.6k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  54.6k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  54.6k|        auto s = scanner_type{};
 5597|       |
 5598|  54.6k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  54.6k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  54.6k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  54.6k|#if SCN_HAS_EXCEPTIONS
 5603|  54.6k|        auto fmt_it = pctx_ref.begin();
 5604|  54.6k|        try {
 5605|  54.6k|            fmt_it = s.parse(pctx_ref);
 5606|  54.6k|        }
 5607|  54.6k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  54.6k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.04k, False: 51.6k]
  |  |  ------------------
  ------------------
 5628|  3.04k|            return e;
 5629|  3.04k|        }
 5630|  51.6k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  51.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  51.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 42.6k, False: 9.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  42.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  42.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  42.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  42.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  42.6k|    }                                                  \
  |  |  |  | 3939|  51.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  9.02k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  9.02k|    static_cast<    \
  |  |  935|  9.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  9.02k|        return {};
 5636|  51.6k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6269|   792k|    {
 6270|   792k|        return m_format.data();
 6271|   792k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE3endEv:
 6274|   164k|    {
 6275|   164k|        return m_format.data() + m_format.size();
 6276|   164k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6315|  9.13k|    {
 6316|  9.13k|        m_error = unexpected(detail::handle_error(
 6317|  9.13k|            scan_error{scan_error::invalid_format_string, msg}));
 6318|  9.13k|        return m_error.error();
 6319|  9.13k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   380k|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   380k|    else {
 4075|       |        // utf-32
 4076|   380k|        static_assert(sizeof(U) == 4);
 4077|   380k|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   380k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   380k|        return 1;
 4079|   380k|    }
 4080|   380k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   289k|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   289k|    else {
 4281|   289k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   289k|        auto cp = static_cast<char32_t>(input.front());
 4283|   289k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.4k, False: 248k]
  |  |  ------------------
  ------------------
 4284|  41.4k|            return invalid_code_point;
 4285|  41.4k|        }
 4286|   248k|        return cp;
 4287|   289k|    }
 4288|   289k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   309k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   309k|    else {
 3981|   309k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   309k|    }
 3983|   309k|}
_ZN3scn2v424basic_scan_parse_contextIwE9get_errorEv:
 6322|   164k|    {
 6323|   164k|        return m_error;
 6324|   164k|    }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6280|   309k|    {
 6281|   309k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   309k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   391k|    {
 1740|   391k|        return has_value();
 1741|   391k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   783k|    {
  490|   783k|        return m_has_value;
  491|   783k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   261k|    {
 1746|   261k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   261k|        return this->get_unexpected().error();
 1748|   261k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   261k|    {
  473|   261k|        return m_unexpected;
  474|   261k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   103k|    {
 1805|   103k|        return std::move(value());
 1806|   103k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   130k|    {
 1769|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   130k|        return this->get_value();
 1771|   130k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   130k|    {
  456|   130k|        return m_value;
  457|   130k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8970|   117k|    {
 8971|   117k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   117k|    static_cast<    \
  |  |  935|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|   117k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  54.6k|    {
 5723|  54.6k|        return {val};
 5724|  54.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  51.6k|        : basic_scan_args(store.desc, store.args.data())
 6136|  51.6k|    {
 6137|  51.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKNS3_9arg_valueE:
 6192|   154k|        : m_desc(desc), m_values(data)
 6193|   154k|    {
 6194|   154k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   708k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   708k|    static_cast<    \
  |  |  935|   708k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   708k|    static_cast<    \
  |  |  935|   708k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   708k|    {
 3466|   708k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8445|   154k|{
 8446|   154k|    return s;
 8447|   154k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8417|   154k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  25.8k|        : m_str(r.str)
 8763|  25.8k|    {
 8764|  25.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  27.3k|    {
 1740|  27.3k|        return has_value();
 1741|  27.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  36.3k|    {
 1815|  36.3k|        return &value();
 1816|  36.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  36.3k|    {
 1769|  36.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  36.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  36.3k|        return this->get_value();
 1771|  36.3k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6433|  13.5k|    {
 6434|  13.5k|        return ranges::begin(m_range);
 6435|  13.5k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|  38.7k|{
 9414|  38.7k|#if !SCN_DISABLE_LOCALE
 9415|  38.7k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  38.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  38.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  38.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  38.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.9k, False: 6.76k]
  |  |  ------------------
  ------------------
 9422|  31.9k|        return unexpected(result.error());
 9423|  31.9k|    }
 9424|  6.76k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  6.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  38.7k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  4.56k|{
 9438|  4.56k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  4.56k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  4.56k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.56k, False: 0]
  |  |  ------------------
  ------------------
 9442|  4.56k|        return unexpected(result.error());
 9443|  4.56k|    }
 9444|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  4.56k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5859|  3.04k|{
 5860|  3.04k|    check_scan_arg_types<T>();
 5861|       |
 5862|  3.04k|    basic_scan_arg<Context> arg;
 5863|  3.04k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  3.04k|    arg.m_value = make_value<Context>(value);
 5865|  3.04k|    return arg;
 5866|  3.04k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5954|   164k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEEDav:
 9636|  27.3k|{
 9637|  27.3k|    return scan_result_type<Source, Args...>();
 9638|  27.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  27.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  27.3k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  27.3k|    {
  613|  27.3k|        construct();
  614|  27.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  27.3k|    {
  694|  27.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  27.3k|        m_has_value = true;
  696|  27.3k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  27.3k|{
  396|  27.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  27.3k|        T(std::forward<Args>(args)...);
  398|  27.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6570|  27.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  91.0k|    {
  718|  91.0k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  91.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  91.0k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  27.3k|{
 9622|  27.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.8k, False: 4.51k]
  |  |  ------------------
  ------------------
 9623|  22.8k|        out = unexpected(in.error());
 9624|  22.8k|    }
 9625|  4.51k|    else {
 9626|  4.51k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  4.51k|    static_cast<    \
  |  |  935|  4.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  4.51k|    }
 9628|  27.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  22.8k|        : base(unexpect, std::move(e.error())),
 1616|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  22.8k|    {
 1618|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  22.8k|        : m_has_value(false)
  637|  22.8k|    {
  638|  22.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  22.8k|    {
  701|  22.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.8k|                                  std::forward<Args>(args)...);
  703|  22.8k|        m_has_value = false;
  704|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   114k|    {
  730|   114k|        return reinterpret_cast<unexpected<E>*>(
  731|   114k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   114k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   114k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  22.8k|    {
 1316|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1556|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  902|  22.8k|    {
  903|  22.8k|        assign_common(std::move(other));
  904|  22.8k|        return *this;
  905|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  22.8k|    {
  950|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 22.8k, False: 0]
  ------------------
  951|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 22.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  22.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   159k|    {
  687|   159k|        return m_has_value;
  688|   159k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  36.3k|    {
  653|  36.3k|        return *value_ptr();
  654|  36.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  22.8k|    {
 1046|  22.8k|        this->destroy_value();
 1047|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  27.3k|    {
  708|  27.3k|        scn::detail::destroy_at(value_ptr());
  709|  27.3k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  27.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  27.3k|    else {
  408|  27.3k|        p->~T();
  409|  27.3k|    }
  410|  27.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEED2Ev:
 6577|  27.3k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  22.8k|    {
  701|  22.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.8k|                                  std::forward<Args>(args)...);
  703|  22.8k|        m_has_value = false;
  704|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  22.8k|    {
  678|  22.8k|        return std::move(*unexpected_ptr());
  679|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  45.6k|    {
  712|  45.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  45.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8767|  25.8k|    {
 8768|  25.8k|        return m_str;
 8769|  25.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  51.6k|{
 6110|  51.6k|    detail::check_scan_arg_types<Args...>();
 6111|  51.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  51.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  51.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  51.6k|    {
 6087|  51.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  51.6k|    {
 6095|  51.6k|        return {detail::make_arg<
 6096|  51.6k|            kind, Context,
 6097|  51.6k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  51.6k|                                 typename Context::char_type>::value>(args)...};
 6099|  51.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5883|  51.6k|{
 5884|  51.6k|    return make_value<Context>(value);
 5885|  51.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEEDaRT0_:
 5809|  54.6k|{
 5810|  54.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  54.6k|    else {
 5817|  54.6k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  54.6k|            value, context_tag<Context>{}));
 5819|  54.6k|    }
 5820|  54.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  54.6k|    {
 5715|  54.6k|        return {};
 5716|  54.6k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5778|  54.6k|{
 5779|  54.6k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  54.6k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  54.6k|    constexpr bool scannable_char =
 5783|  54.6k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  54.6k|    static_assert(scannable_char,
 5785|  54.6k|                  "Cannot scan an argument of an unsupported character "
 5786|  54.6k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  54.6k|    constexpr bool scannable_const =
 5789|  54.6k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  54.6k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  54.6k|    constexpr bool scannable_disabled =
 5793|  54.6k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  54.6k|    static_assert(scannable_disabled,
 5795|  54.6k|                  "Cannot scan an argument that has been disabled by "
 5796|  54.6k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  54.6k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  54.6k|    static_assert(
 5800|  54.6k|        scannable,
 5801|  54.6k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  54.6k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  54.6k|    return arg_value{arg};
 5805|  54.6k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  54.6k|        : custom_value{static_cast<void*>(&val.val),
 5569|  54.6k|                       scan_custom_arg<T, Context>}
 5570|  54.6k|    {
 5571|  54.6k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  54.6k|    {
 5587|  54.6k|        static_assert(!is_type_disabled<T>,
 5588|  54.6k|                      "Scanning of custom types is disabled by "
 5589|  54.6k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  54.6k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  54.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  54.6k|        using context_type = Context;
 5593|  54.6k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  54.6k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  54.6k|        auto s = scanner_type{};
 5597|       |
 5598|  54.6k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  54.6k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  54.6k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  54.6k|#if SCN_HAS_EXCEPTIONS
 5603|  54.6k|        auto fmt_it = pctx_ref.begin();
 5604|  54.6k|        try {
 5605|  54.6k|            fmt_it = s.parse(pctx_ref);
 5606|  54.6k|        }
 5607|  54.6k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  54.6k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.04k, False: 51.6k]
  |  |  ------------------
  ------------------
 5628|  3.04k|            return e;
 5629|  3.04k|        }
 5630|  51.6k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  51.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  51.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 42.6k, False: 9.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  42.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  42.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  42.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  42.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  42.6k|    }                                                  \
  |  |  |  | 3939|  51.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  9.02k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  9.02k|    static_cast<    \
  |  |  935|  9.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  9.02k|        return {};
 5636|  51.6k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  54.6k|    {
 5723|  54.6k|        return {val};
 5724|  54.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  51.6k|        : basic_scan_args(store.desc, store.args.data())
 6136|  51.6k|    {
 6137|  51.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  25.8k|        : m_str(r.str)
 8763|  25.8k|    {
 8764|  25.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  27.3k|    {
 1740|  27.3k|        return has_value();
 1741|  27.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  36.3k|    {
 1815|  36.3k|        return &value();
 1816|  36.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  36.3k|    {
 1769|  36.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  36.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  36.3k|        return this->get_value();
 1771|  36.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  50.1k|    {
  643|  50.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 4.51k, False: 45.6k]
  ------------------
  644|  4.51k|            destroy_value();
  645|  4.51k|        }
  646|  45.6k|        else {
  647|  45.6k|            destroy_unexpected();
  648|  45.6k|        }
  649|  50.1k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5859|  3.04k|{
 5860|  3.04k|    check_scan_arg_types<T>();
 5861|       |
 5862|  3.04k|    basic_scan_arg<Context> arg;
 5863|  3.04k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  3.04k|    arg.m_value = make_value<Context>(value);
 5865|  3.04k|    return arg;
 5866|  3.04k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEEDav:
 9636|  27.3k|{
 9637|  27.3k|    return scan_result_type<Source, Args...>();
 9638|  27.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  27.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  27.3k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  27.3k|    {
  613|  27.3k|        construct();
  614|  27.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  27.3k|    {
  694|  27.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  27.3k|        m_has_value = true;
  696|  27.3k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  27.3k|{
  396|  27.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  27.3k|        T(std::forward<Args>(args)...);
  398|  27.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6570|  27.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  91.0k|    {
  718|  91.0k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  91.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  91.0k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  27.3k|{
 9622|  27.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.8k, False: 4.51k]
  |  |  ------------------
  ------------------
 9623|  22.8k|        out = unexpected(in.error());
 9624|  22.8k|    }
 9625|  4.51k|    else {
 9626|  4.51k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  4.51k|    static_cast<    \
  |  |  935|  4.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  4.51k|    }
 9628|  27.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  22.8k|        : base(unexpect, std::move(e.error())),
 1616|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  22.8k|    {
 1618|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  22.8k|        : m_has_value(false)
  637|  22.8k|    {
  638|  22.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  22.8k|    {
  701|  22.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.8k|                                  std::forward<Args>(args)...);
  703|  22.8k|        m_has_value = false;
  704|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   114k|    {
  730|   114k|        return reinterpret_cast<unexpected<E>*>(
  731|   114k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   114k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   114k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  22.8k|    {
 1316|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1556|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  902|  22.8k|    {
  903|  22.8k|        assign_common(std::move(other));
  904|  22.8k|        return *this;
  905|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  22.8k|    {
  950|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 22.8k, False: 0]
  ------------------
  951|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 22.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  22.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   159k|    {
  687|   159k|        return m_has_value;
  688|   159k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  36.3k|    {
  653|  36.3k|        return *value_ptr();
  654|  36.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  22.8k|    {
 1046|  22.8k|        this->destroy_value();
 1047|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  27.3k|    {
  708|  27.3k|        scn::detail::destroy_at(value_ptr());
  709|  27.3k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  27.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  27.3k|    else {
  408|  27.3k|        p->~T();
  409|  27.3k|    }
  410|  27.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEED2Ev:
 6577|  27.3k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  22.8k|    {
  701|  22.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.8k|                                  std::forward<Args>(args)...);
  703|  22.8k|        m_has_value = false;
  704|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  22.8k|    {
  678|  22.8k|        return std::move(*unexpected_ptr());
  679|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  45.6k|    {
  712|  45.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  45.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8767|  25.8k|    {
 8768|  25.8k|        return m_str;
 8769|  25.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  51.6k|{
 6110|  51.6k|    detail::check_scan_arg_types<Args...>();
 6111|  51.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  51.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  51.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  51.6k|    {
 6087|  51.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  51.6k|    {
 6095|  51.6k|        return {detail::make_arg<
 6096|  51.6k|            kind, Context,
 6097|  51.6k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  51.6k|                                 typename Context::char_type>::value>(args)...};
 6099|  51.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5883|  51.6k|{
 5884|  51.6k|    return make_value<Context>(value);
 5885|  51.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEEDaRT0_:
 5809|  54.6k|{
 5810|  54.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  54.6k|    else {
 5817|  54.6k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  54.6k|            value, context_tag<Context>{}));
 5819|  54.6k|    }
 5820|  54.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  54.6k|    {
 5715|  54.6k|        return {};
 5716|  54.6k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5778|  54.6k|{
 5779|  54.6k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  54.6k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  54.6k|    constexpr bool scannable_char =
 5783|  54.6k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  54.6k|    static_assert(scannable_char,
 5785|  54.6k|                  "Cannot scan an argument of an unsupported character "
 5786|  54.6k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  54.6k|    constexpr bool scannable_const =
 5789|  54.6k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  54.6k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  54.6k|    constexpr bool scannable_disabled =
 5793|  54.6k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  54.6k|    static_assert(scannable_disabled,
 5795|  54.6k|                  "Cannot scan an argument that has been disabled by "
 5796|  54.6k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  54.6k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  54.6k|    static_assert(
 5800|  54.6k|        scannable,
 5801|  54.6k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  54.6k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  54.6k|    return arg_value{arg};
 5805|  54.6k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  54.6k|        : custom_value{static_cast<void*>(&val.val),
 5569|  54.6k|                       scan_custom_arg<T, Context>}
 5570|  54.6k|    {
 5571|  54.6k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  54.6k|    {
 5587|  54.6k|        static_assert(!is_type_disabled<T>,
 5588|  54.6k|                      "Scanning of custom types is disabled by "
 5589|  54.6k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  54.6k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  54.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  54.6k|        using context_type = Context;
 5593|  54.6k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  54.6k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  54.6k|        auto s = scanner_type{};
 5597|       |
 5598|  54.6k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  54.6k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  54.6k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  54.6k|#if SCN_HAS_EXCEPTIONS
 5603|  54.6k|        auto fmt_it = pctx_ref.begin();
 5604|  54.6k|        try {
 5605|  54.6k|            fmt_it = s.parse(pctx_ref);
 5606|  54.6k|        }
 5607|  54.6k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  54.6k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.04k, False: 51.6k]
  |  |  ------------------
  ------------------
 5628|  3.04k|            return e;
 5629|  3.04k|        }
 5630|  51.6k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  51.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  51.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 42.6k, False: 9.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  42.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  42.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  42.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  42.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  42.6k|    }                                                  \
  |  |  |  | 3939|  51.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  9.02k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  9.02k|    static_cast<    \
  |  |  935|  9.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  9.02k|        return {};
 5636|  51.6k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  54.6k|    {
 5723|  54.6k|        return {val};
 5724|  54.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  51.6k|        : basic_scan_args(store.desc, store.args.data())
 6136|  51.6k|    {
 6137|  51.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  25.8k|        : m_str(r.str)
 8763|  25.8k|    {
 8764|  25.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  27.3k|    {
 1740|  27.3k|        return has_value();
 1741|  27.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  36.3k|    {
 1815|  36.3k|        return &value();
 1816|  36.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  36.3k|    {
 1769|  36.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  36.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  36.3k|        return this->get_value();
 1771|  36.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  50.1k|    {
  643|  50.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 4.51k, False: 45.6k]
  ------------------
  644|  4.51k|            destroy_value();
  645|  4.51k|        }
  646|  45.6k|        else {
  647|  45.6k|            destroy_unexpected();
  648|  45.6k|        }
  649|  50.1k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5859|  3.04k|{
 5860|  3.04k|    check_scan_arg_types<T>();
 5861|       |
 5862|  3.04k|    basic_scan_arg<Context> arg;
 5863|  3.04k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  3.04k|    arg.m_value = make_value<Context>(value);
 5865|  3.04k|    return arg;
 5866|  3.04k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  68.4k|    {
 2869|  68.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  68.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  68.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  68.4k|    {
 2850|  68.4k|        return decay_copy(t.begin());
 2851|  68.4k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  1.11M|{
 2094|  1.11M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.11M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   164k|    {
 2926|   164k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   164k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   164k|    {
 2908|   164k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   164k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEEDav:
 9636|  27.3k|{
 9637|  27.3k|    return scan_result_type<Source, Args...>();
 9638|  27.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  27.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  27.3k|        : m_value(T{}), m_has_value(true)
  427|  27.3k|    {
  428|  27.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2Ev:
 6570|  27.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6413|  82.0k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|  82.0k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  27.3k|{
 9622|  27.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.8k, False: 4.51k]
  |  |  ------------------
  ------------------
 9623|  22.8k|        out = unexpected(in.error());
 9624|  22.8k|    }
 9625|  4.51k|    else {
 9626|  4.51k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  4.51k|    static_cast<    \
  |  |  935|  4.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  4.51k|    }
 9628|  27.3k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  82.0k|    {
 1740|  82.0k|        return has_value();
 1741|  82.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   164k|    {
  490|   164k|        return m_has_value;
  491|   164k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  68.4k|    {
 1746|  68.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  68.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  68.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  68.4k|        return this->get_unexpected().error();
 1748|  68.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  68.4k|    {
  473|  68.4k|        return m_unexpected;
  474|  68.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  22.8k|        : base(unexpect, std::move(e.error())),
 1616|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  22.8k|    {
 1618|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  22.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  22.8k|          m_has_value(false)
  451|  22.8k|    {
  452|  22.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  22.8k|    {
 1316|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1556|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  902|  22.8k|    {
  903|  22.8k|        assign_common(std::move(other));
  904|  22.8k|        return *this;
  905|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  22.8k|    {
  950|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 22.8k, False: 0]
  ------------------
  951|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 22.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  22.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   109k|    {
  490|   109k|        return m_has_value;
  491|   109k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  36.3k|    {
  456|  36.3k|        return m_value;
  457|  36.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  22.8k|    {
 1046|  22.8k|        this->destroy_value();
 1047|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  22.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  22.8k|    {
  504|  22.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  22.8k|                                  std::forward<Args>(args)...);
  506|  22.8k|        m_has_value = false;
  507|  22.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  22.8k|    {
  473|  22.8k|        return m_unexpected;
  474|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  22.8k|    {
  481|  22.8k|        return std::move(m_unexpected);
  482|  22.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6444|  13.5k|    {
 6445|  13.5k|        m_range = std::forward<Other>(r);
 6446|  13.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  13.5k|    {
 1795|  13.5k|        return value();
 1796|  13.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  13.5k|    {
 1769|  13.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  13.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  13.5k|        return this->get_value();
 1771|  13.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  13.5k|    {
  456|  13.5k|        return m_value;
  457|  13.5k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|  38.7k|{
 9398|  38.7k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  38.7k|    auto result = vscan_impl(buffer, format, args);
 9401|  38.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.9k, False: 6.76k]
  |  |  ------------------
  ------------------
 9402|  31.9k|        return unexpected(result.error());
 9403|  31.9k|    }
 9404|  6.76k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  6.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  38.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|  82.0k|{
 5381|  82.0k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  82.0k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  82.0k|                  "\n"
 5385|  82.0k|                  "Unsupported range type given as input to a scanning "
 5386|  82.0k|                  "function.\n"
 5387|  82.0k|                  "A range needs to have a character type (value type) "
 5388|  82.0k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  82.0k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  82.0k|                  "to be included.\n"
 5391|  82.0k|                  "See the scnlib documentation for more details.");
 5392|  82.0k|    static_assert(
 5393|  82.0k|        !std::is_same_v<T, custom_char_traits>,
 5394|  82.0k|        "\n"
 5395|  82.0k|        "Unsupported range type given as input to a scanning "
 5396|  82.0k|        "function.\n"
 5397|  82.0k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  82.0k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  82.0k|        "not supported.");
 5400|  82.0k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  82.0k|                  "\n"
 5402|  82.0k|                  "Unsupported range type given as input to a scanning "
 5403|  82.0k|                  "function.\n"
 5404|  82.0k|                  "file_marker_found cannot be used as an "
 5405|  82.0k|                  "source range type to scn::scan.\n"
 5406|  82.0k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  82.0k|                  "and do not provide an explicit source range, "
 5408|  82.0k|                  "or use scn::scan with a FILE* directly.");
 5409|  82.0k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  82.0k|                  "\n"
 5411|  82.0k|                  "Unsupported range type given as input to a scanning "
 5412|  82.0k|                  "function.\n"
 5413|  82.0k|                  "In order to be scannable, a range needs to satisfy "
 5414|  82.0k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  82.0k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  82.0k|                  "\n"
 5417|  82.0k|                  "Unsupported range type given as input to a scanning "
 5418|  82.0k|                  "function.\n"
 5419|  82.0k|                  "A range needs to model forward_range and have a valid "
 5420|  82.0k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  82.0k|                  "Examples of scannable ranges are std::string, "
 5422|  82.0k|                  "std::string_view, "
 5423|  82.0k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  82.0k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  82.0k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  82.0k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  82.0k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  82.0k|    else {
 5366|  82.0k|        return make_forward_scan_buffer(r);
 5367|  82.0k|    }
 5368|  82.0k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|  82.0k|{
 5185|  82.0k|    return basic_scan_forward_buffer_impl(range);
 5186|  82.0k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  82.0k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  82.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  82.0k|          m_cursor(ranges::begin(*m_range))
 4766|  82.0k|    {
 4767|  82.0k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|  82.0k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  82.0k|    {
 4738|  82.0k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|  82.0k|        : m_current_view(sv), m_is_contiguous(false)
 4428|  82.0k|    {
 4429|  82.0k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   159k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  95.5k|    {
 2869|  95.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  95.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  95.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  95.5k|    {
 2850|  95.5k|        return decay_copy(t.begin());
 2851|  95.5k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|   109k|    {
 3480|   109k|        return m_iterator;
 3481|   109k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|   264k|    {
 4771|   264k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 15.8k, False: 248k]
  ------------------
 4772|  15.8k|            return false;
 4773|  15.8k|        }
 4774|   248k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|   248k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|   248k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   248k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|   248k|        }
 4777|   248k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 170k, False: 77.4k]
  ------------------
 4778|   170k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|   170k|                                          this->m_current_view.begin(),
 4780|   170k|                                          this->m_current_view.end());
 4781|   170k|        }
 4782|   248k|        m_latest = *m_cursor;
 4783|   248k|        ++m_cursor;
 4784|   248k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|   248k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|   248k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|   248k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   248k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|   248k|        }
 4788|   248k|        return true;
 4789|   264k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   760k|    {
 2926|   760k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   760k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   760k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   760k|    {
 2908|   760k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   760k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   760k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|   774k|    {
 3484|   774k|        return m_sentinel;
 3485|   774k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|  82.0k|    {
 4346|  82.0k|        SCN_UNUSED(position);
  ------------------
  |  |  915|  82.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  82.0k|        return true;
 4348|  82.0k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  68.4k|        : base(unexpect, std::move(e.error())),
 1616|  68.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  68.4k|    {
 1618|  68.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  68.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  68.4k|          m_has_value(false)
  451|  68.4k|    {
  452|  68.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  82.0k|    {
 1316|  82.0k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|  13.5k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  13.5k|                      ranges::iterator_t<SourceRange>>) {
 6677|  13.5k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  13.5k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  13.5k|    {
 2869|  13.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  13.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  13.5k|    {
 2850|  13.5k|        return decay_copy(t.begin());
 2851|  13.5k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6661|  13.5k|{
 6662|  13.5k|    return ranges::end(source);
 6663|  13.5k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  13.5k|    {
 2926|  13.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  13.5k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  13.5k|    {
 2908|  13.5k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  13.5k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  13.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  13.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  13.5k|    {
 1572|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  13.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  13.5k|    {
  442|  13.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  25.8k|    {
 8768|  25.8k|        return m_str;
 8769|  25.8k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  95.5k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  95.5k|    static_cast<    \
  |  |  935|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  95.5k|    static_cast<    \
  |  |  935|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  95.5k|    {
 3466|  95.5k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  25.8k|        : m_str(r.str)
 8763|  25.8k|    {
 8764|  25.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  27.3k|    {
 1740|  27.3k|        return has_value();
 1741|  27.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  36.3k|    {
 1815|  36.3k|        return &value();
 1816|  36.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  36.3k|    {
 1769|  36.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  36.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  36.3k|        return this->get_value();
 1771|  36.3k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6433|  13.5k|    {
 6434|  13.5k|        return ranges::begin(m_range);
 6435|  13.5k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|  38.7k|{
 9414|  38.7k|#if !SCN_DISABLE_LOCALE
 9415|  38.7k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  38.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  38.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  38.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  38.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.9k, False: 6.76k]
  |  |  ------------------
  ------------------
 9422|  31.9k|        return unexpected(result.error());
 9423|  31.9k|    }
 9424|  6.76k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  6.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  38.7k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  4.56k|{
 9438|  4.56k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  4.56k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  4.56k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.56k, False: 0]
  |  |  ------------------
  ------------------
 9442|  4.56k|        return unexpected(result.error());
 9443|  4.56k|    }
 9444|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  4.56k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9636|  27.3k|{
 9637|  27.3k|    return scan_result_type<Source, Args...>();
 9638|  27.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  27.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  27.3k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  27.3k|    {
  613|  27.3k|        construct();
  614|  27.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  27.3k|    {
  694|  27.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  27.3k|        m_has_value = true;
  696|  27.3k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  27.3k|{
  396|  27.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  27.3k|        T(std::forward<Args>(args)...);
  398|  27.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6570|  27.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  91.0k|    {
  718|  91.0k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  91.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  91.0k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  27.3k|{
 9622|  27.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.8k, False: 4.51k]
  |  |  ------------------
  ------------------
 9623|  22.8k|        out = unexpected(in.error());
 9624|  22.8k|    }
 9625|  4.51k|    else {
 9626|  4.51k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  4.51k|    static_cast<    \
  |  |  935|  4.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  4.51k|    }
 9628|  27.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  22.8k|        : base(unexpect, std::move(e.error())),
 1616|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  22.8k|    {
 1618|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  22.8k|        : m_has_value(false)
  637|  22.8k|    {
  638|  22.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  22.8k|    {
  701|  22.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.8k|                                  std::forward<Args>(args)...);
  703|  22.8k|        m_has_value = false;
  704|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   114k|    {
  730|   114k|        return reinterpret_cast<unexpected<E>*>(
  731|   114k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   114k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   114k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  22.8k|    {
 1316|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  902|  22.8k|    {
  903|  22.8k|        assign_common(std::move(other));
  904|  22.8k|        return *this;
  905|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  22.8k|    {
  950|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 22.8k, False: 0]
  ------------------
  951|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 22.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  22.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   159k|    {
  687|   159k|        return m_has_value;
  688|   159k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  36.3k|    {
  653|  36.3k|        return *value_ptr();
  654|  36.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  22.8k|    {
 1046|  22.8k|        this->destroy_value();
 1047|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  27.3k|    {
  708|  27.3k|        scn::detail::destroy_at(value_ptr());
  709|  27.3k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  27.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  27.3k|    else {
  408|  27.3k|        p->~T();
  409|  27.3k|    }
  410|  27.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6577|  27.3k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  22.8k|    {
  701|  22.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.8k|                                  std::forward<Args>(args)...);
  703|  22.8k|        m_has_value = false;
  704|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  22.8k|    {
  678|  22.8k|        return std::move(*unexpected_ptr());
  679|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  45.6k|    {
  712|  45.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  45.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  25.8k|    {
 8768|  25.8k|        return m_str;
 8769|  25.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  25.8k|        : m_str(r.str)
 8763|  25.8k|    {
 8764|  25.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  27.3k|    {
 1740|  27.3k|        return has_value();
 1741|  27.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  36.3k|    {
 1815|  36.3k|        return &value();
 1816|  36.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  36.3k|    {
 1769|  36.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  36.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  36.3k|        return this->get_value();
 1771|  36.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  50.1k|    {
  643|  50.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 4.51k, False: 45.6k]
  ------------------
  644|  4.51k|            destroy_value();
  645|  4.51k|        }
  646|  45.6k|        else {
  647|  45.6k|            destroy_unexpected();
  648|  45.6k|        }
  649|  50.1k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9636|  27.3k|{
 9637|  27.3k|    return scan_result_type<Source, Args...>();
 9638|  27.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  27.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  27.3k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  27.3k|    {
  613|  27.3k|        construct();
  614|  27.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  27.3k|    {
  694|  27.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  27.3k|        m_has_value = true;
  696|  27.3k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  27.3k|{
  396|  27.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  27.3k|        T(std::forward<Args>(args)...);
  398|  27.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6570|  27.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  91.0k|    {
  718|  91.0k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  91.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  91.0k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  27.3k|{
 9622|  27.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.8k, False: 4.51k]
  |  |  ------------------
  ------------------
 9623|  22.8k|        out = unexpected(in.error());
 9624|  22.8k|    }
 9625|  4.51k|    else {
 9626|  4.51k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  4.51k|    static_cast<    \
  |  |  935|  4.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  4.51k|    }
 9628|  27.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  22.8k|        : base(unexpect, std::move(e.error())),
 1616|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  22.8k|    {
 1618|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  22.8k|        : m_has_value(false)
  637|  22.8k|    {
  638|  22.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  22.8k|    {
  701|  22.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.8k|                                  std::forward<Args>(args)...);
  703|  22.8k|        m_has_value = false;
  704|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   114k|    {
  730|   114k|        return reinterpret_cast<unexpected<E>*>(
  731|   114k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   114k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   114k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  22.8k|    {
 1316|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  902|  22.8k|    {
  903|  22.8k|        assign_common(std::move(other));
  904|  22.8k|        return *this;
  905|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  22.8k|    {
  950|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 22.8k, False: 0]
  ------------------
  951|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 22.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  22.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   159k|    {
  687|   159k|        return m_has_value;
  688|   159k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  36.3k|    {
  653|  36.3k|        return *value_ptr();
  654|  36.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  22.8k|    {
 1046|  22.8k|        this->destroy_value();
 1047|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  27.3k|    {
  708|  27.3k|        scn::detail::destroy_at(value_ptr());
  709|  27.3k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  27.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  27.3k|    else {
  408|  27.3k|        p->~T();
  409|  27.3k|    }
  410|  27.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6577|  27.3k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  22.8k|    {
  701|  22.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.8k|                                  std::forward<Args>(args)...);
  703|  22.8k|        m_has_value = false;
  704|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  22.8k|    {
  678|  22.8k|        return std::move(*unexpected_ptr());
  679|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  45.6k|    {
  712|  45.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  45.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  25.8k|    {
 8768|  25.8k|        return m_str;
 8769|  25.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  25.8k|        : m_str(r.str)
 8763|  25.8k|    {
 8764|  25.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  27.3k|    {
 1740|  27.3k|        return has_value();
 1741|  27.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  36.3k|    {
 1815|  36.3k|        return &value();
 1816|  36.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  36.3k|    {
 1769|  36.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  36.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  36.3k|        return this->get_value();
 1771|  36.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  50.1k|    {
  643|  50.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 4.51k, False: 45.6k]
  ------------------
  644|  4.51k|            destroy_value();
  645|  4.51k|        }
  646|  45.6k|        else {
  647|  45.6k|            destroy_unexpected();
  648|  45.6k|        }
  649|  50.1k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  1.32M|    {
 3480|  1.32M|        return m_iterator;
 3481|  1.32M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|   902k|    {
 3480|   902k|        return m_iterator;
 3481|   902k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  13.2M|    {
 4473|  13.2M|        assert(m_begin);
 4474|  13.2M|        return m_end == nullptr;
 4475|  13.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|   163k|    {
 4490|   163k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 72.1k, False: 90.9k]
  ------------------
 4491|  72.1k|            return make_string_view_from_pointers(
 4492|  72.1k|                static_cast<const CharT*>(m_begin) + position(),
 4493|  72.1k|                static_cast<const CharT*>(m_end));
 4494|  72.1k|        }
 4495|  90.9k|        return parent()->get_segment_starting_at(position());
 4496|   163k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  7.75M|    {
 4484|  7.75M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  7.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  7.75M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  7.75M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  90.9k|    {
 4377|  90.9k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.9k]
  |  |  ------------------
  ------------------
 4378|  90.9k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|      0|        }
 4381|  90.9k|        const auto start = pos - m_putback_buffer.size();
 4382|  90.9k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  90.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  90.9k|        return m_current_view.substr(start);
 4384|  90.9k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|   243k|    {
 4468|   243k|        return m_position;
 4469|   243k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|   351k|    {
 4399|   351k|        return m_is_contiguous;
 4400|   351k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|  5.22M|    {
 4473|  5.22M|        assert(m_begin);
 4474|  5.22M|        return m_end == nullptr;
 4475|  5.22M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  77.4k|    {
 4490|  77.4k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 77.4k, False: 0]
  ------------------
 4491|  77.4k|            return make_string_view_from_pointers(
 4492|  77.4k|                static_cast<const CharT*>(m_begin) + position(),
 4493|  77.4k|                static_cast<const CharT*>(m_end));
 4494|  77.4k|        }
 4495|      0|        return parent()->get_segment_starting_at(position());
 4496|  77.4k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  2.88M|    {
 4484|  2.88M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  2.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  2.88M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  2.88M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|   104k|    {
 4468|   104k|        return m_position;
 4469|   104k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|   323k|    {
 4399|   323k|        return m_is_contiguous;
 4400|   323k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   218k|    {
 3334|   218k|        return static_cast<D&>(*this);
 3335|   218k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   218k|    {
 3375|   218k|        return detail::to_address(ranges::begin(derived()));
 3376|   218k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   159k|    {
 3334|   159k|        return static_cast<D&>(*this);
 3335|   159k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   159k|    {
 3375|   159k|        return detail::to_address(ranges::begin(derived()));
 3376|   159k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8964|   180k|    {
 8965|   180k|        return ranges::subrange{begin(), end()};
 8966|   180k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8956|   180k|    {
 8957|   180k|        return ranges::default_sentinel;
 8958|   180k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   695k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   695k|    static_cast<    \
  |  |  935|   695k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   695k|    static_cast<    \
  |  |  935|   695k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   695k|    {
 3466|   695k|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8783|   172k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  90.9k|    {
 1979|  90.9k|        return detail::transform_error_impl(std::move(*this),
 1980|  90.9k|                                            std::forward<F>(f));
 1981|  90.9k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  90.9k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  90.9k|    else {
 1472|  90.9k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  90.9k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  90.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 89.5k, False: 1.45k]
  |  |  ------------------
  ------------------
 1474|  90.9k|                   ? result(*std::forward<Exp>(exp))
 1475|  90.9k|                   : result(unexpect,
 1476|  1.45k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.45k|                                           std::forward<Exp>(exp).error()));
 1478|  90.9k|    }
 1479|  90.9k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   181k|    {
  490|   181k|        return m_has_value;
  491|   181k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  89.5k|    {
 1805|  89.5k|        return std::move(value());
 1806|  89.5k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  89.5k|    {
 1769|  89.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  89.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  89.5k|        return this->get_value();
 1771|  89.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  89.5k|    {
  456|  89.5k|        return m_value;
  457|  89.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   247k|        : base(std::in_place, std::forward<U>(val)),
 1570|   247k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   247k|    {
 1572|   247k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   247k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   247k|    {
  442|   247k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   419k|    {
 1316|   419k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  3.79k|{
 1350|  3.79k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  3.79k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  1.45k|    {
 1756|  1.45k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  1.45k|        return std::move(this->get_unexpected().error());
 1758|  1.45k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  1.45k|    {
  473|  1.45k|        return m_unexpected;
  474|  1.45k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  7.58k|    {
  365|  7.58k|        return m_unexpected;
  366|  7.58k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.45k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.45k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.45k|    {
 1628|  1.45k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   131k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   131k|          m_has_value(false)
  451|   131k|    {
  452|   131k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8964|   154k|    {
 8965|   154k|        return ranges::subrange{begin(), end()};
 8966|   154k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8956|   154k|    {
 8957|   154k|        return ranges::default_sentinel;
 8958|   154k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   535k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   535k|    static_cast<    \
  |  |  935|   535k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   535k|    static_cast<    \
  |  |  935|   535k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   535k|    {
 3466|   535k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  77.4k|    {
 1979|  77.4k|        return detail::transform_error_impl(std::move(*this),
 1980|  77.4k|                                            std::forward<F>(f));
 1981|  77.4k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  77.4k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  77.4k|    else {
 1472|  77.4k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  77.4k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  77.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 76.6k, False: 786]
  |  |  ------------------
  ------------------
 1474|  77.4k|                   ? result(*std::forward<Exp>(exp))
 1475|  77.4k|                   : result(unexpect,
 1476|    786|                            trivial_invoke(std::forward<F>(f),
 1477|    786|                                           std::forward<Exp>(exp).error()));
 1478|  77.4k|    }
 1479|  77.4k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   154k|    {
  490|   154k|        return m_has_value;
  491|   154k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  76.6k|    {
 1805|  76.6k|        return std::move(value());
 1806|  76.6k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  76.6k|    {
 1769|  76.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  76.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  76.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  76.6k|        return this->get_value();
 1771|  76.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  76.6k|    {
  456|  76.6k|        return m_value;
  457|  76.6k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   117k|        : base(std::in_place, std::forward<U>(val)),
 1570|   117k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   117k|    {
 1572|   117k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   117k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   117k|    {
  442|   117k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   391k|    {
 1316|   391k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|    786|    {
 1756|    786|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    786|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    786|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    786|        return std::move(this->get_unexpected().error());
 1758|    786|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    786|    {
  473|    786|        return m_unexpected;
  474|    786|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|    786|        : base(unexpect, std::forward<Args>(args)...),
 1626|    786|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    786|    {
 1628|    786|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   261k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   261k|          m_has_value(false)
  451|   261k|    {
  452|   261k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   205k|        : base(unexpect, std::move(e.error())),
 1616|   205k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   205k|    {
 1618|   205k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   205k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   205k|          m_has_value(false)
  451|   205k|    {
  452|   205k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   331k|    {
 1316|   331k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  34.2k|        : base(unexpect, std::move(e.error())),
 1616|  34.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  34.2k|    {
 1618|  34.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  35.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  35.0k|          m_has_value(false)
  451|  35.0k|    {
  452|  35.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   146k|    {
 1316|   146k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   111k|        : base(std::in_place, std::forward<U>(val)),
 1570|   111k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   111k|    {
 1572|   111k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   111k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   111k|    {
  442|   111k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|   146k|    {
 1740|   146k|        return has_value();
 1741|   146k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   293k|    {
  490|   293k|        return m_has_value;
  491|   293k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  35.0k|    {
 1746|  35.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  35.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  35.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  35.0k|        return this->get_unexpected().error();
 1748|  35.0k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  35.0k|    {
  473|  35.0k|        return m_unexpected;
  474|  35.0k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   111k|    {
 1805|   111k|        return std::move(value());
 1806|   111k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   111k|    {
 1769|   111k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   111k|        return this->get_value();
 1771|   111k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   111k|    {
  456|   111k|        return m_value;
  457|   111k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  68.4k|        : base(unexpect, std::move(e.error())),
 1616|  68.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  68.4k|    {
 1618|  68.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  69.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  69.2k|          m_has_value(false)
  451|  69.2k|    {
  452|  69.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   159k|    {
 1316|   159k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  90.1k|        : base(std::in_place, std::forward<U>(val)),
 1570|  90.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  90.1k|    {
 1572|  90.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  90.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  90.1k|    {
  442|  90.1k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|   159k|    {
 1740|   159k|        return has_value();
 1741|   159k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|   318k|    {
  490|   318k|        return m_has_value;
  491|   318k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  69.2k|    {
 1746|  69.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  69.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  69.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  69.2k|        return this->get_unexpected().error();
 1748|  69.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  69.2k|    {
  473|  69.2k|        return m_unexpected;
  474|  69.2k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  90.1k|    {
 1805|  90.1k|        return std::move(value());
 1806|  90.1k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  90.1k|    {
 1769|  90.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  90.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  90.1k|        return this->get_value();
 1771|  90.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  90.1k|    {
  456|  90.1k|        return m_value;
  457|  90.1k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  72.1k|    {
 1979|  72.1k|        return detail::transform_error_impl(std::move(*this),
 1980|  72.1k|                                            std::forward<F>(f));
 1981|  72.1k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  72.1k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  72.1k|    else {
 1472|  72.1k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  72.1k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  72.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 71.4k, False: 768]
  |  |  ------------------
  ------------------
 1474|  72.1k|                   ? result(*std::forward<Exp>(exp))
 1475|  72.1k|                   : result(unexpect,
 1476|    768|                            trivial_invoke(std::forward<F>(f),
 1477|    768|                                           std::forward<Exp>(exp).error()));
 1478|  72.1k|    }
 1479|  72.1k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   144k|    {
  490|   144k|        return m_has_value;
  491|   144k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  71.4k|    {
 1805|  71.4k|        return std::move(value());
 1806|  71.4k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  71.4k|    {
 1769|  71.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  71.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  71.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  71.4k|        return this->get_value();
 1771|  71.4k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  71.4k|    {
  456|  71.4k|        return m_value;
  457|  71.4k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|    768|    {
 1756|    768|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    768|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    768|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    768|        return std::move(this->get_unexpected().error());
 1758|    768|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    768|    {
  473|    768|        return m_unexpected;
  474|    768|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    768|        : base(unexpect, std::forward<Args>(args)...),
 1626|    768|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    768|    {
 1628|    768|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8948|   705k|    {
 8949|   705k|        return m_current;
 8950|   705k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8836|   144k|    {
 8837|   144k|        return m_args;
 8838|   144k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8841|   305k|    {
 8842|   305k|        return m_locale;
 8843|   305k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8847|   312k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   312k|    static_cast<    \
  |  |  935|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   312k|    static_cast<    \
  |  |  935|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   312k|    {
 8849|   312k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   144k|    {
 3000|   144k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   144k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   144k|    {
 2981|   144k|        return t.data();
 2982|   144k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  72.1k|    {
 3075|  72.1k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  72.1k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  72.1k|    {
 3041|  72.1k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  72.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  72.1k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   130k|        : base(unexpect, std::move(e.error())),
 1616|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   130k|    {
 1618|   130k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  40.2k|        : base(std::in_place, std::forward<U>(val)),
 1570|  40.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  40.2k|    {
 1572|  40.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  40.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  40.2k|    {
  442|  40.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8948|   518k|    {
 8949|   518k|        return m_current;
 8950|   518k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8836|   154k|    {
 8837|   154k|        return m_args;
 8838|   154k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8841|   308k|    {
 8842|   308k|        return m_locale;
 8843|   308k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8847|   318k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   318k|    static_cast<    \
  |  |  935|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   318k|    static_cast<    \
  |  |  935|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   318k|    {
 8849|   318k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   154k|    {
 3000|   154k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   154k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   154k|    {
 2981|   154k|        return t.data();
 2982|   154k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  77.4k|    {
 3075|  77.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  77.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  77.4k|    {
 3041|  77.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  77.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  77.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   260k|        : base(unexpect, std::move(e.error())),
 1616|   260k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   260k|    {
 1618|   260k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  13.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  13.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  13.5k|    {
 1572|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  13.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  13.5k|    {
  442|  13.5k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   481k|    {
 4559|   481k|        return x.is_at_end();
 4560|   481k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  1.35M|    {
 4603|  1.35M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 1.35M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  1.35M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 1.35M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  1.35M|        return !read_at_position();
 4610|  1.35M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  3.97M|    {
 4583|  3.97M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  3.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  3.97M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 3.97M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  3.97M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  3.97M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.15M, False: 820k]
  |  |  ------------------
  ------------------
 4590|  3.15M|            return true;
 4591|  3.15M|        }
 4592|       |
 4593|  1.62M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 820k, False: 807k]
  ------------------
 4594|   820k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 12.8k, False: 807k]
  ------------------
 4595|  12.8k|                return false;
 4596|  12.8k|            }
 4597|   820k|        }
 4598|   807k|        return true;
 4599|   820k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  1.23M|    {
 4518|  1.23M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  1.23M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 1.23M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  1.23M|        auto res = read_at_position();
 4527|  1.23M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  1.23M|        return parent()->get_character_at(m_position);
 4529|  1.23M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  1.23M|    {
 4388|  1.23M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 358k, False: 878k]
  |  |  ------------------
  ------------------
 4389|  1.23M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   358k|            return m_putback_buffer[pos];
 4391|   358k|        }
 4392|   878k|        const auto start = pos - m_putback_buffer.size();
 4393|   878k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|   878k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   878k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|   878k|        return m_current_view[start];
 4395|   878k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  89.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  89.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  89.5k|    {
 1572|  89.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  89.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  89.5k|    {
  442|  89.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  90.9k|    {
 1316|  90.9k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  1.45k|        : base(unexpect, std::move(e.error())),
 1616|  1.45k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.45k|    {
 1618|  1.45k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.45k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.45k|          m_has_value(false)
  451|  1.45k|    {
  452|  1.45k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  3.79k|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.79k|    {
  360|  3.79k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.79k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  1.38M|    {
 4504|  1.38M|        ++m_position;
 4505|  1.38M|        (void)read_at_position();
 4506|  1.38M|        return *this;
 4507|  1.38M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|   629k|    {
 4553|   629k|        return !(lhs == rhs);
 4554|   629k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|   629k|    {
 4548|   629k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 629k, False: 0]
  |  Branch (4548:46): [True: 66.5k, False: 563k]
  ------------------
 4549|   629k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  3.79k|        : m_unexpected(std::forward<Err>(e))
  350|  3.79k|    {
  351|  3.79k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.79k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  1.70M|    {
 3484|  1.70M|        return m_sentinel;
 3485|  1.70M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|   875k|    {
 4570|   875k|        return !x.is_at_end();
 4571|   875k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    768|        : base(unexpect, std::move(e.error())),
 1616|    768|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    768|    {
 1618|    768|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    768|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    768|          m_has_value(false)
  451|    768|    {
  452|    768|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  72.1k|    {
 1316|  72.1k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  71.4k|        : base(std::in_place, std::forward<U>(val)),
 1570|  71.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  71.4k|    {
 1572|  71.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  71.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  71.4k|    {
  442|  71.4k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   216k|    {
 3000|   216k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   216k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   216k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   216k|    {
 2981|   216k|        return t.data();
 2982|   216k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|   126k|        : base(std::in_place, std::forward<U>(val)),
 1570|   126k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   126k|    {
 1572|   126k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|   126k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   126k|    {
  442|   126k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  99.2k|    {
 1795|  99.2k|        return value();
 1796|  99.2k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|  89.5k|    {
 2869|  89.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  89.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  89.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|  89.5k|    {
 2850|  89.5k|        return decay_copy(t.begin());
 2851|  89.5k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|  89.5k|{
 2094|  89.5k|    return SCN_FWD(t);
  ------------------
  |  |  936|  89.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  89.5k|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  72.1k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  72.1k|    static_cast<    \
  |  |  935|  72.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  72.1k|    {
 3912|  72.1k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  90.9k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  90.9k|    static_cast<    \
  |  |  935|  90.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  90.9k|    {
 3912|  90.9k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   336k|    {
 4559|   336k|        return x.is_at_end();
 4560|   336k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|   649k|    {
 4603|   649k|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 649k]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|   649k|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 649k]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|   649k|        return !read_at_position();
 4610|   649k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  1.53M|    {
 4583|  1.53M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  1.53M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 1.53M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  1.53M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  1.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.27M, False: 264k]
  |  |  ------------------
  ------------------
 4590|  1.27M|            return true;
 4591|  1.27M|        }
 4592|       |
 4593|   512k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 264k, False: 248k]
  ------------------
 4594|   264k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 15.8k, False: 248k]
  ------------------
 4595|  15.8k|                return false;
 4596|  15.8k|            }
 4597|   264k|        }
 4598|   248k|        return true;
 4599|   264k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  2.05M|    {
 4357|  2.05M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  2.05M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|   570k|    {
 4518|   570k|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   570k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   570k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|   570k|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 570k]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|   570k|        auto res = read_at_position();
 4527|   570k|        SCN_EXPECT(res);
  ------------------
  |  |  930|   570k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   570k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|   570k|        return parent()->get_character_at(m_position);
 4529|   570k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|   570k|    {
 4388|   570k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   570k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 320k, False: 250k]
  |  |  ------------------
  ------------------
 4389|   570k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   320k|            return m_putback_buffer[pos];
 4391|   320k|        }
 4392|   250k|        const auto start = pos - m_putback_buffer.size();
 4393|   250k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|   250k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   250k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|   250k|        return m_current_view[start];
 4395|   250k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  76.6k|        : base(std::in_place, std::forward<U>(val)),
 1570|  76.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  76.6k|    {
 1572|  76.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  76.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  76.6k|    {
  442|  76.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  77.4k|    {
 1316|  77.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|    786|        : base(unexpect, std::move(e.error())),
 1616|    786|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    786|    {
 1618|    786|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|    786|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    786|          m_has_value(false)
  451|    786|    {
  452|    786|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|   318k|    {
 4504|   318k|        ++m_position;
 4505|   318k|        (void)read_at_position();
 4506|   318k|        return *this;
 4507|   318k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  98.1k|    {
 4553|  98.1k|        return !(lhs == rhs);
 4554|  98.1k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  98.1k|    {
 4548|  98.1k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 98.1k, False: 0]
  |  Branch (4548:46): [True: 13.5k, False: 84.6k]
  ------------------
 4549|  98.1k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|   872k|    {
 3484|   872k|        return m_sentinel;
 3485|   872k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|   313k|    {
 4570|   313k|        return !x.is_at_end();
 4571|   313k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    786|        : base(unexpect, std::move(e.error())),
 1616|    786|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    786|    {
 1618|    786|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    786|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    786|          m_has_value(false)
  451|    786|    {
  452|    786|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  77.4k|    {
 1316|  77.4k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  76.6k|        : base(std::in_place, std::forward<U>(val)),
 1570|  76.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  76.6k|    {
 1572|  76.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  76.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  76.6k|    {
  442|  76.6k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   154k|    {
  490|   154k|        return m_has_value;
  491|   154k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  76.6k|    {
 1769|  76.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  76.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  76.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  76.6k|        return this->get_value();
 1771|  76.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  76.6k|    {
  456|  76.6k|        return m_value;
  457|  76.6k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  77.4k|    {
 1979|  77.4k|        return detail::transform_error_impl(std::move(*this),
 1980|  77.4k|                                            std::forward<F>(f));
 1981|  77.4k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  77.4k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  77.4k|    else {
 1472|  77.4k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  77.4k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  77.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 76.6k, False: 786]
  |  |  ------------------
  ------------------
 1474|  77.4k|                   ? result(*std::forward<Exp>(exp))
 1475|  77.4k|                   : result(unexpect,
 1476|    786|                            trivial_invoke(std::forward<F>(f),
 1477|    786|                                           std::forward<Exp>(exp).error()));
 1478|  77.4k|    }
 1479|  77.4k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  76.6k|    {
 1805|  76.6k|        return std::move(value());
 1806|  76.6k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|    786|    {
 1756|    786|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    786|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    786|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    786|        return std::move(this->get_unexpected().error());
 1758|    786|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    786|    {
  473|    786|        return m_unexpected;
  474|    786|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    786|        : base(unexpect, std::forward<Args>(args)...),
 1626|    786|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    786|    {
 1628|    786|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   154k|    {
 3000|   154k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   154k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   154k|    {
 2981|   154k|        return t.data();
 2982|   154k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  27.0k|    {
 1795|  27.0k|        return value();
 1796|  27.0k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|  76.6k|    {
 2869|  76.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  76.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  76.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|  76.6k|    {
 2850|  76.6k|        return decay_copy(t.begin());
 2851|  76.6k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|  76.6k|{
 2094|  76.6k|    return SCN_FWD(t);
  ------------------
  |  |  936|  76.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  76.6k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  77.4k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  77.4k|    static_cast<    \
  |  |  935|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  77.4k|    {
 3912|  77.4k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  77.4k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  77.4k|    static_cast<    \
  |  |  935|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  77.4k|    {
 3912|  77.4k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  5.60M|    {
 4357|  5.60M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  5.60M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6176|   163k|    {
 6177|   163k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   163k|        return static_cast<std::size_t>(m_desc &
 6182|   163k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   163k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6202|   326k|    {
 6203|   326k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   326k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6144|   163k|    {
 6145|   163k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   163k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|   163k|        const auto t = type(id);
 6157|   163k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   163k|        basic_scan_arg<Context> arg;
 6162|   163k|        arg.m_type = t;
 6163|   163k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 0, False: 163k]
  ------------------
 6164|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6165|      0|        }
 6166|   163k|        else {
 6167|   163k|            arg.m_value = m_values[id];
 6168|   163k|        }
 6169|   163k|        return arg;
 6170|   163k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6211|   163k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   163k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   163k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   163k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   163k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6206|   163k|    {
 6207|   163k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   163k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5960|   330k|    {
 5961|   330k|        return m_type != detail::arg_type::none_type;
 5962|   330k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  2.28k|{
 9300|  2.28k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  2.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  2.28k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  2.28k|{
 9201|  2.28k|#define SCN_VISIT(Type)                                                \
 9202|  2.28k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  2.28k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  2.28k|    }                                                                  \
 9205|  2.28k|    else {                                                             \
 9206|  2.28k|        return vis(monostate_val);                                     \
 9207|  2.28k|    }
 9208|       |
 9209|  2.28k|    monostate monostate_val{};
 9210|       |
 9211|  2.28k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 2.28k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 2.28k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 2.28k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 2.28k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 2.28k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 2.28k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 2.28k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 2.28k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 2.28k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 2.28k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 2.28k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 2.28k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 2.28k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 2.28k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 2.28k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 2.28k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 2.28k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 2.28k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 2.28k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 2.28k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 2.28k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 2.28k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 2.28k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 2.28k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|  2.28k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 2.28k, False: 0]
  ------------------
 9262|  2.28k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  2.28k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  2.28k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 2.28k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 2.28k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  2.28k|            SCN_CLANG_POP
 9279|  2.28k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|   330k|{
 6006|   330k|    return arg.m_type;
 6007|   330k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   167k|{
 6018|   167k|    return arg.m_value;
 6019|   167k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 6256|   167k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   167k|    {
 6258|   167k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2ENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEl:
 4460|  74.4k|        : m_begin(const_cast<CharT*>(view.data())),
 4461|  74.4k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4462|  74.4k|          m_position(pos)
 4463|  74.4k|    {
 4464|  74.4k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   167k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   167k|    static_cast<    \
  |  |  935|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   167k|    {
 8934|   167k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handle4scanERNS0_24basic_scan_parse_contextIcEERS5_:
 5938|   167k|        {
 5939|   167k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5940|   167k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handleC2ENS3_17custom_value_typeE:
 5943|   167k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   165k|{
 4691|   165k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 72.1k, False: 93.2k]
  ------------------
 4692|  72.1k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|  72.1k|                                ranges::default_sentinel};
 4694|  72.1k|    }
 4695|  93.2k|    return ranges::subrange{forward_iterator{this, 0},
 4696|  93.2k|                            ranges::default_sentinel};
 4697|   165k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|  93.2k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  93.2k|    {
 4455|  93.2k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  93.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  93.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  93.2k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  93.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  93.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  93.2k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|  2.28k|{
 9300|  2.28k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  2.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  2.28k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  2.28k|{
 9201|  2.28k|#define SCN_VISIT(Type)                                                \
 9202|  2.28k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  2.28k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  2.28k|    }                                                                  \
 9205|  2.28k|    else {                                                             \
 9206|  2.28k|        return vis(monostate_val);                                     \
 9207|  2.28k|    }
 9208|       |
 9209|  2.28k|    monostate monostate_val{};
 9210|       |
 9211|  2.28k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 2.28k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 2.28k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 2.28k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 2.28k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 2.28k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 2.28k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 2.28k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 2.28k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 2.28k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 2.28k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 2.28k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 2.28k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 2.28k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 2.28k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 2.28k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 2.28k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 2.28k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 2.28k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 2.28k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 2.28k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 2.28k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 2.28k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 2.28k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 2.28k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|  2.28k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 2.28k, False: 0]
  ------------------
 9262|  2.28k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  2.28k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  2.28k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 2.28k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 2.28k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  2.28k|            SCN_CLANG_POP
 9279|  2.28k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  72.1k|    {
 3075|  72.1k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  72.1k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  72.1k|    {
 3041|  72.1k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  72.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  72.1k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  72.1k|{
 7793|  72.1k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  72.1k|    handler.check_args_exhausted();
 7795|  72.1k|    return handler.get_error();
 7796|  72.1k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  72.1k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  72.1k|    auto begin = format.data();
 7761|  72.1k|    auto it = begin;
 7762|  72.1k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   112k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 72.1k, False: 40.2k]
  ------------------
 7765|  72.1k|        const auto ch = *it++;
 7766|  72.1k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 72.1k, False: 0]
  ------------------
 7767|  72.1k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  72.1k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  72.1k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 31.9k, False: 40.2k]
  ------------------
 7771|  31.9k|                return;
 7772|  31.9k|            }
 7773|  72.1k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  72.1k|    }
 7784|       |
 7785|  40.2k|    handler.on_literal_text(begin, end);
 7786|  40.2k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7689|  72.1k|{
 7690|  72.1k|    struct id_adapter {
 7691|  72.1k|        constexpr void operator()()
 7692|  72.1k|        {
 7693|  72.1k|            arg_id = handler.on_arg_id();
 7694|  72.1k|        }
 7695|  72.1k|        constexpr void operator()(std::size_t id)
 7696|  72.1k|        {
 7697|  72.1k|            arg_id = handler.on_arg_id(id);
 7698|  72.1k|        }
 7699|       |
 7700|  72.1k|        constexpr void on_error(const char* msg)
 7701|  72.1k|        {
 7702|  72.1k|            SCN_UNLIKELY_ATTR
 7703|  72.1k|            handler.on_error(msg);
 7704|  72.1k|        }
 7705|       |
 7706|  72.1k|        Handler& handler;
 7707|  72.1k|        std::size_t arg_id;
 7708|  72.1k|    };
 7709|       |
 7710|  72.1k|    ++begin;
 7711|  72.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.1k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  72.1k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 72.1k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  72.1k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 72.1k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  72.1k|    else {
 7723|  72.1k|        auto adapter = id_adapter{handler, 0};
 7724|  72.1k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  72.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.1k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  72.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 72.1k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  72.1k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 72.1k, False: 0]
  ------------------
 7735|  72.1k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.1k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  72.1k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  72.1k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.1k]
  |  |  |  Branch (865:45): [True: 0, False: 72.1k]
  |  |  |  Branch (865:45): [True: 0, False: 72.1k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|  72.1k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  72.1k|    }
 7751|  72.1k|    return begin + 1;
 7752|  72.1k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8831|   163k|    {
 8832|   163k|        return m_args.get(id);
 8833|   163k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6285|   163k|    {
 6286|   163k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   163k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   163k|        do_check_arg_id(id);
 6294|   163k|        return id;
 6295|   163k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6805|   163k|{
 6806|   163k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   163k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   163k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  72.1k|{
 7191|  72.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  72.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  72.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  72.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 72.1k, False: 0]
  |  Branch (7192:26): [True: 0, False: 72.1k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  72.1k|    handler();
 7197|  72.1k|    return begin;
 7198|  72.1k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  72.1k|        {
 7693|  72.1k|            arg_id = handler.on_arg_id();
 7694|  72.1k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9299|   163k|{
 9300|   163k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   163k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   163k|{
 9201|   163k|#define SCN_VISIT(Type)                                                \
 9202|   163k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   163k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   163k|    }                                                                  \
 9205|   163k|    else {                                                             \
 9206|   163k|        return vis(monostate_val);                                     \
 9207|   163k|    }
 9208|       |
 9209|   163k|    monostate monostate_val{};
 9210|       |
 9211|   163k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 163k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 163k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 163k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 163k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 163k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 163k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 163k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 163k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 163k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 163k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 163k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 163k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 163k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 163k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 163k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 163k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 163k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 163k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 163k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 163k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 163k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 163k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 163k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 163k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|   163k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 163k, False: 0]
  ------------------
 9262|   163k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   163k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   163k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 163k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 163k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   163k|            SCN_CLANG_POP
 9279|   163k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4716|  72.1k|        : base(typename base::contiguous_tag{}, sv)
 4717|  72.1k|    {
 4718|  72.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4421|  72.1k|        : m_current_view(sv), m_is_contiguous(true)
 4422|  72.1k|    {
 4423|  72.1k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   144k|    {
 3000|   144k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   144k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2990|   144k|    {
 2991|   144k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  |  936|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2992|   144k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   144k|    {
 2869|   144k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   144k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   144k|    {
 2850|   144k|        return decay_copy(t.begin());
 2851|   144k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3074|  72.1k|    {
 3075|  72.1k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  72.1k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  72.1k|    {
 3041|  72.1k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  72.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  72.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator16batch_advance_toEl:
 4539|  72.1k|    {
 4540|  72.1k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  |  930|  72.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  72.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|  72.1k|        m_position = i;
 4542|  72.1k|        return *this;
 4543|  72.1k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  90.9k|{
 7793|  90.9k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  90.9k|    handler.check_args_exhausted();
 7795|  90.9k|    return handler.get_error();
 7796|  90.9k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  90.9k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  90.9k|    auto begin = format.data();
 7761|  90.9k|    auto it = begin;
 7762|  90.9k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   149k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 90.9k, False: 59.0k]
  ------------------
 7765|  90.9k|        const auto ch = *it++;
 7766|  90.9k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 90.9k, False: 0]
  ------------------
 7767|  90.9k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  90.9k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  90.9k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 31.9k, False: 59.0k]
  ------------------
 7771|  31.9k|                return;
 7772|  31.9k|            }
 7773|  90.9k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  90.9k|    }
 7784|       |
 7785|  59.0k|    handler.on_literal_text(begin, end);
 7786|  59.0k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7689|  90.9k|{
 7690|  90.9k|    struct id_adapter {
 7691|  90.9k|        constexpr void operator()()
 7692|  90.9k|        {
 7693|  90.9k|            arg_id = handler.on_arg_id();
 7694|  90.9k|        }
 7695|  90.9k|        constexpr void operator()(std::size_t id)
 7696|  90.9k|        {
 7697|  90.9k|            arg_id = handler.on_arg_id(id);
 7698|  90.9k|        }
 7699|       |
 7700|  90.9k|        constexpr void on_error(const char* msg)
 7701|  90.9k|        {
 7702|  90.9k|            SCN_UNLIKELY_ATTR
 7703|  90.9k|            handler.on_error(msg);
 7704|  90.9k|        }
 7705|       |
 7706|  90.9k|        Handler& handler;
 7707|  90.9k|        std::size_t arg_id;
 7708|  90.9k|    };
 7709|       |
 7710|  90.9k|    ++begin;
 7711|  90.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.9k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  90.9k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 90.9k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  90.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 90.9k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  90.9k|    else {
 7723|  90.9k|        auto adapter = id_adapter{handler, 0};
 7724|  90.9k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  90.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.9k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  90.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 90.9k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  90.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 90.9k, False: 0]
  ------------------
 7735|  90.9k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.9k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  90.9k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  90.9k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.9k]
  |  |  |  Branch (865:45): [True: 0, False: 90.9k]
  |  |  |  Branch (865:45): [True: 0, False: 90.9k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|  90.9k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  90.9k|    }
 7751|  90.9k|    return begin + 1;
 7752|  90.9k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  90.9k|{
 7191|  90.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  90.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  90.9k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 90.9k, False: 0]
  |  Branch (7192:26): [True: 0, False: 90.9k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  90.9k|    handler();
 7197|  90.9k|    return begin;
 7198|  90.9k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  90.9k|        {
 7693|  90.9k|            arg_id = handler.on_arg_id();
 7694|  90.9k|        }
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  34.2k|    {
 4352|  34.2k|        return sync(0);
 4353|  34.2k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6176|   154k|    {
 6177|   154k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   154k|        return static_cast<std::size_t>(m_desc &
 6182|   154k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   154k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6202|   309k|    {
 6203|   309k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   309k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6144|   154k|    {
 6145|   154k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   154k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|   154k|        const auto t = type(id);
 6157|   154k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   154k|        basic_scan_arg<Context> arg;
 6162|   154k|        arg.m_type = t;
 6163|   154k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 0, False: 154k]
  ------------------
 6164|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6165|      0|        }
 6166|   154k|        else {
 6167|   154k|            arg.m_value = m_values[id];
 6168|   154k|        }
 6169|   154k|        return arg;
 6170|   154k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6211|   154k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   154k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   154k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   154k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   154k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6206|   154k|    {
 6207|   154k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   154k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5960|   318k|    {
 5961|   318k|        return m_type != detail::arg_type::none_type;
 5962|   318k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|  4.56k|{
 9300|  4.56k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  4.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  4.56k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  4.56k|{
 9201|  4.56k|#define SCN_VISIT(Type)                                                \
 9202|  4.56k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  4.56k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  4.56k|    }                                                                  \
 9205|  4.56k|    else {                                                             \
 9206|  4.56k|        return vis(monostate_val);                                     \
 9207|  4.56k|    }
 9208|       |
 9209|  4.56k|    monostate monostate_val{};
 9210|       |
 9211|  4.56k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 4.56k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 4.56k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 4.56k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 4.56k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 4.56k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 4.56k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 4.56k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 4.56k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 4.56k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 4.56k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 4.56k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 4.56k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 4.56k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 4.56k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 4.56k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 4.56k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 4.56k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 4.56k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 4.56k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 4.56k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 4.56k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 4.56k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 4.56k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 4.56k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|  4.56k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 4.56k, False: 0]
  ------------------
 9262|  4.56k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  4.56k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  4.56k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 4.56k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 4.56k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  4.56k|            SCN_CLANG_POP
 9279|  4.56k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|   318k|{
 6006|   318k|    return arg.m_type;
 6007|   318k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   164k|{
 6018|   164k|    return arg.m_value;
 6019|   164k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 6256|   164k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   164k|    {
 6258|   164k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2ENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEl:
 4460|  82.0k|        : m_begin(const_cast<CharT*>(view.data())),
 4461|  82.0k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4462|  82.0k|          m_position(pos)
 4463|  82.0k|    {
 4464|  82.0k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   164k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   164k|    static_cast<    \
  |  |  935|   164k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   164k|    {
 8934|   164k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handle4scanERNS0_24basic_scan_parse_contextIwEERS5_:
 5938|   164k|        {
 5939|   164k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5940|   164k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handleC2ENS3_17custom_value_typeE:
 5943|   164k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  77.4k|    {
 3075|  77.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  77.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  77.4k|    {
 3041|  77.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  77.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  77.4k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  77.4k|{
 7793|  77.4k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  77.4k|    handler.check_args_exhausted();
 7795|  77.4k|    return handler.get_error();
 7796|  77.4k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  77.4k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  77.4k|    auto begin = format.data();
 7761|  77.4k|    auto it = begin;
 7762|  77.4k|    const auto end = format.data() + format.size();
 7763|       |
 7764|  90.9k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 77.4k, False: 13.5k]
  ------------------
 7765|  77.4k|        const auto ch = *it++;
 7766|  77.4k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 77.4k, False: 0]
  ------------------
 7767|  77.4k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  77.4k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  77.4k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 63.9k, False: 13.5k]
  ------------------
 7771|  63.9k|                return;
 7772|  63.9k|            }
 7773|  77.4k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  77.4k|    }
 7784|       |
 7785|  13.5k|    handler.on_literal_text(begin, end);
 7786|  13.5k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7689|  77.4k|{
 7690|  77.4k|    struct id_adapter {
 7691|  77.4k|        constexpr void operator()()
 7692|  77.4k|        {
 7693|  77.4k|            arg_id = handler.on_arg_id();
 7694|  77.4k|        }
 7695|  77.4k|        constexpr void operator()(std::size_t id)
 7696|  77.4k|        {
 7697|  77.4k|            arg_id = handler.on_arg_id(id);
 7698|  77.4k|        }
 7699|       |
 7700|  77.4k|        constexpr void on_error(const char* msg)
 7701|  77.4k|        {
 7702|  77.4k|            SCN_UNLIKELY_ATTR
 7703|  77.4k|            handler.on_error(msg);
 7704|  77.4k|        }
 7705|       |
 7706|  77.4k|        Handler& handler;
 7707|  77.4k|        std::size_t arg_id;
 7708|  77.4k|    };
 7709|       |
 7710|  77.4k|    ++begin;
 7711|  77.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 77.4k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  77.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 77.4k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  77.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 77.4k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  77.4k|    else {
 7723|  77.4k|        auto adapter = id_adapter{handler, 0};
 7724|  77.4k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  77.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 77.4k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  77.4k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 77.4k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  77.4k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 77.4k, False: 0]
  ------------------
 7735|  77.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 77.4k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  77.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  77.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 77.4k]
  |  |  |  Branch (865:45): [True: 0, False: 77.4k]
  |  |  |  Branch (865:45): [True: 0, False: 77.4k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|  77.4k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  77.4k|    }
 7751|  77.4k|    return begin + 1;
 7752|  77.4k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8831|   154k|    {
 8832|   154k|        return m_args.get(id);
 8833|   154k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6285|   154k|    {
 6286|   154k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   154k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   154k|        do_check_arg_id(id);
 6294|   154k|        return id;
 6295|   154k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6805|   154k|{
 6806|   154k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   154k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   154k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  77.4k|{
 7191|  77.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  77.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  77.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  77.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 77.4k, False: 0]
  |  Branch (7192:26): [True: 0, False: 77.4k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  77.4k|    handler();
 7197|  77.4k|    return begin;
 7198|  77.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  77.4k|        {
 7693|  77.4k|            arg_id = handler.on_arg_id();
 7694|  77.4k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9299|   154k|{
 9300|   154k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   154k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   154k|{
 9201|   154k|#define SCN_VISIT(Type)                                                \
 9202|   154k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   154k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   154k|    }                                                                  \
 9205|   154k|    else {                                                             \
 9206|   154k|        return vis(monostate_val);                                     \
 9207|   154k|    }
 9208|       |
 9209|   154k|    monostate monostate_val{};
 9210|       |
 9211|   154k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 154k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 154k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 154k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 154k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 154k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 154k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 154k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 154k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 154k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 154k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 154k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 154k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 154k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 154k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 154k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 154k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 154k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 154k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 154k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 154k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 154k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 154k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 154k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 154k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|   154k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 154k, False: 0]
  ------------------
 9262|   154k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   154k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   154k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 154k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 154k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   154k|            SCN_CLANG_POP
 9279|   154k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4716|  77.4k|        : base(typename base::contiguous_tag{}, sv)
 4717|  77.4k|    {
 4718|  77.4k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4421|  77.4k|        : m_current_view(sv), m_is_contiguous(true)
 4422|  77.4k|    {
 4423|  77.4k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   154k|    {
 3000|   154k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   154k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2990|   154k|    {
 2991|   154k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2992|   154k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   154k|    {
 2869|   154k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   154k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   154k|    {
 2850|   154k|        return decay_copy(t.begin());
 2851|   154k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3074|  77.4k|    {
 3075|  77.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  77.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  77.4k|    {
 3041|  77.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  77.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  77.4k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   159k|{
 4691|   159k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 77.4k, False: 82.0k]
  ------------------
 4692|  77.4k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|  77.4k|                                ranges::default_sentinel};
 4694|  77.4k|    }
 4695|  82.0k|    return ranges::subrange{forward_iterator{this, 0},
 4696|  82.0k|                            ranges::default_sentinel};
 4697|   159k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|  82.0k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  82.0k|    {
 4455|  82.0k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  82.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  82.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  82.0k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  82.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  82.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  82.0k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator16batch_advance_toEl:
 4539|  77.4k|    {
 4540|  77.4k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  |  930|  77.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  77.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|  77.4k|        m_position = i;
 4542|  77.4k|        return *this;
 4543|  77.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|  4.56k|{
 9300|  4.56k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  4.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  4.56k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  4.56k|{
 9201|  4.56k|#define SCN_VISIT(Type)                                                \
 9202|  4.56k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  4.56k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  4.56k|    }                                                                  \
 9205|  4.56k|    else {                                                             \
 9206|  4.56k|        return vis(monostate_val);                                     \
 9207|  4.56k|    }
 9208|       |
 9209|  4.56k|    monostate monostate_val{};
 9210|       |
 9211|  4.56k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 4.56k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 4.56k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 4.56k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 4.56k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 4.56k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 4.56k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 4.56k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 4.56k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 4.56k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 4.56k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 4.56k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 4.56k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 4.56k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 4.56k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 4.56k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 4.56k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 4.56k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 4.56k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 4.56k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 4.56k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 4.56k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 4.56k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 4.56k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 4.56k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|  4.56k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 4.56k, False: 0]
  ------------------
 9262|  4.56k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  4.56k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  4.56k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 4.56k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 4.56k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  4.56k|            SCN_CLANG_POP
 9279|  4.56k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  77.4k|{
 7793|  77.4k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  77.4k|    handler.check_args_exhausted();
 7795|  77.4k|    return handler.get_error();
 7796|  77.4k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  77.4k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  77.4k|    auto begin = format.data();
 7761|  77.4k|    auto it = begin;
 7762|  77.4k|    const auto end = format.data() + format.size();
 7763|       |
 7764|  90.9k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 77.4k, False: 13.5k]
  ------------------
 7765|  77.4k|        const auto ch = *it++;
 7766|  77.4k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 77.4k, False: 0]
  ------------------
 7767|  77.4k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  77.4k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  77.4k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 63.9k, False: 13.5k]
  ------------------
 7771|  63.9k|                return;
 7772|  63.9k|            }
 7773|  77.4k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  77.4k|    }
 7784|       |
 7785|  13.5k|    handler.on_literal_text(begin, end);
 7786|  13.5k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7689|  77.4k|{
 7690|  77.4k|    struct id_adapter {
 7691|  77.4k|        constexpr void operator()()
 7692|  77.4k|        {
 7693|  77.4k|            arg_id = handler.on_arg_id();
 7694|  77.4k|        }
 7695|  77.4k|        constexpr void operator()(std::size_t id)
 7696|  77.4k|        {
 7697|  77.4k|            arg_id = handler.on_arg_id(id);
 7698|  77.4k|        }
 7699|       |
 7700|  77.4k|        constexpr void on_error(const char* msg)
 7701|  77.4k|        {
 7702|  77.4k|            SCN_UNLIKELY_ATTR
 7703|  77.4k|            handler.on_error(msg);
 7704|  77.4k|        }
 7705|       |
 7706|  77.4k|        Handler& handler;
 7707|  77.4k|        std::size_t arg_id;
 7708|  77.4k|    };
 7709|       |
 7710|  77.4k|    ++begin;
 7711|  77.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 77.4k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  77.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 77.4k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  77.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 77.4k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  77.4k|    else {
 7723|  77.4k|        auto adapter = id_adapter{handler, 0};
 7724|  77.4k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  77.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 77.4k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  77.4k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 77.4k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  77.4k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 77.4k, False: 0]
  ------------------
 7735|  77.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 77.4k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  77.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  77.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 77.4k]
  |  |  |  Branch (865:45): [True: 0, False: 77.4k]
  |  |  |  Branch (865:45): [True: 0, False: 77.4k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|  77.4k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  77.4k|    }
 7751|  77.4k|    return begin + 1;
 7752|  77.4k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  77.4k|{
 7191|  77.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  77.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  77.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  77.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 77.4k, False: 0]
  |  Branch (7192:26): [True: 0, False: 77.4k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  77.4k|    handler();
 7197|  77.4k|    return begin;
 7198|  77.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  77.4k|        {
 7693|  77.4k|            arg_id = handler.on_arg_id();
 7694|  77.4k|        }
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|  68.4k|    {
 4352|  68.4k|        return sync(0);
 4353|  68.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6130|  4.56k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6130|  9.13k|    constexpr basic_scan_args() = default;
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2925|   105k|    {
 2926|   105k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   105k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2907|   105k|    {
 2908|   105k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   105k|    }
_ZN3scn2v46ranges6detail10decay_copyINS1_18default_sentinel_tEEEu7__decayIT_EOS5_:
 2093|   182k|{
 2094|   182k|    return SCN_FWD(t);
  ------------------
  |  |  936|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   182k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
 4532|  40.2k|    {
 4533|  40.2k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  930|  40.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4534|  40.2k|        m_position += n;
 4535|  40.2k|        return *this;
 4536|  40.2k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2925|  76.7k|    {
 2926|  76.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  76.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  76.7k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2907|  76.7k|    {
 2908|  76.7k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  76.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  76.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
 4532|  13.5k|    {
 4533|  13.5k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  930|  13.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4534|  13.5k|        m_position += n;
 4535|  13.5k|        return *this;
 4536|  13.5k|    }

_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  12.9k|{
   89|  12.9k|    auto result = make_scan_result<Source, Args...>();
   90|  12.9k|    fill_scan_result(result,
   91|  12.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  12.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  12.9k|    return result;
   94|  12.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  38.7k|{
   44|  38.7k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  38.7k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  12.9k|{
  131|  12.9k|    auto result = make_scan_result<Source, Args...>();
  132|  12.9k|    fill_scan_result(result,
  133|  12.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  12.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  12.9k|    return result;
  136|  12.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  38.7k|{
   60|  38.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  38.7k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.52k|{
  171|  1.52k|    auto result = make_scan_result<Source, T>();
  172|  1.52k|    fill_scan_result(
  173|  1.52k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.52k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.52k|    return result;
  176|  1.52k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  4.56k|{
   72|  4.56k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  4.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  4.56k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  12.9k|{
   89|  12.9k|    auto result = make_scan_result<Source, Args...>();
   90|  12.9k|    fill_scan_result(result,
   91|  12.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  12.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  12.9k|    return result;
   94|  12.9k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  12.9k|{
  131|  12.9k|    auto result = make_scan_result<Source, Args...>();
  132|  12.9k|    fill_scan_result(result,
  133|  12.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  12.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  12.9k|    return result;
  136|  12.9k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.52k|{
  171|  1.52k|    auto result = make_scan_result<Source, T>();
  172|  1.52k|    fill_scan_result(
  173|  1.52k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.52k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.52k|    return result;
  176|  1.52k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  12.9k|{
   89|  12.9k|    auto result = make_scan_result<Source, Args...>();
   90|  12.9k|    fill_scan_result(result,
   91|  12.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  12.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  12.9k|    return result;
   94|  12.9k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  12.9k|{
  131|  12.9k|    auto result = make_scan_result<Source, Args...>();
  132|  12.9k|    fill_scan_result(result,
  133|  12.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  12.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  12.9k|    return result;
  136|  12.9k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.52k|{
  171|  1.52k|    auto result = make_scan_result<Source, T>();
  172|  1.52k|    fill_scan_result(
  173|  1.52k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.52k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.52k|    return result;
  176|  1.52k|}
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  12.9k|{
   89|  12.9k|    auto result = make_scan_result<Source, Args...>();
   90|  12.9k|    fill_scan_result(result,
   91|  12.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  12.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  12.9k|    return result;
   94|  12.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  38.7k|{
   44|  38.7k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  38.7k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  12.9k|{
  131|  12.9k|    auto result = make_scan_result<Source, Args...>();
  132|  12.9k|    fill_scan_result(result,
  133|  12.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  12.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  12.9k|    return result;
  136|  12.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  38.7k|{
   60|  38.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  38.7k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.52k|{
  171|  1.52k|    auto result = make_scan_result<Source, T>();
  172|  1.52k|    fill_scan_result(
  173|  1.52k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.52k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.52k|    return result;
  176|  1.52k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  4.56k|{
   72|  4.56k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  4.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  4.56k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  12.9k|{
   89|  12.9k|    auto result = make_scan_result<Source, Args...>();
   90|  12.9k|    fill_scan_result(result,
   91|  12.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  12.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  12.9k|    return result;
   94|  12.9k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  12.9k|{
  131|  12.9k|    auto result = make_scan_result<Source, Args...>();
  132|  12.9k|    fill_scan_result(result,
  133|  12.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  12.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  12.9k|    return result;
  136|  12.9k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.52k|{
  171|  1.52k|    auto result = make_scan_result<Source, T>();
  172|  1.52k|    fill_scan_result(
  173|  1.52k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.52k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.52k|    return result;
  176|  1.52k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  12.9k|{
   89|  12.9k|    auto result = make_scan_result<Source, Args...>();
   90|  12.9k|    fill_scan_result(result,
   91|  12.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  12.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  12.9k|    return result;
   94|  12.9k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  12.9k|{
  131|  12.9k|    auto result = make_scan_result<Source, Args...>();
  132|  12.9k|    fill_scan_result(result,
  133|  12.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  12.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  12.9k|    return result;
  136|  12.9k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.52k|{
  171|  1.52k|    auto result = make_scan_result<Source, T>();
  172|  1.52k|    fill_scan_result(
  173|  1.52k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.52k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.52k|    return result;
  176|  1.52k|}

_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  90.9k|{
  250|  90.9k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  90.9k|        .transform_error(impl::make_eof_scan_error);
  252|  90.9k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  77.4k|{
  250|  77.4k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  77.4k|        .transform_error(impl::make_eof_scan_error);
  252|  77.4k|}
_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   159k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   159k|{
  309|   159k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   159k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  36.0k|{
 1903|  36.0k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  36.0k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|  45.4k|{
 1911|  45.4k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|  45.4k|    return sync_after_vscan(source, n);
 1913|  45.4k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  38.7k|{
 1921|  38.7k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  38.7k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|  38.7k|{
 1929|  38.7k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|  38.7k|    return sync_after_vscan(source, n);
 1931|  38.7k|}
_ZN3scn2v46detail16chrono_scan_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  54.3k|{
 3582|  54.3k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 30.3k, False: 24.0k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  30.3k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  30.3k|    }
 3586|       |
 3587|  24.0k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  24.0k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  24.0k|    auto begin = contiguous_ctx.begin();
 3590|  24.0k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  24.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  24.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  24.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10.6k, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  10.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  10.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  10.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  10.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  10.6k|    }                                                  \
  |  |  |  | 3939|  24.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  13.4k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  24.0k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  54.3k|{
 3582|  54.3k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 30.3k, False: 24.0k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  30.3k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  30.3k|    }
 3586|       |
 3587|  24.0k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  24.0k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  24.0k|    auto begin = contiguous_ctx.begin();
 3590|  24.0k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  24.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  24.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  24.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10.6k, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  10.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  10.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  10.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  10.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  10.6k|    }                                                  \
  |  |  |  | 3939|  24.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  13.4k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  24.0k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  54.3k|{
 3582|  54.3k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 30.3k, False: 24.0k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  30.3k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  30.3k|    }
 3586|       |
 3587|  24.0k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  24.0k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  24.0k|    auto begin = contiguous_ctx.begin();
 3590|  24.0k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  24.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  24.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  24.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10.6k, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  10.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  10.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  10.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  10.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  10.6k|    }                                                  \
  |  |  |  | 3939|  24.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  13.4k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  24.0k|}
_ZN3scn2v46detail16chrono_scan_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  51.6k|{
 3582|  51.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 25.8k, False: 25.8k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  25.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  25.8k|    }
 3586|       |
 3587|  25.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  25.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  25.8k|    auto begin = contiguous_ctx.begin();
 3590|  25.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  25.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.3k, False: 4.51k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.3k|    }                                                  \
  |  |  |  | 3939|  25.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  4.51k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  25.8k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  51.6k|{
 3582|  51.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 25.8k, False: 25.8k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  25.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  25.8k|    }
 3586|       |
 3587|  25.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  25.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  25.8k|    auto begin = contiguous_ctx.begin();
 3590|  25.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  25.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.3k, False: 4.51k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.3k|    }                                                  \
  |  |  |  | 3939|  25.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  4.51k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  25.8k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  51.6k|{
 3582|  51.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 25.8k, False: 25.8k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  25.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  25.8k|    }
 3586|       |
 3587|  25.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  25.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  25.8k|    auto begin = contiguous_ctx.begin();
 3590|  25.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  25.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.3k, False: 4.51k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.3k|    }                                                  \
  |  |  |  | 3939|  25.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  4.51k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  25.8k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   163k|{
  215|   163k|    return find_classic_impl(
  216|   163k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   163k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   163k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|  13.6k|{
  329|  13.6k|    SCN_UNLIKELY_ATTR
  330|  13.6k|    return e;
  331|  13.6k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  36.0k|{
 1872|  36.0k|    return vscan_internal(source, format, args);
 1873|  36.0k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|  45.4k|{
 1878|  45.4k|    auto n = vscan_internal(source, format, args);
 1879|  45.4k|    return sync_after_vscan(source, n);
 1880|  45.4k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  38.7k|{
 1886|  38.7k|    return vscan_internal(source, format, args);
 1887|  38.7k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|  38.7k|{
 1892|  38.7k|    auto n = vscan_internal(source, format, args);
 1893|  38.7k|    return sync_after_vscan(source, n);
 1894|  38.7k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  2.28k|{
 1958|  2.28k|    return vscan_value_internal(source, arg);
 1959|  2.28k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  2.28k|{
 1963|  2.28k|    auto n = vscan_value_internal(source, arg);
 1964|  2.28k|    return sync_after_vscan(source, n);
 1965|  2.28k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|  4.56k|{
 1971|  4.56k|    return vscan_value_internal(source, arg);
 1972|  4.56k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|  4.56k|{
 1977|  4.56k|    auto n = vscan_value_internal(source, arg);
 1978|  4.56k|    return sync_after_vscan(source, n);
 1979|  4.56k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  78.3k|{
  118|  78.3k|    static_assert(sizeof(*source.data()) == 1);
  119|  78.3k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  78.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  78.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  78.3k|    uint64_t word{};
  121|  78.3k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  78.3k|    return has_byte_greater(word, 127) != 0;
  124|  78.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   163k|{
  131|   163k|    auto it = source.begin();
  132|       |
  133|   170k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 78.3k, False: 91.7k]
  ------------------
  134|  78.3k|        auto sv =
  135|  78.3k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  78.3k|                .substr(0, 8);
  137|       |
  138|  78.3k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 66.4k, False: 11.9k]
  ------------------
  139|  66.4k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  66.4k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  66.4k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 60.4k, False: 5.92k]
  ------------------
  142|  60.4k|                break;
  143|  60.4k|            }
  144|  5.92k|            continue;
  145|  66.4k|        }
  146|       |
  147|  16.7k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 15.6k, False: 1.02k]
  ------------------
  148|  15.6k|            auto tmp =
  149|  15.6k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  15.6k|            auto res = get_next_code_point(tmp);
  151|  15.6k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 10.9k, False: 4.75k]
  ------------------
  152|  10.9k|                return it;
  153|  10.9k|            }
  154|  4.75k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  4.75k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  4.75k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  4.75k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  4.75k|        }
  158|  11.9k|    }
  159|       |
  160|   152k|    return detail::make_string_view_iterator(source, it);
  161|   163k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   173k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  15.6k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|  90.9k|{
 1769|  90.9k|    const auto argcount = args.size();
 1770|  90.9k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 90.9k]
  |  Branch (1770:60): [True: 0, False: 0]
  ------------------
 1771|      0|        auto arg = args.get(0);
 1772|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|      0|    }
 1774|       |
 1775|  90.9k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 90.9k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  90.9k|    SCN_UNLIKELY_ATTR
 1783|  90.9k|    {
 1784|  90.9k|        auto handler = format_handler<false, CharT>{
 1785|  90.9k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  90.9k|    static_cast<    \
  |  |  935|  90.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  90.9k|    static_cast<    \
  |  |  935|  90.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  90.9k|        return vscan_parse_format_string(format, handler);
 1787|  90.9k|    }
 1788|  90.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   163k|{
 1317|   163k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 163k, False: 0]
  ------------------
 1318|   163k|        return false;
 1319|   163k|    }
 1320|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 0, False: 0]
  |  Branch (1320:39): [True: 0, False: 0]
  ------------------
 1321|   163k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  2.28k|{
 1350|  2.28k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.28k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  2.28k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  2.28k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 2.28k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  2.28k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  2.28k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  2.28k|    static_cast<    \
  |  |  935|  2.28k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  2.28k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  2.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.28k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.28k|    }                                                  \
  |  |  |  | 3939|  2.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|      0|    return it.position();
 1367|  2.28k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|  72.1k|        : format_handler_base{argcount},
 1593|  72.1k|          parse_ctx{format},
 1594|  72.1k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  72.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  72.1k|    static_cast<    \
  |  |  935|  72.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  72.1k|    static_cast<    \
  |  |  935|  72.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  72.1k|    {
 1596|  72.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|   318k|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|   318k|    {
 1412|   318k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 318k]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|   318k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|  72.1k|        : contiguous_ctx(source, args, loc)
 1544|  72.1k|    {
 1545|  72.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  72.1k|{
 1734|  72.1k|    const auto beg = handler.get_ctx().begin();
 1735|  72.1k|    detail::parse_format_string<false>(format, handler);
 1736|  72.1k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.9k, False: 40.2k]
  |  |  ------------------
  ------------------
 1737|  31.9k|        return unexpected(err.error());
 1738|  31.9k|    }
 1739|  40.2k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  72.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   224k|    {
 1718|   224k|        return ctx.get();
 1719|   224k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   224k|    {
 1549|   224k|        return contiguous_ctx;
 1550|   224k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   112k|    {
 1600|   112k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 112k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   112k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   191k|    {
 1460|   191k|        error = unexpected(err);
 1461|   191k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|  72.1k|{
 1372|  72.1k|    auto arg = ctx.arg(id);
 1373|  72.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.1k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  72.1k|    return arg;
 1377|  72.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|   318k|    {
 1486|   318k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 318k]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|   318k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 318k]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|   318k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   318k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 318k, False: 0]
  |  |  ------------------
  ------------------
 1498|   318k|            visited_args_lower64 |= (1ull << id);
 1499|   318k|            return;
 1500|   318k|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|   318k|    {
 1470|   318k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 318k]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|   318k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   318k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 318k, False: 0]
  |  |  ------------------
  ------------------
 1477|   318k|            return (visited_args_lower64 >> id) & 1ull;
 1478|   318k|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|   318k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|  72.1k|    {
 1640|  72.1k|        return parse_ctx.next_arg_id();
 1641|  72.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|  72.1k|    {
 1680|  72.1k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  72.1k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  72.1k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 72.1k, False: 0]
  ------------------
 1684|  72.1k|            parse_ctx.advance_to(begin);
 1685|  72.1k|            on_visit_scan_arg(
 1686|  72.1k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  72.1k|                    parse_ctx, get_custom_ctx()},
 1688|  72.1k|                arg);
 1689|  72.1k|            return parse_ctx.begin();
 1690|  72.1k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  72.1k|    {
 1651|  72.1k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 72.1k]
  |  Branch (1651:13): [True: 0, False: 72.1k]
  |  Branch (1651:29): [True: 0, False: 72.1k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  72.1k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  72.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  72.1k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.9k, False: 40.2k]
  |  |  ------------------
  ------------------
 1658|  31.9k|            on_error(r.error());
 1659|  31.9k|        }
 1660|  40.2k|        else {
 1661|  40.2k|            get_ctx().advance_to(*r);
 1662|  40.2k|        }
 1663|  72.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE14get_custom_ctxEv:
 1721|  72.1k|    {
 1722|  72.1k|        return ctx.get_custom();
 1723|  72.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE10get_customEv:
 1552|  72.1k|    {
 1553|  72.1k|        if (!buffer) {
  ------------------
  |  Branch (1553:13): [True: 72.1k, False: 0]
  ------------------
 1554|  72.1k|            buffer.emplace(detail::make_string_view_from_pointers(
 1555|  72.1k|                ranges::data(contiguous_ctx.underlying_range()),
 1556|  72.1k|                ranges::data(contiguous_ctx.underlying_range()) +
 1557|  72.1k|                    ranges::size(contiguous_ctx.underlying_range())));
 1558|  72.1k|        }
 1559|  72.1k|        auto it = buffer->get().begin();
 1560|  72.1k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1561|  72.1k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1562|  72.1k|        return *custom_ctx;
 1563|  72.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|   318k|    {
 1419|   318k|        {
 1420|   318k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 318k]
  ------------------
 1421|   318k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 318k]
  ------------------
 1422|   318k|                                      ? std::numeric_limits<uint64_t>::max()
 1423|   318k|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|   318k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 318k]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|   318k|        }
 1430|       |
 1431|   318k|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 318k, False: 0]
  ------------------
 1432|   318k|            return;
 1433|   318k|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  1.27M|    {
 1465|  1.27M|        return error;
 1466|  1.27M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|  90.9k|        : format_handler_base{argcount},
 1593|  90.9k|          parse_ctx{format},
 1594|  90.9k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  90.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  90.9k|    static_cast<    \
  |  |  935|  90.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  90.9k|    static_cast<    \
  |  |  935|  90.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  90.9k|    {
 1596|  90.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|  90.9k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  90.9k|    static_cast<    \
  |  |  935|  90.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  90.9k|    {
 1521|  90.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  90.9k|{
 1734|  90.9k|    const auto beg = handler.get_ctx().begin();
 1735|  90.9k|    detail::parse_format_string<false>(format, handler);
 1736|  90.9k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.9k, False: 59.0k]
  |  |  ------------------
  ------------------
 1737|  31.9k|        return unexpected(err.error());
 1738|  31.9k|    }
 1739|  59.0k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  90.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|   299k|    {
 1718|   299k|        return ctx.get();
 1719|   299k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|   299k|    {
 1525|   299k|        return ctx;
 1526|   299k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|   149k|    {
 1600|   149k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 149k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   149k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|  90.9k|{
 1372|  90.9k|    auto arg = ctx.arg(id);
 1373|  90.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.9k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  90.9k|    return arg;
 1377|  90.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|  90.9k|    {
 1640|  90.9k|        return parse_ctx.next_arg_id();
 1641|  90.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|  90.9k|    {
 1680|  90.9k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  90.9k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  90.9k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 90.9k, False: 0]
  ------------------
 1684|  90.9k|            parse_ctx.advance_to(begin);
 1685|  90.9k|            on_visit_scan_arg(
 1686|  90.9k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  90.9k|                    parse_ctx, get_custom_ctx()},
 1688|  90.9k|                arg);
 1689|  90.9k|            return parse_ctx.begin();
 1690|  90.9k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  90.9k|    {
 1651|  90.9k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 90.9k]
  |  Branch (1651:13): [True: 0, False: 90.9k]
  |  Branch (1651:29): [True: 0, False: 90.9k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  90.9k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  90.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  90.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.9k, False: 59.0k]
  |  |  ------------------
  ------------------
 1658|  31.9k|            on_error(r.error());
 1659|  31.9k|        }
 1660|  59.0k|        else {
 1661|  59.0k|            get_ctx().advance_to(*r);
 1662|  59.0k|        }
 1663|  90.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE14get_custom_ctxEv:
 1721|  90.9k|    {
 1722|  90.9k|        return ctx.get_custom();
 1723|  90.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE10get_customEv:
 1528|  90.9k|    {
 1529|  90.9k|        return ctx;
 1530|  90.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  72.1k|{
 1749|  72.1k|    const auto argcount = args.size();
 1750|  72.1k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 0, False: 72.1k]
  |  Branch (1750:60): [True: 0, False: 0]
  ------------------
 1751|      0|        auto arg = args.get(0);
 1752|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|      0|    }
 1754|       |
 1755|  72.1k|    auto handler = format_handler<true, CharT>{
 1756|  72.1k|        ranges::subrange<const CharT*>{source.data(),
 1757|  72.1k|                                       source.data() + source.size()},
 1758|  72.1k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  72.1k|    static_cast<    \
  |  |  935|  72.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  72.1k|    static_cast<    \
  |  |  935|  72.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  72.1k|    return vscan_parse_format_string(format, handler);
 1760|  72.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  2.28k|{
 1330|  2.28k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.28k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  2.28k|    auto reader =
 1336|  2.28k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  2.28k|            ranges::subrange<const CharT*>{source.data(),
 1338|  2.28k|                                           source.data() + source.size()},
 1339|  2.28k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  2.28k|    static_cast<    \
  |  |  935|  2.28k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  2.28k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  2.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.28k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.28k|    }                                                  \
  |  |  |  | 3939|  2.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      0|    return ranges::distance(source.data(), it);
 1342|  2.28k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  93.2k|{
 1849|  93.2k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  93.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 59.0k, False: 34.2k]
  |  |  ------------------
  ------------------
 1850|  59.0k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  59.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 59.0k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  59.0k|    }
 1856|  34.2k|    else {
 1857|  34.2k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  34.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 34.2k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  34.2k|    }
 1863|  93.2k|    return result;
 1864|  93.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  77.4k|{
 1749|  77.4k|    const auto argcount = args.size();
 1750|  77.4k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 0, False: 77.4k]
  |  Branch (1750:60): [True: 0, False: 0]
  ------------------
 1751|      0|        auto arg = args.get(0);
 1752|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|      0|    }
 1754|       |
 1755|  77.4k|    auto handler = format_handler<true, CharT>{
 1756|  77.4k|        ranges::subrange<const CharT*>{source.data(),
 1757|  77.4k|                                       source.data() + source.size()},
 1758|  77.4k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  77.4k|    static_cast<    \
  |  |  935|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  77.4k|    static_cast<    \
  |  |  935|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  77.4k|    return vscan_parse_format_string(format, handler);
 1760|  77.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   154k|{
 1317|   154k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 154k, False: 0]
  ------------------
 1318|   154k|        return false;
 1319|   154k|    }
 1320|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 0, False: 0]
  |  Branch (1320:39): [True: 0, False: 0]
  ------------------
 1321|   154k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  4.56k|{
 1330|  4.56k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.56k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  4.56k|    auto reader =
 1336|  4.56k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  4.56k|            ranges::subrange<const CharT*>{source.data(),
 1338|  4.56k|                                           source.data() + source.size()},
 1339|  4.56k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  4.56k|    static_cast<    \
  |  |  935|  4.56k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  4.56k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  4.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.56k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.56k|    }                                                  \
  |  |  |  | 3939|  4.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      0|    return ranges::distance(source.data(), it);
 1342|  4.56k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|  77.4k|        : format_handler_base{argcount},
 1593|  77.4k|          parse_ctx{format},
 1594|  77.4k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  77.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  77.4k|    static_cast<    \
  |  |  935|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  77.4k|    static_cast<    \
  |  |  935|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  77.4k|    {
 1596|  77.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|  77.4k|        : contiguous_ctx(source, args, loc)
 1544|  77.4k|    {
 1545|  77.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  77.4k|{
 1734|  77.4k|    const auto beg = handler.get_ctx().begin();
 1735|  77.4k|    detail::parse_format_string<false>(format, handler);
 1736|  77.4k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 63.9k, False: 13.5k]
  |  |  ------------------
  ------------------
 1737|  63.9k|        return unexpected(err.error());
 1738|  63.9k|    }
 1739|  13.5k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  77.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   181k|    {
 1718|   181k|        return ctx.get();
 1719|   181k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   181k|    {
 1549|   181k|        return contiguous_ctx;
 1550|   181k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|  90.9k|    {
 1600|  90.9k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 90.9k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  90.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|  77.4k|{
 1372|  77.4k|    auto arg = ctx.arg(id);
 1373|  77.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 77.4k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  77.4k|    return arg;
 1377|  77.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|  77.4k|    {
 1640|  77.4k|        return parse_ctx.next_arg_id();
 1641|  77.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|  77.4k|    {
 1680|  77.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  77.4k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  77.4k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 77.4k, False: 0]
  ------------------
 1684|  77.4k|            parse_ctx.advance_to(begin);
 1685|  77.4k|            on_visit_scan_arg(
 1686|  77.4k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  77.4k|                    parse_ctx, get_custom_ctx()},
 1688|  77.4k|                arg);
 1689|  77.4k|            return parse_ctx.begin();
 1690|  77.4k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  77.4k|    {
 1651|  77.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 77.4k]
  |  Branch (1651:13): [True: 0, False: 77.4k]
  |  Branch (1651:29): [True: 0, False: 77.4k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  77.4k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  77.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  77.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 63.9k, False: 13.5k]
  |  |  ------------------
  ------------------
 1658|  63.9k|            on_error(r.error());
 1659|  63.9k|        }
 1660|  13.5k|        else {
 1661|  13.5k|            get_ctx().advance_to(*r);
 1662|  13.5k|        }
 1663|  77.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE14get_custom_ctxEv:
 1721|  77.4k|    {
 1722|  77.4k|        return ctx.get_custom();
 1723|  77.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE10get_customEv:
 1552|  77.4k|    {
 1553|  77.4k|        if (!buffer) {
  ------------------
  |  Branch (1553:13): [True: 77.4k, False: 0]
  ------------------
 1554|  77.4k|            buffer.emplace(detail::make_string_view_from_pointers(
 1555|  77.4k|                ranges::data(contiguous_ctx.underlying_range()),
 1556|  77.4k|                ranges::data(contiguous_ctx.underlying_range()) +
 1557|  77.4k|                    ranges::size(contiguous_ctx.underlying_range())));
 1558|  77.4k|        }
 1559|  77.4k|        auto it = buffer->get().begin();
 1560|  77.4k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1561|  77.4k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1562|  77.4k|        return *custom_ctx;
 1563|  77.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|  77.4k|{
 1769|  77.4k|    const auto argcount = args.size();
 1770|  77.4k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 77.4k]
  |  Branch (1770:60): [True: 0, False: 0]
  ------------------
 1771|      0|        auto arg = args.get(0);
 1772|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|      0|    }
 1774|       |
 1775|  77.4k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 77.4k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  77.4k|    SCN_UNLIKELY_ATTR
 1783|  77.4k|    {
 1784|  77.4k|        auto handler = format_handler<false, CharT>{
 1785|  77.4k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  77.4k|    static_cast<    \
  |  |  935|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  77.4k|    static_cast<    \
  |  |  935|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  77.4k|        return vscan_parse_format_string(format, handler);
 1787|  77.4k|    }
 1788|  77.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  4.56k|{
 1350|  4.56k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.56k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  4.56k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  4.56k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 4.56k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  4.56k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  4.56k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  4.56k|    static_cast<    \
  |  |  935|  4.56k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  4.56k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  4.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.56k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.56k|    }                                                  \
  |  |  |  | 3939|  4.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|      0|    return it.position();
 1367|  4.56k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|  77.4k|        : format_handler_base{argcount},
 1593|  77.4k|          parse_ctx{format},
 1594|  77.4k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  77.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  77.4k|    static_cast<    \
  |  |  935|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  77.4k|    static_cast<    \
  |  |  935|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  77.4k|    {
 1596|  77.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|  77.4k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  77.4k|    static_cast<    \
  |  |  935|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  77.4k|    {
 1521|  77.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  77.4k|{
 1734|  77.4k|    const auto beg = handler.get_ctx().begin();
 1735|  77.4k|    detail::parse_format_string<false>(format, handler);
 1736|  77.4k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 63.9k, False: 13.5k]
  |  |  ------------------
  ------------------
 1737|  63.9k|        return unexpected(err.error());
 1738|  63.9k|    }
 1739|  13.5k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  77.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|   181k|    {
 1718|   181k|        return ctx.get();
 1719|   181k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|   181k|    {
 1525|   181k|        return ctx;
 1526|   181k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|  90.9k|    {
 1600|  90.9k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 90.9k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  90.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|  77.4k|{
 1372|  77.4k|    auto arg = ctx.arg(id);
 1373|  77.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 77.4k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  77.4k|    return arg;
 1377|  77.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|  77.4k|    {
 1640|  77.4k|        return parse_ctx.next_arg_id();
 1641|  77.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|  77.4k|    {
 1680|  77.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  77.4k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  77.4k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 77.4k, False: 0]
  ------------------
 1684|  77.4k|            parse_ctx.advance_to(begin);
 1685|  77.4k|            on_visit_scan_arg(
 1686|  77.4k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  77.4k|                    parse_ctx, get_custom_ctx()},
 1688|  77.4k|                arg);
 1689|  77.4k|            return parse_ctx.begin();
 1690|  77.4k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  77.4k|    {
 1651|  77.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 77.4k]
  |  Branch (1651:13): [True: 0, False: 77.4k]
  |  Branch (1651:29): [True: 0, False: 77.4k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  77.4k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  77.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  77.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 63.9k, False: 13.5k]
  |  |  ------------------
  ------------------
 1658|  63.9k|            on_error(r.error());
 1659|  63.9k|        }
 1660|  13.5k|        else {
 1661|  13.5k|            get_ctx().advance_to(*r);
 1662|  13.5k|        }
 1663|  77.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE14get_custom_ctxEv:
 1721|  77.4k|    {
 1722|  77.4k|        return ctx.get_custom();
 1723|  77.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE10get_customEv:
 1528|  77.4k|    {
 1529|  77.4k|        return ctx;
 1530|  77.4k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  82.0k|{
 1849|  82.0k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  82.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.5k, False: 68.4k]
  |  |  ------------------
  ------------------
 1850|  13.5k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.5k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  13.5k|    }
 1856|  68.4k|    else {
 1857|  68.4k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  68.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.4k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  68.4k|    }
 1863|  82.0k|    return result;
 1864|  82.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  2.28k|{
 1795|  2.28k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  2.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  2.28k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  2.28k|{
 1795|  2.28k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  2.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  2.28k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  4.56k|{
 1795|  4.56k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  4.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  4.56k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  4.56k|{
 1795|  4.56k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  4.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  4.56k|}
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  30.3k|{
 3563|  30.3k|    {
 3564|  30.3k|        SCN_TRY(it,
  ------------------
  |  | 3940|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 484, False: 29.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    484|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    484|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    484|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    484|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    484|    }                                                  \
  |  |  |  | 3939|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  29.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  29.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  29.8k|    static_cast<    \
  |  |  935|  29.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  29.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  29.8k|        ctx.range(), t, ctx.locale());
 3571|  29.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  29.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.1k, False: 19.6k]
  |  |  ------------------
  ------------------
 3573|  10.1k|        return unexpected(e.error());
 3574|  10.1k|    }
 3575|  19.6k|    return r.get_iterator();
 3576|  29.8k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  29.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  29.8k|    static_cast<    \
  |  |  935|  29.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  29.8k|          m_begin(ranges::begin(m_range)),
 2708|  29.8k|          m_tm(t),
 2709|  29.8k|          m_loc(loc)
 2710|  29.8k|    {
 2711|  29.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  9.38k|    {
 3358|  9.38k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.38k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  40.1k|    {
 3363|  40.1k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.1k, False: 29.9k]
  ------------------
 3364|  10.1k|            m_error = unexpected(e);
 3365|  10.1k|        }
 3366|  40.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  35.1k|    {
 2715|  60.6k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 35.1k, False: 25.5k]
  ------------------
 2716|  35.1k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 182, False: 34.9k]
  ------------------
 2717|    182|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    182|            }
 2719|  34.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.38k, False: 25.5k]
  ------------------
 2720|  9.38k|                return on_error("Invalid literal character");
 2721|  9.38k|            }
 2722|  25.5k|            ++beg;
 2723|  25.5k|            ++m_begin;
 2724|  25.5k|        }
 2725|  35.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.02k|    {
 2745|  3.02k|#if !SCN_DISABLE_LOCALE
 2746|  3.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.02k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.02k|#endif
 2753|       |
 2754|  3.02k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.02k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.02k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.02k|    {
 2218|  3.02k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.02k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.02k|        t.tm_year = y - 1900;
 2223|  3.02k|        st.set_full_year(h);
 2224|  3.02k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  60.6k|    {
 3381|  60.6k|        int digits_read = 0;
 3382|  60.6k|        int accumulator = 0;
 3383|   107k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 107k, False: 358]
  ------------------
 3384|   107k|            const auto ch = *m_begin;
 3385|   107k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 32.7k, False: 74.6k]
  |  Branch (3385:36): [True: 17.8k, False: 56.7k]
  ------------------
 3386|  50.6k|                break;
 3387|  50.6k|            }
 3388|  56.7k|            ++m_begin;
 3389|  56.7k|            ++digits_read;
 3390|  56.7k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  56.7k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 9.55k, False: 47.1k]
  ------------------
 3392|  9.55k|                break;
 3393|  9.55k|            }
 3394|  56.7k|        }
 3395|  60.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 15.0k, False: 45.5k]
  ------------------
 3396|  15.0k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  15.0k|                                 "Too few integer digits"});
 3398|  15.0k|            return -1;
 3399|  15.0k|        }
 3400|  45.5k|        return accumulator;
 3401|  60.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  7.01k|    {
 2759|  7.01k|#if !SCN_DISABLE_LOCALE
 2760|  7.01k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 7.01k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  7.01k|#endif
 2768|       |
 2769|  7.01k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  7.01k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  7.01k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  7.01k|    {
 2235|  7.01k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.44k, False: 5.56k]
  |  |  |  Branch (865:45): [True: 1.44k, False: 5.56k]
  |  |  |  Branch (865:45): [True: 0, False: 5.56k]
  |  |  ------------------
  ------------------
 2236|  1.44k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.44k|                                "Invalid value for tm_year"});
 2238|  1.44k|        }
 2239|  5.56k|        st.short_year_value = y;
 2240|  5.56k|        st.set_short_year(h);
 2241|  5.56k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  2.87k|    {
 2802|  2.87k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.87k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.87k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.87k|#endif
 2810|       |
 2811|  2.87k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.87k|            {"January", 1},
 2813|  2.87k|            {"February", 2},
 2814|  2.87k|            {"March", 3},
 2815|  2.87k|            {"April", 4},
 2816|  2.87k|            {"May", 5},
 2817|  2.87k|            {"June", 6},
 2818|  2.87k|            {"July", 7},
 2819|  2.87k|            {"August", 8},
 2820|  2.87k|            {"September", 9},
 2821|  2.87k|            {"October", 10},
 2822|  2.87k|            {"November", 11},
 2823|  2.87k|            {"December", 12},
 2824|  2.87k|        }};
 2825|  2.87k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 68, False: 2.80k]
  ------------------
 2826|     68|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     68|        }
 2828|  2.80k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.80k|            {"Jan", 1},
 2830|  2.80k|            {"Feb", 2},
 2831|  2.80k|            {"Mar", 3},
 2832|  2.80k|            {"Apr", 4},
 2833|  2.80k|            {"Jun", 6},
 2834|  2.80k|            {"Jul", 7},
 2835|  2.80k|            {"Aug", 8},
 2836|  2.80k|            {"Sep", 9},
 2837|  2.80k|            {"Oct", 10},
 2838|  2.80k|            {"Nov", 11},
 2839|  2.80k|            {"Dec", 12},
 2840|  2.80k|        }};
 2841|  2.80k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.35k, False: 1.44k]
  ------------------
 2842|  1.35k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.35k|        }
 2844|  1.44k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.44k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  10.0k|    {
 2208|  10.0k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.44k, False: 7.61k]
  |  |  |  Branch (865:45): [True: 2.34k, False: 7.71k]
  |  |  |  Branch (865:45): [True: 96, False: 7.61k]
  |  |  ------------------
  ------------------
 2209|  2.44k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.44k|                                "Invalid value for tm_mon"});
 2211|  2.44k|        }
 2212|  7.61k|        t.tm_mon = m - 1;
 2213|  7.61k|        st.set_mon(h);
 2214|  7.61k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.87k|    {
 3419|  2.87k|        auto start_it = m_begin;
 3420|  2.87k|        std::size_t options_available = N;
 3421|  2.87k|        std::size_t chars_consumed = 0;
 3422|  10.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.30k, False: 2.75k]
  ------------------
 3423|  10.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.23k, False: 68]
  ------------------
 3424|  7.23k|            std::size_t i = 0;
 3425|  7.23k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 46, False: 7.18k]
  ------------------
 3426|     46|                options_available = 0;
 3427|     46|                break;
 3428|     46|            }
 3429|  7.18k|            const auto ch = *m_begin;
 3430|  7.18k|            ++m_begin;
 3431|  48.9k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 41.7k, False: 7.18k]
  ------------------
 3432|  41.7k|                const auto cmp = static_cast<unsigned>(
 3433|  41.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  41.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 41.7k]
  ------------------
 3435|  41.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 35.7k, False: 5.92k]
  |  Branch (3435:34): [True: 34.2k, False: 1.50k]
  ------------------
 3436|  34.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  34.2k|                                options.end());
 3438|  34.2k|                    --options_available;
 3439|  34.2k|                    continue;
 3440|  34.2k|                }
 3441|  7.42k|                ++i;
 3442|  7.42k|            }
 3443|  7.18k|            ++chars_consumed;
 3444|  7.18k|        }
 3445|  2.87k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.80k, False: 68]
  ------------------
 3446|  2.80k|            m_begin = start_it;
 3447|  2.80k|            return std::nullopt;
 3448|  2.80k|        }
 3449|     68|        return options.front().second;
 3450|  2.87k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.80k|    {
 3419|  2.80k|        auto start_it = m_begin;
 3420|  2.80k|        std::size_t options_available = N;
 3421|  2.80k|        std::size_t chars_consumed = 0;
 3422|  8.43k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.02k, False: 1.40k]
  ------------------
 3423|  8.43k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.67k, False: 1.35k]
  ------------------
 3424|  5.67k|            std::size_t i = 0;
 3425|  5.67k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 42, False: 5.62k]
  ------------------
 3426|     42|                options_available = 0;
 3427|     42|                break;
 3428|     42|            }
 3429|  5.62k|            const auto ch = *m_begin;
 3430|  5.62k|            ++m_begin;
 3431|  39.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.6k, False: 5.62k]
  ------------------
 3432|  33.6k|                const auto cmp = static_cast<unsigned>(
 3433|  33.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.6k]
  ------------------
 3435|  33.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 30.8k, False: 2.84k]
  |  Branch (3435:34): [True: 29.4k, False: 1.42k]
  ------------------
 3436|  29.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  29.4k|                                options.end());
 3438|  29.4k|                    --options_available;
 3439|  29.4k|                    continue;
 3440|  29.4k|                }
 3441|  4.27k|                ++i;
 3442|  4.27k|            }
 3443|  5.62k|            ++chars_consumed;
 3444|  5.62k|        }
 3445|  2.80k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.44k, False: 1.35k]
  ------------------
 3446|  1.44k|            m_begin = start_it;
 3447|  1.44k|            return std::nullopt;
 3448|  1.44k|        }
 3449|  1.35k|        return options.front().second;
 3450|  2.80k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  8.63k|    {
 2848|  8.63k|#if !SCN_DISABLE_LOCALE
 2849|  8.63k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 8.63k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  8.63k|#endif
 2856|       |
 2857|  8.63k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  8.63k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  8.63k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  8.61k|    {
 2880|  8.61k|#if !SCN_DISABLE_LOCALE
 2881|  8.61k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 8.61k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  8.61k|#endif
 2888|       |
 2889|  8.61k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  8.61k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  8.61k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  8.61k|    {
 2198|  8.61k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.86k, False: 5.74k]
  |  |  |  Branch (865:45): [True: 2.80k, False: 5.80k]
  |  |  |  Branch (865:45): [True: 60, False: 5.74k]
  |  |  ------------------
  ------------------
 2199|  2.86k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  2.86k|                                "Invalid value for tm_mday"});
 2201|  2.86k|        }
 2202|  5.74k|        t.tm_mday = d;
 2203|  5.74k|        st.set_mday(h);
 2204|  5.74k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  1.47k|    {
 2895|  1.47k|#if !SCN_DISABLE_LOCALE
 2896|  1.47k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.47k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.47k|#endif
 2903|       |
 2904|  1.47k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.47k|            {"Sunday", 0},
 2906|  1.47k|            {"Monday", 1},
 2907|  1.47k|            {"Tuesday", 2},
 2908|  1.47k|            {"Wednesday", 3},
 2909|  1.47k|            {"Thursday", 4},
 2910|  1.47k|            {"Friday", 5},
 2911|  1.47k|            {"Saturday", 6},
 2912|  1.47k|        }};
 2913|  1.47k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.47k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.47k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.47k|            {"Sun", 0},
 2918|  1.47k|            {"Mon", 1},
 2919|  1.47k|            {"Tue", 2},
 2920|  1.47k|            {"Wed", 3},
 2921|  1.47k|            {"Thu", 4},
 2922|  1.47k|            {"Fri", 5},
 2923|  1.47k|            {"Sat", 6},
 2924|  1.47k|        }};
 2925|  1.47k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 4, False: 1.46k]
  ------------------
 2926|      4|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      4|        }
 2928|  1.46k|        return set_error(
 2929|  1.46k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.47k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|      4|    {
 2245|      4|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|      4|        t.tm_wday = d;
 2250|      4|        st.set_wday(h);
 2251|      4|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.94k|    {
 3419|  2.94k|        auto start_it = m_begin;
 3420|  2.94k|        std::size_t options_available = N;
 3421|  2.94k|        std::size_t chars_consumed = 0;
 3422|  6.17k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.26k, False: 2.91k]
  ------------------
 3423|  6.17k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.26k, False: 4]
  ------------------
 3424|  3.26k|            std::size_t i = 0;
 3425|  3.26k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.23k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.23k|            const auto ch = *m_begin;
 3430|  3.23k|            ++m_begin;
 3431|  24.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 20.8k, False: 3.23k]
  ------------------
 3432|  20.8k|                const auto cmp = static_cast<unsigned>(
 3433|  20.8k|                    ch ^ options[i].first[chars_consumed]);
 3434|  20.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 20.8k]
  ------------------
 3435|  20.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 20.5k, False: 312]
  |  Branch (3435:34): [True: 20.5k, False: 40]
  ------------------
 3436|  20.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  20.5k|                                options.end());
 3438|  20.5k|                    --options_available;
 3439|  20.5k|                    continue;
 3440|  20.5k|                }
 3441|    352|                ++i;
 3442|    352|            }
 3443|  3.23k|            ++chars_consumed;
 3444|  3.23k|        }
 3445|  2.94k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.93k, False: 4]
  ------------------
 3446|  2.93k|            m_begin = start_it;
 3447|  2.93k|            return std::nullopt;
 3448|  2.93k|        }
 3449|      4|        return options.front().second;
 3450|  2.94k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  15.4k|    {
 2969|  15.4k|#if !SCN_DISABLE_LOCALE
 2970|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 15.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  15.4k|#endif
 2977|       |
 2978|  15.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  15.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  15.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  15.4k|    {
 2178|  15.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.04k, False: 13.4k]
  |  |  |  Branch (865:45): [True: 1.89k, False: 13.5k]
  |  |  |  Branch (865:45): [True: 150, False: 13.4k]
  |  |  ------------------
  ------------------
 2179|  2.04k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.04k|                                  "Invalid value for tm_hour"});
 2181|  2.04k|        }
 2182|  13.4k|        t.tm_hour = h;
 2183|  13.4k|        st.set_hour24(hdl);
 2184|  13.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  15.4k|    {
 2997|  15.4k|#if !SCN_DISABLE_LOCALE
 2998|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 15.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  15.4k|#endif
 3005|       |
 3006|  15.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  15.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  15.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  15.4k|    {
 2168|  15.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.38k, False: 13.0k]
  |  |  |  Branch (865:45): [True: 2.35k, False: 13.1k]
  |  |  |  Branch (865:45): [True: 26, False: 13.0k]
  |  |  ------------------
  ------------------
 2169|  2.38k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.38k|                                "Invalid value for tm_min"});
 2171|  2.38k|        }
 2172|  13.0k|        t.tm_min = m;
 2173|  13.0k|        st.set_min(h);
 2174|  13.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.36k|    {
 3011|  2.36k|#if !SCN_DISABLE_LOCALE
 3012|  2.36k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.36k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.36k|#endif
 3019|       |
 3020|  2.36k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.36k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.36k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.36k|    {
 2158|  2.36k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.43k, False: 926]
  |  |  |  Branch (865:45): [True: 1.43k, False: 930]
  |  |  |  Branch (865:45): [True: 4, False: 926]
  |  |  ------------------
  ------------------
 2159|  1.43k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.43k|                                "Invalid value for tm_sec"});
 2161|  1.43k|        }
 2162|    926|        t.tm_sec = s;
 2163|    926|        st.set_sec(h);
 2164|    926|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  7.01k|    {
 3253|       |        // %m/%d/%y
 3254|  7.01k|        constexpr CharT slash = '/';
 3255|  7.01k|        on_dec_month();
 3256|  7.01k|        on_text(&slash, &slash + 1);
 3257|  7.01k|        on_day_of_month();
 3258|  7.01k|        on_text(&slash, &slash + 1);
 3259|  7.01k|        on_short_year();
 3260|  7.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.56k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.56k|        constexpr CharT dash = '-';
 3265|  1.56k|        on_full_year();
 3266|  1.56k|        on_text(&dash, &dash + 1);
 3267|  1.56k|        on_dec_month();
 3268|  1.56k|        on_text(&dash, &dash + 1);
 3269|  1.56k|        on_day_of_month();
 3270|  1.56k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  13.0k|    {
 3295|       |        // %H:%M
 3296|  13.0k|        constexpr CharT colon = ':';
 3297|  13.0k|        on_24_hour();
 3298|  13.0k|        on_text(&colon, &colon + 1);
 3299|  13.0k|        on_minute();
 3300|  13.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.36k|    {
 3303|       |        // %H:%M:%S
 3304|  2.36k|        constexpr CharT colon = ':';
 3305|  2.36k|        on_24_hour();
 3306|  2.36k|        on_text(&colon, &colon + 1);
 3307|  2.36k|        on_minute();
 3308|  2.36k|        on_text(&colon, &colon + 1);
 3309|  2.36k|        on_second();
 3310|  2.36k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  19.6k|    {
 3342|  19.6k|        m_st.verify(*this);
 3343|  19.6k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 19.6k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  19.6k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 19.5k, False: 102]
  |  Branch (3346:37): [True: 5.55k, False: 14.0k]
  |  Branch (3346:60): [True: 0, False: 14.0k]
  ------------------
 3347|  5.55k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  5.55k|        }
 3349|  19.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2295|  11.3k|    {
 2296|  11.3k|        st.handle_short_year_and_century(t.tm_year, 1900);
 2297|  11.3k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  59.8k|    {
 3353|  59.8k|        return m_error;
 3354|  59.8k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  19.6k|    {
 3370|  19.6k|        return m_begin;
 3371|  19.6k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  24.0k|{
 3563|  24.0k|    {
 3564|  24.0k|        SCN_TRY(it,
  ------------------
  |  | 3940|  24.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  24.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  24.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 256, False: 23.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    256|    }                                                  \
  |  |  |  | 3939|  24.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  23.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  23.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  23.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  23.8k|    static_cast<    \
  |  |  935|  23.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  23.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  23.8k|        ctx.range(), t, ctx.locale());
 3571|  23.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  23.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  23.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.3k, False: 13.4k]
  |  |  ------------------
  ------------------
 3573|  10.3k|        return unexpected(e.error());
 3574|  10.3k|    }
 3575|  13.4k|    return r.get_iterator();
 3576|  23.8k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  72.1k|{
  250|  72.1k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  72.1k|        .transform_error(impl::make_eof_scan_error);
  252|  72.1k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  23.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  23.8k|    static_cast<    \
  |  |  935|  23.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  23.8k|          m_begin(ranges::begin(m_range)),
 2708|  23.8k|          m_tm(t),
 2709|  23.8k|          m_loc(loc)
 2710|  23.8k|    {
 2711|  23.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  9.73k|    {
 3358|  9.73k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.73k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  41.9k|    {
 3363|  41.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.3k, False: 31.5k]
  ------------------
 3364|  10.3k|            m_error = unexpected(e);
 3365|  10.3k|        }
 3366|  41.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  23.6k|    {
 2715|  37.3k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 23.6k, False: 13.7k]
  ------------------
 2716|  23.6k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 136, False: 23.4k]
  ------------------
 2717|    136|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    136|            }
 2719|  23.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.73k, False: 13.7k]
  ------------------
 2720|  9.73k|                return on_error("Invalid literal character");
 2721|  9.73k|            }
 2722|  13.7k|            ++beg;
 2723|  13.7k|            ++m_begin;
 2724|  13.7k|        }
 2725|  23.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.08k|    {
 2745|  3.08k|#if !SCN_DISABLE_LOCALE
 2746|  3.08k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.08k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.08k|#endif
 2753|       |
 2754|  3.08k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.08k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.08k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.08k|    {
 2218|  3.08k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.08k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.08k|        t.tm_year = y - 1900;
 2223|  3.08k|        st.set_full_year(h);
 2224|  3.08k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  43.0k|    {
 3381|  43.0k|        int digits_read = 0;
 3382|  43.0k|        int accumulator = 0;
 3383|  71.5k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 71.2k, False: 282]
  ------------------
 3384|  71.2k|            const auto ch = *m_begin;
 3385|  71.2k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 22.2k, False: 49.0k]
  |  Branch (3385:36): [True: 16.6k, False: 32.4k]
  ------------------
 3386|  38.8k|                break;
 3387|  38.8k|            }
 3388|  32.4k|            ++m_begin;
 3389|  32.4k|            ++digits_read;
 3390|  32.4k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  32.4k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 3.83k, False: 28.5k]
  ------------------
 3392|  3.83k|                break;
 3393|  3.83k|            }
 3394|  32.4k|        }
 3395|  43.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 15.8k, False: 27.1k]
  ------------------
 3396|  15.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  15.8k|                                 "Too few integer digits"});
 3398|  15.8k|            return -1;
 3399|  15.8k|        }
 3400|  27.1k|        return accumulator;
 3401|  43.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.58k|    {
 2759|  1.58k|#if !SCN_DISABLE_LOCALE
 2760|  1.58k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.58k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.58k|#endif
 2768|       |
 2769|  1.58k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.58k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.58k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  1.58k|    {
 2235|  1.58k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.48k, False: 104]
  |  |  |  Branch (865:45): [True: 1.48k, False: 104]
  |  |  |  Branch (865:45): [True: 0, False: 104]
  |  |  ------------------
  ------------------
 2236|  1.48k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.48k|                                "Invalid value for tm_year"});
 2238|  1.48k|        }
 2239|    104|        st.short_year_value = y;
 2240|    104|        st.set_short_year(h);
 2241|    104|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  2.90k|    {
 2802|  2.90k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.90k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.90k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.90k|#endif
 2810|       |
 2811|  2.90k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.90k|            {"January", 1},
 2813|  2.90k|            {"February", 2},
 2814|  2.90k|            {"March", 3},
 2815|  2.90k|            {"April", 4},
 2816|  2.90k|            {"May", 5},
 2817|  2.90k|            {"June", 6},
 2818|  2.90k|            {"July", 7},
 2819|  2.90k|            {"August", 8},
 2820|  2.90k|            {"September", 9},
 2821|  2.90k|            {"October", 10},
 2822|  2.90k|            {"November", 11},
 2823|  2.90k|            {"December", 12},
 2824|  2.90k|        }};
 2825|  2.90k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 68, False: 2.83k]
  ------------------
 2826|     68|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     68|        }
 2828|  2.83k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.83k|            {"Jan", 1},
 2830|  2.83k|            {"Feb", 2},
 2831|  2.83k|            {"Mar", 3},
 2832|  2.83k|            {"Apr", 4},
 2833|  2.83k|            {"Jun", 6},
 2834|  2.83k|            {"Jul", 7},
 2835|  2.83k|            {"Aug", 8},
 2836|  2.83k|            {"Sep", 9},
 2837|  2.83k|            {"Oct", 10},
 2838|  2.83k|            {"Nov", 11},
 2839|  2.83k|            {"Dec", 12},
 2840|  2.83k|        }};
 2841|  2.83k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.35k, False: 1.48k]
  ------------------
 2842|  1.35k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.35k|        }
 2844|  1.48k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.48k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  4.65k|    {
 2208|  4.65k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.55k, False: 2.10k]
  |  |  |  Branch (865:45): [True: 2.46k, False: 2.18k]
  |  |  |  Branch (865:45): [True: 82, False: 2.10k]
  |  |  ------------------
  ------------------
 2209|  2.55k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.55k|                                "Invalid value for tm_mon"});
 2211|  2.55k|        }
 2212|  2.10k|        t.tm_mon = m - 1;
 2213|  2.10k|        st.set_mon(h);
 2214|  2.10k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.90k|    {
 3419|  2.90k|        auto start_it = m_begin;
 3420|  2.90k|        std::size_t options_available = N;
 3421|  2.90k|        std::size_t chars_consumed = 0;
 3422|  10.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.28k, False: 2.79k]
  ------------------
 3423|  10.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.21k, False: 68]
  ------------------
 3424|  7.21k|            std::size_t i = 0;
 3425|  7.21k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 7.17k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  7.17k|            const auto ch = *m_begin;
 3430|  7.17k|            ++m_begin;
 3431|  49.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.0k, False: 7.17k]
  ------------------
 3432|  42.0k|                const auto cmp = static_cast<unsigned>(
 3433|  42.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.0k]
  ------------------
 3435|  42.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 36.1k, False: 5.87k]
  |  Branch (3435:34): [True: 34.6k, False: 1.46k]
  ------------------
 3436|  34.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  34.6k|                                options.end());
 3438|  34.6k|                    --options_available;
 3439|  34.6k|                    continue;
 3440|  34.6k|                }
 3441|  7.33k|                ++i;
 3442|  7.33k|            }
 3443|  7.17k|            ++chars_consumed;
 3444|  7.17k|        }
 3445|  2.90k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.83k, False: 68]
  ------------------
 3446|  2.83k|            m_begin = start_it;
 3447|  2.83k|            return std::nullopt;
 3448|  2.83k|        }
 3449|     68|        return options.front().second;
 3450|  2.90k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.83k|    {
 3419|  2.83k|        auto start_it = m_begin;
 3420|  2.83k|        std::size_t options_available = N;
 3421|  2.83k|        std::size_t chars_consumed = 0;
 3422|  8.45k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.01k, False: 1.44k]
  ------------------
 3423|  8.45k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.66k, False: 1.35k]
  ------------------
 3424|  5.66k|            std::size_t i = 0;
 3425|  5.66k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 5.62k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  5.62k|            const auto ch = *m_begin;
 3430|  5.62k|            ++m_begin;
 3431|  39.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.9k, False: 5.62k]
  ------------------
 3432|  33.9k|                const auto cmp = static_cast<unsigned>(
 3433|  33.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.9k]
  ------------------
 3435|  33.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 31.1k, False: 2.81k]
  |  Branch (3435:34): [True: 29.7k, False: 1.39k]
  ------------------
 3436|  29.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  29.7k|                                options.end());
 3438|  29.7k|                    --options_available;
 3439|  29.7k|                    continue;
 3440|  29.7k|                }
 3441|  4.21k|                ++i;
 3442|  4.21k|            }
 3443|  5.62k|            ++chars_consumed;
 3444|  5.62k|        }
 3445|  2.83k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.48k, False: 1.35k]
  ------------------
 3446|  1.48k|            m_begin = start_it;
 3447|  1.48k|            return std::nullopt;
 3448|  1.48k|        }
 3449|  1.35k|        return options.front().second;
 3450|  2.83k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.23k|    {
 2848|  3.23k|#if !SCN_DISABLE_LOCALE
 2849|  3.23k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.23k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.23k|#endif
 2856|       |
 2857|  3.23k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.23k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.23k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.21k|    {
 2880|  3.21k|#if !SCN_DISABLE_LOCALE
 2881|  3.21k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.21k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.21k|#endif
 2888|       |
 2889|  3.21k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.21k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.21k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  3.21k|    {
 2198|  3.21k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  3.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.95k, False: 264]
  |  |  |  Branch (865:45): [True: 2.89k, False: 320]
  |  |  |  Branch (865:45): [True: 56, False: 264]
  |  |  ------------------
  ------------------
 2199|  2.95k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  2.95k|                                "Invalid value for tm_mday"});
 2201|  2.95k|        }
 2202|    264|        t.tm_mday = d;
 2203|    264|        st.set_mday(h);
 2204|    264|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  1.49k|    {
 2895|  1.49k|#if !SCN_DISABLE_LOCALE
 2896|  1.49k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.49k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.49k|#endif
 2903|       |
 2904|  1.49k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.49k|            {"Sunday", 0},
 2906|  1.49k|            {"Monday", 1},
 2907|  1.49k|            {"Tuesday", 2},
 2908|  1.49k|            {"Wednesday", 3},
 2909|  1.49k|            {"Thursday", 4},
 2910|  1.49k|            {"Friday", 5},
 2911|  1.49k|            {"Saturday", 6},
 2912|  1.49k|        }};
 2913|  1.49k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.49k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.49k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.49k|            {"Sun", 0},
 2918|  1.49k|            {"Mon", 1},
 2919|  1.49k|            {"Tue", 2},
 2920|  1.49k|            {"Wed", 3},
 2921|  1.49k|            {"Thu", 4},
 2922|  1.49k|            {"Fri", 5},
 2923|  1.49k|            {"Sat", 6},
 2924|  1.49k|        }};
 2925|  1.49k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 4, False: 1.49k]
  ------------------
 2926|      4|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      4|        }
 2928|  1.49k|        return set_error(
 2929|  1.49k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.49k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|      4|    {
 2245|      4|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|      4|        t.tm_wday = d;
 2250|      4|        st.set_wday(h);
 2251|      4|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.99k|    {
 3419|  2.99k|        auto start_it = m_begin;
 3420|  2.99k|        std::size_t options_available = N;
 3421|  2.99k|        std::size_t chars_consumed = 0;
 3422|  6.26k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.29k, False: 2.97k]
  ------------------
 3423|  6.26k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.28k, False: 4]
  ------------------
 3424|  3.28k|            std::size_t i = 0;
 3425|  3.28k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 16, False: 3.27k]
  ------------------
 3426|     16|                options_available = 0;
 3427|     16|                break;
 3428|     16|            }
 3429|  3.27k|            const auto ch = *m_begin;
 3430|  3.27k|            ++m_begin;
 3431|  24.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 21.2k, False: 3.27k]
  ------------------
 3432|  21.2k|                const auto cmp = static_cast<unsigned>(
 3433|  21.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  21.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 21.2k]
  ------------------
 3435|  21.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 20.9k, False: 308]
  |  Branch (3435:34): [True: 20.9k, False: 12]
  ------------------
 3436|  20.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  20.9k|                                options.end());
 3438|  20.9k|                    --options_available;
 3439|  20.9k|                    continue;
 3440|  20.9k|                }
 3441|    320|                ++i;
 3442|    320|            }
 3443|  3.27k|            ++chars_consumed;
 3444|  3.27k|        }
 3445|  2.99k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.99k, False: 4]
  ------------------
 3446|  2.99k|            m_begin = start_it;
 3447|  2.99k|            return std::nullopt;
 3448|  2.99k|        }
 3449|      4|        return options.front().second;
 3450|  2.99k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  14.7k|    {
 2969|  14.7k|#if !SCN_DISABLE_LOCALE
 2970|  14.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 14.7k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  14.7k|#endif
 2977|       |
 2978|  14.7k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  14.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  14.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  14.7k|    {
 2178|  14.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.34k, False: 12.4k]
  |  |  |  Branch (865:45): [True: 2.20k, False: 12.5k]
  |  |  |  Branch (865:45): [True: 134, False: 12.4k]
  |  |  ------------------
  ------------------
 2179|  2.34k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.34k|                                  "Invalid value for tm_hour"});
 2181|  2.34k|        }
 2182|  12.4k|        t.tm_hour = h;
 2183|  12.4k|        st.set_hour24(hdl);
 2184|  12.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  14.7k|    {
 2997|  14.7k|#if !SCN_DISABLE_LOCALE
 2998|  14.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 14.7k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  14.7k|#endif
 3005|       |
 3006|  14.7k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  14.7k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  14.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  14.7k|    {
 2168|  14.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.48k, False: 12.2k]
  |  |  |  Branch (865:45): [True: 2.46k, False: 12.2k]
  |  |  |  Branch (865:45): [True: 18, False: 12.2k]
  |  |  ------------------
  ------------------
 2169|  2.48k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.48k|                                "Invalid value for tm_min"});
 2171|  2.48k|        }
 2172|  12.2k|        t.tm_min = m;
 2173|  12.2k|        st.set_min(h);
 2174|  12.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.38k|    {
 3011|  2.38k|#if !SCN_DISABLE_LOCALE
 3012|  2.38k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.38k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.38k|#endif
 3019|       |
 3020|  2.38k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.38k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.38k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.38k|    {
 2158|  2.38k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.46k, False: 918]
  |  |  |  Branch (865:45): [True: 1.46k, False: 920]
  |  |  |  Branch (865:45): [True: 2, False: 918]
  |  |  ------------------
  ------------------
 2159|  1.46k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.46k|                                "Invalid value for tm_sec"});
 2161|  1.46k|        }
 2162|    918|        t.tm_sec = s;
 2163|    918|        st.set_sec(h);
 2164|    918|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.58k|    {
 3253|       |        // %m/%d/%y
 3254|  1.58k|        constexpr CharT slash = '/';
 3255|  1.58k|        on_dec_month();
 3256|  1.58k|        on_text(&slash, &slash + 1);
 3257|  1.58k|        on_day_of_month();
 3258|  1.58k|        on_text(&slash, &slash + 1);
 3259|  1.58k|        on_short_year();
 3260|  1.58k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.59k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.59k|        constexpr CharT dash = '-';
 3265|  1.59k|        on_full_year();
 3266|  1.59k|        on_text(&dash, &dash + 1);
 3267|  1.59k|        on_dec_month();
 3268|  1.59k|        on_text(&dash, &dash + 1);
 3269|  1.59k|        on_day_of_month();
 3270|  1.59k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  12.3k|    {
 3295|       |        // %H:%M
 3296|  12.3k|        constexpr CharT colon = ':';
 3297|  12.3k|        on_24_hour();
 3298|  12.3k|        on_text(&colon, &colon + 1);
 3299|  12.3k|        on_minute();
 3300|  12.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.38k|    {
 3303|       |        // %H:%M:%S
 3304|  2.38k|        constexpr CharT colon = ':';
 3305|  2.38k|        on_24_hour();
 3306|  2.38k|        on_text(&colon, &colon + 1);
 3307|  2.38k|        on_minute();
 3308|  2.38k|        on_text(&colon, &colon + 1);
 3309|  2.38k|        on_second();
 3310|  2.38k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  13.4k|    {
 3342|  13.4k|        m_st.verify(*this);
 3343|  13.4k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 13.4k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  13.4k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 13.3k, False: 102]
  |  Branch (3346:37): [True: 96, False: 13.2k]
  |  Branch (3346:60): [True: 0, False: 13.2k]
  ------------------
 3347|     96|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     96|        }
 3349|  13.4k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  47.7k|    {
 3353|  47.7k|        return m_error;
 3354|  47.7k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  13.4k|    {
 3370|  13.4k|        return m_begin;
 3371|  13.4k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  30.3k|{
 3563|  30.3k|    {
 3564|  30.3k|        SCN_TRY(it,
  ------------------
  |  | 3940|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 484, False: 29.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    484|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    484|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    484|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    484|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    484|    }                                                  \
  |  |  |  | 3939|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  29.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  29.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  29.8k|    static_cast<    \
  |  |  935|  29.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  29.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  29.8k|        ctx.range(), t, ctx.locale());
 3571|  29.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  29.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.1k, False: 19.6k]
  |  |  ------------------
  ------------------
 3573|  10.1k|        return unexpected(e.error());
 3574|  10.1k|    }
 3575|  19.6k|    return r.get_iterator();
 3576|  29.8k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  29.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  29.8k|    static_cast<    \
  |  |  935|  29.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  29.8k|          m_begin(ranges::begin(m_range)),
 2708|  29.8k|          m_tm(t),
 2709|  29.8k|          m_loc(loc)
 2710|  29.8k|    {
 2711|  29.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  9.38k|    {
 3358|  9.38k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.38k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  40.1k|    {
 3363|  40.1k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.1k, False: 29.9k]
  ------------------
 3364|  10.1k|            m_error = unexpected(e);
 3365|  10.1k|        }
 3366|  40.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  35.1k|    {
 2715|  60.6k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 35.1k, False: 25.5k]
  ------------------
 2716|  35.1k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 182, False: 34.9k]
  ------------------
 2717|    182|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    182|            }
 2719|  34.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.38k, False: 25.5k]
  ------------------
 2720|  9.38k|                return on_error("Invalid literal character");
 2721|  9.38k|            }
 2722|  25.5k|            ++beg;
 2723|  25.5k|            ++m_begin;
 2724|  25.5k|        }
 2725|  35.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.02k|    {
 2745|  3.02k|#if !SCN_DISABLE_LOCALE
 2746|  3.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.02k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.02k|#endif
 2753|       |
 2754|  3.02k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.02k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.02k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.02k|    {
 2218|  3.02k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.02k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.02k|        t.tm_year = y - 1900;
 2223|  3.02k|        st.set_full_year(h);
 2224|  3.02k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  60.6k|    {
 3381|  60.6k|        int digits_read = 0;
 3382|  60.6k|        int accumulator = 0;
 3383|   107k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 107k, False: 358]
  ------------------
 3384|   107k|            const auto ch = *m_begin;
 3385|   107k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 32.7k, False: 74.6k]
  |  Branch (3385:36): [True: 17.8k, False: 56.7k]
  ------------------
 3386|  50.6k|                break;
 3387|  50.6k|            }
 3388|  56.7k|            ++m_begin;
 3389|  56.7k|            ++digits_read;
 3390|  56.7k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  56.7k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 9.55k, False: 47.1k]
  ------------------
 3392|  9.55k|                break;
 3393|  9.55k|            }
 3394|  56.7k|        }
 3395|  60.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 15.0k, False: 45.5k]
  ------------------
 3396|  15.0k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  15.0k|                                 "Too few integer digits"});
 3398|  15.0k|            return -1;
 3399|  15.0k|        }
 3400|  45.5k|        return accumulator;
 3401|  60.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  7.01k|    {
 2759|  7.01k|#if !SCN_DISABLE_LOCALE
 2760|  7.01k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 7.01k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  7.01k|#endif
 2768|       |
 2769|  7.01k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  7.01k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  7.01k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  7.01k|    {
 2235|  7.01k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.44k, False: 5.56k]
  |  |  |  Branch (865:45): [True: 1.44k, False: 5.56k]
  |  |  |  Branch (865:45): [True: 0, False: 5.56k]
  |  |  ------------------
  ------------------
 2236|  1.44k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.44k|                                "Invalid value for tm_year"});
 2238|  1.44k|        }
 2239|  5.56k|        st.short_year_value = y;
 2240|  5.56k|        st.set_short_year(h);
 2241|  5.56k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  2.87k|    {
 2802|  2.87k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.87k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.87k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.87k|#endif
 2810|       |
 2811|  2.87k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.87k|            {"January", 1},
 2813|  2.87k|            {"February", 2},
 2814|  2.87k|            {"March", 3},
 2815|  2.87k|            {"April", 4},
 2816|  2.87k|            {"May", 5},
 2817|  2.87k|            {"June", 6},
 2818|  2.87k|            {"July", 7},
 2819|  2.87k|            {"August", 8},
 2820|  2.87k|            {"September", 9},
 2821|  2.87k|            {"October", 10},
 2822|  2.87k|            {"November", 11},
 2823|  2.87k|            {"December", 12},
 2824|  2.87k|        }};
 2825|  2.87k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 68, False: 2.80k]
  ------------------
 2826|     68|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     68|        }
 2828|  2.80k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.80k|            {"Jan", 1},
 2830|  2.80k|            {"Feb", 2},
 2831|  2.80k|            {"Mar", 3},
 2832|  2.80k|            {"Apr", 4},
 2833|  2.80k|            {"Jun", 6},
 2834|  2.80k|            {"Jul", 7},
 2835|  2.80k|            {"Aug", 8},
 2836|  2.80k|            {"Sep", 9},
 2837|  2.80k|            {"Oct", 10},
 2838|  2.80k|            {"Nov", 11},
 2839|  2.80k|            {"Dec", 12},
 2840|  2.80k|        }};
 2841|  2.80k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.35k, False: 1.44k]
  ------------------
 2842|  1.35k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.35k|        }
 2844|  1.44k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.44k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  10.0k|    {
 2208|  10.0k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.44k, False: 7.61k]
  |  |  |  Branch (865:45): [True: 2.34k, False: 7.71k]
  |  |  |  Branch (865:45): [True: 96, False: 7.61k]
  |  |  ------------------
  ------------------
 2209|  2.44k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.44k|                                "Invalid value for tm_mon"});
 2211|  2.44k|        }
 2212|  7.61k|        t.tm_mon = m - 1;
 2213|  7.61k|        st.set_mon(h);
 2214|  7.61k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.87k|    {
 3419|  2.87k|        auto start_it = m_begin;
 3420|  2.87k|        std::size_t options_available = N;
 3421|  2.87k|        std::size_t chars_consumed = 0;
 3422|  10.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.30k, False: 2.75k]
  ------------------
 3423|  10.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.23k, False: 68]
  ------------------
 3424|  7.23k|            std::size_t i = 0;
 3425|  7.23k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 46, False: 7.18k]
  ------------------
 3426|     46|                options_available = 0;
 3427|     46|                break;
 3428|     46|            }
 3429|  7.18k|            const auto ch = *m_begin;
 3430|  7.18k|            ++m_begin;
 3431|  48.9k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 41.7k, False: 7.18k]
  ------------------
 3432|  41.7k|                const auto cmp = static_cast<unsigned>(
 3433|  41.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  41.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 41.7k]
  ------------------
 3435|  41.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 35.7k, False: 5.92k]
  |  Branch (3435:34): [True: 34.2k, False: 1.50k]
  ------------------
 3436|  34.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  34.2k|                                options.end());
 3438|  34.2k|                    --options_available;
 3439|  34.2k|                    continue;
 3440|  34.2k|                }
 3441|  7.42k|                ++i;
 3442|  7.42k|            }
 3443|  7.18k|            ++chars_consumed;
 3444|  7.18k|        }
 3445|  2.87k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.80k, False: 68]
  ------------------
 3446|  2.80k|            m_begin = start_it;
 3447|  2.80k|            return std::nullopt;
 3448|  2.80k|        }
 3449|     68|        return options.front().second;
 3450|  2.87k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.80k|    {
 3419|  2.80k|        auto start_it = m_begin;
 3420|  2.80k|        std::size_t options_available = N;
 3421|  2.80k|        std::size_t chars_consumed = 0;
 3422|  8.43k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.02k, False: 1.40k]
  ------------------
 3423|  8.43k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.67k, False: 1.35k]
  ------------------
 3424|  5.67k|            std::size_t i = 0;
 3425|  5.67k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 42, False: 5.62k]
  ------------------
 3426|     42|                options_available = 0;
 3427|     42|                break;
 3428|     42|            }
 3429|  5.62k|            const auto ch = *m_begin;
 3430|  5.62k|            ++m_begin;
 3431|  39.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.6k, False: 5.62k]
  ------------------
 3432|  33.6k|                const auto cmp = static_cast<unsigned>(
 3433|  33.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.6k]
  ------------------
 3435|  33.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 30.8k, False: 2.84k]
  |  Branch (3435:34): [True: 29.4k, False: 1.42k]
  ------------------
 3436|  29.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  29.4k|                                options.end());
 3438|  29.4k|                    --options_available;
 3439|  29.4k|                    continue;
 3440|  29.4k|                }
 3441|  4.27k|                ++i;
 3442|  4.27k|            }
 3443|  5.62k|            ++chars_consumed;
 3444|  5.62k|        }
 3445|  2.80k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.44k, False: 1.35k]
  ------------------
 3446|  1.44k|            m_begin = start_it;
 3447|  1.44k|            return std::nullopt;
 3448|  1.44k|        }
 3449|  1.35k|        return options.front().second;
 3450|  2.80k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  8.63k|    {
 2848|  8.63k|#if !SCN_DISABLE_LOCALE
 2849|  8.63k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 8.63k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  8.63k|#endif
 2856|       |
 2857|  8.63k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  8.63k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  8.63k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  8.61k|    {
 2880|  8.61k|#if !SCN_DISABLE_LOCALE
 2881|  8.61k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 8.61k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  8.61k|#endif
 2888|       |
 2889|  8.61k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  8.61k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  8.61k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  8.61k|    {
 2198|  8.61k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.86k, False: 5.74k]
  |  |  |  Branch (865:45): [True: 2.80k, False: 5.80k]
  |  |  |  Branch (865:45): [True: 60, False: 5.74k]
  |  |  ------------------
  ------------------
 2199|  2.86k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  2.86k|                                "Invalid value for tm_mday"});
 2201|  2.86k|        }
 2202|  5.74k|        t.tm_mday = d;
 2203|  5.74k|        st.set_mday(h);
 2204|  5.74k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  1.47k|    {
 2895|  1.47k|#if !SCN_DISABLE_LOCALE
 2896|  1.47k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.47k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.47k|#endif
 2903|       |
 2904|  1.47k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.47k|            {"Sunday", 0},
 2906|  1.47k|            {"Monday", 1},
 2907|  1.47k|            {"Tuesday", 2},
 2908|  1.47k|            {"Wednesday", 3},
 2909|  1.47k|            {"Thursday", 4},
 2910|  1.47k|            {"Friday", 5},
 2911|  1.47k|            {"Saturday", 6},
 2912|  1.47k|        }};
 2913|  1.47k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.47k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.47k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.47k|            {"Sun", 0},
 2918|  1.47k|            {"Mon", 1},
 2919|  1.47k|            {"Tue", 2},
 2920|  1.47k|            {"Wed", 3},
 2921|  1.47k|            {"Thu", 4},
 2922|  1.47k|            {"Fri", 5},
 2923|  1.47k|            {"Sat", 6},
 2924|  1.47k|        }};
 2925|  1.47k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 4, False: 1.46k]
  ------------------
 2926|      4|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      4|        }
 2928|  1.46k|        return set_error(
 2929|  1.46k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.47k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|      4|    {
 2245|      4|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|      4|        t.tm_wday = d;
 2250|      4|        st.set_wday(h);
 2251|      4|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.94k|    {
 3419|  2.94k|        auto start_it = m_begin;
 3420|  2.94k|        std::size_t options_available = N;
 3421|  2.94k|        std::size_t chars_consumed = 0;
 3422|  6.17k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.26k, False: 2.91k]
  ------------------
 3423|  6.17k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.26k, False: 4]
  ------------------
 3424|  3.26k|            std::size_t i = 0;
 3425|  3.26k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.23k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.23k|            const auto ch = *m_begin;
 3430|  3.23k|            ++m_begin;
 3431|  24.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 20.8k, False: 3.23k]
  ------------------
 3432|  20.8k|                const auto cmp = static_cast<unsigned>(
 3433|  20.8k|                    ch ^ options[i].first[chars_consumed]);
 3434|  20.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 20.8k]
  ------------------
 3435|  20.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 20.5k, False: 312]
  |  Branch (3435:34): [True: 20.5k, False: 40]
  ------------------
 3436|  20.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  20.5k|                                options.end());
 3438|  20.5k|                    --options_available;
 3439|  20.5k|                    continue;
 3440|  20.5k|                }
 3441|    352|                ++i;
 3442|    352|            }
 3443|  3.23k|            ++chars_consumed;
 3444|  3.23k|        }
 3445|  2.94k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.93k, False: 4]
  ------------------
 3446|  2.93k|            m_begin = start_it;
 3447|  2.93k|            return std::nullopt;
 3448|  2.93k|        }
 3449|      4|        return options.front().second;
 3450|  2.94k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  15.4k|    {
 2969|  15.4k|#if !SCN_DISABLE_LOCALE
 2970|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 15.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  15.4k|#endif
 2977|       |
 2978|  15.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  15.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  15.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  15.4k|    {
 2178|  15.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.04k, False: 13.4k]
  |  |  |  Branch (865:45): [True: 1.89k, False: 13.5k]
  |  |  |  Branch (865:45): [True: 150, False: 13.4k]
  |  |  ------------------
  ------------------
 2179|  2.04k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.04k|                                  "Invalid value for tm_hour"});
 2181|  2.04k|        }
 2182|  13.4k|        t.tm_hour = h;
 2183|  13.4k|        st.set_hour24(hdl);
 2184|  13.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  15.4k|    {
 2997|  15.4k|#if !SCN_DISABLE_LOCALE
 2998|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 15.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  15.4k|#endif
 3005|       |
 3006|  15.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  15.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  15.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  15.4k|    {
 2168|  15.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.38k, False: 13.0k]
  |  |  |  Branch (865:45): [True: 2.35k, False: 13.1k]
  |  |  |  Branch (865:45): [True: 26, False: 13.0k]
  |  |  ------------------
  ------------------
 2169|  2.38k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.38k|                                "Invalid value for tm_min"});
 2171|  2.38k|        }
 2172|  13.0k|        t.tm_min = m;
 2173|  13.0k|        st.set_min(h);
 2174|  13.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.36k|    {
 3011|  2.36k|#if !SCN_DISABLE_LOCALE
 3012|  2.36k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.36k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.36k|#endif
 3019|       |
 3020|  2.36k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.36k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.36k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.36k|    {
 2158|  2.36k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.43k, False: 926]
  |  |  |  Branch (865:45): [True: 1.43k, False: 930]
  |  |  |  Branch (865:45): [True: 4, False: 926]
  |  |  ------------------
  ------------------
 2159|  1.43k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.43k|                                "Invalid value for tm_sec"});
 2161|  1.43k|        }
 2162|    926|        t.tm_sec = s;
 2163|    926|        st.set_sec(h);
 2164|    926|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  7.01k|    {
 3253|       |        // %m/%d/%y
 3254|  7.01k|        constexpr CharT slash = '/';
 3255|  7.01k|        on_dec_month();
 3256|  7.01k|        on_text(&slash, &slash + 1);
 3257|  7.01k|        on_day_of_month();
 3258|  7.01k|        on_text(&slash, &slash + 1);
 3259|  7.01k|        on_short_year();
 3260|  7.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.56k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.56k|        constexpr CharT dash = '-';
 3265|  1.56k|        on_full_year();
 3266|  1.56k|        on_text(&dash, &dash + 1);
 3267|  1.56k|        on_dec_month();
 3268|  1.56k|        on_text(&dash, &dash + 1);
 3269|  1.56k|        on_day_of_month();
 3270|  1.56k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  13.0k|    {
 3295|       |        // %H:%M
 3296|  13.0k|        constexpr CharT colon = ':';
 3297|  13.0k|        on_24_hour();
 3298|  13.0k|        on_text(&colon, &colon + 1);
 3299|  13.0k|        on_minute();
 3300|  13.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.36k|    {
 3303|       |        // %H:%M:%S
 3304|  2.36k|        constexpr CharT colon = ':';
 3305|  2.36k|        on_24_hour();
 3306|  2.36k|        on_text(&colon, &colon + 1);
 3307|  2.36k|        on_minute();
 3308|  2.36k|        on_text(&colon, &colon + 1);
 3309|  2.36k|        on_second();
 3310|  2.36k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  19.6k|    {
 3342|  19.6k|        m_st.verify(*this);
 3343|  19.6k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 19.6k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  19.6k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 19.5k, False: 102]
  |  Branch (3346:37): [True: 5.55k, False: 14.0k]
  |  Branch (3346:60): [True: 0, False: 14.0k]
  ------------------
 3347|  5.55k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  5.55k|        }
 3349|  19.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  59.8k|    {
 3353|  59.8k|        return m_error;
 3354|  59.8k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  19.6k|    {
 3370|  19.6k|        return m_begin;
 3371|  19.6k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  24.0k|{
 3563|  24.0k|    {
 3564|  24.0k|        SCN_TRY(it,
  ------------------
  |  | 3940|  24.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  24.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  24.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 256, False: 23.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    256|    }                                                  \
  |  |  |  | 3939|  24.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  23.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  23.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  23.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  23.8k|    static_cast<    \
  |  |  935|  23.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  23.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  23.8k|        ctx.range(), t, ctx.locale());
 3571|  23.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  23.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  23.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.3k, False: 13.4k]
  |  |  ------------------
  ------------------
 3573|  10.3k|        return unexpected(e.error());
 3574|  10.3k|    }
 3575|  13.4k|    return r.get_iterator();
 3576|  23.8k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  23.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  23.8k|    static_cast<    \
  |  |  935|  23.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  23.8k|          m_begin(ranges::begin(m_range)),
 2708|  23.8k|          m_tm(t),
 2709|  23.8k|          m_loc(loc)
 2710|  23.8k|    {
 2711|  23.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  9.73k|    {
 3358|  9.73k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.73k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  41.9k|    {
 3363|  41.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.3k, False: 31.5k]
  ------------------
 3364|  10.3k|            m_error = unexpected(e);
 3365|  10.3k|        }
 3366|  41.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  23.6k|    {
 2715|  37.3k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 23.6k, False: 13.7k]
  ------------------
 2716|  23.6k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 136, False: 23.4k]
  ------------------
 2717|    136|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    136|            }
 2719|  23.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.73k, False: 13.7k]
  ------------------
 2720|  9.73k|                return on_error("Invalid literal character");
 2721|  9.73k|            }
 2722|  13.7k|            ++beg;
 2723|  13.7k|            ++m_begin;
 2724|  13.7k|        }
 2725|  23.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.08k|    {
 2745|  3.08k|#if !SCN_DISABLE_LOCALE
 2746|  3.08k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.08k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.08k|#endif
 2753|       |
 2754|  3.08k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.08k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.08k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.08k|    {
 2218|  3.08k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.08k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.08k|        t.tm_year = y - 1900;
 2223|  3.08k|        st.set_full_year(h);
 2224|  3.08k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  43.0k|    {
 3381|  43.0k|        int digits_read = 0;
 3382|  43.0k|        int accumulator = 0;
 3383|  71.5k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 71.2k, False: 282]
  ------------------
 3384|  71.2k|            const auto ch = *m_begin;
 3385|  71.2k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 22.2k, False: 49.0k]
  |  Branch (3385:36): [True: 16.6k, False: 32.4k]
  ------------------
 3386|  38.8k|                break;
 3387|  38.8k|            }
 3388|  32.4k|            ++m_begin;
 3389|  32.4k|            ++digits_read;
 3390|  32.4k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  32.4k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 3.83k, False: 28.5k]
  ------------------
 3392|  3.83k|                break;
 3393|  3.83k|            }
 3394|  32.4k|        }
 3395|  43.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 15.8k, False: 27.1k]
  ------------------
 3396|  15.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  15.8k|                                 "Too few integer digits"});
 3398|  15.8k|            return -1;
 3399|  15.8k|        }
 3400|  27.1k|        return accumulator;
 3401|  43.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.58k|    {
 2759|  1.58k|#if !SCN_DISABLE_LOCALE
 2760|  1.58k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.58k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.58k|#endif
 2768|       |
 2769|  1.58k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.58k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.58k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  1.58k|    {
 2235|  1.58k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.48k, False: 104]
  |  |  |  Branch (865:45): [True: 1.48k, False: 104]
  |  |  |  Branch (865:45): [True: 0, False: 104]
  |  |  ------------------
  ------------------
 2236|  1.48k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.48k|                                "Invalid value for tm_year"});
 2238|  1.48k|        }
 2239|    104|        st.short_year_value = y;
 2240|    104|        st.set_short_year(h);
 2241|    104|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  2.90k|    {
 2802|  2.90k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.90k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.90k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.90k|#endif
 2810|       |
 2811|  2.90k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.90k|            {"January", 1},
 2813|  2.90k|            {"February", 2},
 2814|  2.90k|            {"March", 3},
 2815|  2.90k|            {"April", 4},
 2816|  2.90k|            {"May", 5},
 2817|  2.90k|            {"June", 6},
 2818|  2.90k|            {"July", 7},
 2819|  2.90k|            {"August", 8},
 2820|  2.90k|            {"September", 9},
 2821|  2.90k|            {"October", 10},
 2822|  2.90k|            {"November", 11},
 2823|  2.90k|            {"December", 12},
 2824|  2.90k|        }};
 2825|  2.90k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 68, False: 2.83k]
  ------------------
 2826|     68|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     68|        }
 2828|  2.83k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.83k|            {"Jan", 1},
 2830|  2.83k|            {"Feb", 2},
 2831|  2.83k|            {"Mar", 3},
 2832|  2.83k|            {"Apr", 4},
 2833|  2.83k|            {"Jun", 6},
 2834|  2.83k|            {"Jul", 7},
 2835|  2.83k|            {"Aug", 8},
 2836|  2.83k|            {"Sep", 9},
 2837|  2.83k|            {"Oct", 10},
 2838|  2.83k|            {"Nov", 11},
 2839|  2.83k|            {"Dec", 12},
 2840|  2.83k|        }};
 2841|  2.83k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.35k, False: 1.48k]
  ------------------
 2842|  1.35k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.35k|        }
 2844|  1.48k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.48k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  4.65k|    {
 2208|  4.65k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.55k, False: 2.10k]
  |  |  |  Branch (865:45): [True: 2.46k, False: 2.18k]
  |  |  |  Branch (865:45): [True: 82, False: 2.10k]
  |  |  ------------------
  ------------------
 2209|  2.55k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.55k|                                "Invalid value for tm_mon"});
 2211|  2.55k|        }
 2212|  2.10k|        t.tm_mon = m - 1;
 2213|  2.10k|        st.set_mon(h);
 2214|  2.10k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.90k|    {
 3419|  2.90k|        auto start_it = m_begin;
 3420|  2.90k|        std::size_t options_available = N;
 3421|  2.90k|        std::size_t chars_consumed = 0;
 3422|  10.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.28k, False: 2.79k]
  ------------------
 3423|  10.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.21k, False: 68]
  ------------------
 3424|  7.21k|            std::size_t i = 0;
 3425|  7.21k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 7.17k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  7.17k|            const auto ch = *m_begin;
 3430|  7.17k|            ++m_begin;
 3431|  49.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.0k, False: 7.17k]
  ------------------
 3432|  42.0k|                const auto cmp = static_cast<unsigned>(
 3433|  42.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.0k]
  ------------------
 3435|  42.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 36.1k, False: 5.87k]
  |  Branch (3435:34): [True: 34.6k, False: 1.46k]
  ------------------
 3436|  34.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  34.6k|                                options.end());
 3438|  34.6k|                    --options_available;
 3439|  34.6k|                    continue;
 3440|  34.6k|                }
 3441|  7.33k|                ++i;
 3442|  7.33k|            }
 3443|  7.17k|            ++chars_consumed;
 3444|  7.17k|        }
 3445|  2.90k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.83k, False: 68]
  ------------------
 3446|  2.83k|            m_begin = start_it;
 3447|  2.83k|            return std::nullopt;
 3448|  2.83k|        }
 3449|     68|        return options.front().second;
 3450|  2.90k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.83k|    {
 3419|  2.83k|        auto start_it = m_begin;
 3420|  2.83k|        std::size_t options_available = N;
 3421|  2.83k|        std::size_t chars_consumed = 0;
 3422|  8.45k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.01k, False: 1.44k]
  ------------------
 3423|  8.45k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.66k, False: 1.35k]
  ------------------
 3424|  5.66k|            std::size_t i = 0;
 3425|  5.66k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 5.62k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  5.62k|            const auto ch = *m_begin;
 3430|  5.62k|            ++m_begin;
 3431|  39.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.9k, False: 5.62k]
  ------------------
 3432|  33.9k|                const auto cmp = static_cast<unsigned>(
 3433|  33.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.9k]
  ------------------
 3435|  33.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 31.1k, False: 2.81k]
  |  Branch (3435:34): [True: 29.7k, False: 1.39k]
  ------------------
 3436|  29.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  29.7k|                                options.end());
 3438|  29.7k|                    --options_available;
 3439|  29.7k|                    continue;
 3440|  29.7k|                }
 3441|  4.21k|                ++i;
 3442|  4.21k|            }
 3443|  5.62k|            ++chars_consumed;
 3444|  5.62k|        }
 3445|  2.83k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.48k, False: 1.35k]
  ------------------
 3446|  1.48k|            m_begin = start_it;
 3447|  1.48k|            return std::nullopt;
 3448|  1.48k|        }
 3449|  1.35k|        return options.front().second;
 3450|  2.83k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.23k|    {
 2848|  3.23k|#if !SCN_DISABLE_LOCALE
 2849|  3.23k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.23k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.23k|#endif
 2856|       |
 2857|  3.23k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.23k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.23k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.21k|    {
 2880|  3.21k|#if !SCN_DISABLE_LOCALE
 2881|  3.21k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.21k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.21k|#endif
 2888|       |
 2889|  3.21k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.21k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.21k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  3.21k|    {
 2198|  3.21k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  3.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.95k, False: 264]
  |  |  |  Branch (865:45): [True: 2.89k, False: 320]
  |  |  |  Branch (865:45): [True: 56, False: 264]
  |  |  ------------------
  ------------------
 2199|  2.95k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  2.95k|                                "Invalid value for tm_mday"});
 2201|  2.95k|        }
 2202|    264|        t.tm_mday = d;
 2203|    264|        st.set_mday(h);
 2204|    264|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  1.49k|    {
 2895|  1.49k|#if !SCN_DISABLE_LOCALE
 2896|  1.49k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.49k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.49k|#endif
 2903|       |
 2904|  1.49k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.49k|            {"Sunday", 0},
 2906|  1.49k|            {"Monday", 1},
 2907|  1.49k|            {"Tuesday", 2},
 2908|  1.49k|            {"Wednesday", 3},
 2909|  1.49k|            {"Thursday", 4},
 2910|  1.49k|            {"Friday", 5},
 2911|  1.49k|            {"Saturday", 6},
 2912|  1.49k|        }};
 2913|  1.49k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.49k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.49k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.49k|            {"Sun", 0},
 2918|  1.49k|            {"Mon", 1},
 2919|  1.49k|            {"Tue", 2},
 2920|  1.49k|            {"Wed", 3},
 2921|  1.49k|            {"Thu", 4},
 2922|  1.49k|            {"Fri", 5},
 2923|  1.49k|            {"Sat", 6},
 2924|  1.49k|        }};
 2925|  1.49k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 4, False: 1.49k]
  ------------------
 2926|      4|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      4|        }
 2928|  1.49k|        return set_error(
 2929|  1.49k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.49k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|      4|    {
 2245|      4|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|      4|        t.tm_wday = d;
 2250|      4|        st.set_wday(h);
 2251|      4|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.99k|    {
 3419|  2.99k|        auto start_it = m_begin;
 3420|  2.99k|        std::size_t options_available = N;
 3421|  2.99k|        std::size_t chars_consumed = 0;
 3422|  6.26k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.29k, False: 2.97k]
  ------------------
 3423|  6.26k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.28k, False: 4]
  ------------------
 3424|  3.28k|            std::size_t i = 0;
 3425|  3.28k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 16, False: 3.27k]
  ------------------
 3426|     16|                options_available = 0;
 3427|     16|                break;
 3428|     16|            }
 3429|  3.27k|            const auto ch = *m_begin;
 3430|  3.27k|            ++m_begin;
 3431|  24.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 21.2k, False: 3.27k]
  ------------------
 3432|  21.2k|                const auto cmp = static_cast<unsigned>(
 3433|  21.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  21.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 21.2k]
  ------------------
 3435|  21.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 20.9k, False: 308]
  |  Branch (3435:34): [True: 20.9k, False: 12]
  ------------------
 3436|  20.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  20.9k|                                options.end());
 3438|  20.9k|                    --options_available;
 3439|  20.9k|                    continue;
 3440|  20.9k|                }
 3441|    320|                ++i;
 3442|    320|            }
 3443|  3.27k|            ++chars_consumed;
 3444|  3.27k|        }
 3445|  2.99k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.99k, False: 4]
  ------------------
 3446|  2.99k|            m_begin = start_it;
 3447|  2.99k|            return std::nullopt;
 3448|  2.99k|        }
 3449|      4|        return options.front().second;
 3450|  2.99k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  14.7k|    {
 2969|  14.7k|#if !SCN_DISABLE_LOCALE
 2970|  14.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 14.7k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  14.7k|#endif
 2977|       |
 2978|  14.7k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  14.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  14.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  14.7k|    {
 2178|  14.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.34k, False: 12.4k]
  |  |  |  Branch (865:45): [True: 2.20k, False: 12.5k]
  |  |  |  Branch (865:45): [True: 134, False: 12.4k]
  |  |  ------------------
  ------------------
 2179|  2.34k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.34k|                                  "Invalid value for tm_hour"});
 2181|  2.34k|        }
 2182|  12.4k|        t.tm_hour = h;
 2183|  12.4k|        st.set_hour24(hdl);
 2184|  12.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  14.7k|    {
 2997|  14.7k|#if !SCN_DISABLE_LOCALE
 2998|  14.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 14.7k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  14.7k|#endif
 3005|       |
 3006|  14.7k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  14.7k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  14.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  14.7k|    {
 2168|  14.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.48k, False: 12.2k]
  |  |  |  Branch (865:45): [True: 2.46k, False: 12.2k]
  |  |  |  Branch (865:45): [True: 18, False: 12.2k]
  |  |  ------------------
  ------------------
 2169|  2.48k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.48k|                                "Invalid value for tm_min"});
 2171|  2.48k|        }
 2172|  12.2k|        t.tm_min = m;
 2173|  12.2k|        st.set_min(h);
 2174|  12.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.38k|    {
 3011|  2.38k|#if !SCN_DISABLE_LOCALE
 3012|  2.38k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.38k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.38k|#endif
 3019|       |
 3020|  2.38k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.38k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.38k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.38k|    {
 2158|  2.38k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.46k, False: 918]
  |  |  |  Branch (865:45): [True: 1.46k, False: 920]
  |  |  |  Branch (865:45): [True: 2, False: 918]
  |  |  ------------------
  ------------------
 2159|  1.46k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.46k|                                "Invalid value for tm_sec"});
 2161|  1.46k|        }
 2162|    918|        t.tm_sec = s;
 2163|    918|        st.set_sec(h);
 2164|    918|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.58k|    {
 3253|       |        // %m/%d/%y
 3254|  1.58k|        constexpr CharT slash = '/';
 3255|  1.58k|        on_dec_month();
 3256|  1.58k|        on_text(&slash, &slash + 1);
 3257|  1.58k|        on_day_of_month();
 3258|  1.58k|        on_text(&slash, &slash + 1);
 3259|  1.58k|        on_short_year();
 3260|  1.58k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.59k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.59k|        constexpr CharT dash = '-';
 3265|  1.59k|        on_full_year();
 3266|  1.59k|        on_text(&dash, &dash + 1);
 3267|  1.59k|        on_dec_month();
 3268|  1.59k|        on_text(&dash, &dash + 1);
 3269|  1.59k|        on_day_of_month();
 3270|  1.59k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  12.3k|    {
 3295|       |        // %H:%M
 3296|  12.3k|        constexpr CharT colon = ':';
 3297|  12.3k|        on_24_hour();
 3298|  12.3k|        on_text(&colon, &colon + 1);
 3299|  12.3k|        on_minute();
 3300|  12.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.38k|    {
 3303|       |        // %H:%M:%S
 3304|  2.38k|        constexpr CharT colon = ':';
 3305|  2.38k|        on_24_hour();
 3306|  2.38k|        on_text(&colon, &colon + 1);
 3307|  2.38k|        on_minute();
 3308|  2.38k|        on_text(&colon, &colon + 1);
 3309|  2.38k|        on_second();
 3310|  2.38k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  13.4k|    {
 3342|  13.4k|        m_st.verify(*this);
 3343|  13.4k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 13.4k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  13.4k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 13.3k, False: 102]
  |  Branch (3346:37): [True: 96, False: 13.2k]
  |  Branch (3346:60): [True: 0, False: 13.2k]
  ------------------
 3347|     96|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     96|        }
 3349|  13.4k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  47.7k|    {
 3353|  47.7k|        return m_error;
 3354|  47.7k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  13.4k|    {
 3370|  13.4k|        return m_begin;
 3371|  13.4k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  30.3k|{
 3563|  30.3k|    {
 3564|  30.3k|        SCN_TRY(it,
  ------------------
  |  | 3940|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 484, False: 29.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    484|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    484|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    484|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    484|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    484|    }                                                  \
  |  |  |  | 3939|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  29.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  29.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  29.8k|    static_cast<    \
  |  |  935|  29.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  29.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  29.8k|        ctx.range(), t, ctx.locale());
 3571|  29.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  29.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.1k, False: 19.6k]
  |  |  ------------------
  ------------------
 3573|  10.1k|        return unexpected(e.error());
 3574|  10.1k|    }
 3575|  19.6k|    return r.get_iterator();
 3576|  29.8k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  29.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  29.8k|    static_cast<    \
  |  |  935|  29.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  29.8k|          m_begin(ranges::begin(m_range)),
 2708|  29.8k|          m_tm(t),
 2709|  29.8k|          m_loc(loc)
 2710|  29.8k|    {
 2711|  29.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  9.38k|    {
 3358|  9.38k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.38k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  38.7k|    {
 3363|  38.7k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.1k, False: 28.5k]
  ------------------
 3364|  10.1k|            m_error = unexpected(e);
 3365|  10.1k|        }
 3366|  38.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  35.1k|    {
 2715|  60.6k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 35.1k, False: 25.5k]
  ------------------
 2716|  35.1k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 182, False: 34.9k]
  ------------------
 2717|    182|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    182|            }
 2719|  34.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.38k, False: 25.5k]
  ------------------
 2720|  9.38k|                return on_error("Invalid literal character");
 2721|  9.38k|            }
 2722|  25.5k|            ++beg;
 2723|  25.5k|            ++m_begin;
 2724|  25.5k|        }
 2725|  35.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.02k|    {
 2745|  3.02k|#if !SCN_DISABLE_LOCALE
 2746|  3.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.02k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.02k|#endif
 2753|       |
 2754|  3.02k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.02k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.02k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  3.02k|    {
 2396|  3.02k|        t.year = y;
 2397|  3.02k|        st.set_full_year(h);
 2398|  3.02k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  60.6k|    {
 3381|  60.6k|        int digits_read = 0;
 3382|  60.6k|        int accumulator = 0;
 3383|   107k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 107k, False: 358]
  ------------------
 3384|   107k|            const auto ch = *m_begin;
 3385|   107k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 32.7k, False: 74.6k]
  |  Branch (3385:36): [True: 17.8k, False: 56.7k]
  ------------------
 3386|  50.6k|                break;
 3387|  50.6k|            }
 3388|  56.7k|            ++m_begin;
 3389|  56.7k|            ++digits_read;
 3390|  56.7k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  56.7k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 9.55k, False: 47.1k]
  ------------------
 3392|  9.55k|                break;
 3393|  9.55k|            }
 3394|  56.7k|        }
 3395|  60.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 15.0k, False: 45.5k]
  ------------------
 3396|  15.0k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  15.0k|                                 "Too few integer digits"});
 3398|  15.0k|            return -1;
 3399|  15.0k|        }
 3400|  45.5k|        return accumulator;
 3401|  60.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  7.01k|    {
 2759|  7.01k|#if !SCN_DISABLE_LOCALE
 2760|  7.01k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 7.01k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  7.01k|#endif
 2768|       |
 2769|  7.01k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  7.01k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  7.01k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  7.01k|    {
 2419|  7.01k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 7.01k, False: 0]
  ------------------
 2420|  7.01k|            t.year = y;
 2421|  7.01k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  7.01k|        st.set_short_year(h);
 2426|  7.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  2.87k|    {
 2802|  2.87k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.87k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.87k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.87k|#endif
 2810|       |
 2811|  2.87k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.87k|            {"January", 1},
 2813|  2.87k|            {"February", 2},
 2814|  2.87k|            {"March", 3},
 2815|  2.87k|            {"April", 4},
 2816|  2.87k|            {"May", 5},
 2817|  2.87k|            {"June", 6},
 2818|  2.87k|            {"July", 7},
 2819|  2.87k|            {"August", 8},
 2820|  2.87k|            {"September", 9},
 2821|  2.87k|            {"October", 10},
 2822|  2.87k|            {"November", 11},
 2823|  2.87k|            {"December", 12},
 2824|  2.87k|        }};
 2825|  2.87k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 68, False: 2.80k]
  ------------------
 2826|     68|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     68|        }
 2828|  2.80k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.80k|            {"Jan", 1},
 2830|  2.80k|            {"Feb", 2},
 2831|  2.80k|            {"Mar", 3},
 2832|  2.80k|            {"Apr", 4},
 2833|  2.80k|            {"Jun", 6},
 2834|  2.80k|            {"Jul", 7},
 2835|  2.80k|            {"Aug", 8},
 2836|  2.80k|            {"Sep", 9},
 2837|  2.80k|            {"Oct", 10},
 2838|  2.80k|            {"Nov", 11},
 2839|  2.80k|            {"Dec", 12},
 2840|  2.80k|        }};
 2841|  2.80k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.35k, False: 1.44k]
  ------------------
 2842|  1.35k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.35k|        }
 2844|  1.44k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.44k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  10.0k|    {
 2383|  10.0k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.44k, False: 7.61k]
  |  |  |  Branch (865:45): [True: 2.34k, False: 7.71k]
  |  |  |  Branch (865:45): [True: 96, False: 7.61k]
  |  |  ------------------
  ------------------
 2384|  2.44k|            return h.set_error(
 2385|  2.44k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  2.44k|        }
 2387|  7.61k|        t.mon = month{static_cast<unsigned>(m)};
 2388|  7.61k|        st.set_mon(h);
 2389|  7.61k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.87k|    {
 3419|  2.87k|        auto start_it = m_begin;
 3420|  2.87k|        std::size_t options_available = N;
 3421|  2.87k|        std::size_t chars_consumed = 0;
 3422|  10.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.30k, False: 2.75k]
  ------------------
 3423|  10.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.23k, False: 68]
  ------------------
 3424|  7.23k|            std::size_t i = 0;
 3425|  7.23k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 46, False: 7.18k]
  ------------------
 3426|     46|                options_available = 0;
 3427|     46|                break;
 3428|     46|            }
 3429|  7.18k|            const auto ch = *m_begin;
 3430|  7.18k|            ++m_begin;
 3431|  48.9k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 41.7k, False: 7.18k]
  ------------------
 3432|  41.7k|                const auto cmp = static_cast<unsigned>(
 3433|  41.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  41.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 41.7k]
  ------------------
 3435|  41.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 35.7k, False: 5.92k]
  |  Branch (3435:34): [True: 34.2k, False: 1.50k]
  ------------------
 3436|  34.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  34.2k|                                options.end());
 3438|  34.2k|                    --options_available;
 3439|  34.2k|                    continue;
 3440|  34.2k|                }
 3441|  7.42k|                ++i;
 3442|  7.42k|            }
 3443|  7.18k|            ++chars_consumed;
 3444|  7.18k|        }
 3445|  2.87k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.80k, False: 68]
  ------------------
 3446|  2.80k|            m_begin = start_it;
 3447|  2.80k|            return std::nullopt;
 3448|  2.80k|        }
 3449|     68|        return options.front().second;
 3450|  2.87k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.80k|    {
 3419|  2.80k|        auto start_it = m_begin;
 3420|  2.80k|        std::size_t options_available = N;
 3421|  2.80k|        std::size_t chars_consumed = 0;
 3422|  8.43k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.02k, False: 1.40k]
  ------------------
 3423|  8.43k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.67k, False: 1.35k]
  ------------------
 3424|  5.67k|            std::size_t i = 0;
 3425|  5.67k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 42, False: 5.62k]
  ------------------
 3426|     42|                options_available = 0;
 3427|     42|                break;
 3428|     42|            }
 3429|  5.62k|            const auto ch = *m_begin;
 3430|  5.62k|            ++m_begin;
 3431|  39.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.6k, False: 5.62k]
  ------------------
 3432|  33.6k|                const auto cmp = static_cast<unsigned>(
 3433|  33.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.6k]
  ------------------
 3435|  33.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 30.8k, False: 2.84k]
  |  Branch (3435:34): [True: 29.4k, False: 1.42k]
  ------------------
 3436|  29.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  29.4k|                                options.end());
 3438|  29.4k|                    --options_available;
 3439|  29.4k|                    continue;
 3440|  29.4k|                }
 3441|  4.27k|                ++i;
 3442|  4.27k|            }
 3443|  5.62k|            ++chars_consumed;
 3444|  5.62k|        }
 3445|  2.80k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.44k, False: 1.35k]
  ------------------
 3446|  1.44k|            m_begin = start_it;
 3447|  1.44k|            return std::nullopt;
 3448|  1.44k|        }
 3449|  1.35k|        return options.front().second;
 3450|  2.80k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  8.63k|    {
 2848|  8.63k|#if !SCN_DISABLE_LOCALE
 2849|  8.63k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 8.63k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  8.63k|#endif
 2856|       |
 2857|  8.63k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  8.63k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  8.63k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  8.61k|    {
 2880|  8.61k|#if !SCN_DISABLE_LOCALE
 2881|  8.61k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 8.61k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  8.61k|#endif
 2888|       |
 2889|  8.61k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  8.61k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  8.61k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  8.61k|    {
 2370|  8.61k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.86k, False: 5.74k]
  |  |  |  Branch (865:45): [True: 2.80k, False: 5.80k]
  |  |  |  Branch (865:45): [True: 60, False: 5.74k]
  |  |  ------------------
  ------------------
 2371|  2.86k|            return h.set_error(
 2372|  2.86k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  2.86k|        }
 2374|  5.74k|        t.mday = d;
 2375|  5.74k|        st.set_mday(h);
 2376|  5.74k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  1.47k|    {
 2895|  1.47k|#if !SCN_DISABLE_LOCALE
 2896|  1.47k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.47k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.47k|#endif
 2903|       |
 2904|  1.47k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.47k|            {"Sunday", 0},
 2906|  1.47k|            {"Monday", 1},
 2907|  1.47k|            {"Tuesday", 2},
 2908|  1.47k|            {"Wednesday", 3},
 2909|  1.47k|            {"Thursday", 4},
 2910|  1.47k|            {"Friday", 5},
 2911|  1.47k|            {"Saturday", 6},
 2912|  1.47k|        }};
 2913|  1.47k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.47k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.47k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.47k|            {"Sun", 0},
 2918|  1.47k|            {"Mon", 1},
 2919|  1.47k|            {"Tue", 2},
 2920|  1.47k|            {"Wed", 3},
 2921|  1.47k|            {"Thu", 4},
 2922|  1.47k|            {"Fri", 5},
 2923|  1.47k|            {"Sat", 6},
 2924|  1.47k|        }};
 2925|  1.47k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 4, False: 1.46k]
  ------------------
 2926|      4|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      4|        }
 2928|  1.46k|        return set_error(
 2929|  1.46k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.47k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2432|      4|    {
 2433|      4|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 2434|      0|            return h.set_error(
 2435|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 2436|      0|        }
 2437|      4|        t.wday = weekday{static_cast<unsigned>(d)};
 2438|      4|        st.set_wday(h);
 2439|      4|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.94k|    {
 3419|  2.94k|        auto start_it = m_begin;
 3420|  2.94k|        std::size_t options_available = N;
 3421|  2.94k|        std::size_t chars_consumed = 0;
 3422|  6.17k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.26k, False: 2.91k]
  ------------------
 3423|  6.17k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.26k, False: 4]
  ------------------
 3424|  3.26k|            std::size_t i = 0;
 3425|  3.26k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.23k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.23k|            const auto ch = *m_begin;
 3430|  3.23k|            ++m_begin;
 3431|  24.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 20.8k, False: 3.23k]
  ------------------
 3432|  20.8k|                const auto cmp = static_cast<unsigned>(
 3433|  20.8k|                    ch ^ options[i].first[chars_consumed]);
 3434|  20.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 20.8k]
  ------------------
 3435|  20.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 20.5k, False: 312]
  |  Branch (3435:34): [True: 20.5k, False: 40]
  ------------------
 3436|  20.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  20.5k|                                options.end());
 3438|  20.5k|                    --options_available;
 3439|  20.5k|                    continue;
 3440|  20.5k|                }
 3441|    352|                ++i;
 3442|    352|            }
 3443|  3.23k|            ++chars_consumed;
 3444|  3.23k|        }
 3445|  2.94k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.93k, False: 4]
  ------------------
 3446|  2.93k|            m_begin = start_it;
 3447|  2.93k|            return std::nullopt;
 3448|  2.93k|        }
 3449|      4|        return options.front().second;
 3450|  2.94k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  15.4k|    {
 2969|  15.4k|#if !SCN_DISABLE_LOCALE
 2970|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 15.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  15.4k|#endif
 2977|       |
 2978|  15.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  15.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  15.4k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  15.4k|    {
 2344|  15.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.04k, False: 13.4k]
  |  |  |  Branch (865:45): [True: 1.89k, False: 13.5k]
  |  |  |  Branch (865:45): [True: 150, False: 13.4k]
  |  |  ------------------
  ------------------
 2345|  2.04k|            return hdl.set_error(
 2346|  2.04k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  2.04k|        }
 2348|  13.4k|        t.hour = h;
 2349|  13.4k|        st.set_hour24(hdl);
 2350|  13.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  15.4k|    {
 2997|  15.4k|#if !SCN_DISABLE_LOCALE
 2998|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 15.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  15.4k|#endif
 3005|       |
 3006|  15.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  15.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  15.4k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  15.4k|    {
 2331|  15.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.38k, False: 13.0k]
  |  |  |  Branch (865:45): [True: 2.35k, False: 13.1k]
  |  |  |  Branch (865:45): [True: 26, False: 13.0k]
  |  |  ------------------
  ------------------
 2332|  2.38k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  2.38k|                                "Invalid value for minutes"});
 2334|  2.38k|        }
 2335|  13.0k|        t.min = m;
 2336|  13.0k|        st.set_min(h);
 2337|  13.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.36k|    {
 3011|  2.36k|#if !SCN_DISABLE_LOCALE
 3012|  2.36k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.36k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.36k|#endif
 3019|       |
 3020|  2.36k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.36k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.36k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  2.36k|    {
 2318|  2.36k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.43k, False: 926]
  |  |  |  Branch (865:45): [True: 1.43k, False: 930]
  |  |  |  Branch (865:45): [True: 4, False: 926]
  |  |  ------------------
  ------------------
 2319|  1.43k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  1.43k|                                "Invalid value for seconds"});
 2321|  1.43k|        }
 2322|    926|        t.sec = s;
 2323|    926|        st.set_sec(h);
 2324|    926|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  7.01k|    {
 3253|       |        // %m/%d/%y
 3254|  7.01k|        constexpr CharT slash = '/';
 3255|  7.01k|        on_dec_month();
 3256|  7.01k|        on_text(&slash, &slash + 1);
 3257|  7.01k|        on_day_of_month();
 3258|  7.01k|        on_text(&slash, &slash + 1);
 3259|  7.01k|        on_short_year();
 3260|  7.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.56k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.56k|        constexpr CharT dash = '-';
 3265|  1.56k|        on_full_year();
 3266|  1.56k|        on_text(&dash, &dash + 1);
 3267|  1.56k|        on_dec_month();
 3268|  1.56k|        on_text(&dash, &dash + 1);
 3269|  1.56k|        on_day_of_month();
 3270|  1.56k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  13.0k|    {
 3295|       |        // %H:%M
 3296|  13.0k|        constexpr CharT colon = ':';
 3297|  13.0k|        on_24_hour();
 3298|  13.0k|        on_text(&colon, &colon + 1);
 3299|  13.0k|        on_minute();
 3300|  13.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.36k|    {
 3303|       |        // %H:%M:%S
 3304|  2.36k|        constexpr CharT colon = ':';
 3305|  2.36k|        on_24_hour();
 3306|  2.36k|        on_text(&colon, &colon + 1);
 3307|  2.36k|        on_minute();
 3308|  2.36k|        on_text(&colon, &colon + 1);
 3309|  2.36k|        on_second();
 3310|  2.36k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  19.6k|    {
 3342|  19.6k|        m_st.verify(*this);
 3343|  19.6k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 19.6k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  19.6k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 19.5k, False: 102]
  |  Branch (3346:37): [True: 5.55k, False: 14.0k]
  |  Branch (3346:60): [True: 0, False: 14.0k]
  ------------------
 3347|  5.55k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  5.55k|        }
 3349|  19.6k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2482|  5.66k|    {
 2483|  5.66k|        assert(t.year);
 2484|  5.66k|        st.handle_short_year_and_century(*t.year, 0);
 2485|  5.66k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  59.8k|    {
 3353|  59.8k|        return m_error;
 3354|  59.8k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  19.6k|    {
 3370|  19.6k|        return m_begin;
 3371|  19.6k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  24.0k|{
 3563|  24.0k|    {
 3564|  24.0k|        SCN_TRY(it,
  ------------------
  |  | 3940|  24.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  24.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  24.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 256, False: 23.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    256|    }                                                  \
  |  |  |  | 3939|  24.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  23.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  23.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  23.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  23.8k|    static_cast<    \
  |  |  935|  23.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  23.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  23.8k|        ctx.range(), t, ctx.locale());
 3571|  23.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  23.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  23.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.3k, False: 13.4k]
  |  |  ------------------
  ------------------
 3573|  10.3k|        return unexpected(e.error());
 3574|  10.3k|    }
 3575|  13.4k|    return r.get_iterator();
 3576|  23.8k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  23.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  23.8k|    static_cast<    \
  |  |  935|  23.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  23.8k|          m_begin(ranges::begin(m_range)),
 2708|  23.8k|          m_tm(t),
 2709|  23.8k|          m_loc(loc)
 2710|  23.8k|    {
 2711|  23.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  9.73k|    {
 3358|  9.73k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.73k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  40.4k|    {
 3363|  40.4k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.3k, False: 30.0k]
  ------------------
 3364|  10.3k|            m_error = unexpected(e);
 3365|  10.3k|        }
 3366|  40.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  23.6k|    {
 2715|  37.3k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 23.6k, False: 13.7k]
  ------------------
 2716|  23.6k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 136, False: 23.4k]
  ------------------
 2717|    136|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    136|            }
 2719|  23.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.73k, False: 13.7k]
  ------------------
 2720|  9.73k|                return on_error("Invalid literal character");
 2721|  9.73k|            }
 2722|  13.7k|            ++beg;
 2723|  13.7k|            ++m_begin;
 2724|  13.7k|        }
 2725|  23.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.08k|    {
 2745|  3.08k|#if !SCN_DISABLE_LOCALE
 2746|  3.08k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.08k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.08k|#endif
 2753|       |
 2754|  3.08k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.08k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.08k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  3.08k|    {
 2396|  3.08k|        t.year = y;
 2397|  3.08k|        st.set_full_year(h);
 2398|  3.08k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  43.0k|    {
 3381|  43.0k|        int digits_read = 0;
 3382|  43.0k|        int accumulator = 0;
 3383|  71.5k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 71.2k, False: 282]
  ------------------
 3384|  71.2k|            const auto ch = *m_begin;
 3385|  71.2k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 22.2k, False: 49.0k]
  |  Branch (3385:36): [True: 16.6k, False: 32.4k]
  ------------------
 3386|  38.8k|                break;
 3387|  38.8k|            }
 3388|  32.4k|            ++m_begin;
 3389|  32.4k|            ++digits_read;
 3390|  32.4k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  32.4k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 3.83k, False: 28.5k]
  ------------------
 3392|  3.83k|                break;
 3393|  3.83k|            }
 3394|  32.4k|        }
 3395|  43.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 15.8k, False: 27.1k]
  ------------------
 3396|  15.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  15.8k|                                 "Too few integer digits"});
 3398|  15.8k|            return -1;
 3399|  15.8k|        }
 3400|  27.1k|        return accumulator;
 3401|  43.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.58k|    {
 2759|  1.58k|#if !SCN_DISABLE_LOCALE
 2760|  1.58k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.58k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.58k|#endif
 2768|       |
 2769|  1.58k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.58k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.58k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  1.58k|    {
 2419|  1.58k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 1.58k, False: 0]
  ------------------
 2420|  1.58k|            t.year = y;
 2421|  1.58k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  1.58k|        st.set_short_year(h);
 2426|  1.58k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  2.90k|    {
 2802|  2.90k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.90k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.90k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.90k|#endif
 2810|       |
 2811|  2.90k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.90k|            {"January", 1},
 2813|  2.90k|            {"February", 2},
 2814|  2.90k|            {"March", 3},
 2815|  2.90k|            {"April", 4},
 2816|  2.90k|            {"May", 5},
 2817|  2.90k|            {"June", 6},
 2818|  2.90k|            {"July", 7},
 2819|  2.90k|            {"August", 8},
 2820|  2.90k|            {"September", 9},
 2821|  2.90k|            {"October", 10},
 2822|  2.90k|            {"November", 11},
 2823|  2.90k|            {"December", 12},
 2824|  2.90k|        }};
 2825|  2.90k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 68, False: 2.83k]
  ------------------
 2826|     68|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     68|        }
 2828|  2.83k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.83k|            {"Jan", 1},
 2830|  2.83k|            {"Feb", 2},
 2831|  2.83k|            {"Mar", 3},
 2832|  2.83k|            {"Apr", 4},
 2833|  2.83k|            {"Jun", 6},
 2834|  2.83k|            {"Jul", 7},
 2835|  2.83k|            {"Aug", 8},
 2836|  2.83k|            {"Sep", 9},
 2837|  2.83k|            {"Oct", 10},
 2838|  2.83k|            {"Nov", 11},
 2839|  2.83k|            {"Dec", 12},
 2840|  2.83k|        }};
 2841|  2.83k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.35k, False: 1.48k]
  ------------------
 2842|  1.35k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.35k|        }
 2844|  1.48k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.48k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  4.65k|    {
 2383|  4.65k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.55k, False: 2.10k]
  |  |  |  Branch (865:45): [True: 2.46k, False: 2.18k]
  |  |  |  Branch (865:45): [True: 82, False: 2.10k]
  |  |  ------------------
  ------------------
 2384|  2.55k|            return h.set_error(
 2385|  2.55k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  2.55k|        }
 2387|  2.10k|        t.mon = month{static_cast<unsigned>(m)};
 2388|  2.10k|        st.set_mon(h);
 2389|  2.10k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.90k|    {
 3419|  2.90k|        auto start_it = m_begin;
 3420|  2.90k|        std::size_t options_available = N;
 3421|  2.90k|        std::size_t chars_consumed = 0;
 3422|  10.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.28k, False: 2.79k]
  ------------------
 3423|  10.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.21k, False: 68]
  ------------------
 3424|  7.21k|            std::size_t i = 0;
 3425|  7.21k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 7.17k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  7.17k|            const auto ch = *m_begin;
 3430|  7.17k|            ++m_begin;
 3431|  49.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.0k, False: 7.17k]
  ------------------
 3432|  42.0k|                const auto cmp = static_cast<unsigned>(
 3433|  42.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.0k]
  ------------------
 3435|  42.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 36.1k, False: 5.87k]
  |  Branch (3435:34): [True: 34.6k, False: 1.46k]
  ------------------
 3436|  34.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  34.6k|                                options.end());
 3438|  34.6k|                    --options_available;
 3439|  34.6k|                    continue;
 3440|  34.6k|                }
 3441|  7.33k|                ++i;
 3442|  7.33k|            }
 3443|  7.17k|            ++chars_consumed;
 3444|  7.17k|        }
 3445|  2.90k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.83k, False: 68]
  ------------------
 3446|  2.83k|            m_begin = start_it;
 3447|  2.83k|            return std::nullopt;
 3448|  2.83k|        }
 3449|     68|        return options.front().second;
 3450|  2.90k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.83k|    {
 3419|  2.83k|        auto start_it = m_begin;
 3420|  2.83k|        std::size_t options_available = N;
 3421|  2.83k|        std::size_t chars_consumed = 0;
 3422|  8.45k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.01k, False: 1.44k]
  ------------------
 3423|  8.45k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.66k, False: 1.35k]
  ------------------
 3424|  5.66k|            std::size_t i = 0;
 3425|  5.66k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 5.62k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  5.62k|            const auto ch = *m_begin;
 3430|  5.62k|            ++m_begin;
 3431|  39.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.9k, False: 5.62k]
  ------------------
 3432|  33.9k|                const auto cmp = static_cast<unsigned>(
 3433|  33.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.9k]
  ------------------
 3435|  33.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 31.1k, False: 2.81k]
  |  Branch (3435:34): [True: 29.7k, False: 1.39k]
  ------------------
 3436|  29.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  29.7k|                                options.end());
 3438|  29.7k|                    --options_available;
 3439|  29.7k|                    continue;
 3440|  29.7k|                }
 3441|  4.21k|                ++i;
 3442|  4.21k|            }
 3443|  5.62k|            ++chars_consumed;
 3444|  5.62k|        }
 3445|  2.83k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.48k, False: 1.35k]
  ------------------
 3446|  1.48k|            m_begin = start_it;
 3447|  1.48k|            return std::nullopt;
 3448|  1.48k|        }
 3449|  1.35k|        return options.front().second;
 3450|  2.83k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.23k|    {
 2848|  3.23k|#if !SCN_DISABLE_LOCALE
 2849|  3.23k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.23k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.23k|#endif
 2856|       |
 2857|  3.23k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.23k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.23k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.21k|    {
 2880|  3.21k|#if !SCN_DISABLE_LOCALE
 2881|  3.21k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.21k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.21k|#endif
 2888|       |
 2889|  3.21k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.21k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.21k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  3.21k|    {
 2370|  3.21k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  3.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.95k, False: 264]
  |  |  |  Branch (865:45): [True: 2.89k, False: 320]
  |  |  |  Branch (865:45): [True: 56, False: 264]
  |  |  ------------------
  ------------------
 2371|  2.95k|            return h.set_error(
 2372|  2.95k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  2.95k|        }
 2374|    264|        t.mday = d;
 2375|    264|        st.set_mday(h);
 2376|    264|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  1.49k|    {
 2895|  1.49k|#if !SCN_DISABLE_LOCALE
 2896|  1.49k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.49k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.49k|#endif
 2903|       |
 2904|  1.49k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.49k|            {"Sunday", 0},
 2906|  1.49k|            {"Monday", 1},
 2907|  1.49k|            {"Tuesday", 2},
 2908|  1.49k|            {"Wednesday", 3},
 2909|  1.49k|            {"Thursday", 4},
 2910|  1.49k|            {"Friday", 5},
 2911|  1.49k|            {"Saturday", 6},
 2912|  1.49k|        }};
 2913|  1.49k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.49k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.49k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.49k|            {"Sun", 0},
 2918|  1.49k|            {"Mon", 1},
 2919|  1.49k|            {"Tue", 2},
 2920|  1.49k|            {"Wed", 3},
 2921|  1.49k|            {"Thu", 4},
 2922|  1.49k|            {"Fri", 5},
 2923|  1.49k|            {"Sat", 6},
 2924|  1.49k|        }};
 2925|  1.49k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 4, False: 1.49k]
  ------------------
 2926|      4|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      4|        }
 2928|  1.49k|        return set_error(
 2929|  1.49k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.49k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2432|      4|    {
 2433|      4|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 2434|      0|            return h.set_error(
 2435|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 2436|      0|        }
 2437|      4|        t.wday = weekday{static_cast<unsigned>(d)};
 2438|      4|        st.set_wday(h);
 2439|      4|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.99k|    {
 3419|  2.99k|        auto start_it = m_begin;
 3420|  2.99k|        std::size_t options_available = N;
 3421|  2.99k|        std::size_t chars_consumed = 0;
 3422|  6.26k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.29k, False: 2.97k]
  ------------------
 3423|  6.26k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.28k, False: 4]
  ------------------
 3424|  3.28k|            std::size_t i = 0;
 3425|  3.28k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 16, False: 3.27k]
  ------------------
 3426|     16|                options_available = 0;
 3427|     16|                break;
 3428|     16|            }
 3429|  3.27k|            const auto ch = *m_begin;
 3430|  3.27k|            ++m_begin;
 3431|  24.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 21.2k, False: 3.27k]
  ------------------
 3432|  21.2k|                const auto cmp = static_cast<unsigned>(
 3433|  21.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  21.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 21.2k]
  ------------------
 3435|  21.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 20.9k, False: 308]
  |  Branch (3435:34): [True: 20.9k, False: 12]
  ------------------
 3436|  20.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  20.9k|                                options.end());
 3438|  20.9k|                    --options_available;
 3439|  20.9k|                    continue;
 3440|  20.9k|                }
 3441|    320|                ++i;
 3442|    320|            }
 3443|  3.27k|            ++chars_consumed;
 3444|  3.27k|        }
 3445|  2.99k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.99k, False: 4]
  ------------------
 3446|  2.99k|            m_begin = start_it;
 3447|  2.99k|            return std::nullopt;
 3448|  2.99k|        }
 3449|      4|        return options.front().second;
 3450|  2.99k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  14.7k|    {
 2969|  14.7k|#if !SCN_DISABLE_LOCALE
 2970|  14.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 14.7k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  14.7k|#endif
 2977|       |
 2978|  14.7k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  14.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  14.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  14.7k|    {
 2344|  14.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.34k, False: 12.4k]
  |  |  |  Branch (865:45): [True: 2.20k, False: 12.5k]
  |  |  |  Branch (865:45): [True: 134, False: 12.4k]
  |  |  ------------------
  ------------------
 2345|  2.34k|            return hdl.set_error(
 2346|  2.34k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  2.34k|        }
 2348|  12.4k|        t.hour = h;
 2349|  12.4k|        st.set_hour24(hdl);
 2350|  12.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  14.7k|    {
 2997|  14.7k|#if !SCN_DISABLE_LOCALE
 2998|  14.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 14.7k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  14.7k|#endif
 3005|       |
 3006|  14.7k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  14.7k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  14.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  14.7k|    {
 2331|  14.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.48k, False: 12.2k]
  |  |  |  Branch (865:45): [True: 2.46k, False: 12.2k]
  |  |  |  Branch (865:45): [True: 18, False: 12.2k]
  |  |  ------------------
  ------------------
 2332|  2.48k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  2.48k|                                "Invalid value for minutes"});
 2334|  2.48k|        }
 2335|  12.2k|        t.min = m;
 2336|  12.2k|        st.set_min(h);
 2337|  12.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.38k|    {
 3011|  2.38k|#if !SCN_DISABLE_LOCALE
 3012|  2.38k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.38k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.38k|#endif
 3019|       |
 3020|  2.38k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.38k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.38k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  2.38k|    {
 2318|  2.38k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.46k, False: 918]
  |  |  |  Branch (865:45): [True: 1.46k, False: 920]
  |  |  |  Branch (865:45): [True: 2, False: 918]
  |  |  ------------------
  ------------------
 2319|  1.46k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  1.46k|                                "Invalid value for seconds"});
 2321|  1.46k|        }
 2322|    918|        t.sec = s;
 2323|    918|        st.set_sec(h);
 2324|    918|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.58k|    {
 3253|       |        // %m/%d/%y
 3254|  1.58k|        constexpr CharT slash = '/';
 3255|  1.58k|        on_dec_month();
 3256|  1.58k|        on_text(&slash, &slash + 1);
 3257|  1.58k|        on_day_of_month();
 3258|  1.58k|        on_text(&slash, &slash + 1);
 3259|  1.58k|        on_short_year();
 3260|  1.58k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.59k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.59k|        constexpr CharT dash = '-';
 3265|  1.59k|        on_full_year();
 3266|  1.59k|        on_text(&dash, &dash + 1);
 3267|  1.59k|        on_dec_month();
 3268|  1.59k|        on_text(&dash, &dash + 1);
 3269|  1.59k|        on_day_of_month();
 3270|  1.59k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  12.3k|    {
 3295|       |        // %H:%M
 3296|  12.3k|        constexpr CharT colon = ':';
 3297|  12.3k|        on_24_hour();
 3298|  12.3k|        on_text(&colon, &colon + 1);
 3299|  12.3k|        on_minute();
 3300|  12.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.38k|    {
 3303|       |        // %H:%M:%S
 3304|  2.38k|        constexpr CharT colon = ':';
 3305|  2.38k|        on_24_hour();
 3306|  2.38k|        on_text(&colon, &colon + 1);
 3307|  2.38k|        on_minute();
 3308|  2.38k|        on_text(&colon, &colon + 1);
 3309|  2.38k|        on_second();
 3310|  2.38k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  13.4k|    {
 3342|  13.4k|        m_st.verify(*this);
 3343|  13.4k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 13.4k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  13.4k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 13.3k, False: 102]
  |  Branch (3346:37): [True: 96, False: 13.2k]
  |  Branch (3346:60): [True: 0, False: 13.2k]
  ------------------
 3347|     96|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     96|        }
 3349|  13.4k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  47.7k|    {
 3353|  47.7k|        return m_error;
 3354|  47.7k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  13.4k|    {
 3370|  13.4k|        return m_begin;
 3371|  13.4k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  25.8k|{
 3563|  25.8k|    {
 3564|  25.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  25.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 262, False: 25.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    262|    }                                                  \
  |  |  |  | 3939|  25.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  25.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  25.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  25.5k|    static_cast<    \
  |  |  935|  25.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  25.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  25.5k|        ctx.range(), t, ctx.locale());
 3571|  25.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  25.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.0k, False: 4.51k]
  |  |  ------------------
  ------------------
 3573|  21.0k|        return unexpected(e.error());
 3574|  21.0k|    }
 3575|  4.51k|    return r.get_iterator();
 3576|  25.5k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  25.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  25.5k|    static_cast<    \
  |  |  935|  25.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  25.5k|          m_begin(ranges::begin(m_range)),
 2708|  25.5k|          m_tm(t),
 2709|  25.5k|          m_loc(loc)
 2710|  25.5k|    {
 2711|  25.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  20.5k|    {
 3358|  20.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  90.5k|    {
 3363|  90.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 21.0k, False: 69.4k]
  ------------------
 3364|  21.0k|            m_error = unexpected(e);
 3365|  21.0k|        }
 3366|  90.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  25.5k|    {
 2715|  30.4k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 25.5k, False: 4.91k]
  ------------------
 2716|  25.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 94, False: 25.4k]
  ------------------
 2717|     94|                return set_error({scan_error::end_of_input, "EOF"});
 2718|     94|            }
 2719|  25.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.5k, False: 4.91k]
  ------------------
 2720|  20.5k|                return on_error("Invalid literal character");
 2721|  20.5k|            }
 2722|  4.91k|            ++beg;
 2723|  4.91k|            ++m_begin;
 2724|  4.91k|        }
 2725|  25.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.02k|    {
 2745|  6.02k|#if !SCN_DISABLE_LOCALE
 2746|  6.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.02k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.02k|#endif
 2753|       |
 2754|  6.02k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.02k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.02k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.02k|    {
 2218|  6.02k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.02k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.02k|        t.tm_year = y - 1900;
 2223|  6.02k|        st.set_full_year(h);
 2224|  6.02k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  45.0k|    {
 3381|  45.0k|        int digits_read = 0;
 3382|  45.0k|        int accumulator = 0;
 3383|  55.9k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 55.7k, False: 192]
  ------------------
 3384|  55.7k|            const auto ch = *m_begin;
 3385|  55.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 26.5k, False: 29.2k]
  |  Branch (3385:36): [True: 16.6k, False: 12.5k]
  ------------------
 3386|  43.2k|                break;
 3387|  43.2k|            }
 3388|  12.5k|            ++m_begin;
 3389|  12.5k|            ++digits_read;
 3390|  12.5k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  12.5k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 1.65k, False: 10.9k]
  ------------------
 3392|  1.65k|                break;
 3393|  1.65k|            }
 3394|  12.5k|        }
 3395|  45.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 34.8k, False: 10.1k]
  ------------------
 3396|  34.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  34.8k|                                 "Too few integer digits"});
 3398|  34.8k|            return -1;
 3399|  34.8k|        }
 3400|  10.1k|        return accumulator;
 3401|  45.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.01k|    {
 2759|  3.01k|#if !SCN_DISABLE_LOCALE
 2760|  3.01k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.01k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.01k|#endif
 2768|       |
 2769|  3.01k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.01k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.01k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.01k|    {
 2235|  3.01k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.00k, False: 16]
  |  |  |  Branch (865:45): [True: 3.00k, False: 16]
  |  |  |  Branch (865:45): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2236|  3.00k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.00k|                                "Invalid value for tm_year"});
 2238|  3.00k|        }
 2239|     16|        st.short_year_value = y;
 2240|     16|        st.set_short_year(h);
 2241|     16|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.04k|    {
 2802|  3.04k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.04k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.04k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.04k|#endif
 2810|       |
 2811|  3.04k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.04k|            {"January", 1},
 2813|  3.04k|            {"February", 2},
 2814|  3.04k|            {"March", 3},
 2815|  3.04k|            {"April", 4},
 2816|  3.04k|            {"May", 5},
 2817|  3.04k|            {"June", 6},
 2818|  3.04k|            {"July", 7},
 2819|  3.04k|            {"August", 8},
 2820|  3.04k|            {"September", 9},
 2821|  3.04k|            {"October", 10},
 2822|  3.04k|            {"November", 11},
 2823|  3.04k|            {"December", 12},
 2824|  3.04k|        }};
 2825|  3.04k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 2, False: 3.03k]
  ------------------
 2826|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      2|        }
 2828|  3.03k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.03k|            {"Jan", 1},
 2830|  3.03k|            {"Feb", 2},
 2831|  3.03k|            {"Mar", 3},
 2832|  3.03k|            {"Apr", 4},
 2833|  3.03k|            {"Jun", 6},
 2834|  3.03k|            {"Jul", 7},
 2835|  3.03k|            {"Aug", 8},
 2836|  3.03k|            {"Sep", 9},
 2837|  3.03k|            {"Oct", 10},
 2838|  3.03k|            {"Nov", 11},
 2839|  3.03k|            {"Dec", 12},
 2840|  3.03k|        }};
 2841|  3.03k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 30, False: 3.00k]
  ------------------
 2842|     30|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|     30|        }
 2844|  3.00k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.00k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.07k|    {
 2208|  6.07k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.71k, False: 360]
  |  |  |  Branch (865:45): [True: 5.69k, False: 382]
  |  |  |  Branch (865:45): [True: 22, False: 360]
  |  |  ------------------
  ------------------
 2209|  5.71k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  5.71k|                                "Invalid value for tm_mon"});
 2211|  5.71k|        }
 2212|    360|        t.tm_mon = m - 1;
 2213|    360|        st.set_mon(h);
 2214|    360|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.04k|    {
 3419|  3.04k|        auto start_it = m_begin;
 3420|  3.04k|        std::size_t options_available = N;
 3421|  3.04k|        std::size_t chars_consumed = 0;
 3422|  6.21k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.20k, False: 3.01k]
  ------------------
 3423|  6.21k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.19k, False: 2]
  ------------------
 3424|  3.19k|            std::size_t i = 0;
 3425|  3.19k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 3.17k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  3.17k|            const auto ch = *m_begin;
 3430|  3.17k|            ++m_begin;
 3431|  39.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 36.7k, False: 3.17k]
  ------------------
 3432|  36.7k|                const auto cmp = static_cast<unsigned>(
 3433|  36.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  36.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 36.7k]
  ------------------
 3435|  36.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 36.5k, False: 172]
  |  Branch (3435:34): [True: 36.4k, False: 94]
  ------------------
 3436|  36.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  36.4k|                                options.end());
 3438|  36.4k|                    --options_available;
 3439|  36.4k|                    continue;
 3440|  36.4k|                }
 3441|    266|                ++i;
 3442|    266|            }
 3443|  3.17k|            ++chars_consumed;
 3444|  3.17k|        }
 3445|  3.04k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.03k, False: 2]
  ------------------
 3446|  3.03k|            m_begin = start_it;
 3447|  3.03k|            return std::nullopt;
 3448|  3.03k|        }
 3449|      2|        return options.front().second;
 3450|  3.04k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.03k|    {
 3419|  3.03k|        auto start_it = m_begin;
 3420|  3.03k|        std::size_t options_available = N;
 3421|  3.03k|        std::size_t chars_consumed = 0;
 3422|  6.17k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.19k, False: 2.98k]
  ------------------
 3423|  6.17k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.16k, False: 30]
  ------------------
 3424|  3.16k|            std::size_t i = 0;
 3425|  3.16k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.13k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.13k|            const auto ch = *m_begin;
 3430|  3.13k|            ++m_begin;
 3431|  36.6k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.5k, False: 3.13k]
  ------------------
 3432|  33.5k|                const auto cmp = static_cast<unsigned>(
 3433|  33.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.5k]
  ------------------
 3435|  33.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.4k, False: 104]
  |  Branch (3435:34): [True: 33.3k, False: 88]
  ------------------
 3436|  33.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  33.3k|                                options.end());
 3438|  33.3k|                    --options_available;
 3439|  33.3k|                    continue;
 3440|  33.3k|                }
 3441|    192|                ++i;
 3442|    192|            }
 3443|  3.13k|            ++chars_consumed;
 3444|  3.13k|        }
 3445|  3.03k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.00k, False: 30]
  ------------------
 3446|  3.00k|            m_begin = start_it;
 3447|  3.00k|            return std::nullopt;
 3448|  3.00k|        }
 3449|     30|        return options.front().second;
 3450|  3.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.04k|    {
 2848|  6.04k|#if !SCN_DISABLE_LOCALE
 2849|  6.04k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.04k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.04k|#endif
 2856|       |
 2857|  6.04k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.04k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.04k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.02k|    {
 2880|  6.02k|#if !SCN_DISABLE_LOCALE
 2881|  6.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.02k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.02k|#endif
 2888|       |
 2889|  6.02k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.02k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.02k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.02k|    {
 2198|  6.02k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.00k, False: 28]
  |  |  |  Branch (865:45): [True: 5.99k, False: 38]
  |  |  |  Branch (865:45): [True: 10, False: 28]
  |  |  ------------------
  ------------------
 2199|  6.00k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.00k|                                "Invalid value for tm_mday"});
 2201|  6.00k|        }
 2202|     28|        t.tm_mday = d;
 2203|     28|        st.set_mday(h);
 2204|     28|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.01k|    {
 2895|  3.01k|#if !SCN_DISABLE_LOCALE
 2896|  3.01k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.01k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.01k|#endif
 2903|       |
 2904|  3.01k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.01k|            {"Sunday", 0},
 2906|  3.01k|            {"Monday", 1},
 2907|  3.01k|            {"Tuesday", 2},
 2908|  3.01k|            {"Wednesday", 3},
 2909|  3.01k|            {"Thursday", 4},
 2910|  3.01k|            {"Friday", 5},
 2911|  3.01k|            {"Saturday", 6},
 2912|  3.01k|        }};
 2913|  3.01k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.01k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.01k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.01k|            {"Sun", 0},
 2918|  3.01k|            {"Mon", 1},
 2919|  3.01k|            {"Tue", 2},
 2920|  3.01k|            {"Wed", 3},
 2921|  3.01k|            {"Thu", 4},
 2922|  3.01k|            {"Fri", 5},
 2923|  3.01k|            {"Sat", 6},
 2924|  3.01k|        }};
 2925|  3.01k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.01k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.01k|        return set_error(
 2929|  3.01k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.02k|    {
 3419|  6.02k|        auto start_it = m_begin;
 3420|  6.02k|        std::size_t options_available = N;
 3421|  6.02k|        std::size_t chars_consumed = 0;
 3422|  12.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.11k, False: 6.00k]
  ------------------
 3423|  12.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.11k, False: 0]
  ------------------
 3424|  6.11k|            std::size_t i = 0;
 3425|  6.11k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 6.08k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  6.08k|            const auto ch = *m_begin;
 3430|  6.08k|            ++m_begin;
 3431|  48.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.2k, False: 6.08k]
  ------------------
 3432|  42.2k|                const auto cmp = static_cast<unsigned>(
 3433|  42.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.2k]
  ------------------
 3435|  42.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.1k, False: 108]
  |  Branch (3435:34): [True: 42.1k, False: 16]
  ------------------
 3436|  42.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.1k|                                options.end());
 3438|  42.1k|                    --options_available;
 3439|  42.1k|                    continue;
 3440|  42.1k|                }
 3441|    124|                ++i;
 3442|    124|            }
 3443|  6.08k|            ++chars_consumed;
 3444|  6.08k|        }
 3445|  6.02k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.02k, False: 0]
  ------------------
 3446|  6.02k|            m_begin = start_it;
 3447|  6.02k|            return std::nullopt;
 3448|  6.02k|        }
 3449|      0|        return options.front().second;
 3450|  6.02k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  10.4k|    {
 2969|  10.4k|#if !SCN_DISABLE_LOCALE
 2970|  10.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 10.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  10.4k|#endif
 2977|       |
 2978|  10.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  10.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  10.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  10.4k|    {
 2178|  10.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.56k, False: 4.90k]
  |  |  |  Branch (865:45): [True: 5.53k, False: 4.93k]
  |  |  |  Branch (865:45): [True: 28, False: 4.90k]
  |  |  ------------------
  ------------------
 2179|  5.56k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  5.56k|                                  "Invalid value for tm_hour"});
 2181|  5.56k|        }
 2182|  4.90k|        t.tm_hour = h;
 2183|  4.90k|        st.set_hour24(hdl);
 2184|  4.90k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  10.4k|    {
 2997|  10.4k|#if !SCN_DISABLE_LOCALE
 2998|  10.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 10.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  10.4k|#endif
 3005|       |
 3006|  10.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  10.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  10.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  10.4k|    {
 2168|  10.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  15.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.69k, False: 4.76k]
  |  |  |  Branch (865:45): [True: 5.68k, False: 4.78k]
  |  |  |  Branch (865:45): [True: 12, False: 4.76k]
  |  |  ------------------
  ------------------
 2169|  5.69k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  5.69k|                                "Invalid value for tm_min"});
 2171|  5.69k|        }
 2172|  4.76k|        t.tm_min = m;
 2173|  4.76k|        st.set_min(h);
 2174|  4.76k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.03k|    {
 3011|  3.03k|#if !SCN_DISABLE_LOCALE
 3012|  3.03k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.03k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.03k|#endif
 3019|       |
 3020|  3.03k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.03k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.03k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.03k|    {
 2158|  3.03k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.98k, False: 50]
  |  |  |  Branch (865:45): [True: 2.98k, False: 52]
  |  |  |  Branch (865:45): [True: 2, False: 50]
  |  |  ------------------
  ------------------
 2159|  2.98k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  2.98k|                                "Invalid value for tm_sec"});
 2161|  2.98k|        }
 2162|     50|        t.tm_sec = s;
 2163|     50|        st.set_sec(h);
 2164|     50|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.01k|    {
 3253|       |        // %m/%d/%y
 3254|  3.01k|        constexpr CharT slash = '/';
 3255|  3.01k|        on_dec_month();
 3256|  3.01k|        on_text(&slash, &slash + 1);
 3257|  3.01k|        on_day_of_month();
 3258|  3.01k|        on_text(&slash, &slash + 1);
 3259|  3.01k|        on_short_year();
 3260|  3.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.01k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.01k|        constexpr CharT dash = '-';
 3265|  3.01k|        on_full_year();
 3266|  3.01k|        on_text(&dash, &dash + 1);
 3267|  3.01k|        on_dec_month();
 3268|  3.01k|        on_text(&dash, &dash + 1);
 3269|  3.01k|        on_day_of_month();
 3270|  3.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  7.42k|    {
 3295|       |        // %H:%M
 3296|  7.42k|        constexpr CharT colon = ':';
 3297|  7.42k|        on_24_hour();
 3298|  7.42k|        on_text(&colon, &colon + 1);
 3299|  7.42k|        on_minute();
 3300|  7.42k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.03k|    {
 3303|       |        // %H:%M:%S
 3304|  3.03k|        constexpr CharT colon = ':';
 3305|  3.03k|        on_24_hour();
 3306|  3.03k|        on_text(&colon, &colon + 1);
 3307|  3.03k|        on_minute();
 3308|  3.03k|        on_text(&colon, &colon + 1);
 3309|  3.03k|        on_second();
 3310|  3.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  4.51k|    {
 3342|  4.51k|        m_st.verify(*this);
 3343|  4.51k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 4.51k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  4.51k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 4.51k, False: 0]
  |  Branch (3346:37): [True: 8, False: 4.50k]
  |  Branch (3346:60): [True: 0, False: 4.50k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  4.51k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  51.1k|    {
 3353|  51.1k|        return m_error;
 3354|  51.1k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  4.51k|    {
 3370|  4.51k|        return m_begin;
 3371|  4.51k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  25.8k|{
 3563|  25.8k|    {
 3564|  25.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  25.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 262, False: 25.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    262|    }                                                  \
  |  |  |  | 3939|  25.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  25.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  25.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  25.5k|    static_cast<    \
  |  |  935|  25.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  25.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  25.5k|        ctx.range(), t, ctx.locale());
 3571|  25.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  25.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.0k, False: 4.51k]
  |  |  ------------------
  ------------------
 3573|  21.0k|        return unexpected(e.error());
 3574|  21.0k|    }
 3575|  4.51k|    return r.get_iterator();
 3576|  25.5k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  77.4k|{
  250|  77.4k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  77.4k|        .transform_error(impl::make_eof_scan_error);
  252|  77.4k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  25.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  25.5k|    static_cast<    \
  |  |  935|  25.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  25.5k|          m_begin(ranges::begin(m_range)),
 2708|  25.5k|          m_tm(t),
 2709|  25.5k|          m_loc(loc)
 2710|  25.5k|    {
 2711|  25.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  20.5k|    {
 3358|  20.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  90.5k|    {
 3363|  90.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 21.0k, False: 69.4k]
  ------------------
 3364|  21.0k|            m_error = unexpected(e);
 3365|  21.0k|        }
 3366|  90.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  25.5k|    {
 2715|  30.4k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 25.5k, False: 4.91k]
  ------------------
 2716|  25.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 94, False: 25.4k]
  ------------------
 2717|     94|                return set_error({scan_error::end_of_input, "EOF"});
 2718|     94|            }
 2719|  25.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.5k, False: 4.91k]
  ------------------
 2720|  20.5k|                return on_error("Invalid literal character");
 2721|  20.5k|            }
 2722|  4.91k|            ++beg;
 2723|  4.91k|            ++m_begin;
 2724|  4.91k|        }
 2725|  25.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.02k|    {
 2745|  6.02k|#if !SCN_DISABLE_LOCALE
 2746|  6.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.02k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.02k|#endif
 2753|       |
 2754|  6.02k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.02k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.02k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.02k|    {
 2218|  6.02k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.02k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.02k|        t.tm_year = y - 1900;
 2223|  6.02k|        st.set_full_year(h);
 2224|  6.02k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  45.0k|    {
 3381|  45.0k|        int digits_read = 0;
 3382|  45.0k|        int accumulator = 0;
 3383|  55.9k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 55.7k, False: 192]
  ------------------
 3384|  55.7k|            const auto ch = *m_begin;
 3385|  55.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 26.5k, False: 29.2k]
  |  Branch (3385:36): [True: 16.6k, False: 12.5k]
  ------------------
 3386|  43.2k|                break;
 3387|  43.2k|            }
 3388|  12.5k|            ++m_begin;
 3389|  12.5k|            ++digits_read;
 3390|  12.5k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  12.5k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 1.65k, False: 10.9k]
  ------------------
 3392|  1.65k|                break;
 3393|  1.65k|            }
 3394|  12.5k|        }
 3395|  45.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 34.8k, False: 10.1k]
  ------------------
 3396|  34.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  34.8k|                                 "Too few integer digits"});
 3398|  34.8k|            return -1;
 3399|  34.8k|        }
 3400|  10.1k|        return accumulator;
 3401|  45.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.01k|    {
 2759|  3.01k|#if !SCN_DISABLE_LOCALE
 2760|  3.01k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.01k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.01k|#endif
 2768|       |
 2769|  3.01k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.01k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.01k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.01k|    {
 2235|  3.01k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.00k, False: 16]
  |  |  |  Branch (865:45): [True: 3.00k, False: 16]
  |  |  |  Branch (865:45): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2236|  3.00k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.00k|                                "Invalid value for tm_year"});
 2238|  3.00k|        }
 2239|     16|        st.short_year_value = y;
 2240|     16|        st.set_short_year(h);
 2241|     16|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.04k|    {
 2802|  3.04k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.04k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.04k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.04k|#endif
 2810|       |
 2811|  3.04k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.04k|            {"January", 1},
 2813|  3.04k|            {"February", 2},
 2814|  3.04k|            {"March", 3},
 2815|  3.04k|            {"April", 4},
 2816|  3.04k|            {"May", 5},
 2817|  3.04k|            {"June", 6},
 2818|  3.04k|            {"July", 7},
 2819|  3.04k|            {"August", 8},
 2820|  3.04k|            {"September", 9},
 2821|  3.04k|            {"October", 10},
 2822|  3.04k|            {"November", 11},
 2823|  3.04k|            {"December", 12},
 2824|  3.04k|        }};
 2825|  3.04k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 2, False: 3.03k]
  ------------------
 2826|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      2|        }
 2828|  3.03k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.03k|            {"Jan", 1},
 2830|  3.03k|            {"Feb", 2},
 2831|  3.03k|            {"Mar", 3},
 2832|  3.03k|            {"Apr", 4},
 2833|  3.03k|            {"Jun", 6},
 2834|  3.03k|            {"Jul", 7},
 2835|  3.03k|            {"Aug", 8},
 2836|  3.03k|            {"Sep", 9},
 2837|  3.03k|            {"Oct", 10},
 2838|  3.03k|            {"Nov", 11},
 2839|  3.03k|            {"Dec", 12},
 2840|  3.03k|        }};
 2841|  3.03k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 30, False: 3.00k]
  ------------------
 2842|     30|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|     30|        }
 2844|  3.00k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.00k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.07k|    {
 2208|  6.07k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.71k, False: 360]
  |  |  |  Branch (865:45): [True: 5.69k, False: 382]
  |  |  |  Branch (865:45): [True: 22, False: 360]
  |  |  ------------------
  ------------------
 2209|  5.71k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  5.71k|                                "Invalid value for tm_mon"});
 2211|  5.71k|        }
 2212|    360|        t.tm_mon = m - 1;
 2213|    360|        st.set_mon(h);
 2214|    360|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.04k|    {
 3419|  3.04k|        auto start_it = m_begin;
 3420|  3.04k|        std::size_t options_available = N;
 3421|  3.04k|        std::size_t chars_consumed = 0;
 3422|  6.21k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.20k, False: 3.01k]
  ------------------
 3423|  6.21k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.19k, False: 2]
  ------------------
 3424|  3.19k|            std::size_t i = 0;
 3425|  3.19k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 3.17k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  3.17k|            const auto ch = *m_begin;
 3430|  3.17k|            ++m_begin;
 3431|  39.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 36.7k, False: 3.17k]
  ------------------
 3432|  36.7k|                const auto cmp = static_cast<unsigned>(
 3433|  36.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  36.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 36.7k]
  ------------------
 3435|  36.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 36.5k, False: 172]
  |  Branch (3435:34): [True: 36.4k, False: 94]
  ------------------
 3436|  36.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  36.4k|                                options.end());
 3438|  36.4k|                    --options_available;
 3439|  36.4k|                    continue;
 3440|  36.4k|                }
 3441|    266|                ++i;
 3442|    266|            }
 3443|  3.17k|            ++chars_consumed;
 3444|  3.17k|        }
 3445|  3.04k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.03k, False: 2]
  ------------------
 3446|  3.03k|            m_begin = start_it;
 3447|  3.03k|            return std::nullopt;
 3448|  3.03k|        }
 3449|      2|        return options.front().second;
 3450|  3.04k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.03k|    {
 3419|  3.03k|        auto start_it = m_begin;
 3420|  3.03k|        std::size_t options_available = N;
 3421|  3.03k|        std::size_t chars_consumed = 0;
 3422|  6.17k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.19k, False: 2.98k]
  ------------------
 3423|  6.17k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.16k, False: 30]
  ------------------
 3424|  3.16k|            std::size_t i = 0;
 3425|  3.16k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.13k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.13k|            const auto ch = *m_begin;
 3430|  3.13k|            ++m_begin;
 3431|  36.6k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.5k, False: 3.13k]
  ------------------
 3432|  33.5k|                const auto cmp = static_cast<unsigned>(
 3433|  33.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.5k]
  ------------------
 3435|  33.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.4k, False: 104]
  |  Branch (3435:34): [True: 33.3k, False: 88]
  ------------------
 3436|  33.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  33.3k|                                options.end());
 3438|  33.3k|                    --options_available;
 3439|  33.3k|                    continue;
 3440|  33.3k|                }
 3441|    192|                ++i;
 3442|    192|            }
 3443|  3.13k|            ++chars_consumed;
 3444|  3.13k|        }
 3445|  3.03k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.00k, False: 30]
  ------------------
 3446|  3.00k|            m_begin = start_it;
 3447|  3.00k|            return std::nullopt;
 3448|  3.00k|        }
 3449|     30|        return options.front().second;
 3450|  3.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.04k|    {
 2848|  6.04k|#if !SCN_DISABLE_LOCALE
 2849|  6.04k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.04k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.04k|#endif
 2856|       |
 2857|  6.04k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.04k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.04k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.02k|    {
 2880|  6.02k|#if !SCN_DISABLE_LOCALE
 2881|  6.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.02k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.02k|#endif
 2888|       |
 2889|  6.02k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.02k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.02k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.02k|    {
 2198|  6.02k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.00k, False: 28]
  |  |  |  Branch (865:45): [True: 5.99k, False: 38]
  |  |  |  Branch (865:45): [True: 10, False: 28]
  |  |  ------------------
  ------------------
 2199|  6.00k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.00k|                                "Invalid value for tm_mday"});
 2201|  6.00k|        }
 2202|     28|        t.tm_mday = d;
 2203|     28|        st.set_mday(h);
 2204|     28|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.01k|    {
 2895|  3.01k|#if !SCN_DISABLE_LOCALE
 2896|  3.01k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.01k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.01k|#endif
 2903|       |
 2904|  3.01k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.01k|            {"Sunday", 0},
 2906|  3.01k|            {"Monday", 1},
 2907|  3.01k|            {"Tuesday", 2},
 2908|  3.01k|            {"Wednesday", 3},
 2909|  3.01k|            {"Thursday", 4},
 2910|  3.01k|            {"Friday", 5},
 2911|  3.01k|            {"Saturday", 6},
 2912|  3.01k|        }};
 2913|  3.01k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.01k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.01k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.01k|            {"Sun", 0},
 2918|  3.01k|            {"Mon", 1},
 2919|  3.01k|            {"Tue", 2},
 2920|  3.01k|            {"Wed", 3},
 2921|  3.01k|            {"Thu", 4},
 2922|  3.01k|            {"Fri", 5},
 2923|  3.01k|            {"Sat", 6},
 2924|  3.01k|        }};
 2925|  3.01k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.01k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.01k|        return set_error(
 2929|  3.01k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.02k|    {
 3419|  6.02k|        auto start_it = m_begin;
 3420|  6.02k|        std::size_t options_available = N;
 3421|  6.02k|        std::size_t chars_consumed = 0;
 3422|  12.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.11k, False: 6.00k]
  ------------------
 3423|  12.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.11k, False: 0]
  ------------------
 3424|  6.11k|            std::size_t i = 0;
 3425|  6.11k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 6.08k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  6.08k|            const auto ch = *m_begin;
 3430|  6.08k|            ++m_begin;
 3431|  48.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.2k, False: 6.08k]
  ------------------
 3432|  42.2k|                const auto cmp = static_cast<unsigned>(
 3433|  42.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.2k]
  ------------------
 3435|  42.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.1k, False: 108]
  |  Branch (3435:34): [True: 42.1k, False: 16]
  ------------------
 3436|  42.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.1k|                                options.end());
 3438|  42.1k|                    --options_available;
 3439|  42.1k|                    continue;
 3440|  42.1k|                }
 3441|    124|                ++i;
 3442|    124|            }
 3443|  6.08k|            ++chars_consumed;
 3444|  6.08k|        }
 3445|  6.02k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.02k, False: 0]
  ------------------
 3446|  6.02k|            m_begin = start_it;
 3447|  6.02k|            return std::nullopt;
 3448|  6.02k|        }
 3449|      0|        return options.front().second;
 3450|  6.02k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  10.4k|    {
 2969|  10.4k|#if !SCN_DISABLE_LOCALE
 2970|  10.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 10.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  10.4k|#endif
 2977|       |
 2978|  10.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  10.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  10.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  10.4k|    {
 2178|  10.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.56k, False: 4.90k]
  |  |  |  Branch (865:45): [True: 5.53k, False: 4.93k]
  |  |  |  Branch (865:45): [True: 28, False: 4.90k]
  |  |  ------------------
  ------------------
 2179|  5.56k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  5.56k|                                  "Invalid value for tm_hour"});
 2181|  5.56k|        }
 2182|  4.90k|        t.tm_hour = h;
 2183|  4.90k|        st.set_hour24(hdl);
 2184|  4.90k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  10.4k|    {
 2997|  10.4k|#if !SCN_DISABLE_LOCALE
 2998|  10.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 10.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  10.4k|#endif
 3005|       |
 3006|  10.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  10.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  10.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  10.4k|    {
 2168|  10.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  15.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.69k, False: 4.76k]
  |  |  |  Branch (865:45): [True: 5.68k, False: 4.78k]
  |  |  |  Branch (865:45): [True: 12, False: 4.76k]
  |  |  ------------------
  ------------------
 2169|  5.69k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  5.69k|                                "Invalid value for tm_min"});
 2171|  5.69k|        }
 2172|  4.76k|        t.tm_min = m;
 2173|  4.76k|        st.set_min(h);
 2174|  4.76k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.03k|    {
 3011|  3.03k|#if !SCN_DISABLE_LOCALE
 3012|  3.03k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.03k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.03k|#endif
 3019|       |
 3020|  3.03k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.03k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.03k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.03k|    {
 2158|  3.03k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.98k, False: 50]
  |  |  |  Branch (865:45): [True: 2.98k, False: 52]
  |  |  |  Branch (865:45): [True: 2, False: 50]
  |  |  ------------------
  ------------------
 2159|  2.98k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  2.98k|                                "Invalid value for tm_sec"});
 2161|  2.98k|        }
 2162|     50|        t.tm_sec = s;
 2163|     50|        st.set_sec(h);
 2164|     50|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.01k|    {
 3253|       |        // %m/%d/%y
 3254|  3.01k|        constexpr CharT slash = '/';
 3255|  3.01k|        on_dec_month();
 3256|  3.01k|        on_text(&slash, &slash + 1);
 3257|  3.01k|        on_day_of_month();
 3258|  3.01k|        on_text(&slash, &slash + 1);
 3259|  3.01k|        on_short_year();
 3260|  3.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.01k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.01k|        constexpr CharT dash = '-';
 3265|  3.01k|        on_full_year();
 3266|  3.01k|        on_text(&dash, &dash + 1);
 3267|  3.01k|        on_dec_month();
 3268|  3.01k|        on_text(&dash, &dash + 1);
 3269|  3.01k|        on_day_of_month();
 3270|  3.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  7.42k|    {
 3295|       |        // %H:%M
 3296|  7.42k|        constexpr CharT colon = ':';
 3297|  7.42k|        on_24_hour();
 3298|  7.42k|        on_text(&colon, &colon + 1);
 3299|  7.42k|        on_minute();
 3300|  7.42k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.03k|    {
 3303|       |        // %H:%M:%S
 3304|  3.03k|        constexpr CharT colon = ':';
 3305|  3.03k|        on_24_hour();
 3306|  3.03k|        on_text(&colon, &colon + 1);
 3307|  3.03k|        on_minute();
 3308|  3.03k|        on_text(&colon, &colon + 1);
 3309|  3.03k|        on_second();
 3310|  3.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  4.51k|    {
 3342|  4.51k|        m_st.verify(*this);
 3343|  4.51k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 4.51k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  4.51k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 4.51k, False: 0]
  |  Branch (3346:37): [True: 8, False: 4.50k]
  |  Branch (3346:60): [True: 0, False: 4.50k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  4.51k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  51.1k|    {
 3353|  51.1k|        return m_error;
 3354|  51.1k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  4.51k|    {
 3370|  4.51k|        return m_begin;
 3371|  4.51k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  25.8k|{
 3563|  25.8k|    {
 3564|  25.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  25.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 262, False: 25.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    262|    }                                                  \
  |  |  |  | 3939|  25.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  25.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  25.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  25.5k|    static_cast<    \
  |  |  935|  25.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  25.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  25.5k|        ctx.range(), t, ctx.locale());
 3571|  25.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  25.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.0k, False: 4.51k]
  |  |  ------------------
  ------------------
 3573|  21.0k|        return unexpected(e.error());
 3574|  21.0k|    }
 3575|  4.51k|    return r.get_iterator();
 3576|  25.5k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  25.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  25.5k|    static_cast<    \
  |  |  935|  25.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  25.5k|          m_begin(ranges::begin(m_range)),
 2708|  25.5k|          m_tm(t),
 2709|  25.5k|          m_loc(loc)
 2710|  25.5k|    {
 2711|  25.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  20.5k|    {
 3358|  20.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  90.5k|    {
 3363|  90.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 21.0k, False: 69.4k]
  ------------------
 3364|  21.0k|            m_error = unexpected(e);
 3365|  21.0k|        }
 3366|  90.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  25.5k|    {
 2715|  30.4k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 25.5k, False: 4.91k]
  ------------------
 2716|  25.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 94, False: 25.4k]
  ------------------
 2717|     94|                return set_error({scan_error::end_of_input, "EOF"});
 2718|     94|            }
 2719|  25.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.5k, False: 4.91k]
  ------------------
 2720|  20.5k|                return on_error("Invalid literal character");
 2721|  20.5k|            }
 2722|  4.91k|            ++beg;
 2723|  4.91k|            ++m_begin;
 2724|  4.91k|        }
 2725|  25.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.02k|    {
 2745|  6.02k|#if !SCN_DISABLE_LOCALE
 2746|  6.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.02k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.02k|#endif
 2753|       |
 2754|  6.02k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.02k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.02k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.02k|    {
 2218|  6.02k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.02k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.02k|        t.tm_year = y - 1900;
 2223|  6.02k|        st.set_full_year(h);
 2224|  6.02k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  45.0k|    {
 3381|  45.0k|        int digits_read = 0;
 3382|  45.0k|        int accumulator = 0;
 3383|  55.9k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 55.7k, False: 192]
  ------------------
 3384|  55.7k|            const auto ch = *m_begin;
 3385|  55.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 26.5k, False: 29.2k]
  |  Branch (3385:36): [True: 16.6k, False: 12.5k]
  ------------------
 3386|  43.2k|                break;
 3387|  43.2k|            }
 3388|  12.5k|            ++m_begin;
 3389|  12.5k|            ++digits_read;
 3390|  12.5k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  12.5k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 1.65k, False: 10.9k]
  ------------------
 3392|  1.65k|                break;
 3393|  1.65k|            }
 3394|  12.5k|        }
 3395|  45.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 34.8k, False: 10.1k]
  ------------------
 3396|  34.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  34.8k|                                 "Too few integer digits"});
 3398|  34.8k|            return -1;
 3399|  34.8k|        }
 3400|  10.1k|        return accumulator;
 3401|  45.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.01k|    {
 2759|  3.01k|#if !SCN_DISABLE_LOCALE
 2760|  3.01k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.01k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.01k|#endif
 2768|       |
 2769|  3.01k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.01k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.01k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.01k|    {
 2235|  3.01k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.00k, False: 16]
  |  |  |  Branch (865:45): [True: 3.00k, False: 16]
  |  |  |  Branch (865:45): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2236|  3.00k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.00k|                                "Invalid value for tm_year"});
 2238|  3.00k|        }
 2239|     16|        st.short_year_value = y;
 2240|     16|        st.set_short_year(h);
 2241|     16|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.04k|    {
 2802|  3.04k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.04k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.04k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.04k|#endif
 2810|       |
 2811|  3.04k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.04k|            {"January", 1},
 2813|  3.04k|            {"February", 2},
 2814|  3.04k|            {"March", 3},
 2815|  3.04k|            {"April", 4},
 2816|  3.04k|            {"May", 5},
 2817|  3.04k|            {"June", 6},
 2818|  3.04k|            {"July", 7},
 2819|  3.04k|            {"August", 8},
 2820|  3.04k|            {"September", 9},
 2821|  3.04k|            {"October", 10},
 2822|  3.04k|            {"November", 11},
 2823|  3.04k|            {"December", 12},
 2824|  3.04k|        }};
 2825|  3.04k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 2, False: 3.03k]
  ------------------
 2826|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      2|        }
 2828|  3.03k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.03k|            {"Jan", 1},
 2830|  3.03k|            {"Feb", 2},
 2831|  3.03k|            {"Mar", 3},
 2832|  3.03k|            {"Apr", 4},
 2833|  3.03k|            {"Jun", 6},
 2834|  3.03k|            {"Jul", 7},
 2835|  3.03k|            {"Aug", 8},
 2836|  3.03k|            {"Sep", 9},
 2837|  3.03k|            {"Oct", 10},
 2838|  3.03k|            {"Nov", 11},
 2839|  3.03k|            {"Dec", 12},
 2840|  3.03k|        }};
 2841|  3.03k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 30, False: 3.00k]
  ------------------
 2842|     30|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|     30|        }
 2844|  3.00k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.00k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.07k|    {
 2208|  6.07k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.71k, False: 360]
  |  |  |  Branch (865:45): [True: 5.69k, False: 382]
  |  |  |  Branch (865:45): [True: 22, False: 360]
  |  |  ------------------
  ------------------
 2209|  5.71k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  5.71k|                                "Invalid value for tm_mon"});
 2211|  5.71k|        }
 2212|    360|        t.tm_mon = m - 1;
 2213|    360|        st.set_mon(h);
 2214|    360|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.04k|    {
 3419|  3.04k|        auto start_it = m_begin;
 3420|  3.04k|        std::size_t options_available = N;
 3421|  3.04k|        std::size_t chars_consumed = 0;
 3422|  6.21k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.20k, False: 3.01k]
  ------------------
 3423|  6.21k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.19k, False: 2]
  ------------------
 3424|  3.19k|            std::size_t i = 0;
 3425|  3.19k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 3.17k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  3.17k|            const auto ch = *m_begin;
 3430|  3.17k|            ++m_begin;
 3431|  39.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 36.7k, False: 3.17k]
  ------------------
 3432|  36.7k|                const auto cmp = static_cast<unsigned>(
 3433|  36.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  36.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 36.7k]
  ------------------
 3435|  36.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 36.5k, False: 172]
  |  Branch (3435:34): [True: 36.4k, False: 94]
  ------------------
 3436|  36.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  36.4k|                                options.end());
 3438|  36.4k|                    --options_available;
 3439|  36.4k|                    continue;
 3440|  36.4k|                }
 3441|    266|                ++i;
 3442|    266|            }
 3443|  3.17k|            ++chars_consumed;
 3444|  3.17k|        }
 3445|  3.04k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.03k, False: 2]
  ------------------
 3446|  3.03k|            m_begin = start_it;
 3447|  3.03k|            return std::nullopt;
 3448|  3.03k|        }
 3449|      2|        return options.front().second;
 3450|  3.04k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.03k|    {
 3419|  3.03k|        auto start_it = m_begin;
 3420|  3.03k|        std::size_t options_available = N;
 3421|  3.03k|        std::size_t chars_consumed = 0;
 3422|  6.17k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.19k, False: 2.98k]
  ------------------
 3423|  6.17k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.16k, False: 30]
  ------------------
 3424|  3.16k|            std::size_t i = 0;
 3425|  3.16k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.13k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.13k|            const auto ch = *m_begin;
 3430|  3.13k|            ++m_begin;
 3431|  36.6k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.5k, False: 3.13k]
  ------------------
 3432|  33.5k|                const auto cmp = static_cast<unsigned>(
 3433|  33.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.5k]
  ------------------
 3435|  33.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.4k, False: 104]
  |  Branch (3435:34): [True: 33.3k, False: 88]
  ------------------
 3436|  33.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  33.3k|                                options.end());
 3438|  33.3k|                    --options_available;
 3439|  33.3k|                    continue;
 3440|  33.3k|                }
 3441|    192|                ++i;
 3442|    192|            }
 3443|  3.13k|            ++chars_consumed;
 3444|  3.13k|        }
 3445|  3.03k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.00k, False: 30]
  ------------------
 3446|  3.00k|            m_begin = start_it;
 3447|  3.00k|            return std::nullopt;
 3448|  3.00k|        }
 3449|     30|        return options.front().second;
 3450|  3.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.04k|    {
 2848|  6.04k|#if !SCN_DISABLE_LOCALE
 2849|  6.04k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.04k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.04k|#endif
 2856|       |
 2857|  6.04k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.04k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.04k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.02k|    {
 2880|  6.02k|#if !SCN_DISABLE_LOCALE
 2881|  6.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.02k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.02k|#endif
 2888|       |
 2889|  6.02k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.02k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.02k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.02k|    {
 2198|  6.02k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.00k, False: 28]
  |  |  |  Branch (865:45): [True: 5.99k, False: 38]
  |  |  |  Branch (865:45): [True: 10, False: 28]
  |  |  ------------------
  ------------------
 2199|  6.00k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.00k|                                "Invalid value for tm_mday"});
 2201|  6.00k|        }
 2202|     28|        t.tm_mday = d;
 2203|     28|        st.set_mday(h);
 2204|     28|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.01k|    {
 2895|  3.01k|#if !SCN_DISABLE_LOCALE
 2896|  3.01k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.01k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.01k|#endif
 2903|       |
 2904|  3.01k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.01k|            {"Sunday", 0},
 2906|  3.01k|            {"Monday", 1},
 2907|  3.01k|            {"Tuesday", 2},
 2908|  3.01k|            {"Wednesday", 3},
 2909|  3.01k|            {"Thursday", 4},
 2910|  3.01k|            {"Friday", 5},
 2911|  3.01k|            {"Saturday", 6},
 2912|  3.01k|        }};
 2913|  3.01k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.01k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.01k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.01k|            {"Sun", 0},
 2918|  3.01k|            {"Mon", 1},
 2919|  3.01k|            {"Tue", 2},
 2920|  3.01k|            {"Wed", 3},
 2921|  3.01k|            {"Thu", 4},
 2922|  3.01k|            {"Fri", 5},
 2923|  3.01k|            {"Sat", 6},
 2924|  3.01k|        }};
 2925|  3.01k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.01k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.01k|        return set_error(
 2929|  3.01k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.02k|    {
 3419|  6.02k|        auto start_it = m_begin;
 3420|  6.02k|        std::size_t options_available = N;
 3421|  6.02k|        std::size_t chars_consumed = 0;
 3422|  12.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.11k, False: 6.00k]
  ------------------
 3423|  12.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.11k, False: 0]
  ------------------
 3424|  6.11k|            std::size_t i = 0;
 3425|  6.11k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 6.08k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  6.08k|            const auto ch = *m_begin;
 3430|  6.08k|            ++m_begin;
 3431|  48.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.2k, False: 6.08k]
  ------------------
 3432|  42.2k|                const auto cmp = static_cast<unsigned>(
 3433|  42.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.2k]
  ------------------
 3435|  42.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.1k, False: 108]
  |  Branch (3435:34): [True: 42.1k, False: 16]
  ------------------
 3436|  42.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.1k|                                options.end());
 3438|  42.1k|                    --options_available;
 3439|  42.1k|                    continue;
 3440|  42.1k|                }
 3441|    124|                ++i;
 3442|    124|            }
 3443|  6.08k|            ++chars_consumed;
 3444|  6.08k|        }
 3445|  6.02k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.02k, False: 0]
  ------------------
 3446|  6.02k|            m_begin = start_it;
 3447|  6.02k|            return std::nullopt;
 3448|  6.02k|        }
 3449|      0|        return options.front().second;
 3450|  6.02k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  10.4k|    {
 2969|  10.4k|#if !SCN_DISABLE_LOCALE
 2970|  10.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 10.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  10.4k|#endif
 2977|       |
 2978|  10.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  10.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  10.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  10.4k|    {
 2178|  10.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.56k, False: 4.90k]
  |  |  |  Branch (865:45): [True: 5.53k, False: 4.93k]
  |  |  |  Branch (865:45): [True: 28, False: 4.90k]
  |  |  ------------------
  ------------------
 2179|  5.56k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  5.56k|                                  "Invalid value for tm_hour"});
 2181|  5.56k|        }
 2182|  4.90k|        t.tm_hour = h;
 2183|  4.90k|        st.set_hour24(hdl);
 2184|  4.90k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  10.4k|    {
 2997|  10.4k|#if !SCN_DISABLE_LOCALE
 2998|  10.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 10.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  10.4k|#endif
 3005|       |
 3006|  10.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  10.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  10.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  10.4k|    {
 2168|  10.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  15.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.69k, False: 4.76k]
  |  |  |  Branch (865:45): [True: 5.68k, False: 4.78k]
  |  |  |  Branch (865:45): [True: 12, False: 4.76k]
  |  |  ------------------
  ------------------
 2169|  5.69k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  5.69k|                                "Invalid value for tm_min"});
 2171|  5.69k|        }
 2172|  4.76k|        t.tm_min = m;
 2173|  4.76k|        st.set_min(h);
 2174|  4.76k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.03k|    {
 3011|  3.03k|#if !SCN_DISABLE_LOCALE
 3012|  3.03k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.03k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.03k|#endif
 3019|       |
 3020|  3.03k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.03k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.03k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.03k|    {
 2158|  3.03k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.98k, False: 50]
  |  |  |  Branch (865:45): [True: 2.98k, False: 52]
  |  |  |  Branch (865:45): [True: 2, False: 50]
  |  |  ------------------
  ------------------
 2159|  2.98k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  2.98k|                                "Invalid value for tm_sec"});
 2161|  2.98k|        }
 2162|     50|        t.tm_sec = s;
 2163|     50|        st.set_sec(h);
 2164|     50|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.01k|    {
 3253|       |        // %m/%d/%y
 3254|  3.01k|        constexpr CharT slash = '/';
 3255|  3.01k|        on_dec_month();
 3256|  3.01k|        on_text(&slash, &slash + 1);
 3257|  3.01k|        on_day_of_month();
 3258|  3.01k|        on_text(&slash, &slash + 1);
 3259|  3.01k|        on_short_year();
 3260|  3.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.01k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.01k|        constexpr CharT dash = '-';
 3265|  3.01k|        on_full_year();
 3266|  3.01k|        on_text(&dash, &dash + 1);
 3267|  3.01k|        on_dec_month();
 3268|  3.01k|        on_text(&dash, &dash + 1);
 3269|  3.01k|        on_day_of_month();
 3270|  3.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  7.42k|    {
 3295|       |        // %H:%M
 3296|  7.42k|        constexpr CharT colon = ':';
 3297|  7.42k|        on_24_hour();
 3298|  7.42k|        on_text(&colon, &colon + 1);
 3299|  7.42k|        on_minute();
 3300|  7.42k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.03k|    {
 3303|       |        // %H:%M:%S
 3304|  3.03k|        constexpr CharT colon = ':';
 3305|  3.03k|        on_24_hour();
 3306|  3.03k|        on_text(&colon, &colon + 1);
 3307|  3.03k|        on_minute();
 3308|  3.03k|        on_text(&colon, &colon + 1);
 3309|  3.03k|        on_second();
 3310|  3.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  4.51k|    {
 3342|  4.51k|        m_st.verify(*this);
 3343|  4.51k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 4.51k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  4.51k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 4.51k, False: 0]
  |  Branch (3346:37): [True: 8, False: 4.50k]
  |  Branch (3346:60): [True: 0, False: 4.50k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  4.51k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  51.1k|    {
 3353|  51.1k|        return m_error;
 3354|  51.1k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  4.51k|    {
 3370|  4.51k|        return m_begin;
 3371|  4.51k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  25.8k|{
 3563|  25.8k|    {
 3564|  25.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  25.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 262, False: 25.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    262|    }                                                  \
  |  |  |  | 3939|  25.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  25.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  25.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  25.5k|    static_cast<    \
  |  |  935|  25.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  25.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  25.5k|        ctx.range(), t, ctx.locale());
 3571|  25.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  25.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.0k, False: 4.51k]
  |  |  ------------------
  ------------------
 3573|  21.0k|        return unexpected(e.error());
 3574|  21.0k|    }
 3575|  4.51k|    return r.get_iterator();
 3576|  25.5k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  25.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  25.5k|    static_cast<    \
  |  |  935|  25.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  25.5k|          m_begin(ranges::begin(m_range)),
 2708|  25.5k|          m_tm(t),
 2709|  25.5k|          m_loc(loc)
 2710|  25.5k|    {
 2711|  25.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  20.5k|    {
 3358|  20.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  90.5k|    {
 3363|  90.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 21.0k, False: 69.4k]
  ------------------
 3364|  21.0k|            m_error = unexpected(e);
 3365|  21.0k|        }
 3366|  90.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  25.5k|    {
 2715|  30.4k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 25.5k, False: 4.91k]
  ------------------
 2716|  25.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 94, False: 25.4k]
  ------------------
 2717|     94|                return set_error({scan_error::end_of_input, "EOF"});
 2718|     94|            }
 2719|  25.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.5k, False: 4.91k]
  ------------------
 2720|  20.5k|                return on_error("Invalid literal character");
 2721|  20.5k|            }
 2722|  4.91k|            ++beg;
 2723|  4.91k|            ++m_begin;
 2724|  4.91k|        }
 2725|  25.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.02k|    {
 2745|  6.02k|#if !SCN_DISABLE_LOCALE
 2746|  6.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.02k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.02k|#endif
 2753|       |
 2754|  6.02k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.02k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.02k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.02k|    {
 2218|  6.02k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.02k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.02k|        t.tm_year = y - 1900;
 2223|  6.02k|        st.set_full_year(h);
 2224|  6.02k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  45.0k|    {
 3381|  45.0k|        int digits_read = 0;
 3382|  45.0k|        int accumulator = 0;
 3383|  55.9k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 55.7k, False: 192]
  ------------------
 3384|  55.7k|            const auto ch = *m_begin;
 3385|  55.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 26.5k, False: 29.2k]
  |  Branch (3385:36): [True: 16.6k, False: 12.5k]
  ------------------
 3386|  43.2k|                break;
 3387|  43.2k|            }
 3388|  12.5k|            ++m_begin;
 3389|  12.5k|            ++digits_read;
 3390|  12.5k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  12.5k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 1.65k, False: 10.9k]
  ------------------
 3392|  1.65k|                break;
 3393|  1.65k|            }
 3394|  12.5k|        }
 3395|  45.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 34.8k, False: 10.1k]
  ------------------
 3396|  34.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  34.8k|                                 "Too few integer digits"});
 3398|  34.8k|            return -1;
 3399|  34.8k|        }
 3400|  10.1k|        return accumulator;
 3401|  45.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.01k|    {
 2759|  3.01k|#if !SCN_DISABLE_LOCALE
 2760|  3.01k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.01k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.01k|#endif
 2768|       |
 2769|  3.01k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.01k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.01k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.01k|    {
 2235|  3.01k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.00k, False: 16]
  |  |  |  Branch (865:45): [True: 3.00k, False: 16]
  |  |  |  Branch (865:45): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2236|  3.00k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.00k|                                "Invalid value for tm_year"});
 2238|  3.00k|        }
 2239|     16|        st.short_year_value = y;
 2240|     16|        st.set_short_year(h);
 2241|     16|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.04k|    {
 2802|  3.04k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.04k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.04k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.04k|#endif
 2810|       |
 2811|  3.04k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.04k|            {"January", 1},
 2813|  3.04k|            {"February", 2},
 2814|  3.04k|            {"March", 3},
 2815|  3.04k|            {"April", 4},
 2816|  3.04k|            {"May", 5},
 2817|  3.04k|            {"June", 6},
 2818|  3.04k|            {"July", 7},
 2819|  3.04k|            {"August", 8},
 2820|  3.04k|            {"September", 9},
 2821|  3.04k|            {"October", 10},
 2822|  3.04k|            {"November", 11},
 2823|  3.04k|            {"December", 12},
 2824|  3.04k|        }};
 2825|  3.04k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 2, False: 3.03k]
  ------------------
 2826|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      2|        }
 2828|  3.03k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.03k|            {"Jan", 1},
 2830|  3.03k|            {"Feb", 2},
 2831|  3.03k|            {"Mar", 3},
 2832|  3.03k|            {"Apr", 4},
 2833|  3.03k|            {"Jun", 6},
 2834|  3.03k|            {"Jul", 7},
 2835|  3.03k|            {"Aug", 8},
 2836|  3.03k|            {"Sep", 9},
 2837|  3.03k|            {"Oct", 10},
 2838|  3.03k|            {"Nov", 11},
 2839|  3.03k|            {"Dec", 12},
 2840|  3.03k|        }};
 2841|  3.03k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 30, False: 3.00k]
  ------------------
 2842|     30|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|     30|        }
 2844|  3.00k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.00k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.07k|    {
 2208|  6.07k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.71k, False: 360]
  |  |  |  Branch (865:45): [True: 5.69k, False: 382]
  |  |  |  Branch (865:45): [True: 22, False: 360]
  |  |  ------------------
  ------------------
 2209|  5.71k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  5.71k|                                "Invalid value for tm_mon"});
 2211|  5.71k|        }
 2212|    360|        t.tm_mon = m - 1;
 2213|    360|        st.set_mon(h);
 2214|    360|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.04k|    {
 3419|  3.04k|        auto start_it = m_begin;
 3420|  3.04k|        std::size_t options_available = N;
 3421|  3.04k|        std::size_t chars_consumed = 0;
 3422|  6.21k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.20k, False: 3.01k]
  ------------------
 3423|  6.21k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.19k, False: 2]
  ------------------
 3424|  3.19k|            std::size_t i = 0;
 3425|  3.19k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 3.17k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  3.17k|            const auto ch = *m_begin;
 3430|  3.17k|            ++m_begin;
 3431|  39.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 36.7k, False: 3.17k]
  ------------------
 3432|  36.7k|                const auto cmp = static_cast<unsigned>(
 3433|  36.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  36.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 36.7k]
  ------------------
 3435|  36.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 36.5k, False: 172]
  |  Branch (3435:34): [True: 36.4k, False: 94]
  ------------------
 3436|  36.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  36.4k|                                options.end());
 3438|  36.4k|                    --options_available;
 3439|  36.4k|                    continue;
 3440|  36.4k|                }
 3441|    266|                ++i;
 3442|    266|            }
 3443|  3.17k|            ++chars_consumed;
 3444|  3.17k|        }
 3445|  3.04k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.03k, False: 2]
  ------------------
 3446|  3.03k|            m_begin = start_it;
 3447|  3.03k|            return std::nullopt;
 3448|  3.03k|        }
 3449|      2|        return options.front().second;
 3450|  3.04k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.03k|    {
 3419|  3.03k|        auto start_it = m_begin;
 3420|  3.03k|        std::size_t options_available = N;
 3421|  3.03k|        std::size_t chars_consumed = 0;
 3422|  6.17k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.19k, False: 2.98k]
  ------------------
 3423|  6.17k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.16k, False: 30]
  ------------------
 3424|  3.16k|            std::size_t i = 0;
 3425|  3.16k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.13k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.13k|            const auto ch = *m_begin;
 3430|  3.13k|            ++m_begin;
 3431|  36.6k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.5k, False: 3.13k]
  ------------------
 3432|  33.5k|                const auto cmp = static_cast<unsigned>(
 3433|  33.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.5k]
  ------------------
 3435|  33.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.4k, False: 104]
  |  Branch (3435:34): [True: 33.3k, False: 88]
  ------------------
 3436|  33.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  33.3k|                                options.end());
 3438|  33.3k|                    --options_available;
 3439|  33.3k|                    continue;
 3440|  33.3k|                }
 3441|    192|                ++i;
 3442|    192|            }
 3443|  3.13k|            ++chars_consumed;
 3444|  3.13k|        }
 3445|  3.03k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.00k, False: 30]
  ------------------
 3446|  3.00k|            m_begin = start_it;
 3447|  3.00k|            return std::nullopt;
 3448|  3.00k|        }
 3449|     30|        return options.front().second;
 3450|  3.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.04k|    {
 2848|  6.04k|#if !SCN_DISABLE_LOCALE
 2849|  6.04k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.04k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.04k|#endif
 2856|       |
 2857|  6.04k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.04k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.04k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.02k|    {
 2880|  6.02k|#if !SCN_DISABLE_LOCALE
 2881|  6.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.02k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.02k|#endif
 2888|       |
 2889|  6.02k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.02k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.02k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.02k|    {
 2198|  6.02k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.00k, False: 28]
  |  |  |  Branch (865:45): [True: 5.99k, False: 38]
  |  |  |  Branch (865:45): [True: 10, False: 28]
  |  |  ------------------
  ------------------
 2199|  6.00k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.00k|                                "Invalid value for tm_mday"});
 2201|  6.00k|        }
 2202|     28|        t.tm_mday = d;
 2203|     28|        st.set_mday(h);
 2204|     28|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.01k|    {
 2895|  3.01k|#if !SCN_DISABLE_LOCALE
 2896|  3.01k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.01k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.01k|#endif
 2903|       |
 2904|  3.01k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.01k|            {"Sunday", 0},
 2906|  3.01k|            {"Monday", 1},
 2907|  3.01k|            {"Tuesday", 2},
 2908|  3.01k|            {"Wednesday", 3},
 2909|  3.01k|            {"Thursday", 4},
 2910|  3.01k|            {"Friday", 5},
 2911|  3.01k|            {"Saturday", 6},
 2912|  3.01k|        }};
 2913|  3.01k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.01k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.01k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.01k|            {"Sun", 0},
 2918|  3.01k|            {"Mon", 1},
 2919|  3.01k|            {"Tue", 2},
 2920|  3.01k|            {"Wed", 3},
 2921|  3.01k|            {"Thu", 4},
 2922|  3.01k|            {"Fri", 5},
 2923|  3.01k|            {"Sat", 6},
 2924|  3.01k|        }};
 2925|  3.01k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.01k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.01k|        return set_error(
 2929|  3.01k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.02k|    {
 3419|  6.02k|        auto start_it = m_begin;
 3420|  6.02k|        std::size_t options_available = N;
 3421|  6.02k|        std::size_t chars_consumed = 0;
 3422|  12.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.11k, False: 6.00k]
  ------------------
 3423|  12.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.11k, False: 0]
  ------------------
 3424|  6.11k|            std::size_t i = 0;
 3425|  6.11k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 6.08k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  6.08k|            const auto ch = *m_begin;
 3430|  6.08k|            ++m_begin;
 3431|  48.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.2k, False: 6.08k]
  ------------------
 3432|  42.2k|                const auto cmp = static_cast<unsigned>(
 3433|  42.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.2k]
  ------------------
 3435|  42.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.1k, False: 108]
  |  Branch (3435:34): [True: 42.1k, False: 16]
  ------------------
 3436|  42.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.1k|                                options.end());
 3438|  42.1k|                    --options_available;
 3439|  42.1k|                    continue;
 3440|  42.1k|                }
 3441|    124|                ++i;
 3442|    124|            }
 3443|  6.08k|            ++chars_consumed;
 3444|  6.08k|        }
 3445|  6.02k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.02k, False: 0]
  ------------------
 3446|  6.02k|            m_begin = start_it;
 3447|  6.02k|            return std::nullopt;
 3448|  6.02k|        }
 3449|      0|        return options.front().second;
 3450|  6.02k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  10.4k|    {
 2969|  10.4k|#if !SCN_DISABLE_LOCALE
 2970|  10.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 10.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  10.4k|#endif
 2977|       |
 2978|  10.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  10.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  10.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  10.4k|    {
 2178|  10.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.56k, False: 4.90k]
  |  |  |  Branch (865:45): [True: 5.53k, False: 4.93k]
  |  |  |  Branch (865:45): [True: 28, False: 4.90k]
  |  |  ------------------
  ------------------
 2179|  5.56k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  5.56k|                                  "Invalid value for tm_hour"});
 2181|  5.56k|        }
 2182|  4.90k|        t.tm_hour = h;
 2183|  4.90k|        st.set_hour24(hdl);
 2184|  4.90k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  10.4k|    {
 2997|  10.4k|#if !SCN_DISABLE_LOCALE
 2998|  10.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 10.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  10.4k|#endif
 3005|       |
 3006|  10.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  10.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  10.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  10.4k|    {
 2168|  10.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  15.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.69k, False: 4.76k]
  |  |  |  Branch (865:45): [True: 5.68k, False: 4.78k]
  |  |  |  Branch (865:45): [True: 12, False: 4.76k]
  |  |  ------------------
  ------------------
 2169|  5.69k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  5.69k|                                "Invalid value for tm_min"});
 2171|  5.69k|        }
 2172|  4.76k|        t.tm_min = m;
 2173|  4.76k|        st.set_min(h);
 2174|  4.76k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.03k|    {
 3011|  3.03k|#if !SCN_DISABLE_LOCALE
 3012|  3.03k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.03k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.03k|#endif
 3019|       |
 3020|  3.03k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.03k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.03k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.03k|    {
 2158|  3.03k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.98k, False: 50]
  |  |  |  Branch (865:45): [True: 2.98k, False: 52]
  |  |  |  Branch (865:45): [True: 2, False: 50]
  |  |  ------------------
  ------------------
 2159|  2.98k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  2.98k|                                "Invalid value for tm_sec"});
 2161|  2.98k|        }
 2162|     50|        t.tm_sec = s;
 2163|     50|        st.set_sec(h);
 2164|     50|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.01k|    {
 3253|       |        // %m/%d/%y
 3254|  3.01k|        constexpr CharT slash = '/';
 3255|  3.01k|        on_dec_month();
 3256|  3.01k|        on_text(&slash, &slash + 1);
 3257|  3.01k|        on_day_of_month();
 3258|  3.01k|        on_text(&slash, &slash + 1);
 3259|  3.01k|        on_short_year();
 3260|  3.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.01k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.01k|        constexpr CharT dash = '-';
 3265|  3.01k|        on_full_year();
 3266|  3.01k|        on_text(&dash, &dash + 1);
 3267|  3.01k|        on_dec_month();
 3268|  3.01k|        on_text(&dash, &dash + 1);
 3269|  3.01k|        on_day_of_month();
 3270|  3.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  7.42k|    {
 3295|       |        // %H:%M
 3296|  7.42k|        constexpr CharT colon = ':';
 3297|  7.42k|        on_24_hour();
 3298|  7.42k|        on_text(&colon, &colon + 1);
 3299|  7.42k|        on_minute();
 3300|  7.42k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.03k|    {
 3303|       |        // %H:%M:%S
 3304|  3.03k|        constexpr CharT colon = ':';
 3305|  3.03k|        on_24_hour();
 3306|  3.03k|        on_text(&colon, &colon + 1);
 3307|  3.03k|        on_minute();
 3308|  3.03k|        on_text(&colon, &colon + 1);
 3309|  3.03k|        on_second();
 3310|  3.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  4.51k|    {
 3342|  4.51k|        m_st.verify(*this);
 3343|  4.51k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 4.51k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  4.51k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 4.51k, False: 0]
  |  Branch (3346:37): [True: 8, False: 4.50k]
  |  Branch (3346:60): [True: 0, False: 4.50k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  4.51k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  51.1k|    {
 3353|  51.1k|        return m_error;
 3354|  51.1k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  4.51k|    {
 3370|  4.51k|        return m_begin;
 3371|  4.51k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  25.8k|{
 3563|  25.8k|    {
 3564|  25.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  25.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 262, False: 25.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    262|    }                                                  \
  |  |  |  | 3939|  25.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  25.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  25.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  25.5k|    static_cast<    \
  |  |  935|  25.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  25.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  25.5k|        ctx.range(), t, ctx.locale());
 3571|  25.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  25.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.0k, False: 4.51k]
  |  |  ------------------
  ------------------
 3573|  21.0k|        return unexpected(e.error());
 3574|  21.0k|    }
 3575|  4.51k|    return r.get_iterator();
 3576|  25.5k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  25.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  25.5k|    static_cast<    \
  |  |  935|  25.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  25.5k|          m_begin(ranges::begin(m_range)),
 2708|  25.5k|          m_tm(t),
 2709|  25.5k|          m_loc(loc)
 2710|  25.5k|    {
 2711|  25.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  20.5k|    {
 3358|  20.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  87.5k|    {
 3363|  87.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 21.0k, False: 66.4k]
  ------------------
 3364|  21.0k|            m_error = unexpected(e);
 3365|  21.0k|        }
 3366|  87.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  25.5k|    {
 2715|  30.4k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 25.5k, False: 4.91k]
  ------------------
 2716|  25.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 94, False: 25.4k]
  ------------------
 2717|     94|                return set_error({scan_error::end_of_input, "EOF"});
 2718|     94|            }
 2719|  25.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.5k, False: 4.91k]
  ------------------
 2720|  20.5k|                return on_error("Invalid literal character");
 2721|  20.5k|            }
 2722|  4.91k|            ++beg;
 2723|  4.91k|            ++m_begin;
 2724|  4.91k|        }
 2725|  25.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.02k|    {
 2745|  6.02k|#if !SCN_DISABLE_LOCALE
 2746|  6.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.02k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.02k|#endif
 2753|       |
 2754|  6.02k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.02k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.02k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  6.02k|    {
 2396|  6.02k|        t.year = y;
 2397|  6.02k|        st.set_full_year(h);
 2398|  6.02k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  45.0k|    {
 3381|  45.0k|        int digits_read = 0;
 3382|  45.0k|        int accumulator = 0;
 3383|  55.9k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 55.7k, False: 192]
  ------------------
 3384|  55.7k|            const auto ch = *m_begin;
 3385|  55.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 26.5k, False: 29.2k]
  |  Branch (3385:36): [True: 16.6k, False: 12.5k]
  ------------------
 3386|  43.2k|                break;
 3387|  43.2k|            }
 3388|  12.5k|            ++m_begin;
 3389|  12.5k|            ++digits_read;
 3390|  12.5k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  12.5k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 1.65k, False: 10.9k]
  ------------------
 3392|  1.65k|                break;
 3393|  1.65k|            }
 3394|  12.5k|        }
 3395|  45.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 34.8k, False: 10.1k]
  ------------------
 3396|  34.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  34.8k|                                 "Too few integer digits"});
 3398|  34.8k|            return -1;
 3399|  34.8k|        }
 3400|  10.1k|        return accumulator;
 3401|  45.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.01k|    {
 2759|  3.01k|#if !SCN_DISABLE_LOCALE
 2760|  3.01k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.01k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.01k|#endif
 2768|       |
 2769|  3.01k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.01k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.01k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  3.01k|    {
 2419|  3.01k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 3.01k, False: 0]
  ------------------
 2420|  3.01k|            t.year = y;
 2421|  3.01k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  3.01k|        st.set_short_year(h);
 2426|  3.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.04k|    {
 2802|  3.04k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.04k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.04k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.04k|#endif
 2810|       |
 2811|  3.04k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.04k|            {"January", 1},
 2813|  3.04k|            {"February", 2},
 2814|  3.04k|            {"March", 3},
 2815|  3.04k|            {"April", 4},
 2816|  3.04k|            {"May", 5},
 2817|  3.04k|            {"June", 6},
 2818|  3.04k|            {"July", 7},
 2819|  3.04k|            {"August", 8},
 2820|  3.04k|            {"September", 9},
 2821|  3.04k|            {"October", 10},
 2822|  3.04k|            {"November", 11},
 2823|  3.04k|            {"December", 12},
 2824|  3.04k|        }};
 2825|  3.04k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 2, False: 3.03k]
  ------------------
 2826|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      2|        }
 2828|  3.03k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.03k|            {"Jan", 1},
 2830|  3.03k|            {"Feb", 2},
 2831|  3.03k|            {"Mar", 3},
 2832|  3.03k|            {"Apr", 4},
 2833|  3.03k|            {"Jun", 6},
 2834|  3.03k|            {"Jul", 7},
 2835|  3.03k|            {"Aug", 8},
 2836|  3.03k|            {"Sep", 9},
 2837|  3.03k|            {"Oct", 10},
 2838|  3.03k|            {"Nov", 11},
 2839|  3.03k|            {"Dec", 12},
 2840|  3.03k|        }};
 2841|  3.03k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 30, False: 3.00k]
  ------------------
 2842|     30|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|     30|        }
 2844|  3.00k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.00k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  6.07k|    {
 2383|  6.07k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.71k, False: 360]
  |  |  |  Branch (865:45): [True: 5.69k, False: 382]
  |  |  |  Branch (865:45): [True: 22, False: 360]
  |  |  ------------------
  ------------------
 2384|  5.71k|            return h.set_error(
 2385|  5.71k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  5.71k|        }
 2387|    360|        t.mon = month{static_cast<unsigned>(m)};
 2388|    360|        st.set_mon(h);
 2389|    360|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.04k|    {
 3419|  3.04k|        auto start_it = m_begin;
 3420|  3.04k|        std::size_t options_available = N;
 3421|  3.04k|        std::size_t chars_consumed = 0;
 3422|  6.21k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.20k, False: 3.01k]
  ------------------
 3423|  6.21k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.19k, False: 2]
  ------------------
 3424|  3.19k|            std::size_t i = 0;
 3425|  3.19k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 3.17k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  3.17k|            const auto ch = *m_begin;
 3430|  3.17k|            ++m_begin;
 3431|  39.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 36.7k, False: 3.17k]
  ------------------
 3432|  36.7k|                const auto cmp = static_cast<unsigned>(
 3433|  36.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  36.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 36.7k]
  ------------------
 3435|  36.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 36.5k, False: 172]
  |  Branch (3435:34): [True: 36.4k, False: 94]
  ------------------
 3436|  36.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  36.4k|                                options.end());
 3438|  36.4k|                    --options_available;
 3439|  36.4k|                    continue;
 3440|  36.4k|                }
 3441|    266|                ++i;
 3442|    266|            }
 3443|  3.17k|            ++chars_consumed;
 3444|  3.17k|        }
 3445|  3.04k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.03k, False: 2]
  ------------------
 3446|  3.03k|            m_begin = start_it;
 3447|  3.03k|            return std::nullopt;
 3448|  3.03k|        }
 3449|      2|        return options.front().second;
 3450|  3.04k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.03k|    {
 3419|  3.03k|        auto start_it = m_begin;
 3420|  3.03k|        std::size_t options_available = N;
 3421|  3.03k|        std::size_t chars_consumed = 0;
 3422|  6.17k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.19k, False: 2.98k]
  ------------------
 3423|  6.17k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.16k, False: 30]
  ------------------
 3424|  3.16k|            std::size_t i = 0;
 3425|  3.16k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.13k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.13k|            const auto ch = *m_begin;
 3430|  3.13k|            ++m_begin;
 3431|  36.6k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.5k, False: 3.13k]
  ------------------
 3432|  33.5k|                const auto cmp = static_cast<unsigned>(
 3433|  33.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.5k]
  ------------------
 3435|  33.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.4k, False: 104]
  |  Branch (3435:34): [True: 33.3k, False: 88]
  ------------------
 3436|  33.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  33.3k|                                options.end());
 3438|  33.3k|                    --options_available;
 3439|  33.3k|                    continue;
 3440|  33.3k|                }
 3441|    192|                ++i;
 3442|    192|            }
 3443|  3.13k|            ++chars_consumed;
 3444|  3.13k|        }
 3445|  3.03k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.00k, False: 30]
  ------------------
 3446|  3.00k|            m_begin = start_it;
 3447|  3.00k|            return std::nullopt;
 3448|  3.00k|        }
 3449|     30|        return options.front().second;
 3450|  3.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.04k|    {
 2848|  6.04k|#if !SCN_DISABLE_LOCALE
 2849|  6.04k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.04k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.04k|#endif
 2856|       |
 2857|  6.04k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.04k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.04k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.02k|    {
 2880|  6.02k|#if !SCN_DISABLE_LOCALE
 2881|  6.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.02k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.02k|#endif
 2888|       |
 2889|  6.02k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.02k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.02k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  6.02k|    {
 2370|  6.02k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.00k, False: 28]
  |  |  |  Branch (865:45): [True: 5.99k, False: 38]
  |  |  |  Branch (865:45): [True: 10, False: 28]
  |  |  ------------------
  ------------------
 2371|  6.00k|            return h.set_error(
 2372|  6.00k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  6.00k|        }
 2374|     28|        t.mday = d;
 2375|     28|        st.set_mday(h);
 2376|     28|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.01k|    {
 2895|  3.01k|#if !SCN_DISABLE_LOCALE
 2896|  3.01k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.01k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.01k|#endif
 2903|       |
 2904|  3.01k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.01k|            {"Sunday", 0},
 2906|  3.01k|            {"Monday", 1},
 2907|  3.01k|            {"Tuesday", 2},
 2908|  3.01k|            {"Wednesday", 3},
 2909|  3.01k|            {"Thursday", 4},
 2910|  3.01k|            {"Friday", 5},
 2911|  3.01k|            {"Saturday", 6},
 2912|  3.01k|        }};
 2913|  3.01k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.01k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.01k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.01k|            {"Sun", 0},
 2918|  3.01k|            {"Mon", 1},
 2919|  3.01k|            {"Tue", 2},
 2920|  3.01k|            {"Wed", 3},
 2921|  3.01k|            {"Thu", 4},
 2922|  3.01k|            {"Fri", 5},
 2923|  3.01k|            {"Sat", 6},
 2924|  3.01k|        }};
 2925|  3.01k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.01k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.01k|        return set_error(
 2929|  3.01k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.02k|    {
 3419|  6.02k|        auto start_it = m_begin;
 3420|  6.02k|        std::size_t options_available = N;
 3421|  6.02k|        std::size_t chars_consumed = 0;
 3422|  12.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.11k, False: 6.00k]
  ------------------
 3423|  12.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.11k, False: 0]
  ------------------
 3424|  6.11k|            std::size_t i = 0;
 3425|  6.11k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 6.08k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  6.08k|            const auto ch = *m_begin;
 3430|  6.08k|            ++m_begin;
 3431|  48.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.2k, False: 6.08k]
  ------------------
 3432|  42.2k|                const auto cmp = static_cast<unsigned>(
 3433|  42.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.2k]
  ------------------
 3435|  42.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.1k, False: 108]
  |  Branch (3435:34): [True: 42.1k, False: 16]
  ------------------
 3436|  42.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.1k|                                options.end());
 3438|  42.1k|                    --options_available;
 3439|  42.1k|                    continue;
 3440|  42.1k|                }
 3441|    124|                ++i;
 3442|    124|            }
 3443|  6.08k|            ++chars_consumed;
 3444|  6.08k|        }
 3445|  6.02k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.02k, False: 0]
  ------------------
 3446|  6.02k|            m_begin = start_it;
 3447|  6.02k|            return std::nullopt;
 3448|  6.02k|        }
 3449|      0|        return options.front().second;
 3450|  6.02k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  10.4k|    {
 2969|  10.4k|#if !SCN_DISABLE_LOCALE
 2970|  10.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 10.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  10.4k|#endif
 2977|       |
 2978|  10.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  10.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  10.4k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  10.4k|    {
 2344|  10.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.56k, False: 4.90k]
  |  |  |  Branch (865:45): [True: 5.53k, False: 4.93k]
  |  |  |  Branch (865:45): [True: 28, False: 4.90k]
  |  |  ------------------
  ------------------
 2345|  5.56k|            return hdl.set_error(
 2346|  5.56k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  5.56k|        }
 2348|  4.90k|        t.hour = h;
 2349|  4.90k|        st.set_hour24(hdl);
 2350|  4.90k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  10.4k|    {
 2997|  10.4k|#if !SCN_DISABLE_LOCALE
 2998|  10.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 10.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  10.4k|#endif
 3005|       |
 3006|  10.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  10.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  10.4k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  10.4k|    {
 2331|  10.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  15.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.69k, False: 4.76k]
  |  |  |  Branch (865:45): [True: 5.68k, False: 4.78k]
  |  |  |  Branch (865:45): [True: 12, False: 4.76k]
  |  |  ------------------
  ------------------
 2332|  5.69k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  5.69k|                                "Invalid value for minutes"});
 2334|  5.69k|        }
 2335|  4.76k|        t.min = m;
 2336|  4.76k|        st.set_min(h);
 2337|  4.76k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.03k|    {
 3011|  3.03k|#if !SCN_DISABLE_LOCALE
 3012|  3.03k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.03k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.03k|#endif
 3019|       |
 3020|  3.03k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.03k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.03k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  3.03k|    {
 2318|  3.03k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.98k, False: 50]
  |  |  |  Branch (865:45): [True: 2.98k, False: 52]
  |  |  |  Branch (865:45): [True: 2, False: 50]
  |  |  ------------------
  ------------------
 2319|  2.98k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  2.98k|                                "Invalid value for seconds"});
 2321|  2.98k|        }
 2322|     50|        t.sec = s;
 2323|     50|        st.set_sec(h);
 2324|     50|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.01k|    {
 3253|       |        // %m/%d/%y
 3254|  3.01k|        constexpr CharT slash = '/';
 3255|  3.01k|        on_dec_month();
 3256|  3.01k|        on_text(&slash, &slash + 1);
 3257|  3.01k|        on_day_of_month();
 3258|  3.01k|        on_text(&slash, &slash + 1);
 3259|  3.01k|        on_short_year();
 3260|  3.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.01k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.01k|        constexpr CharT dash = '-';
 3265|  3.01k|        on_full_year();
 3266|  3.01k|        on_text(&dash, &dash + 1);
 3267|  3.01k|        on_dec_month();
 3268|  3.01k|        on_text(&dash, &dash + 1);
 3269|  3.01k|        on_day_of_month();
 3270|  3.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  7.42k|    {
 3295|       |        // %H:%M
 3296|  7.42k|        constexpr CharT colon = ':';
 3297|  7.42k|        on_24_hour();
 3298|  7.42k|        on_text(&colon, &colon + 1);
 3299|  7.42k|        on_minute();
 3300|  7.42k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.03k|    {
 3303|       |        // %H:%M:%S
 3304|  3.03k|        constexpr CharT colon = ':';
 3305|  3.03k|        on_24_hour();
 3306|  3.03k|        on_text(&colon, &colon + 1);
 3307|  3.03k|        on_minute();
 3308|  3.03k|        on_text(&colon, &colon + 1);
 3309|  3.03k|        on_second();
 3310|  3.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  4.51k|    {
 3342|  4.51k|        m_st.verify(*this);
 3343|  4.51k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 4.51k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  4.51k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 4.51k, False: 0]
  |  Branch (3346:37): [True: 8, False: 4.50k]
  |  Branch (3346:60): [True: 0, False: 4.50k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  4.51k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  51.1k|    {
 3353|  51.1k|        return m_error;
 3354|  51.1k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  4.51k|    {
 3370|  4.51k|        return m_begin;
 3371|  4.51k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  25.8k|{
 3563|  25.8k|    {
 3564|  25.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  25.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 262, False: 25.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    262|    }                                                  \
  |  |  |  | 3939|  25.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  25.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  25.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  25.5k|    static_cast<    \
  |  |  935|  25.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  25.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  25.5k|        ctx.range(), t, ctx.locale());
 3571|  25.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  25.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.0k, False: 4.51k]
  |  |  ------------------
  ------------------
 3573|  21.0k|        return unexpected(e.error());
 3574|  21.0k|    }
 3575|  4.51k|    return r.get_iterator();
 3576|  25.5k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  25.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  25.5k|    static_cast<    \
  |  |  935|  25.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  25.5k|          m_begin(ranges::begin(m_range)),
 2708|  25.5k|          m_tm(t),
 2709|  25.5k|          m_loc(loc)
 2710|  25.5k|    {
 2711|  25.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  20.5k|    {
 3358|  20.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  87.5k|    {
 3363|  87.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 21.0k, False: 66.4k]
  ------------------
 3364|  21.0k|            m_error = unexpected(e);
 3365|  21.0k|        }
 3366|  87.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  25.5k|    {
 2715|  30.4k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 25.5k, False: 4.91k]
  ------------------
 2716|  25.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 94, False: 25.4k]
  ------------------
 2717|     94|                return set_error({scan_error::end_of_input, "EOF"});
 2718|     94|            }
 2719|  25.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.5k, False: 4.91k]
  ------------------
 2720|  20.5k|                return on_error("Invalid literal character");
 2721|  20.5k|            }
 2722|  4.91k|            ++beg;
 2723|  4.91k|            ++m_begin;
 2724|  4.91k|        }
 2725|  25.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.02k|    {
 2745|  6.02k|#if !SCN_DISABLE_LOCALE
 2746|  6.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.02k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.02k|#endif
 2753|       |
 2754|  6.02k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.02k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.02k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  6.02k|    {
 2396|  6.02k|        t.year = y;
 2397|  6.02k|        st.set_full_year(h);
 2398|  6.02k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  45.0k|    {
 3381|  45.0k|        int digits_read = 0;
 3382|  45.0k|        int accumulator = 0;
 3383|  55.9k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 55.7k, False: 192]
  ------------------
 3384|  55.7k|            const auto ch = *m_begin;
 3385|  55.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 26.5k, False: 29.2k]
  |  Branch (3385:36): [True: 16.6k, False: 12.5k]
  ------------------
 3386|  43.2k|                break;
 3387|  43.2k|            }
 3388|  12.5k|            ++m_begin;
 3389|  12.5k|            ++digits_read;
 3390|  12.5k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  12.5k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 1.65k, False: 10.9k]
  ------------------
 3392|  1.65k|                break;
 3393|  1.65k|            }
 3394|  12.5k|        }
 3395|  45.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 34.8k, False: 10.1k]
  ------------------
 3396|  34.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  34.8k|                                 "Too few integer digits"});
 3398|  34.8k|            return -1;
 3399|  34.8k|        }
 3400|  10.1k|        return accumulator;
 3401|  45.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.01k|    {
 2759|  3.01k|#if !SCN_DISABLE_LOCALE
 2760|  3.01k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.01k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.01k|#endif
 2768|       |
 2769|  3.01k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.01k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.01k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  3.01k|    {
 2419|  3.01k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 3.01k, False: 0]
  ------------------
 2420|  3.01k|            t.year = y;
 2421|  3.01k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  3.01k|        st.set_short_year(h);
 2426|  3.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.04k|    {
 2802|  3.04k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.04k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.04k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.04k|#endif
 2810|       |
 2811|  3.04k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.04k|            {"January", 1},
 2813|  3.04k|            {"February", 2},
 2814|  3.04k|            {"March", 3},
 2815|  3.04k|            {"April", 4},
 2816|  3.04k|            {"May", 5},
 2817|  3.04k|            {"June", 6},
 2818|  3.04k|            {"July", 7},
 2819|  3.04k|            {"August", 8},
 2820|  3.04k|            {"September", 9},
 2821|  3.04k|            {"October", 10},
 2822|  3.04k|            {"November", 11},
 2823|  3.04k|            {"December", 12},
 2824|  3.04k|        }};
 2825|  3.04k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 2, False: 3.03k]
  ------------------
 2826|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      2|        }
 2828|  3.03k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.03k|            {"Jan", 1},
 2830|  3.03k|            {"Feb", 2},
 2831|  3.03k|            {"Mar", 3},
 2832|  3.03k|            {"Apr", 4},
 2833|  3.03k|            {"Jun", 6},
 2834|  3.03k|            {"Jul", 7},
 2835|  3.03k|            {"Aug", 8},
 2836|  3.03k|            {"Sep", 9},
 2837|  3.03k|            {"Oct", 10},
 2838|  3.03k|            {"Nov", 11},
 2839|  3.03k|            {"Dec", 12},
 2840|  3.03k|        }};
 2841|  3.03k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 30, False: 3.00k]
  ------------------
 2842|     30|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|     30|        }
 2844|  3.00k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.00k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  6.07k|    {
 2383|  6.07k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.71k, False: 360]
  |  |  |  Branch (865:45): [True: 5.69k, False: 382]
  |  |  |  Branch (865:45): [True: 22, False: 360]
  |  |  ------------------
  ------------------
 2384|  5.71k|            return h.set_error(
 2385|  5.71k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  5.71k|        }
 2387|    360|        t.mon = month{static_cast<unsigned>(m)};
 2388|    360|        st.set_mon(h);
 2389|    360|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.04k|    {
 3419|  3.04k|        auto start_it = m_begin;
 3420|  3.04k|        std::size_t options_available = N;
 3421|  3.04k|        std::size_t chars_consumed = 0;
 3422|  6.21k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.20k, False: 3.01k]
  ------------------
 3423|  6.21k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.19k, False: 2]
  ------------------
 3424|  3.19k|            std::size_t i = 0;
 3425|  3.19k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 3.17k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  3.17k|            const auto ch = *m_begin;
 3430|  3.17k|            ++m_begin;
 3431|  39.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 36.7k, False: 3.17k]
  ------------------
 3432|  36.7k|                const auto cmp = static_cast<unsigned>(
 3433|  36.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  36.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 36.7k]
  ------------------
 3435|  36.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 36.5k, False: 172]
  |  Branch (3435:34): [True: 36.4k, False: 94]
  ------------------
 3436|  36.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  36.4k|                                options.end());
 3438|  36.4k|                    --options_available;
 3439|  36.4k|                    continue;
 3440|  36.4k|                }
 3441|    266|                ++i;
 3442|    266|            }
 3443|  3.17k|            ++chars_consumed;
 3444|  3.17k|        }
 3445|  3.04k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.03k, False: 2]
  ------------------
 3446|  3.03k|            m_begin = start_it;
 3447|  3.03k|            return std::nullopt;
 3448|  3.03k|        }
 3449|      2|        return options.front().second;
 3450|  3.04k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.03k|    {
 3419|  3.03k|        auto start_it = m_begin;
 3420|  3.03k|        std::size_t options_available = N;
 3421|  3.03k|        std::size_t chars_consumed = 0;
 3422|  6.17k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.19k, False: 2.98k]
  ------------------
 3423|  6.17k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.16k, False: 30]
  ------------------
 3424|  3.16k|            std::size_t i = 0;
 3425|  3.16k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.13k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.13k|            const auto ch = *m_begin;
 3430|  3.13k|            ++m_begin;
 3431|  36.6k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.5k, False: 3.13k]
  ------------------
 3432|  33.5k|                const auto cmp = static_cast<unsigned>(
 3433|  33.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.5k]
  ------------------
 3435|  33.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.4k, False: 104]
  |  Branch (3435:34): [True: 33.3k, False: 88]
  ------------------
 3436|  33.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  33.3k|                                options.end());
 3438|  33.3k|                    --options_available;
 3439|  33.3k|                    continue;
 3440|  33.3k|                }
 3441|    192|                ++i;
 3442|    192|            }
 3443|  3.13k|            ++chars_consumed;
 3444|  3.13k|        }
 3445|  3.03k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.00k, False: 30]
  ------------------
 3446|  3.00k|            m_begin = start_it;
 3447|  3.00k|            return std::nullopt;
 3448|  3.00k|        }
 3449|     30|        return options.front().second;
 3450|  3.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.04k|    {
 2848|  6.04k|#if !SCN_DISABLE_LOCALE
 2849|  6.04k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.04k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.04k|#endif
 2856|       |
 2857|  6.04k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.04k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.04k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.02k|    {
 2880|  6.02k|#if !SCN_DISABLE_LOCALE
 2881|  6.02k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.02k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.02k|#endif
 2888|       |
 2889|  6.02k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.02k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.02k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  6.02k|    {
 2370|  6.02k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.00k, False: 28]
  |  |  |  Branch (865:45): [True: 5.99k, False: 38]
  |  |  |  Branch (865:45): [True: 10, False: 28]
  |  |  ------------------
  ------------------
 2371|  6.00k|            return h.set_error(
 2372|  6.00k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  6.00k|        }
 2374|     28|        t.mday = d;
 2375|     28|        st.set_mday(h);
 2376|     28|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.01k|    {
 2895|  3.01k|#if !SCN_DISABLE_LOCALE
 2896|  3.01k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.01k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.01k|#endif
 2903|       |
 2904|  3.01k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.01k|            {"Sunday", 0},
 2906|  3.01k|            {"Monday", 1},
 2907|  3.01k|            {"Tuesday", 2},
 2908|  3.01k|            {"Wednesday", 3},
 2909|  3.01k|            {"Thursday", 4},
 2910|  3.01k|            {"Friday", 5},
 2911|  3.01k|            {"Saturday", 6},
 2912|  3.01k|        }};
 2913|  3.01k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.01k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.01k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.01k|            {"Sun", 0},
 2918|  3.01k|            {"Mon", 1},
 2919|  3.01k|            {"Tue", 2},
 2920|  3.01k|            {"Wed", 3},
 2921|  3.01k|            {"Thu", 4},
 2922|  3.01k|            {"Fri", 5},
 2923|  3.01k|            {"Sat", 6},
 2924|  3.01k|        }};
 2925|  3.01k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.01k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.01k|        return set_error(
 2929|  3.01k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.02k|    {
 3419|  6.02k|        auto start_it = m_begin;
 3420|  6.02k|        std::size_t options_available = N;
 3421|  6.02k|        std::size_t chars_consumed = 0;
 3422|  12.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.11k, False: 6.00k]
  ------------------
 3423|  12.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.11k, False: 0]
  ------------------
 3424|  6.11k|            std::size_t i = 0;
 3425|  6.11k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 6.08k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  6.08k|            const auto ch = *m_begin;
 3430|  6.08k|            ++m_begin;
 3431|  48.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.2k, False: 6.08k]
  ------------------
 3432|  42.2k|                const auto cmp = static_cast<unsigned>(
 3433|  42.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.2k]
  ------------------
 3435|  42.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.1k, False: 108]
  |  Branch (3435:34): [True: 42.1k, False: 16]
  ------------------
 3436|  42.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.1k|                                options.end());
 3438|  42.1k|                    --options_available;
 3439|  42.1k|                    continue;
 3440|  42.1k|                }
 3441|    124|                ++i;
 3442|    124|            }
 3443|  6.08k|            ++chars_consumed;
 3444|  6.08k|        }
 3445|  6.02k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.02k, False: 0]
  ------------------
 3446|  6.02k|            m_begin = start_it;
 3447|  6.02k|            return std::nullopt;
 3448|  6.02k|        }
 3449|      0|        return options.front().second;
 3450|  6.02k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  10.4k|    {
 2969|  10.4k|#if !SCN_DISABLE_LOCALE
 2970|  10.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 10.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  10.4k|#endif
 2977|       |
 2978|  10.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  10.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  10.4k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  10.4k|    {
 2344|  10.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.56k, False: 4.90k]
  |  |  |  Branch (865:45): [True: 5.53k, False: 4.93k]
  |  |  |  Branch (865:45): [True: 28, False: 4.90k]
  |  |  ------------------
  ------------------
 2345|  5.56k|            return hdl.set_error(
 2346|  5.56k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  5.56k|        }
 2348|  4.90k|        t.hour = h;
 2349|  4.90k|        st.set_hour24(hdl);
 2350|  4.90k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  10.4k|    {
 2997|  10.4k|#if !SCN_DISABLE_LOCALE
 2998|  10.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 10.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  10.4k|#endif
 3005|       |
 3006|  10.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  10.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  10.4k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  10.4k|    {
 2331|  10.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  15.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.69k, False: 4.76k]
  |  |  |  Branch (865:45): [True: 5.68k, False: 4.78k]
  |  |  |  Branch (865:45): [True: 12, False: 4.76k]
  |  |  ------------------
  ------------------
 2332|  5.69k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  5.69k|                                "Invalid value for minutes"});
 2334|  5.69k|        }
 2335|  4.76k|        t.min = m;
 2336|  4.76k|        st.set_min(h);
 2337|  4.76k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.03k|    {
 3011|  3.03k|#if !SCN_DISABLE_LOCALE
 3012|  3.03k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.03k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.03k|#endif
 3019|       |
 3020|  3.03k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.03k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.03k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  3.03k|    {
 2318|  3.03k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.98k, False: 50]
  |  |  |  Branch (865:45): [True: 2.98k, False: 52]
  |  |  |  Branch (865:45): [True: 2, False: 50]
  |  |  ------------------
  ------------------
 2319|  2.98k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  2.98k|                                "Invalid value for seconds"});
 2321|  2.98k|        }
 2322|     50|        t.sec = s;
 2323|     50|        st.set_sec(h);
 2324|     50|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.01k|    {
 3253|       |        // %m/%d/%y
 3254|  3.01k|        constexpr CharT slash = '/';
 3255|  3.01k|        on_dec_month();
 3256|  3.01k|        on_text(&slash, &slash + 1);
 3257|  3.01k|        on_day_of_month();
 3258|  3.01k|        on_text(&slash, &slash + 1);
 3259|  3.01k|        on_short_year();
 3260|  3.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.01k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.01k|        constexpr CharT dash = '-';
 3265|  3.01k|        on_full_year();
 3266|  3.01k|        on_text(&dash, &dash + 1);
 3267|  3.01k|        on_dec_month();
 3268|  3.01k|        on_text(&dash, &dash + 1);
 3269|  3.01k|        on_day_of_month();
 3270|  3.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  7.42k|    {
 3295|       |        // %H:%M
 3296|  7.42k|        constexpr CharT colon = ':';
 3297|  7.42k|        on_24_hour();
 3298|  7.42k|        on_text(&colon, &colon + 1);
 3299|  7.42k|        on_minute();
 3300|  7.42k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.03k|    {
 3303|       |        // %H:%M:%S
 3304|  3.03k|        constexpr CharT colon = ':';
 3305|  3.03k|        on_24_hour();
 3306|  3.03k|        on_text(&colon, &colon + 1);
 3307|  3.03k|        on_minute();
 3308|  3.03k|        on_text(&colon, &colon + 1);
 3309|  3.03k|        on_second();
 3310|  3.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  4.51k|    {
 3342|  4.51k|        m_st.verify(*this);
 3343|  4.51k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 4.51k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  4.51k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 4.51k, False: 0]
  |  Branch (3346:37): [True: 8, False: 4.50k]
  |  Branch (3346:60): [True: 0, False: 4.50k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  4.51k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  51.1k|    {
 3353|  51.1k|        return m_error;
 3354|  51.1k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  4.51k|    {
 3370|  4.51k|        return m_begin;
 3371|  4.51k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    761|{
 1462|    761|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    761|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    761|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    761|            return transcode_to_string_impl_to32(src, dest);
 1473|    761|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    761|    SCN_EXPECT(false);
  ------------------
  |  |  930|    761|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    761|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    761|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    761|{
 1355|    761|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    761|    auto it = src.begin();
 1358|   206k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 205k, False: 761]
  ------------------
 1359|   205k|        auto res = get_next_code_point(
 1360|   205k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   205k|                                                                 src.end()));
 1362|   205k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.81k, False: 197k]
  |  |  ------------------
  ------------------
 1363|  7.81k|            dest.push_back(DestCharT{0xfffd});
 1364|  7.81k|        }
 1365|   197k|        else {
 1366|   197k|            dest.push_back(res.value);
 1367|   197k|        }
 1368|   205k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   205k|    }
 1370|    761|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   221k|{
 1279|   221k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   221k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   221k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.0k, False: 210k]
  |  |  ------------------
  ------------------
 1283|  11.0k|        return {get_start_for_next_code_point(input),
 1284|  11.0k|                detail::invalid_code_point};
 1285|  11.0k|    }
 1286|   210k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 238, False: 209k]
  |  |  ------------------
  ------------------
 1287|    238|        return {input.end(), detail::invalid_code_point};
 1288|    238|    }
 1289|       |
 1290|   209k|    return {input.begin() + len,
 1291|   209k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   210k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  11.0k|{
 1265|  11.0k|    auto it = input.begin();
 1266|   164k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 164k, False: 521]
  ------------------
 1267|   164k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 10.4k, False: 153k]
  ------------------
 1268|  10.4k|            break;
 1269|  10.4k|        }
 1270|   164k|    }
 1271|  11.0k|    return it;
 1272|  11.0k|}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   173k|{
  458|   173k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   173k|        static_cast<unsigned char>(ch))];
  460|   173k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  78.3k|{
  539|  78.3k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  78.3k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|   318k|{
  784|   318k|    return e != eof_error::good;
  785|   318k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  3.79k|{
  798|  3.79k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  3.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  3.79k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  3.79k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  72.1k|    {
  304|  72.1k|        ranges::advance(x, n);
  305|  72.1k|        return x;
  306|  72.1k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  72.1k|    {
  268|  72.1k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  72.1k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  72.1k|    {
  151|  72.1k|        i += n;
  152|  72.1k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   189k|    {
  108|   189k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   189k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   189k|    {
   87|   189k|        return s - i;
   88|   189k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  90.9k|    {
  108|  90.9k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  90.9k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  90.9k|    {
   87|  90.9k|        return s - i;
   88|  90.9k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2INSt3__117basic_string_viewIcNSB_11char_traitsIcEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSO_10locale_refE:
 2985|  72.1k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  72.1k|    static_cast<    \
  |  |  935|  72.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  72.1k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  72.1k|          m_current(m_range.begin())
 2988|  72.1k|    {
 2989|  72.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   400k|    {
 2993|   400k|        return m_current;
 2994|   400k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2INSt3__117basic_string_viewIwNSB_11char_traitsIwEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSO_10locale_refE:
 2985|  77.4k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  77.4k|    static_cast<    \
  |  |  935|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  77.4k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  77.4k|          m_current(m_range.begin())
 2988|  77.4k|    {
 2989|  77.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   400k|    {
 2993|   400k|        return m_current;
 2994|   400k|    }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  1.00M|    {
  763|  1.00M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.00M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   245k|        : m_fptr([](storage fn,
  743|   245k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   245k|              cvref<T> obj = *get<T>(fn);
  745|   245k|              if constexpr (std::is_void_v<R>) {
  746|   245k|                  obj(static_cast<decltype(args)>(args)...);
  747|   245k|              }
  748|   245k|              else {
  749|   245k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   245k|              }
  751|   245k|          }),
  752|   245k|          m_storage(std::addressof(f))
  753|   245k|    {
  754|   245k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   504k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   504k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   504k|              else {
  749|   504k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   504k|              }
  751|   504k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   504k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   504k|        else if constexpr (std::is_object_v<T>) {
  688|   504k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   504k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   245k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   245k|        {
  662|   245k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  59.0k|    {
  108|  59.0k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  59.0k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  59.0k|    {
   94|  59.0k|        iter_difference_t<I> counter{0};
   95|   605k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 546k, False: 59.0k]
  ------------------
   96|   546k|            ++i;
   97|   546k|            ++counter;
   98|   546k|        }
   99|  59.0k|        return counter;
  100|  59.0k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  90.9k|{
  951|  90.9k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.45k, False: 89.5k]
  |  |  ------------------
  ------------------
  952|  1.45k|        return eof_error::eof;
  953|  1.45k|    }
  954|  89.5k|    return eof_error::good;
  955|  90.9k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   328k|{
  945|   328k|    return is_range_eof(r.begin(), r.end());
  946|   328k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   328k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   328k|    {
  938|   328k|        return begin == end;
  939|   328k|    }
  940|   328k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  72.1k|{
  951|  72.1k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 768, False: 71.4k]
  |  |  ------------------
  ------------------
  952|    768|        return eof_error::eof;
  953|    768|    }
  954|  71.4k|    return eof_error::good;
  955|  72.1k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  72.1k|{
  945|  72.1k|    return is_range_eof(r.begin(), r.end());
  946|  72.1k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  72.1k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  72.1k|    {
  938|  72.1k|        return begin == end;
  939|  72.1k|    }
  940|  72.1k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|   144k|    {
 1602|   144k|        return sv;
 1603|   144k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  72.1k|{
 3066|  72.1k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 72.1k, False: 0]
  ------------------
 3067|  72.1k|        auto it = read_while_classic_space(range);
 3068|  72.1k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  72.1k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 768, False: 71.4k]
  |  |  ------------------
  ------------------
 3070|    768|            return unexpected(e);
 3071|    768|        }
 3072|       |
 3073|  71.4k|        return it;
 3074|  72.1k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  72.1k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  72.1k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  72.1k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  72.1k|        auto buf = make_contiguous_buffer(range);
 2220|  72.1k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  72.1k|        return ranges::next(range.begin(),
 2222|  72.1k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  72.1k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  72.1k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  72.1k|                  ranges::sized_range<Range>) {
 1785|  72.1k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  72.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  72.1k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  72.1k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  72.1k|    {
 1589|  72.1k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  90.9k|    {
  268|  90.9k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  90.9k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  90.9k|    {
  181|  90.9k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 0, False: 90.9k]
  ------------------
  182|      0|            ++i;
  183|      0|        }
  184|  90.9k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  90.9k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  90.9k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  90.9k|        else {
 1055|  90.9k|            return r.begin().contiguous_segment();
 1056|  90.9k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  90.9k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  90.9k|{
 2160|  90.9k|    auto it = range.begin();
 2161|   238k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 237k, False: 1.45k]
  ------------------
 2162|   237k|        const auto val =
 2163|   237k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   237k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   237k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 215k, False: 22.0k]
  |  |  ------------------
  ------------------
 2165|   215k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   215k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   215k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 89.5k, False: 125k]
  ------------------
 2168|  89.5k|                return it;
 2169|  89.5k|            }
 2170|   215k|        }
 2171|   147k|        it = val.iterator;
 2172|   147k|    }
 2173|       |
 2174|  1.45k|    return it;
 2175|  90.9k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   237k|{
 1998|   237k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   237k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   237k|    auto it = range.begin();
 2002|   237k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   237k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.0k, False: 215k]
  |  |  ------------------
  ------------------
 2005|  22.0k|        ++it;
 2006|  22.0k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  22.0k|        return {it, {}};
 2008|  22.0k|    }
 2009|       |
 2010|   215k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 211k, False: 3.78k]
  ------------------
 2011|   211k|        ++it;
 2012|   211k|        return {it, string_type(1, *range.begin())};
 2013|   211k|    }
 2014|       |
 2015|  3.78k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  3.78k|    return {it, string_type{range.begin(), it}};
 2017|   215k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  22.0k|{
 1265|  22.0k|    auto it = input.begin();
 1266|   305k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 304k, False: 456]
  ------------------
 1267|   304k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 21.5k, False: 283k]
  ------------------
 1268|  21.5k|            break;
 1269|  21.5k|        }
 1270|   304k|    }
 1271|  22.0k|    return it;
 1272|  22.0k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  3.78k|    {
  283|  3.78k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  3.78k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  3.78k|    {
  252|  3.78k|        constexpr iter_difference_t<I> zero{0};
  253|  3.78k|        iter_difference_t<I> counter{0};
  254|       |
  255|  12.2k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 8.68k, False: 3.51k]
  |  Branch (255:30): [True: 8.41k, False: 270]
  ------------------
  256|  8.41k|            ++i;
  257|  8.41k|            ++counter;
  258|  8.41k|        }
  259|       |
  260|  3.78k|        return counter;
  261|  3.78k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   237k|    {
 1989|   237k|        return !codepoint.empty();
 1990|   237k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  90.9k|{
 2181|  90.9k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  90.9k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  90.9k|{
 3066|  90.9k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 90.9k, False: 0]
  ------------------
 3067|  90.9k|        auto it = read_while_classic_space(range);
 3068|  90.9k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  90.9k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.45k, False: 89.5k]
  |  |  ------------------
  ------------------
 3070|  1.45k|            return unexpected(e);
 3071|  1.45k|        }
 3072|       |
 3073|  89.5k|        return it;
 3074|  90.9k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  90.9k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  90.9k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  90.9k|    else {
 2225|  90.9k|        auto it = range.begin();
 2226|       |
 2227|  90.9k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  90.9k|            auto seg = get_contiguous_beginning(range);
 2229|  90.9k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  90.9k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 90.9k]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|  90.9k|            ranges::advance(it, seg.size());
 2234|  90.9k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  90.9k|            return detail::is_cp_space(cp);
 2238|  90.9k|        });
 2239|  90.9k|    }
 2240|  90.9k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  90.9k|        : m_fptr([](storage fn,
  743|  90.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  90.9k|              cvref<T> obj = *get<T>(fn);
  745|  90.9k|              if constexpr (std::is_void_v<R>) {
  746|  90.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  90.9k|              }
  748|  90.9k|              else {
  749|  90.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  90.9k|              }
  751|  90.9k|          }),
  752|  90.9k|          m_storage(std::addressof(f))
  753|  90.9k|    {
  754|  90.9k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   215k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   215k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   215k|              else {
  749|   215k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   215k|              }
  751|   215k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   215k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   215k|        else if constexpr (std::is_object_v<T>) {
  688|   215k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   215k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   215k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   215k|            return detail::is_cp_space(cp);
 2238|   215k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  90.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  90.9k|        {
  662|  90.9k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  13.5k|    {
  108|  13.5k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  13.5k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  13.5k|    {
   94|  13.5k|        iter_difference_t<I> counter{0};
   95|  98.1k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 84.6k, False: 13.5k]
  ------------------
   96|  84.6k|            ++i;
   97|  84.6k|            ++counter;
   98|  84.6k|        }
   99|  13.5k|        return counter;
  100|  13.5k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  77.4k|{
  951|  77.4k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 786, False: 76.6k]
  |  |  ------------------
  ------------------
  952|    786|        return eof_error::eof;
  953|    786|    }
  954|  76.6k|    return eof_error::good;
  955|  77.4k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   222k|{
  945|   222k|    return is_range_eof(r.begin(), r.end());
  946|   222k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   222k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   222k|    {
  938|   222k|        return begin == end;
  939|   222k|    }
  940|   222k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   144k|{
 1998|   144k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   144k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   144k|    auto it = range.begin();
 2002|   144k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   144k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   144k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 144k, False: 0]
  ------------------
 2011|   144k|        ++it;
 2012|   144k|        return {it, string_type(1, *range.begin())};
 2013|   144k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   144k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   222k|{
  945|   222k|    return is_range_eof(r.begin(), r.end());
  946|   222k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   222k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   222k|    {
  938|   222k|        return begin == end;
  939|   222k|    }
  940|   222k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   144k|    {
 1989|   144k|        return !codepoint.empty();
 1990|   144k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  77.4k|{
  951|  77.4k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 786, False: 76.6k]
  |  |  ------------------
  ------------------
  952|    786|        return eof_error::eof;
  953|    786|    }
  954|  76.6k|    return eof_error::good;
  955|  77.4k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  77.4k|{
 3066|  77.4k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 77.4k, False: 0]
  ------------------
 3067|  77.4k|        auto it = read_while_classic_space(range);
 3068|  77.4k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  77.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 786, False: 76.6k]
  |  |  ------------------
  ------------------
 3070|    786|            return unexpected(e);
 3071|    786|        }
 3072|       |
 3073|  76.6k|        return it;
 3074|  77.4k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  77.4k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  77.4k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  77.4k|    else {
 2225|  77.4k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  77.4k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  77.4k|            return detail::is_cp_space(cp);
 2238|  77.4k|        });
 2239|  77.4k|    }
 2240|  77.4k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  77.4k|{
 2181|  77.4k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  77.4k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  77.4k|{
 2160|  77.4k|    auto it = range.begin();
 2161|   145k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 144k, False: 786]
  ------------------
 2162|   144k|        const auto val =
 2163|   144k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   144k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   144k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 144k, False: 0]
  |  |  ------------------
  ------------------
 2165|   144k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   144k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   144k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 76.6k, False: 68.1k]
  ------------------
 2168|  76.6k|                return it;
 2169|  76.6k|            }
 2170|   144k|        }
 2171|  68.1k|        it = val.iterator;
 2172|  68.1k|    }
 2173|       |
 2174|    786|    return it;
 2175|  77.4k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  77.4k|        : m_fptr([](storage fn,
  743|  77.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  77.4k|              cvref<T> obj = *get<T>(fn);
  745|  77.4k|              if constexpr (std::is_void_v<R>) {
  746|  77.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  77.4k|              }
  748|  77.4k|              else {
  749|  77.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  77.4k|              }
  751|  77.4k|          }),
  752|  77.4k|          m_storage(std::addressof(f))
  753|  77.4k|    {
  754|  77.4k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   144k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   144k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   144k|              else {
  749|   144k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   144k|              }
  751|   144k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   144k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   144k|        else if constexpr (std::is_object_v<T>) {
  688|   144k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   144k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   144k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   144k|            return detail::is_cp_space(cp);
 2238|   144k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  77.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  77.4k|        {
  662|  77.4k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  77.4k|{
 2160|  77.4k|    auto it = range.begin();
 2161|   145k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 144k, False: 786]
  ------------------
 2162|   144k|        const auto val =
 2163|   144k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   144k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   144k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 144k, False: 0]
  |  |  ------------------
  ------------------
 2165|   144k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   144k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   144k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 76.6k, False: 68.1k]
  ------------------
 2168|  76.6k|                return it;
 2169|  76.6k|            }
 2170|   144k|        }
 2171|  68.1k|        it = val.iterator;
 2172|  68.1k|    }
 2173|       |
 2174|    786|    return it;
 2175|  77.4k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   144k|{
 1998|   144k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   144k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   144k|    auto it = range.begin();
 2002|   144k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   144k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   144k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 144k, False: 0]
  ------------------
 2011|   144k|        ++it;
 2012|   144k|        return {it, string_type(1, *range.begin())};
 2013|   144k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   144k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   144k|    {
 1989|   144k|        return !codepoint.empty();
 1990|   144k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  77.4k|{
 2181|  77.4k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  77.4k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  77.4k|{
 3066|  77.4k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 77.4k, False: 0]
  ------------------
 3067|  77.4k|        auto it = read_while_classic_space(range);
 3068|  77.4k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  77.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 786, False: 76.6k]
  |  |  ------------------
  ------------------
 3070|    786|            return unexpected(e);
 3071|    786|        }
 3072|       |
 3073|  76.6k|        return it;
 3074|  77.4k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  77.4k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  77.4k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  77.4k|    else {
 2225|  77.4k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  77.4k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  77.4k|            return detail::is_cp_space(cp);
 2238|  77.4k|        });
 2239|  77.4k|    }
 2240|  77.4k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  77.4k|        : m_fptr([](storage fn,
  743|  77.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  77.4k|              cvref<T> obj = *get<T>(fn);
  745|  77.4k|              if constexpr (std::is_void_v<R>) {
  746|  77.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  77.4k|              }
  748|  77.4k|              else {
  749|  77.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  77.4k|              }
  751|  77.4k|          }),
  752|  77.4k|          m_storage(std::addressof(f))
  753|  77.4k|    {
  754|  77.4k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   144k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   144k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   144k|              else {
  749|   144k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   144k|              }
  751|   144k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   144k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   144k|        else if constexpr (std::is_object_v<T>) {
  688|   144k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   144k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   144k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   144k|            return detail::is_cp_space(cp);
 2238|   144k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  77.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  77.4k|        {
  662|  77.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEcEEE6handleE:
 5953|  2.28k|    {
 5954|  2.28k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.28k|            basic_scan_parse_context<char_type> parse_ctx{{}};
 5956|  2.28k|            auto ctx = make_custom_ctx();
 5957|  2.28k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  2.28k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.28k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.28k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.28k|    }
  ------------------
 5958|       |
 5959|       |            if constexpr (std::is_same_v<
 5960|       |                              context_type,
 5961|      0|                              basic_contiguous_scan_context<char_type>>) {
 5962|      0|                return range.begin() + ctx.begin().position();
 5963|       |            }
 5964|       |            else {
 5965|       |                return ctx.begin();
 5966|       |            }
 5967|       |        }
 5968|       |        else {
 5969|       |            SCN_EXPECT(false);
 5970|       |            SCN_UNREACHABLE;
 5971|       |        }
 5972|  2.28k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE15make_custom_ctxEv:
 5935|  2.28k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  2.28k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  2.28k|            auto it =
 5940|  2.28k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  2.28k|                    std::basic_string_view<char_type>(range.data(),
 5942|  2.28k|                                                      range.size()),
 5943|  2.28k|                    0};
 5944|  2.28k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  2.28k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  2.28k|    {
 5954|  2.28k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.28k|            basic_scan_parse_context<char_type> parse_ctx{{}};
 5956|  2.28k|            auto ctx = make_custom_ctx();
 5957|  2.28k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  2.28k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.28k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.28k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.28k|    }
  ------------------
 5958|       |
 5959|       |            if constexpr (std::is_same_v<
 5960|       |                              context_type,
 5961|       |                              basic_contiguous_scan_context<char_type>>) {
 5962|       |                return range.begin() + ctx.begin().position();
 5963|       |            }
 5964|      0|            else {
 5965|      0|                return ctx.begin();
 5966|      0|            }
 5967|       |        }
 5968|       |        else {
 5969|       |            SCN_EXPECT(false);
 5970|       |            SCN_UNREACHABLE;
 5971|       |        }
 5972|  2.28k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15make_custom_ctxEv:
 5935|  2.28k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  2.28k|        else {
 5947|  2.28k|            return {range.begin(), args, loc};
 5948|  2.28k|        }
 5949|  2.28k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  72.1k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  72.1k|    static_cast<    \
  |  |  935|  72.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  72.1k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  72.1k|          m_current(m_range.begin())
 2988|  72.1k|    {
 2989|  72.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   215k|    {
 2998|   215k|        return m_range.end();
 2999|   215k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  71.4k|    {
 3013|  71.4k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  71.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  71.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  71.4k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  71.4k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 71.4k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  71.4k|        }
 3019|  71.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  71.4k|    static_cast<    \
  |  |  935|  71.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  71.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   143k|    {
 3003|   143k|        return ranges::subrange{begin(), end()};
 3004|   143k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 6284|   163k|    {
 6285|   163k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|   163k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 63.9k, False: 99.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  63.9k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  63.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  63.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  63.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  63.9k|    }
  ------------------
 6286|  99.2k|        return {ctx.begin()};
 6287|   163k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toERKNS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 3023|  40.2k|    {
 3024|  40.2k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  |  930|  40.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  40.2k|        m_current = m_range.begin() + it.position();
 3026|  40.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE16underlying_rangeEv:
 3007|   216k|    {
 3008|   216k|        return m_range;
 3009|   216k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE14begin_positionEv:
 3029|  72.1k|    {
 3030|  72.1k|        return ranges::distance(m_range.begin(), begin());
 3031|  72.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEwEEE6handleE:
 5953|  4.56k|    {
 5954|  4.56k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  4.56k|            basic_scan_parse_context<char_type> parse_ctx{{}};
 5956|  4.56k|            auto ctx = make_custom_ctx();
 5957|  4.56k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  4.56k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.56k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.56k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.56k|    }
  ------------------
 5958|       |
 5959|       |            if constexpr (std::is_same_v<
 5960|       |                              context_type,
 5961|      0|                              basic_contiguous_scan_context<char_type>>) {
 5962|      0|                return range.begin() + ctx.begin().position();
 5963|       |            }
 5964|       |            else {
 5965|       |                return ctx.begin();
 5966|       |            }
 5967|       |        }
 5968|       |        else {
 5969|       |            SCN_EXPECT(false);
 5970|       |            SCN_UNREACHABLE;
 5971|       |        }
 5972|  4.56k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE15make_custom_ctxEv:
 5935|  4.56k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  4.56k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  4.56k|            auto it =
 5940|  4.56k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  4.56k|                    std::basic_string_view<char_type>(range.data(),
 5942|  4.56k|                                                      range.size()),
 5943|  4.56k|                    0};
 5944|  4.56k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  4.56k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|  77.4k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  77.4k|    static_cast<    \
  |  |  935|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  77.4k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  77.4k|          m_current(m_range.begin())
 2988|  77.4k|    {
 2989|  77.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   230k|    {
 2998|   230k|        return m_range.end();
 2999|   230k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|  76.6k|    {
 3013|  76.6k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  76.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  76.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  76.6k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  76.6k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 76.6k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  76.6k|        }
 3019|  76.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  76.6k|    static_cast<    \
  |  |  935|  76.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  76.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   154k|    {
 3003|   154k|        return ranges::subrange{begin(), end()};
 3004|   154k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 6284|   154k|    {
 6285|   154k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|   154k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 127k, False: 27.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|   127k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|   127k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|   127k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|   127k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|   127k|    }
  ------------------
 6286|  27.0k|        return {ctx.begin()};
 6287|   154k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toERKNS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 3023|  13.5k|    {
 3024|  13.5k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  |  930|  13.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  13.5k|        m_current = m_range.begin() + it.position();
 3026|  13.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE16underlying_rangeEv:
 3007|   232k|    {
 3008|   232k|        return m_range;
 3009|   232k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE14begin_positionEv:
 3029|  77.4k|    {
 3030|  77.4k|        return ranges::distance(m_range.begin(), begin());
 3031|  77.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  4.56k|    {
 5954|  4.56k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  4.56k|            basic_scan_parse_context<char_type> parse_ctx{{}};
 5956|  4.56k|            auto ctx = make_custom_ctx();
 5957|  4.56k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  4.56k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.56k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.56k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.56k|    }
  ------------------
 5958|       |
 5959|       |            if constexpr (std::is_same_v<
 5960|       |                              context_type,
 5961|       |                              basic_contiguous_scan_context<char_type>>) {
 5962|       |                return range.begin() + ctx.begin().position();
 5963|       |            }
 5964|      0|            else {
 5965|      0|                return ctx.begin();
 5966|      0|            }
 5967|       |        }
 5968|       |        else {
 5969|       |            SCN_EXPECT(false);
 5970|       |            SCN_UNREACHABLE;
 5971|       |        }
 5972|  4.56k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15make_custom_ctxEv:
 5935|  4.56k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  4.56k|        else {
 5947|  4.56k|            return {range.begin(), args, loc};
 5948|  4.56k|        }
 5949|  4.56k|    }

LLVMFuzzerTestOneInput:
   58|    761|{
   59|    761|    scn::fuzz::run(data, size);
   60|    761|    return 0;
   61|    761|}
chrono_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   34|    761|{
   35|    761|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (35:9): [True: 0, False: 761]
  |  Branch (35:35): [True: 0, False: 761]
  ------------------
   36|      0|        return;
   37|      0|    }
   38|       |
   39|    761|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   40|       |
   41|    761|    const auto& f =
   42|    761|        get_format_strings<char>("{:%T}", "{:%R}", "{:%D}", "{:%F}",
   43|    761|                                 "{:%Y-%m-%dT%H:%M:%S%z}", "{:%a}", "{:%b}");
   44|    761|    do_basic_run(sv, f);
   45|       |
   46|    761|    const auto& wf = get_format_strings<wchar_t>(
   47|    761|        L"{:%T}", L"{:%R}", L"{:%D}", L"{:%F}", L"{:%Y-%m-%dT%H:%M:%S%z}",
   48|    761|        L"{:%a}", L"{:%b}");
   49|    761|    do_basic_run(wsv_reinterpret, wf);
   50|    761|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (50:9): [True: 761, False: 0]
  ------------------
   51|    761|        do_basic_run(wsv_transcode, wf);
   52|    761|    }
   53|    761|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|    761|{
   27|    761|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    761|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    761|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    761|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|    761|{
   27|    761|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    761|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    761|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    761|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|  1.52k|{
   27|  1.52k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.52k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.52k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.52k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|  1.52k|{
   27|  1.52k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.52k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.52k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.52k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    761|{
   53|    761|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|    761|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    761|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    761|    string_buffer.resize(size);
   57|    761|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    761|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    761|    const auto wsv_reinterpret_size =
   62|    761|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 71, False: 690]
  ------------------
   63|    761|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    761|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    761|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    761|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    761|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    761|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    761|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    761|{
  123|    761|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    761|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    761|    buf.resize(sizeof...(Args));
  126|    761|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    761|    return buf;
  128|    761|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    761|{
  109|    761|    if constexpr (std::is_same_v<CharT, char>) {
  110|    761|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    761|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    761|{
  186|    761|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    761|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    761|                                   format_strings);
  189|    761|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|    761|{
  134|       |    // Regular scan
  135|  5.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.32k, False: 761]
  ------------------
  136|  5.32k|        auto it = scn::ranges::begin(source);
  137|  12.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.0k|            auto result = scn::scan<T>(
  140|  12.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.0k|                scn::runtime_format(f));
  142|  12.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.32k, False: 6.70k]
  ------------------
  143|  5.32k|                break;
  144|  5.32k|            }
  145|  6.70k|            it = result->begin();
  146|  6.70k|        }
  147|  5.32k|    }
  148|       |
  149|       |    // scan localized
  150|  5.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.32k, False: 761]
  ------------------
  151|  5.32k|        auto it = scn::ranges::begin(source);
  152|  12.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.0k|            auto result = scn::scan<T>(
  155|  12.0k|                global_locale,
  156|  12.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.0k|                scn::runtime_format(f));
  158|  12.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.32k, False: 6.70k]
  ------------------
  159|  5.32k|                break;
  160|  5.32k|            }
  161|  6.70k|            it = result->begin();
  162|  6.70k|        }
  163|  5.32k|    }
  164|       |
  165|       |    // scan_value
  166|    761|    {
  167|    761|        auto it = scn::ranges::begin(source);
  168|    761|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    761|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    761|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    761|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    761|            auto result = scn::scan_value<T>(
  171|    761|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    761|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 761, False: 0]
  ------------------
  173|    761|                break;
  174|    761|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    761|    }
  178|    761|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    761|{
  134|       |    // Regular scan
  135|  5.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.32k, False: 761]
  ------------------
  136|  5.32k|        auto it = scn::ranges::begin(source);
  137|  12.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.0k|            auto result = scn::scan<T>(
  140|  12.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.0k|                scn::runtime_format(f));
  142|  12.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.32k, False: 6.70k]
  ------------------
  143|  5.32k|                break;
  144|  5.32k|            }
  145|  6.70k|            it = result->begin();
  146|  6.70k|        }
  147|  5.32k|    }
  148|       |
  149|       |    // scan localized
  150|  5.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.32k, False: 761]
  ------------------
  151|  5.32k|        auto it = scn::ranges::begin(source);
  152|  12.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.0k|            auto result = scn::scan<T>(
  155|  12.0k|                global_locale,
  156|  12.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.0k|                scn::runtime_format(f));
  158|  12.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.32k, False: 6.70k]
  ------------------
  159|  5.32k|                break;
  160|  5.32k|            }
  161|  6.70k|            it = result->begin();
  162|  6.70k|        }
  163|  5.32k|    }
  164|       |
  165|       |    // scan_value
  166|    761|    {
  167|    761|        auto it = scn::ranges::begin(source);
  168|    761|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    761|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    761|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    761|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    761|            auto result = scn::scan_value<T>(
  171|    761|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    761|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 761, False: 0]
  ------------------
  173|    761|                break;
  174|    761|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    761|    }
  178|    761|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    761|{
  134|       |    // Regular scan
  135|  5.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.32k, False: 761]
  ------------------
  136|  5.32k|        auto it = scn::ranges::begin(source);
  137|  12.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.0k|            auto result = scn::scan<T>(
  140|  12.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.0k|                scn::runtime_format(f));
  142|  12.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.32k, False: 6.70k]
  ------------------
  143|  5.32k|                break;
  144|  5.32k|            }
  145|  6.70k|            it = result->begin();
  146|  6.70k|        }
  147|  5.32k|    }
  148|       |
  149|       |    // scan localized
  150|  5.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.32k, False: 761]
  ------------------
  151|  5.32k|        auto it = scn::ranges::begin(source);
  152|  12.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.0k|            auto result = scn::scan<T>(
  155|  12.0k|                global_locale,
  156|  12.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.0k|                scn::runtime_format(f));
  158|  12.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.32k, False: 6.70k]
  ------------------
  159|  5.32k|                break;
  160|  5.32k|            }
  161|  6.70k|            it = result->begin();
  162|  6.70k|        }
  163|  5.32k|    }
  164|       |
  165|       |    // scan_value
  166|    761|    {
  167|    761|        auto it = scn::ranges::begin(source);
  168|    761|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    761|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    761|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    761|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    761|            auto result = scn::scan_value<T>(
  171|    761|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    761|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 761, False: 0]
  ------------------
  173|    761|                break;
  174|    761|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    761|    }
  178|    761|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmKNSt3__15dequeIcNS3_9allocatorIcEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|    761|{
  134|       |    // Regular scan
  135|  5.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.32k, False: 761]
  ------------------
  136|  5.32k|        auto it = scn::ranges::begin(source);
  137|  15.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.1k|            auto result = scn::scan<T>(
  140|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.1k|                scn::runtime_format(f));
  142|  15.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.32k, False: 9.83k]
  ------------------
  143|  5.32k|                break;
  144|  5.32k|            }
  145|  9.83k|            it = result->begin();
  146|  9.83k|        }
  147|  5.32k|    }
  148|       |
  149|       |    // scan localized
  150|  5.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.32k, False: 761]
  ------------------
  151|  5.32k|        auto it = scn::ranges::begin(source);
  152|  15.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.1k|            auto result = scn::scan<T>(
  155|  15.1k|                global_locale,
  156|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.1k|                scn::runtime_format(f));
  158|  15.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.32k, False: 9.83k]
  ------------------
  159|  5.32k|                break;
  160|  5.32k|            }
  161|  9.83k|            it = result->begin();
  162|  9.83k|        }
  163|  5.32k|    }
  164|       |
  165|       |    // scan_value
  166|    761|    {
  167|    761|        auto it = scn::ranges::begin(source);
  168|    761|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    761|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    761|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    761|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    761|            auto result = scn::scan_value<T>(
  171|    761|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    761|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 761, False: 0]
  ------------------
  173|    761|                break;
  174|    761|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    761|    }
  178|    761|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    761|{
  134|       |    // Regular scan
  135|  5.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.32k, False: 761]
  ------------------
  136|  5.32k|        auto it = scn::ranges::begin(source);
  137|  15.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.1k|            auto result = scn::scan<T>(
  140|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.1k|                scn::runtime_format(f));
  142|  15.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.32k, False: 9.83k]
  ------------------
  143|  5.32k|                break;
  144|  5.32k|            }
  145|  9.83k|            it = result->begin();
  146|  9.83k|        }
  147|  5.32k|    }
  148|       |
  149|       |    // scan localized
  150|  5.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.32k, False: 761]
  ------------------
  151|  5.32k|        auto it = scn::ranges::begin(source);
  152|  15.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.1k|            auto result = scn::scan<T>(
  155|  15.1k|                global_locale,
  156|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.1k|                scn::runtime_format(f));
  158|  15.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.32k, False: 9.83k]
  ------------------
  159|  5.32k|                break;
  160|  5.32k|            }
  161|  9.83k|            it = result->begin();
  162|  9.83k|        }
  163|  5.32k|    }
  164|       |
  165|       |    // scan_value
  166|    761|    {
  167|    761|        auto it = scn::ranges::begin(source);
  168|    761|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    761|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    761|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    761|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    761|            auto result = scn::scan_value<T>(
  171|    761|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    761|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 761, False: 0]
  ------------------
  173|    761|                break;
  174|    761|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    761|    }
  178|    761|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    761|{
  134|       |    // Regular scan
  135|  5.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.32k, False: 761]
  ------------------
  136|  5.32k|        auto it = scn::ranges::begin(source);
  137|  15.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.1k|            auto result = scn::scan<T>(
  140|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.1k|                scn::runtime_format(f));
  142|  15.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.32k, False: 9.83k]
  ------------------
  143|  5.32k|                break;
  144|  5.32k|            }
  145|  9.83k|            it = result->begin();
  146|  9.83k|        }
  147|  5.32k|    }
  148|       |
  149|       |    // scan localized
  150|  5.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.32k, False: 761]
  ------------------
  151|  5.32k|        auto it = scn::ranges::begin(source);
  152|  15.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.1k|            auto result = scn::scan<T>(
  155|  15.1k|                global_locale,
  156|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.1k|                scn::runtime_format(f));
  158|  15.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.32k, False: 9.83k]
  ------------------
  159|  5.32k|                break;
  160|  5.32k|            }
  161|  9.83k|            it = result->begin();
  162|  9.83k|        }
  163|  5.32k|    }
  164|       |
  165|       |    // scan_value
  166|    761|    {
  167|    761|        auto it = scn::ranges::begin(source);
  168|    761|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    761|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    761|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    761|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    761|            auto result = scn::scan_value<T>(
  171|    761|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    761|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 761, False: 0]
  ------------------
  173|    761|                break;
  174|    761|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    761|    }
  178|    761|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    761|{
   91|    761|    using char_type = ranges::range_value_t<Source>;
   92|    761|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    761|    deque.clear();
   94|    761|    std::copy(ranges::begin(source), ranges::end(source),
   95|    761|              std::back_inserter(deque));
   96|    761|    return deque;
   97|    761|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    761|{
   80|    761|    if constexpr (std::is_same_v<CharT, char>) {
   81|    761|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    761|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    761|{
  123|    761|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    761|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    761|    buf.resize(sizeof...(Args));
  126|    761|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    761|    return buf;
  128|    761|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    761|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    761|    else {
  113|    761|        return wformat_string_view_buffer;
  114|    761|    }
  115|    761|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.52k|{
  186|  1.52k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.52k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.52k|                                   format_strings);
  189|  1.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|  1.52k|{
  134|       |    // Regular scan
  135|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.6k, False: 1.52k]
  ------------------
  136|  10.6k|        auto it = scn::ranges::begin(source);
  137|  12.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.9k|            auto result = scn::scan<T>(
  140|  12.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.9k|                scn::runtime_format(f));
  142|  12.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.6k, False: 2.25k]
  ------------------
  143|  10.6k|                break;
  144|  10.6k|            }
  145|  2.25k|            it = result->begin();
  146|  2.25k|        }
  147|  10.6k|    }
  148|       |
  149|       |    // scan localized
  150|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.6k, False: 1.52k]
  ------------------
  151|  10.6k|        auto it = scn::ranges::begin(source);
  152|  12.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.9k|            auto result = scn::scan<T>(
  155|  12.9k|                global_locale,
  156|  12.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.9k|                scn::runtime_format(f));
  158|  12.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.6k, False: 2.25k]
  ------------------
  159|  10.6k|                break;
  160|  10.6k|            }
  161|  2.25k|            it = result->begin();
  162|  2.25k|        }
  163|  10.6k|    }
  164|       |
  165|       |    // scan_value
  166|  1.52k|    {
  167|  1.52k|        auto it = scn::ranges::begin(source);
  168|  1.52k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.52k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.52k|            auto result = scn::scan_value<T>(
  171|  1.52k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.52k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.52k, False: 0]
  ------------------
  173|  1.52k|                break;
  174|  1.52k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.52k|    }
  178|  1.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.52k|{
  134|       |    // Regular scan
  135|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.6k, False: 1.52k]
  ------------------
  136|  10.6k|        auto it = scn::ranges::begin(source);
  137|  12.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.9k|            auto result = scn::scan<T>(
  140|  12.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.9k|                scn::runtime_format(f));
  142|  12.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.6k, False: 2.25k]
  ------------------
  143|  10.6k|                break;
  144|  10.6k|            }
  145|  2.25k|            it = result->begin();
  146|  2.25k|        }
  147|  10.6k|    }
  148|       |
  149|       |    // scan localized
  150|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.6k, False: 1.52k]
  ------------------
  151|  10.6k|        auto it = scn::ranges::begin(source);
  152|  12.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.9k|            auto result = scn::scan<T>(
  155|  12.9k|                global_locale,
  156|  12.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.9k|                scn::runtime_format(f));
  158|  12.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.6k, False: 2.25k]
  ------------------
  159|  10.6k|                break;
  160|  10.6k|            }
  161|  2.25k|            it = result->begin();
  162|  2.25k|        }
  163|  10.6k|    }
  164|       |
  165|       |    // scan_value
  166|  1.52k|    {
  167|  1.52k|        auto it = scn::ranges::begin(source);
  168|  1.52k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.52k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.52k|            auto result = scn::scan_value<T>(
  171|  1.52k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.52k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.52k, False: 0]
  ------------------
  173|  1.52k|                break;
  174|  1.52k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.52k|    }
  178|  1.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.52k|{
  134|       |    // Regular scan
  135|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.6k, False: 1.52k]
  ------------------
  136|  10.6k|        auto it = scn::ranges::begin(source);
  137|  12.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.9k|            auto result = scn::scan<T>(
  140|  12.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.9k|                scn::runtime_format(f));
  142|  12.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.6k, False: 2.25k]
  ------------------
  143|  10.6k|                break;
  144|  10.6k|            }
  145|  2.25k|            it = result->begin();
  146|  2.25k|        }
  147|  10.6k|    }
  148|       |
  149|       |    // scan localized
  150|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.6k, False: 1.52k]
  ------------------
  151|  10.6k|        auto it = scn::ranges::begin(source);
  152|  12.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.9k|            auto result = scn::scan<T>(
  155|  12.9k|                global_locale,
  156|  12.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.9k|                scn::runtime_format(f));
  158|  12.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.6k, False: 2.25k]
  ------------------
  159|  10.6k|                break;
  160|  10.6k|            }
  161|  2.25k|            it = result->begin();
  162|  2.25k|        }
  163|  10.6k|    }
  164|       |
  165|       |    // scan_value
  166|  1.52k|    {
  167|  1.52k|        auto it = scn::ranges::begin(source);
  168|  1.52k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.52k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.52k|            auto result = scn::scan_value<T>(
  171|  1.52k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.52k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.52k, False: 0]
  ------------------
  173|  1.52k|                break;
  174|  1.52k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.52k|    }
  178|  1.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmKNSt3__15dequeIwNS3_9allocatorIwEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|  1.52k|{
  134|       |    // Regular scan
  135|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.6k, False: 1.52k]
  ------------------
  136|  10.6k|        auto it = scn::ranges::begin(source);
  137|  12.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.9k|            auto result = scn::scan<T>(
  140|  12.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.9k|                scn::runtime_format(f));
  142|  12.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.6k, False: 2.25k]
  ------------------
  143|  10.6k|                break;
  144|  10.6k|            }
  145|  2.25k|            it = result->begin();
  146|  2.25k|        }
  147|  10.6k|    }
  148|       |
  149|       |    // scan localized
  150|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.6k, False: 1.52k]
  ------------------
  151|  10.6k|        auto it = scn::ranges::begin(source);
  152|  12.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.9k|            auto result = scn::scan<T>(
  155|  12.9k|                global_locale,
  156|  12.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.9k|                scn::runtime_format(f));
  158|  12.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.6k, False: 2.25k]
  ------------------
  159|  10.6k|                break;
  160|  10.6k|            }
  161|  2.25k|            it = result->begin();
  162|  2.25k|        }
  163|  10.6k|    }
  164|       |
  165|       |    // scan_value
  166|  1.52k|    {
  167|  1.52k|        auto it = scn::ranges::begin(source);
  168|  1.52k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.52k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.52k|            auto result = scn::scan_value<T>(
  171|  1.52k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.52k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.52k, False: 0]
  ------------------
  173|  1.52k|                break;
  174|  1.52k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.52k|    }
  178|  1.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.52k|{
  134|       |    // Regular scan
  135|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.6k, False: 1.52k]
  ------------------
  136|  10.6k|        auto it = scn::ranges::begin(source);
  137|  12.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.9k|            auto result = scn::scan<T>(
  140|  12.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.9k|                scn::runtime_format(f));
  142|  12.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.6k, False: 2.25k]
  ------------------
  143|  10.6k|                break;
  144|  10.6k|            }
  145|  2.25k|            it = result->begin();
  146|  2.25k|        }
  147|  10.6k|    }
  148|       |
  149|       |    // scan localized
  150|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.6k, False: 1.52k]
  ------------------
  151|  10.6k|        auto it = scn::ranges::begin(source);
  152|  12.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.9k|            auto result = scn::scan<T>(
  155|  12.9k|                global_locale,
  156|  12.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.9k|                scn::runtime_format(f));
  158|  12.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.6k, False: 2.25k]
  ------------------
  159|  10.6k|                break;
  160|  10.6k|            }
  161|  2.25k|            it = result->begin();
  162|  2.25k|        }
  163|  10.6k|    }
  164|       |
  165|       |    // scan_value
  166|  1.52k|    {
  167|  1.52k|        auto it = scn::ranges::begin(source);
  168|  1.52k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.52k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.52k|            auto result = scn::scan_value<T>(
  171|  1.52k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.52k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.52k, False: 0]
  ------------------
  173|  1.52k|                break;
  174|  1.52k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.52k|    }
  178|  1.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.52k|{
  134|       |    // Regular scan
  135|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.6k, False: 1.52k]
  ------------------
  136|  10.6k|        auto it = scn::ranges::begin(source);
  137|  12.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.9k|            auto result = scn::scan<T>(
  140|  12.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.9k|                scn::runtime_format(f));
  142|  12.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.6k, False: 2.25k]
  ------------------
  143|  10.6k|                break;
  144|  10.6k|            }
  145|  2.25k|            it = result->begin();
  146|  2.25k|        }
  147|  10.6k|    }
  148|       |
  149|       |    // scan localized
  150|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.6k, False: 1.52k]
  ------------------
  151|  10.6k|        auto it = scn::ranges::begin(source);
  152|  12.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.9k|            auto result = scn::scan<T>(
  155|  12.9k|                global_locale,
  156|  12.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.9k|                scn::runtime_format(f));
  158|  12.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.6k, False: 2.25k]
  ------------------
  159|  10.6k|                break;
  160|  10.6k|            }
  161|  2.25k|            it = result->begin();
  162|  2.25k|        }
  163|  10.6k|    }
  164|       |
  165|       |    // scan_value
  166|  1.52k|    {
  167|  1.52k|        auto it = scn::ranges::begin(source);
  168|  1.52k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.52k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.52k|            auto result = scn::scan_value<T>(
  171|  1.52k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.52k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.52k, False: 0]
  ------------------
  173|  1.52k|                break;
  174|  1.52k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.52k|    }
  178|  1.52k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.52k|{
   91|  1.52k|    using char_type = ranges::range_value_t<Source>;
   92|  1.52k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.52k|    deque.clear();
   94|  1.52k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.52k|              std::back_inserter(deque));
   96|  1.52k|    return deque;
   97|  1.52k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.52k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.52k|    else {
   84|  1.52k|        return wnoncontiguous_buffer;
   85|  1.52k|    }
   86|  1.52k|}

