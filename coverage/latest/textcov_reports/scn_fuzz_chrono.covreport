_ZN3scn2v46detail23chrono_datetime_scannerIc2tmE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  61.5k|    {
 1523|  61.5k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  61.5k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  61.5k|{
 1494|  61.5k|    auto it = pctx.begin();
 1495|  61.5k|    auto end = pctx.end();
 1496|  61.5k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.69k, False: 59.8k]
  |  Branch (1496:22): [True: 0, False: 59.8k]
  ------------------
 1497|  1.69k|        pctx.on_error(
 1498|  1.69k|            "Format string without specifiers is not valid for this type");
 1499|  1.69k|        return it;
 1500|  1.69k|    }
 1501|       |
 1502|  59.8k|    auto checker = detail::tm_format_checker<T>{};
 1503|  59.8k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  59.8k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 59.8k, False: 0]
  ------------------
 1505|  59.8k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  59.8k|    }
 1507|  59.8k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  59.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 59.8k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  59.8k|    return end;
 1512|  59.8k|}
_ZN3scn2v46detail12setter_stateC2Ev:
  742|   726k|        : localized(0),
  743|   726k|          subsec_set(0),
  744|   726k|          sec_set(0),
  745|   726k|          min_set(0),
  746|   726k|          hour24_set(0),
  747|   726k|          hour12_set(0),
  748|   726k|          mday_set(0),
  749|   726k|          mon_set(0),
  750|   726k|          full_year_set(0),
  751|   726k|          century_set(0),
  752|   726k|          short_year_set(0),
  753|   726k|          wday_set(0),
  754|   726k|          yday_set(0),
  755|   726k|          tzoff_set(0),
  756|   726k|          tzname_set(0),
  757|   726k|          am_pm_set(0),
  758|   726k|          epoch_ticks_set(0),
  759|   726k|          duration_ticks_set(0),
  760|   726k|          duration_suffix_set(0),
  761|   726k|          is_pm(0)
  762|   726k|    {
  763|   726k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  59.8k|{
  377|  59.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 59.8k]
  |  Branch (377:25): [True: 0, False: 59.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  59.8k|    auto p = begin;
  383|  59.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 59.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  59.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 59.8k]
  |  Branch (392:21): [True: 0, False: 59.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   156k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 156k, False: 0]
  ------------------
  399|   156k|        auto ch = *p;
  400|   156k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 59.8k, False: 97.1k]
  ------------------
  401|  59.8k|            break;
  402|  59.8k|        }
  403|  97.1k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16.9k, False: 80.1k]
  ------------------
  404|  16.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16.9k]
  |  Branch (404:32): [True: 16.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 16.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  16.9k|            const auto cp_len =
  412|  16.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  16.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  16.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  16.9k|            ++p;
  439|  16.9k|            continue;
  440|  16.9k|        }
  441|  80.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16.9k, False: 63.2k]
  ------------------
  442|  16.9k|            handler.on_text(begin, p);
  443|  16.9k|        }
  444|  80.1k|        ++p;  // Consume '%'
  445|  80.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 80.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  80.1k|        ch = *p;
  451|  80.1k|        ++p;
  452|       |
  453|  80.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 80.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 80.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 80.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.39k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.39k, False: 76.7k]
  ------------------
  463|  3.39k|                handler.on_full_year();
  464|  3.39k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 80.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 80.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 80.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 80.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.88k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.88k, False: 71.2k]
  ------------------
  479|  8.88k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 80.1k]
  ------------------
  480|  8.88k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 80.1k]
  ------------------
  481|  8.88k|                handler.on_month_name();
  482|  8.88k|                break;
  483|  3.39k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.39k, False: 76.7k]
  ------------------
  484|  3.39k|                handler.on_dec_month();
  485|  3.39k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 80.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 80.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 80.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 80.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.39k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.39k, False: 76.7k]
  ------------------
  502|  3.39k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 80.1k]
  ------------------
  503|  3.39k|                handler.on_day_of_month();
  504|  3.39k|                break;
  505|       |            // Day of week
  506|  6.88k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.88k, False: 73.2k]
  ------------------
  507|  6.88k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 80.1k]
  ------------------
  508|  6.88k|                handler.on_weekday_name();
  509|  6.88k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 80.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 80.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.39k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.39k, False: 76.7k]
  ------------------
  518|  3.39k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 80.1k]
  ------------------
  519|  3.39k|                handler.on_24_hour();
  520|  3.39k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 80.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 80.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.39k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.39k, False: 76.7k]
  ------------------
  527|  3.39k|                handler.on_minute();
  528|  3.39k|                break;
  529|       |            // Second
  530|  3.39k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.39k, False: 76.7k]
  ------------------
  531|  3.39k|                handler.on_second();
  532|  3.39k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 80.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.39k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.39k, False: 76.7k]
  ------------------
  563|  3.39k|                handler.on_tz_offset();
  564|  3.39k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 80.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 80.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 80.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 80.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.35k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.35k, False: 71.8k]
  ------------------
  579|  8.35k|                handler.on_us_date();
  580|  8.35k|                break;
  581|  4.01k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.01k, False: 76.1k]
  ------------------
  582|  4.01k|                handler.on_iso_date();
  583|  4.01k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 80.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  22.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 22.3k, False: 57.8k]
  ------------------
  588|  22.3k|                handler.on_24_hour_time();
  589|  22.3k|                break;
  590|  5.95k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.95k, False: 74.2k]
  ------------------
  591|  5.95k|                handler.on_iso_time();
  592|  5.95k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 80.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 80.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 80.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 80.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 80.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 80.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 80.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 80.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  80.1k|        }
  704|  80.1k|        begin = p;
  705|       |
  706|  80.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 80.1k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  80.1k|    }
  710|  59.8k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 59.8k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  59.8k|    handler.verify();
  714|  59.8k|    return p;
  715|  59.8k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIcEEvPKT_S8_:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_full_yearENS1_14numeric_systemE:
 1188|  20.9k|    {
 1189|  20.9k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  20.9k|        st.set_full_year(*this);
 1193|  20.9k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  20.9k|    {                                                                \
  769|  20.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.9k|        field##_set = 1;                                             \
  774|  20.9k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_short_yearENS1_14numeric_systemE:
 1195|  15.1k|    {
 1196|  15.1k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  15.1k|        st.set_short_year(*this);
 1200|  15.1k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  15.1k|    {                                                                \
  769|  15.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.1k|        field##_set = 1;                                             \
  774|  15.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_month_nameEv:
 1231|  17.1k|    {
 1232|  17.1k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  17.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_dec_monthENS1_14numeric_systemE:
 1237|  36.1k|    {
 1238|  36.1k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  36.1k|        st.set_mon(*this);
 1242|  36.1k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  36.1k|    {                                                                \
  769|  36.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  36.1k|        field##_set = 1;                                             \
  774|  36.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_day_of_monthENS1_14numeric_systemE:
 1265|  36.1k|    {
 1266|  36.1k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  36.1k|        st.set_mday(*this);
 1270|  36.1k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  36.1k|    {                                                                \
  769|  36.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  36.1k|        field##_set = 1;                                             \
  774|  36.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_weekday_nameEv:
 1273|  13.6k|    {
 1274|  13.6k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  13.6k|        st.set_wday(*this);
 1278|  13.6k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  13.6k|    {                                                                \
  769|  13.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.6k|        field##_set = 1;                                             \
  774|  13.6k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_24_hourENS1_14numeric_systemE:
 1295|  65.0k|    {
 1296|  65.0k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  65.0k|        st.set_hour24(*this);
 1300|  65.0k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  65.0k|    {                                                                \
  769|  65.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.0k|        field##_set = 1;                                             \
  774|  65.0k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_minuteENS1_14numeric_systemE:
 1309|  65.0k|    {
 1310|  65.0k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  65.0k|        st.set_min(*this);
 1314|  65.0k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  65.0k|    {                                                                \
  769|  65.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.0k|        field##_set = 1;                                             \
  774|  65.0k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_secondENS1_14numeric_systemE:
 1316|  23.3k|    {
 1317|  23.3k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  23.3k|        st.set_sec(*this);
 1321|  23.3k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  23.3k|    {                                                                \
  769|  23.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  23.3k|        field##_set = 1;                                             \
  774|  23.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_tz_offsetENS1_14numeric_systemE:
 1335|  10.1k|    {
 1336|  10.1k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  10.1k|        st.set_tzoff(*this);
 1340|  10.1k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  10.1k|    {                                                                \
  769|  10.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.1k|        field##_set = 1;                                             \
  774|  10.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_us_dateEv:
 1368|  15.1k|    {
 1369|  15.1k|        on_dec_month();
 1370|  15.1k|        on_day_of_month();
 1371|  15.1k|        on_short_year();
 1372|  15.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_dateEv:
 1374|  10.8k|    {
 1375|  10.8k|        on_full_year();
 1376|  10.8k|        on_dec_month();
 1377|  10.8k|        on_day_of_month();
 1378|  10.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_24_hour_timeEv:
 1386|  41.7k|    {
 1387|  41.7k|        on_24_hour();
 1388|  41.7k|        on_minute();
 1389|  41.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_timeEv:
 1391|  13.1k|    {
 1392|  13.1k|        on_24_hour();
 1393|  13.1k|        on_minute();
 1394|  13.1k|        on_second();
 1395|  13.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE6verifyEv:
 1418|   121k|    {
 1419|   121k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   121k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   121k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   121k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   121k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   121k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   121k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   121k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   121k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   121k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   121k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   121k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   121k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   121k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   121k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   121k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   121k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   121k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   121k|        st.verify(*this);
 1463|   121k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerI2tmEEEEvRT_:
  799|   121k|    {
  800|   121k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 65.0k, False: 56.7k]
  |  Branch (800:27): [True: 0, False: 65.0k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   121k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 121k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   121k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 20.9k, False: 100k]
  |  Branch (818:31): [True: 0, False: 20.9k]
  |  Branch (818:46): [True: 0, False: 20.9k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   121k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 10.1k, False: 111k]
  |  Branch (824:26): [True: 0, False: 10.1k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   121k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 13.6k, False: 108k]
  |  Branch (829:26): [True: 36.1k, False: 72.0k]
  |  Branch (829:38): [True: 0, False: 72.0k]
  ------------------
  830|   121k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 49.8k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   121k|    }
_ZNK3scn2v46detail17tm_format_checkerI2tmE9get_errorEv:
 1466|   304k|    {
 1467|   304k|        return err;
 1468|   304k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIc2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  59.8k|    {
 1530|  59.8k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  59.8k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  61.5k|    {
 1523|  61.5k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  61.5k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  61.5k|{
 1494|  61.5k|    auto it = pctx.begin();
 1495|  61.5k|    auto end = pctx.end();
 1496|  61.5k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.69k, False: 59.8k]
  |  Branch (1496:22): [True: 0, False: 59.8k]
  ------------------
 1497|  1.69k|        pctx.on_error(
 1498|  1.69k|            "Format string without specifiers is not valid for this type");
 1499|  1.69k|        return it;
 1500|  1.69k|    }
 1501|       |
 1502|  59.8k|    auto checker = detail::tm_format_checker<T>{};
 1503|  59.8k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  59.8k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 59.8k, False: 0]
  ------------------
 1505|  59.8k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  59.8k|    }
 1507|  59.8k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  59.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 59.8k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  59.8k|    return end;
 1512|  59.8k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  59.8k|{
  377|  59.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 59.8k]
  |  Branch (377:25): [True: 0, False: 59.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  59.8k|    auto p = begin;
  383|  59.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 59.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  59.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 59.8k]
  |  Branch (392:21): [True: 0, False: 59.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   156k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 156k, False: 0]
  ------------------
  399|   156k|        auto ch = *p;
  400|   156k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 59.8k, False: 97.1k]
  ------------------
  401|  59.8k|            break;
  402|  59.8k|        }
  403|  97.1k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16.9k, False: 80.1k]
  ------------------
  404|  16.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16.9k]
  |  Branch (404:32): [True: 16.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 16.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  16.9k|            const auto cp_len =
  412|  16.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  16.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  16.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  16.9k|            ++p;
  439|  16.9k|            continue;
  440|  16.9k|        }
  441|  80.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16.9k, False: 63.2k]
  ------------------
  442|  16.9k|            handler.on_text(begin, p);
  443|  16.9k|        }
  444|  80.1k|        ++p;  // Consume '%'
  445|  80.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 80.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  80.1k|        ch = *p;
  451|  80.1k|        ++p;
  452|       |
  453|  80.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 80.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 80.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 80.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.39k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.39k, False: 76.7k]
  ------------------
  463|  3.39k|                handler.on_full_year();
  464|  3.39k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 80.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 80.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 80.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 80.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.88k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.88k, False: 71.2k]
  ------------------
  479|  8.88k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 80.1k]
  ------------------
  480|  8.88k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 80.1k]
  ------------------
  481|  8.88k|                handler.on_month_name();
  482|  8.88k|                break;
  483|  3.39k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.39k, False: 76.7k]
  ------------------
  484|  3.39k|                handler.on_dec_month();
  485|  3.39k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 80.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 80.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 80.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 80.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.39k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.39k, False: 76.7k]
  ------------------
  502|  3.39k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 80.1k]
  ------------------
  503|  3.39k|                handler.on_day_of_month();
  504|  3.39k|                break;
  505|       |            // Day of week
  506|  6.88k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.88k, False: 73.2k]
  ------------------
  507|  6.88k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 80.1k]
  ------------------
  508|  6.88k|                handler.on_weekday_name();
  509|  6.88k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 80.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 80.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.39k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.39k, False: 76.7k]
  ------------------
  518|  3.39k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 80.1k]
  ------------------
  519|  3.39k|                handler.on_24_hour();
  520|  3.39k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 80.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 80.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.39k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.39k, False: 76.7k]
  ------------------
  527|  3.39k|                handler.on_minute();
  528|  3.39k|                break;
  529|       |            // Second
  530|  3.39k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.39k, False: 76.7k]
  ------------------
  531|  3.39k|                handler.on_second();
  532|  3.39k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 80.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.39k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.39k, False: 76.7k]
  ------------------
  563|  3.39k|                handler.on_tz_offset();
  564|  3.39k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 80.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 80.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 80.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 80.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.35k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.35k, False: 71.8k]
  ------------------
  579|  8.35k|                handler.on_us_date();
  580|  8.35k|                break;
  581|  4.01k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.01k, False: 76.1k]
  ------------------
  582|  4.01k|                handler.on_iso_date();
  583|  4.01k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 80.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  22.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 22.3k, False: 57.8k]
  ------------------
  588|  22.3k|                handler.on_24_hour_time();
  589|  22.3k|                break;
  590|  5.95k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.95k, False: 74.2k]
  ------------------
  591|  5.95k|                handler.on_iso_time();
  592|  5.95k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 80.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 80.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 80.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 80.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 80.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 80.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 80.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 80.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  80.1k|        }
  704|  80.1k|        begin = p;
  705|       |
  706|  80.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 80.1k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  80.1k|    }
  710|  59.8k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 59.8k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  59.8k|    handler.verify();
  714|  59.8k|    return p;
  715|  59.8k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIcEEvPKT_S8_:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_full_yearENS1_14numeric_systemE:
 1188|  20.9k|    {
 1189|  20.9k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  20.9k|        st.set_full_year(*this);
 1193|  20.9k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  20.9k|    {                                                                \
  769|  20.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.9k|        field##_set = 1;                                             \
  774|  20.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_short_yearENS1_14numeric_systemE:
 1195|  15.1k|    {
 1196|  15.1k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  15.1k|        st.set_short_year(*this);
 1200|  15.1k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  15.1k|    {                                                                \
  769|  15.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.1k|        field##_set = 1;                                             \
  774|  15.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_month_nameEv:
 1231|  17.1k|    {
 1232|  17.1k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  17.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_dec_monthENS1_14numeric_systemE:
 1237|  36.1k|    {
 1238|  36.1k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  36.1k|        st.set_mon(*this);
 1242|  36.1k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  36.1k|    {                                                                \
  769|  36.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  36.1k|        field##_set = 1;                                             \
  774|  36.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  36.1k|    {
 1266|  36.1k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  36.1k|        st.set_mday(*this);
 1270|  36.1k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  36.1k|    {                                                                \
  769|  36.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  36.1k|        field##_set = 1;                                             \
  774|  36.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_weekday_nameEv:
 1273|  13.6k|    {
 1274|  13.6k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  13.6k|        st.set_wday(*this);
 1278|  13.6k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  13.6k|    {                                                                \
  769|  13.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.6k|        field##_set = 1;                                             \
  774|  13.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_24_hourENS1_14numeric_systemE:
 1295|  65.0k|    {
 1296|  65.0k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  65.0k|        st.set_hour24(*this);
 1300|  65.0k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  65.0k|    {                                                                \
  769|  65.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.0k|        field##_set = 1;                                             \
  774|  65.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_minuteENS1_14numeric_systemE:
 1309|  65.0k|    {
 1310|  65.0k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  65.0k|        st.set_min(*this);
 1314|  65.0k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  65.0k|    {                                                                \
  769|  65.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.0k|        field##_set = 1;                                             \
  774|  65.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_secondENS1_14numeric_systemE:
 1316|  23.3k|    {
 1317|  23.3k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  23.3k|        st.set_sec(*this);
 1321|  23.3k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  23.3k|    {                                                                \
  769|  23.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  23.3k|        field##_set = 1;                                             \
  774|  23.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  10.1k|    {
 1336|  10.1k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  10.1k|        st.set_tzoff(*this);
 1340|  10.1k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  10.1k|    {                                                                \
  769|  10.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.1k|        field##_set = 1;                                             \
  774|  10.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_us_dateEv:
 1368|  15.1k|    {
 1369|  15.1k|        on_dec_month();
 1370|  15.1k|        on_day_of_month();
 1371|  15.1k|        on_short_year();
 1372|  15.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_dateEv:
 1374|  10.8k|    {
 1375|  10.8k|        on_full_year();
 1376|  10.8k|        on_dec_month();
 1377|  10.8k|        on_day_of_month();
 1378|  10.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_24_hour_timeEv:
 1386|  41.7k|    {
 1387|  41.7k|        on_24_hour();
 1388|  41.7k|        on_minute();
 1389|  41.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_timeEv:
 1391|  13.1k|    {
 1392|  13.1k|        on_24_hour();
 1393|  13.1k|        on_minute();
 1394|  13.1k|        on_second();
 1395|  13.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE6verifyEv:
 1418|   121k|    {
 1419|   121k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   121k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   121k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   121k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   121k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   121k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   121k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   121k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   121k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   121k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   121k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   121k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   121k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   121k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   121k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   121k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   121k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   121k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   121k|        st.verify(*this);
 1463|   121k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  799|   121k|    {
  800|   121k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 65.0k, False: 56.7k]
  |  Branch (800:27): [True: 0, False: 65.0k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   121k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 121k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   121k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 20.9k, False: 100k]
  |  Branch (818:31): [True: 0, False: 20.9k]
  |  Branch (818:46): [True: 0, False: 20.9k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   121k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 10.1k, False: 111k]
  |  Branch (824:26): [True: 0, False: 10.1k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   121k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 13.6k, False: 108k]
  |  Branch (829:26): [True: 36.1k, False: 72.0k]
  |  Branch (829:38): [True: 0, False: 72.0k]
  ------------------
  830|   121k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 49.8k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   121k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9get_errorEv:
 1466|   304k|    {
 1467|   304k|        return err;
 1468|   304k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  59.8k|    {
 1530|  59.8k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  59.8k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  61.5k|    {
 1523|  61.5k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  61.5k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  61.5k|{
 1494|  61.5k|    auto it = pctx.begin();
 1495|  61.5k|    auto end = pctx.end();
 1496|  61.5k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.69k, False: 59.8k]
  |  Branch (1496:22): [True: 0, False: 59.8k]
  ------------------
 1497|  1.69k|        pctx.on_error(
 1498|  1.69k|            "Format string without specifiers is not valid for this type");
 1499|  1.69k|        return it;
 1500|  1.69k|    }
 1501|       |
 1502|  59.8k|    auto checker = detail::tm_format_checker<T>{};
 1503|  59.8k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  59.8k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 59.8k, False: 0]
  ------------------
 1505|  59.8k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  59.8k|    }
 1507|  59.8k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  59.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 59.8k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  59.8k|    return end;
 1512|  59.8k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  59.8k|{
  377|  59.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 59.8k]
  |  Branch (377:25): [True: 0, False: 59.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  59.8k|    auto p = begin;
  383|  59.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 59.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  59.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 59.8k]
  |  Branch (392:21): [True: 0, False: 59.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   156k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 156k, False: 0]
  ------------------
  399|   156k|        auto ch = *p;
  400|   156k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 59.8k, False: 97.1k]
  ------------------
  401|  59.8k|            break;
  402|  59.8k|        }
  403|  97.1k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16.9k, False: 80.1k]
  ------------------
  404|  16.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16.9k]
  |  Branch (404:32): [True: 16.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 16.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  16.9k|            const auto cp_len =
  412|  16.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  16.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  16.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  16.9k|            ++p;
  439|  16.9k|            continue;
  440|  16.9k|        }
  441|  80.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16.9k, False: 63.2k]
  ------------------
  442|  16.9k|            handler.on_text(begin, p);
  443|  16.9k|        }
  444|  80.1k|        ++p;  // Consume '%'
  445|  80.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 80.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  80.1k|        ch = *p;
  451|  80.1k|        ++p;
  452|       |
  453|  80.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 80.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 80.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 80.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.39k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.39k, False: 76.7k]
  ------------------
  463|  3.39k|                handler.on_full_year();
  464|  3.39k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 80.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 80.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 80.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 80.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.88k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.88k, False: 71.2k]
  ------------------
  479|  8.88k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 80.1k]
  ------------------
  480|  8.88k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 80.1k]
  ------------------
  481|  8.88k|                handler.on_month_name();
  482|  8.88k|                break;
  483|  3.39k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.39k, False: 76.7k]
  ------------------
  484|  3.39k|                handler.on_dec_month();
  485|  3.39k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 80.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 80.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 80.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 80.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.39k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.39k, False: 76.7k]
  ------------------
  502|  3.39k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 80.1k]
  ------------------
  503|  3.39k|                handler.on_day_of_month();
  504|  3.39k|                break;
  505|       |            // Day of week
  506|  6.88k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.88k, False: 73.2k]
  ------------------
  507|  6.88k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 80.1k]
  ------------------
  508|  6.88k|                handler.on_weekday_name();
  509|  6.88k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 80.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 80.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.39k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.39k, False: 76.7k]
  ------------------
  518|  3.39k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 80.1k]
  ------------------
  519|  3.39k|                handler.on_24_hour();
  520|  3.39k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 80.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 80.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.39k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.39k, False: 76.7k]
  ------------------
  527|  3.39k|                handler.on_minute();
  528|  3.39k|                break;
  529|       |            // Second
  530|  3.39k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.39k, False: 76.7k]
  ------------------
  531|  3.39k|                handler.on_second();
  532|  3.39k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 80.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.39k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.39k, False: 76.7k]
  ------------------
  563|  3.39k|                handler.on_tz_offset();
  564|  3.39k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 80.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 80.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 80.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 80.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.35k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.35k, False: 71.8k]
  ------------------
  579|  8.35k|                handler.on_us_date();
  580|  8.35k|                break;
  581|  4.01k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.01k, False: 76.1k]
  ------------------
  582|  4.01k|                handler.on_iso_date();
  583|  4.01k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 80.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  22.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 22.3k, False: 57.8k]
  ------------------
  588|  22.3k|                handler.on_24_hour_time();
  589|  22.3k|                break;
  590|  5.95k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.95k, False: 74.2k]
  ------------------
  591|  5.95k|                handler.on_iso_time();
  592|  5.95k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 80.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 80.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 80.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 80.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 80.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 80.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 80.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 80.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  80.1k|        }
  704|  80.1k|        begin = p;
  705|       |
  706|  80.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 80.1k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  80.1k|    }
  710|  59.8k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 59.8k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  59.8k|    handler.verify();
  714|  59.8k|    return p;
  715|  59.8k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIcEEvPKT_S8_:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_full_yearENS1_14numeric_systemE:
 1188|  20.9k|    {
 1189|  20.9k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  20.9k|        st.set_full_year(*this);
 1193|  20.9k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  20.9k|    {                                                                \
  769|  20.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.9k|        field##_set = 1;                                             \
  774|  20.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_short_yearENS1_14numeric_systemE:
 1195|  15.1k|    {
 1196|  15.1k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  15.1k|        st.set_short_year(*this);
 1200|  15.1k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  15.1k|    {                                                                \
  769|  15.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.1k|        field##_set = 1;                                             \
  774|  15.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_month_nameEv:
 1231|  17.1k|    {
 1232|  17.1k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  17.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_dec_monthENS1_14numeric_systemE:
 1237|  36.1k|    {
 1238|  36.1k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  36.1k|        st.set_mon(*this);
 1242|  36.1k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  36.1k|    {                                                                \
  769|  36.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  36.1k|        field##_set = 1;                                             \
  774|  36.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  36.1k|    {
 1266|  36.1k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  36.1k|        st.set_mday(*this);
 1270|  36.1k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  36.1k|    {                                                                \
  769|  36.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  36.1k|        field##_set = 1;                                             \
  774|  36.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_weekday_nameEv:
 1273|  13.6k|    {
 1274|  13.6k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  13.6k|        st.set_wday(*this);
 1278|  13.6k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  13.6k|    {                                                                \
  769|  13.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.6k|        field##_set = 1;                                             \
  774|  13.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_24_hourENS1_14numeric_systemE:
 1295|  65.0k|    {
 1296|  65.0k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  65.0k|        st.set_hour24(*this);
 1300|  65.0k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  65.0k|    {                                                                \
  769|  65.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.0k|        field##_set = 1;                                             \
  774|  65.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_minuteENS1_14numeric_systemE:
 1309|  65.0k|    {
 1310|  65.0k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  65.0k|        st.set_min(*this);
 1314|  65.0k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  65.0k|    {                                                                \
  769|  65.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.0k|        field##_set = 1;                                             \
  774|  65.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_secondENS1_14numeric_systemE:
 1316|  23.3k|    {
 1317|  23.3k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  23.3k|        st.set_sec(*this);
 1321|  23.3k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  23.3k|    {                                                                \
  769|  23.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  23.3k|        field##_set = 1;                                             \
  774|  23.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  10.1k|    {
 1336|  10.1k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  10.1k|        st.set_tzoff(*this);
 1340|  10.1k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  10.1k|    {                                                                \
  769|  10.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.1k|        field##_set = 1;                                             \
  774|  10.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_us_dateEv:
 1368|  15.1k|    {
 1369|  15.1k|        on_dec_month();
 1370|  15.1k|        on_day_of_month();
 1371|  15.1k|        on_short_year();
 1372|  15.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_dateEv:
 1374|  10.8k|    {
 1375|  10.8k|        on_full_year();
 1376|  10.8k|        on_dec_month();
 1377|  10.8k|        on_day_of_month();
 1378|  10.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_24_hour_timeEv:
 1386|  41.7k|    {
 1387|  41.7k|        on_24_hour();
 1388|  41.7k|        on_minute();
 1389|  41.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_timeEv:
 1391|  13.1k|    {
 1392|  13.1k|        on_24_hour();
 1393|  13.1k|        on_minute();
 1394|  13.1k|        on_second();
 1395|  13.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE6verifyEv:
 1418|   121k|    {
 1419|   121k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   121k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   121k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   121k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   121k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   121k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   121k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   121k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   121k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   121k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   121k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   121k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   121k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   121k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   121k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   121k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   121k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   121k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   121k|        st.verify(*this);
 1463|   121k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  799|   121k|    {
  800|   121k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 65.0k, False: 56.7k]
  |  Branch (800:27): [True: 0, False: 65.0k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   121k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 121k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   121k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 20.9k, False: 100k]
  |  Branch (818:31): [True: 0, False: 20.9k]
  |  Branch (818:46): [True: 0, False: 20.9k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   121k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 10.1k, False: 111k]
  |  Branch (824:26): [True: 0, False: 10.1k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   121k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 13.6k, False: 108k]
  |  Branch (829:26): [True: 36.1k, False: 72.0k]
  |  Branch (829:38): [True: 0, False: 72.0k]
  ------------------
  830|   121k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 49.8k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   121k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9get_errorEv:
 1466|   304k|    {
 1467|   304k|        return err;
 1468|   304k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  59.8k|    {
 1530|  59.8k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  59.8k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIw2tmE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  65.4k|    {
 1523|  65.4k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  65.4k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  65.4k|{
 1494|  65.4k|    auto it = pctx.begin();
 1495|  65.4k|    auto end = pctx.end();
 1496|  65.4k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.39k, False: 62.0k]
  |  Branch (1496:22): [True: 0, False: 62.0k]
  ------------------
 1497|  3.39k|        pctx.on_error(
 1498|  3.39k|            "Format string without specifiers is not valid for this type");
 1499|  3.39k|        return it;
 1500|  3.39k|    }
 1501|       |
 1502|  62.0k|    auto checker = detail::tm_format_checker<T>{};
 1503|  62.0k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  62.0k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 62.0k, False: 0]
  ------------------
 1505|  62.0k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  62.0k|    }
 1507|  62.0k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  62.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 62.0k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  62.0k|    return end;
 1512|  62.0k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  62.0k|{
  377|  62.0k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 62.0k]
  |  Branch (377:25): [True: 0, False: 62.0k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  62.0k|    auto p = begin;
  383|  62.0k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 62.0k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  62.0k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 62.0k]
  |  Branch (392:21): [True: 0, False: 62.0k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   198k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 198k, False: 0]
  ------------------
  399|   198k|        auto ch = *p;
  400|   198k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 62.0k, False: 136k]
  ------------------
  401|  62.0k|            break;
  402|  62.0k|        }
  403|   136k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 33.9k, False: 102k]
  ------------------
  404|  33.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 33.9k]
  |  Branch (404:32): [True: 33.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 33.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  33.9k|            const auto cp_len =
  412|  33.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  33.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 33.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  33.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 33.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  33.9k|            ++p;
  439|  33.9k|            continue;
  440|  33.9k|        }
  441|   102k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 33.9k, False: 68.8k]
  ------------------
  442|  33.9k|            handler.on_text(begin, p);
  443|  33.9k|        }
  444|   102k|        ++p;  // Consume '%'
  445|   102k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 102k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   102k|        ch = *p;
  451|   102k|        ++p;
  452|       |
  453|   102k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 102k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 102k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 102k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.78k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.78k, False: 95.9k]
  ------------------
  463|  6.78k|                handler.on_full_year();
  464|  6.78k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 102k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 102k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 102k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 102k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.24k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.24k, False: 94.4k]
  ------------------
  479|  8.24k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 102k]
  ------------------
  480|  8.24k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 102k]
  ------------------
  481|  8.24k|                handler.on_month_name();
  482|  8.24k|                break;
  483|  6.78k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.78k, False: 95.9k]
  ------------------
  484|  6.78k|                handler.on_dec_month();
  485|  6.78k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 102k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 102k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 102k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 102k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.78k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.78k, False: 95.9k]
  ------------------
  502|  6.78k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 102k]
  ------------------
  503|  6.78k|                handler.on_day_of_month();
  504|  6.78k|                break;
  505|       |            // Day of week
  506|  6.78k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.78k, False: 95.9k]
  ------------------
  507|  6.78k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 102k]
  ------------------
  508|  6.78k|                handler.on_weekday_name();
  509|  6.78k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 102k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 102k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.78k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.78k, False: 95.9k]
  ------------------
  518|  6.78k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 102k]
  ------------------
  519|  6.78k|                handler.on_24_hour();
  520|  6.78k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 102k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 102k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.78k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.78k, False: 95.9k]
  ------------------
  527|  6.78k|                handler.on_minute();
  528|  6.78k|                break;
  529|       |            // Second
  530|  6.78k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.78k, False: 95.9k]
  ------------------
  531|  6.78k|                handler.on_second();
  532|  6.78k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 102k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.78k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.78k, False: 95.9k]
  ------------------
  563|  6.78k|                handler.on_tz_offset();
  564|  6.78k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 102k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 102k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 102k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 102k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.80k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.80k, False: 95.9k]
  ------------------
  579|  6.80k|                handler.on_us_date();
  580|  6.80k|                break;
  581|  6.80k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.80k, False: 95.9k]
  ------------------
  582|  6.80k|                handler.on_iso_date();
  583|  6.80k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 102k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  19.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 19.4k, False: 83.3k]
  ------------------
  588|  19.4k|                handler.on_24_hour_time();
  589|  19.4k|                break;
  590|  7.18k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.18k, False: 95.5k]
  ------------------
  591|  7.18k|                handler.on_iso_time();
  592|  7.18k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 102k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 102k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 102k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 102k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 102k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 102k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 102k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 102k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   102k|        }
  704|   102k|        begin = p;
  705|       |
  706|   102k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 102k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   102k|    }
  710|  62.0k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 62.0k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  62.0k|    handler.verify();
  714|  62.0k|    return p;
  715|  62.0k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIwEEvPKT_S8_:
 1176|  33.9k|    {
 1177|  33.9k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIw2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  62.0k|    {
 1530|  62.0k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  62.0k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  65.4k|    {
 1523|  65.4k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  65.4k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  65.4k|{
 1494|  65.4k|    auto it = pctx.begin();
 1495|  65.4k|    auto end = pctx.end();
 1496|  65.4k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.39k, False: 62.0k]
  |  Branch (1496:22): [True: 0, False: 62.0k]
  ------------------
 1497|  3.39k|        pctx.on_error(
 1498|  3.39k|            "Format string without specifiers is not valid for this type");
 1499|  3.39k|        return it;
 1500|  3.39k|    }
 1501|       |
 1502|  62.0k|    auto checker = detail::tm_format_checker<T>{};
 1503|  62.0k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  62.0k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 62.0k, False: 0]
  ------------------
 1505|  62.0k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  62.0k|    }
 1507|  62.0k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  62.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 62.0k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  62.0k|    return end;
 1512|  62.0k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  62.0k|{
  377|  62.0k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 62.0k]
  |  Branch (377:25): [True: 0, False: 62.0k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  62.0k|    auto p = begin;
  383|  62.0k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 62.0k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  62.0k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 62.0k]
  |  Branch (392:21): [True: 0, False: 62.0k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   198k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 198k, False: 0]
  ------------------
  399|   198k|        auto ch = *p;
  400|   198k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 62.0k, False: 136k]
  ------------------
  401|  62.0k|            break;
  402|  62.0k|        }
  403|   136k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 33.9k, False: 102k]
  ------------------
  404|  33.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 33.9k]
  |  Branch (404:32): [True: 33.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 33.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  33.9k|            const auto cp_len =
  412|  33.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  33.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 33.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  33.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 33.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  33.9k|            ++p;
  439|  33.9k|            continue;
  440|  33.9k|        }
  441|   102k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 33.9k, False: 68.8k]
  ------------------
  442|  33.9k|            handler.on_text(begin, p);
  443|  33.9k|        }
  444|   102k|        ++p;  // Consume '%'
  445|   102k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 102k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   102k|        ch = *p;
  451|   102k|        ++p;
  452|       |
  453|   102k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 102k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 102k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 102k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.78k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.78k, False: 95.9k]
  ------------------
  463|  6.78k|                handler.on_full_year();
  464|  6.78k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 102k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 102k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 102k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 102k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.24k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.24k, False: 94.4k]
  ------------------
  479|  8.24k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 102k]
  ------------------
  480|  8.24k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 102k]
  ------------------
  481|  8.24k|                handler.on_month_name();
  482|  8.24k|                break;
  483|  6.78k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.78k, False: 95.9k]
  ------------------
  484|  6.78k|                handler.on_dec_month();
  485|  6.78k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 102k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 102k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 102k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 102k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.78k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.78k, False: 95.9k]
  ------------------
  502|  6.78k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 102k]
  ------------------
  503|  6.78k|                handler.on_day_of_month();
  504|  6.78k|                break;
  505|       |            // Day of week
  506|  6.78k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.78k, False: 95.9k]
  ------------------
  507|  6.78k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 102k]
  ------------------
  508|  6.78k|                handler.on_weekday_name();
  509|  6.78k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 102k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 102k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.78k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.78k, False: 95.9k]
  ------------------
  518|  6.78k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 102k]
  ------------------
  519|  6.78k|                handler.on_24_hour();
  520|  6.78k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 102k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 102k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.78k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.78k, False: 95.9k]
  ------------------
  527|  6.78k|                handler.on_minute();
  528|  6.78k|                break;
  529|       |            // Second
  530|  6.78k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.78k, False: 95.9k]
  ------------------
  531|  6.78k|                handler.on_second();
  532|  6.78k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 102k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.78k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.78k, False: 95.9k]
  ------------------
  563|  6.78k|                handler.on_tz_offset();
  564|  6.78k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 102k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 102k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 102k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 102k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.80k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.80k, False: 95.9k]
  ------------------
  579|  6.80k|                handler.on_us_date();
  580|  6.80k|                break;
  581|  6.80k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.80k, False: 95.9k]
  ------------------
  582|  6.80k|                handler.on_iso_date();
  583|  6.80k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 102k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  19.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 19.4k, False: 83.3k]
  ------------------
  588|  19.4k|                handler.on_24_hour_time();
  589|  19.4k|                break;
  590|  7.18k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.18k, False: 95.5k]
  ------------------
  591|  7.18k|                handler.on_iso_time();
  592|  7.18k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 102k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 102k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 102k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 102k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 102k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 102k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 102k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 102k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   102k|        }
  704|   102k|        begin = p;
  705|       |
  706|   102k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 102k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   102k|    }
  710|  62.0k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 62.0k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  62.0k|    handler.verify();
  714|  62.0k|    return p;
  715|  62.0k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIwEEvPKT_S8_:
 1176|  33.9k|    {
 1177|  33.9k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  62.0k|    {
 1530|  62.0k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  62.0k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  65.4k|    {
 1523|  65.4k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  65.4k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  65.4k|{
 1494|  65.4k|    auto it = pctx.begin();
 1495|  65.4k|    auto end = pctx.end();
 1496|  65.4k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.39k, False: 62.0k]
  |  Branch (1496:22): [True: 0, False: 62.0k]
  ------------------
 1497|  3.39k|        pctx.on_error(
 1498|  3.39k|            "Format string without specifiers is not valid for this type");
 1499|  3.39k|        return it;
 1500|  3.39k|    }
 1501|       |
 1502|  62.0k|    auto checker = detail::tm_format_checker<T>{};
 1503|  62.0k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  62.0k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 62.0k, False: 0]
  ------------------
 1505|  62.0k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  62.0k|    }
 1507|  62.0k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  62.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 62.0k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  62.0k|    return end;
 1512|  62.0k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  62.0k|{
  377|  62.0k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 62.0k]
  |  Branch (377:25): [True: 0, False: 62.0k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  62.0k|    auto p = begin;
  383|  62.0k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 62.0k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  62.0k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 62.0k]
  |  Branch (392:21): [True: 0, False: 62.0k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   198k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 198k, False: 0]
  ------------------
  399|   198k|        auto ch = *p;
  400|   198k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 62.0k, False: 136k]
  ------------------
  401|  62.0k|            break;
  402|  62.0k|        }
  403|   136k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 33.9k, False: 102k]
  ------------------
  404|  33.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 33.9k]
  |  Branch (404:32): [True: 33.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 33.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  33.9k|            const auto cp_len =
  412|  33.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  33.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 33.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  33.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 33.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  33.9k|            ++p;
  439|  33.9k|            continue;
  440|  33.9k|        }
  441|   102k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 33.9k, False: 68.8k]
  ------------------
  442|  33.9k|            handler.on_text(begin, p);
  443|  33.9k|        }
  444|   102k|        ++p;  // Consume '%'
  445|   102k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 102k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   102k|        ch = *p;
  451|   102k|        ++p;
  452|       |
  453|   102k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 102k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 102k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 102k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.78k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.78k, False: 95.9k]
  ------------------
  463|  6.78k|                handler.on_full_year();
  464|  6.78k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 102k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 102k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 102k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 102k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.24k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.24k, False: 94.4k]
  ------------------
  479|  8.24k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 102k]
  ------------------
  480|  8.24k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 102k]
  ------------------
  481|  8.24k|                handler.on_month_name();
  482|  8.24k|                break;
  483|  6.78k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.78k, False: 95.9k]
  ------------------
  484|  6.78k|                handler.on_dec_month();
  485|  6.78k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 102k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 102k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 102k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 102k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.78k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.78k, False: 95.9k]
  ------------------
  502|  6.78k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 102k]
  ------------------
  503|  6.78k|                handler.on_day_of_month();
  504|  6.78k|                break;
  505|       |            // Day of week
  506|  6.78k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.78k, False: 95.9k]
  ------------------
  507|  6.78k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 102k]
  ------------------
  508|  6.78k|                handler.on_weekday_name();
  509|  6.78k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 102k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 102k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.78k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.78k, False: 95.9k]
  ------------------
  518|  6.78k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 102k]
  ------------------
  519|  6.78k|                handler.on_24_hour();
  520|  6.78k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 102k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 102k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.78k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.78k, False: 95.9k]
  ------------------
  527|  6.78k|                handler.on_minute();
  528|  6.78k|                break;
  529|       |            // Second
  530|  6.78k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.78k, False: 95.9k]
  ------------------
  531|  6.78k|                handler.on_second();
  532|  6.78k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 102k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.78k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.78k, False: 95.9k]
  ------------------
  563|  6.78k|                handler.on_tz_offset();
  564|  6.78k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 102k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 102k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 102k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 102k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.80k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.80k, False: 95.9k]
  ------------------
  579|  6.80k|                handler.on_us_date();
  580|  6.80k|                break;
  581|  6.80k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.80k, False: 95.9k]
  ------------------
  582|  6.80k|                handler.on_iso_date();
  583|  6.80k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 102k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  19.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 19.4k, False: 83.3k]
  ------------------
  588|  19.4k|                handler.on_24_hour_time();
  589|  19.4k|                break;
  590|  7.18k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.18k, False: 95.5k]
  ------------------
  591|  7.18k|                handler.on_iso_time();
  592|  7.18k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 102k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 102k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 102k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 102k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 102k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 102k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 102k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 102k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   102k|        }
  704|   102k|        begin = p;
  705|       |
  706|   102k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 102k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   102k|    }
  710|  62.0k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 62.0k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  62.0k|    handler.verify();
  714|  62.0k|    return p;
  715|  62.0k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIwEEvPKT_S8_:
 1176|  33.9k|    {
 1177|  33.9k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  62.0k|    {
 1530|  62.0k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  62.0k|    }
_ZN3scn2v47weekdayC2Ej:
   71|  3.49k|        : m_value(static_cast<unsigned char>(wd != 7 ? wd : 0))
  ------------------
  |  Branch (71:46): [True: 3.49k, False: 0]
  ------------------
   72|  3.49k|    {
   73|  3.49k|    }
_ZN3scn2v45monthC2Ej:
  119|  14.3k|        : m_value(static_cast<unsigned char>(d))
  120|  14.3k|    {
  121|  14.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  32.1k|{
  377|  32.1k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 32.1k]
  |  Branch (377:25): [True: 0, False: 32.1k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  32.1k|    auto p = begin;
  383|  32.1k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 32.1k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  32.1k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 32.1k]
  |  Branch (392:21): [True: 0, False: 32.1k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  53.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 32.4k, False: 20.7k]
  ------------------
  399|  32.4k|        auto ch = *p;
  400|  32.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 32.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  32.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 182, False: 32.3k]
  ------------------
  404|    182|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 182]
  |  Branch (404:32): [True: 182, False: 0]
  |  Branch (404:46): [True: 0, False: 182]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    182|            const auto cp_len =
  412|    182|                detail::code_point_length_by_starting_code_unit(ch);
  413|    182|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 182]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    182|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 182]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    182|            ++p;
  439|    182|            continue;
  440|    182|        }
  441|  32.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 182, False: 32.1k]
  ------------------
  442|    182|            handler.on_text(begin, p);
  443|    182|        }
  444|  32.3k|        ++p;  // Consume '%'
  445|  32.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 32.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  32.3k|        ch = *p;
  451|  32.3k|        ++p;
  452|       |
  453|  32.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 32.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 32.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 32.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.64k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.64k, False: 30.6k]
  ------------------
  463|  1.64k|                handler.on_full_year();
  464|  1.64k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 32.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 32.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 32.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 32.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.37k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.37k, False: 27.9k]
  ------------------
  479|  4.37k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 32.3k]
  ------------------
  480|  4.37k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 32.3k]
  ------------------
  481|  4.37k|                handler.on_month_name();
  482|  4.37k|                break;
  483|     78|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 78, False: 32.2k]
  ------------------
  484|     78|                handler.on_dec_month();
  485|     78|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 32.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 32.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 32.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 32.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     56|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 56, False: 32.2k]
  ------------------
  502|     56|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 32.3k]
  ------------------
  503|     56|                handler.on_day_of_month();
  504|     56|                break;
  505|       |            // Day of week
  506|  3.42k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.42k, False: 28.8k]
  ------------------
  507|  3.42k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 32.3k]
  ------------------
  508|  3.42k|                handler.on_weekday_name();
  509|  3.42k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 32.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 32.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     48|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 48, False: 32.2k]
  ------------------
  518|     48|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 32.3k]
  ------------------
  519|     48|                handler.on_24_hour();
  520|     48|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 32.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 32.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 32.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 32.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 32.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 32.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 32.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 32.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 32.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 32.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.45k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.45k, False: 25.8k]
  ------------------
  579|  6.45k|                handler.on_us_date();
  580|  6.45k|                break;
  581|  1.95k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.95k, False: 30.3k]
  ------------------
  582|  1.95k|                handler.on_iso_date();
  583|  1.95k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 32.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.3k, False: 20.9k]
  ------------------
  588|  11.3k|                handler.on_24_hour_time();
  589|  11.3k|                break;
  590|  2.94k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.94k, False: 29.3k]
  ------------------
  591|  2.94k|                handler.on_iso_time();
  592|  2.94k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 32.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 32.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 32.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 32.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 32.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 32.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 32.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 32.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  32.3k|        }
  704|  32.3k|        begin = p;
  705|       |
  706|  32.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.3k, False: 20.9k]
  ------------------
  707|  11.3k|            return p;
  708|  11.3k|        }
  709|  32.3k|    }
  710|  20.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 20.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  20.7k|    handler.verify();
  714|  20.7k|    return p;
  715|  32.1k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.59k|    {                                                                \
  769|  3.59k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.59k|        field##_set = 1;                                             \
  774|  3.59k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.85k|    {                                                                \
  769|  4.85k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.85k|        field##_set = 1;                                             \
  774|  4.85k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  8.48k|    {                                                                \
  769|  8.48k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.48k|        field##_set = 1;                                             \
  774|  8.48k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.25k|    {                                                                \
  769|  5.25k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.25k|        field##_set = 1;                                             \
  774|  5.25k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.78k|    {                                                                \
  769|  1.78k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.78k|        field##_set = 1;                                             \
  774|  1.78k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.9k|    {                                                                \
  769|  11.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.9k|        field##_set = 1;                                             \
  774|  11.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.5k|    {                                                                \
  769|  11.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.5k|        field##_set = 1;                                             \
  774|  11.5k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.34k|    {                                                                \
  769|  1.34k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.34k|        field##_set = 1;                                             \
  774|  1.34k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  20.7k|    {
  800|  20.7k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.0k, False: 9.67k]
  |  Branch (800:27): [True: 0, False: 11.0k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  20.7k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 20.7k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  20.7k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 312, False: 20.4k]
  |  Branch (818:31): [True: 0, False: 312]
  |  Branch (818:46): [True: 0, False: 312]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  20.7k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 20.7k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  20.7k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.78k, False: 18.9k]
  |  Branch (829:26): [True: 5.14k, False: 13.8k]
  |  Branch (829:38): [True: 0, False: 13.8k]
  ------------------
  830|  20.7k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.92k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  20.7k|    }
_ZN3scn2v46detail12setter_state29handle_short_year_and_centuryIiEEvRT_S4_:
  866|  14.9k|    {
  867|  14.9k|        assert(!full_year_set);
  868|  14.9k|        if (short_year_set && century_set) {
  ------------------
  |  Branch (868:13): [True: 14.9k, False: 0]
  |  Branch (868:31): [True: 0, False: 14.9k]
  ------------------
  869|      0|            year = century_value * 100 + short_year_value - offset;
  870|      0|        }
  871|  14.9k|        else if (short_year_set) {
  ------------------
  |  Branch (871:18): [True: 14.9k, False: 0]
  ------------------
  872|  14.9k|            if (short_year_value >= 69) {
  ------------------
  |  Branch (872:17): [True: 164, False: 14.7k]
  ------------------
  873|    164|                year = 1900 + short_year_value - offset;
  874|    164|            }
  875|  14.7k|            else {
  876|  14.7k|                year = 2000 + short_year_value - offset;
  877|  14.7k|            }
  878|  14.9k|        }
  879|      0|        else if (century_set) {
  ------------------
  |  Branch (879:18): [True: 0, False: 0]
  ------------------
  880|      0|            year = 100 * century_value - offset;
  881|      0|        }
  882|  14.9k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  26.9k|{
  377|  26.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 26.9k]
  |  Branch (377:25): [True: 0, False: 26.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  26.9k|    auto p = begin;
  383|  26.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 26.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  26.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 26.9k]
  |  Branch (392:21): [True: 0, False: 26.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  42.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 27.3k, False: 15.3k]
  ------------------
  399|  27.3k|        auto ch = *p;
  400|  27.3k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 27.3k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  27.3k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 176, False: 27.1k]
  ------------------
  404|    176|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 176]
  |  Branch (404:32): [True: 176, False: 0]
  |  Branch (404:46): [True: 0, False: 176]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    176|            const auto cp_len =
  412|    176|                detail::code_point_length_by_starting_code_unit(ch);
  413|    176|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 176]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    176|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 176]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    176|            ++p;
  439|    176|            continue;
  440|    176|        }
  441|  27.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 176, False: 26.9k]
  ------------------
  442|    176|            handler.on_text(begin, p);
  443|    176|        }
  444|  27.1k|        ++p;  // Consume '%'
  445|  27.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 27.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  27.1k|        ch = *p;
  451|  27.1k|        ++p;
  452|       |
  453|  27.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 27.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 27.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 27.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.67k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.67k, False: 25.4k]
  ------------------
  463|  1.67k|                handler.on_full_year();
  464|  1.67k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 27.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 27.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 27.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 27.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.39k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.39k, False: 22.7k]
  ------------------
  479|  4.39k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 27.1k]
  ------------------
  480|  4.39k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 27.1k]
  ------------------
  481|  4.39k|                handler.on_month_name();
  482|  4.39k|                break;
  483|     72|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 72, False: 27.0k]
  ------------------
  484|     72|                handler.on_dec_month();
  485|     72|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 27.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 27.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 27.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 27.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     56|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 56, False: 27.0k]
  ------------------
  502|     56|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 27.1k]
  ------------------
  503|     56|                handler.on_day_of_month();
  504|     56|                break;
  505|       |            // Day of week
  506|  3.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.38k, False: 23.7k]
  ------------------
  507|  3.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 27.1k]
  ------------------
  508|  3.38k|                handler.on_weekday_name();
  509|  3.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 27.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 27.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     48|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 48, False: 27.0k]
  ------------------
  518|     48|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 27.1k]
  ------------------
  519|     48|                handler.on_24_hour();
  520|     48|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 27.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 27.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 27.1k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 27.1k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 27.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 27.1k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 27.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 27.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 27.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 27.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.79k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.79k, False: 25.3k]
  ------------------
  579|  1.79k|                handler.on_us_date();
  580|  1.79k|                break;
  581|  1.98k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.98k, False: 25.1k]
  ------------------
  582|  1.98k|                handler.on_iso_date();
  583|  1.98k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 27.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.8k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.8k, False: 16.3k]
  ------------------
  588|  10.8k|                handler.on_24_hour_time();
  589|  10.8k|                break;
  590|  2.92k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.92k, False: 24.2k]
  ------------------
  591|  2.92k|                handler.on_iso_time();
  592|  2.92k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 27.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 27.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 27.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 27.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 27.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 27.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 27.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 27.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  27.1k|        }
  704|  27.1k|        begin = p;
  705|       |
  706|  27.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.6k, False: 15.5k]
  ------------------
  707|  11.6k|            return p;
  708|  11.6k|        }
  709|  27.1k|    }
  710|  15.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 15.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  15.3k|    handler.verify();
  714|  15.3k|    return p;
  715|  26.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.65k|    {                                                                \
  769|  3.65k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.65k|        field##_set = 1;                                             \
  774|  3.65k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    144|    {                                                                \
  769|    144|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    144|        field##_set = 1;                                             \
  774|    144|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.72k|    {                                                                \
  769|  3.72k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.72k|        field##_set = 1;                                             \
  774|  3.72k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    530|    {                                                                \
  769|    530|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    530|        field##_set = 1;                                             \
  774|    530|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.71k|    {                                                                \
  769|  1.71k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.71k|        field##_set = 1;                                             \
  774|  1.71k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.1k|    {                                                                \
  769|  11.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.1k|        field##_set = 1;                                             \
  774|  11.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.9k|    {                                                                \
  769|  10.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.9k|        field##_set = 1;                                             \
  774|  10.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.29k|    {                                                                \
  769|  1.29k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.29k|        field##_set = 1;                                             \
  774|  1.29k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  15.3k|    {
  800|  15.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.4k, False: 4.89k]
  |  Branch (800:27): [True: 0, False: 10.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  15.3k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 15.3k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  15.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 312, False: 15.0k]
  |  Branch (818:31): [True: 0, False: 312]
  |  Branch (818:46): [True: 0, False: 312]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  15.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 15.3k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  15.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.71k, False: 13.6k]
  |  Branch (829:26): [True: 444, False: 13.1k]
  |  Branch (829:38): [True: 0, False: 13.1k]
  ------------------
  830|  15.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 2.15k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  15.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  32.1k|{
  377|  32.1k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 32.1k]
  |  Branch (377:25): [True: 0, False: 32.1k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  32.1k|    auto p = begin;
  383|  32.1k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 32.1k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  32.1k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 32.1k]
  |  Branch (392:21): [True: 0, False: 32.1k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  53.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 32.4k, False: 20.7k]
  ------------------
  399|  32.4k|        auto ch = *p;
  400|  32.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 32.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  32.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 182, False: 32.3k]
  ------------------
  404|    182|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 182]
  |  Branch (404:32): [True: 182, False: 0]
  |  Branch (404:46): [True: 0, False: 182]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    182|            const auto cp_len =
  412|    182|                detail::code_point_length_by_starting_code_unit(ch);
  413|    182|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 182]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    182|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 182]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    182|            ++p;
  439|    182|            continue;
  440|    182|        }
  441|  32.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 182, False: 32.1k]
  ------------------
  442|    182|            handler.on_text(begin, p);
  443|    182|        }
  444|  32.3k|        ++p;  // Consume '%'
  445|  32.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 32.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  32.3k|        ch = *p;
  451|  32.3k|        ++p;
  452|       |
  453|  32.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 32.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 32.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 32.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.64k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.64k, False: 30.6k]
  ------------------
  463|  1.64k|                handler.on_full_year();
  464|  1.64k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 32.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 32.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 32.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 32.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.37k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.37k, False: 27.9k]
  ------------------
  479|  4.37k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 32.3k]
  ------------------
  480|  4.37k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 32.3k]
  ------------------
  481|  4.37k|                handler.on_month_name();
  482|  4.37k|                break;
  483|     78|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 78, False: 32.2k]
  ------------------
  484|     78|                handler.on_dec_month();
  485|     78|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 32.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 32.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 32.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 32.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     56|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 56, False: 32.2k]
  ------------------
  502|     56|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 32.3k]
  ------------------
  503|     56|                handler.on_day_of_month();
  504|     56|                break;
  505|       |            // Day of week
  506|  3.42k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.42k, False: 28.8k]
  ------------------
  507|  3.42k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 32.3k]
  ------------------
  508|  3.42k|                handler.on_weekday_name();
  509|  3.42k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 32.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 32.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     48|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 48, False: 32.2k]
  ------------------
  518|     48|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 32.3k]
  ------------------
  519|     48|                handler.on_24_hour();
  520|     48|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 32.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 32.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 32.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 32.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 32.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 32.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 32.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 32.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 32.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 32.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.45k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.45k, False: 25.8k]
  ------------------
  579|  6.45k|                handler.on_us_date();
  580|  6.45k|                break;
  581|  1.95k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.95k, False: 30.3k]
  ------------------
  582|  1.95k|                handler.on_iso_date();
  583|  1.95k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 32.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.3k, False: 20.9k]
  ------------------
  588|  11.3k|                handler.on_24_hour_time();
  589|  11.3k|                break;
  590|  2.94k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.94k, False: 29.3k]
  ------------------
  591|  2.94k|                handler.on_iso_time();
  592|  2.94k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 32.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 32.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 32.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 32.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 32.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 32.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 32.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 32.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  32.3k|        }
  704|  32.3k|        begin = p;
  705|       |
  706|  32.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.3k, False: 20.9k]
  ------------------
  707|  11.3k|            return p;
  708|  11.3k|        }
  709|  32.3k|    }
  710|  20.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 20.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  20.7k|    handler.verify();
  714|  20.7k|    return p;
  715|  32.1k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.59k|    {                                                                \
  769|  3.59k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.59k|        field##_set = 1;                                             \
  774|  3.59k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.85k|    {                                                                \
  769|  4.85k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.85k|        field##_set = 1;                                             \
  774|  4.85k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  8.48k|    {                                                                \
  769|  8.48k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.48k|        field##_set = 1;                                             \
  774|  8.48k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.25k|    {                                                                \
  769|  5.25k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.25k|        field##_set = 1;                                             \
  774|  5.25k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.78k|    {                                                                \
  769|  1.78k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.78k|        field##_set = 1;                                             \
  774|  1.78k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.9k|    {                                                                \
  769|  11.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.9k|        field##_set = 1;                                             \
  774|  11.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.5k|    {                                                                \
  769|  11.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.5k|        field##_set = 1;                                             \
  774|  11.5k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.34k|    {                                                                \
  769|  1.34k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.34k|        field##_set = 1;                                             \
  774|  1.34k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  20.7k|    {
  800|  20.7k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.0k, False: 9.67k]
  |  Branch (800:27): [True: 0, False: 11.0k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  20.7k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 20.7k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  20.7k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 312, False: 20.4k]
  |  Branch (818:31): [True: 0, False: 312]
  |  Branch (818:46): [True: 0, False: 312]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  20.7k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 20.7k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  20.7k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.78k, False: 18.9k]
  |  Branch (829:26): [True: 5.14k, False: 13.8k]
  |  Branch (829:38): [True: 0, False: 13.8k]
  ------------------
  830|  20.7k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.92k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  20.7k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  26.9k|{
  377|  26.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 26.9k]
  |  Branch (377:25): [True: 0, False: 26.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  26.9k|    auto p = begin;
  383|  26.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 26.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  26.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 26.9k]
  |  Branch (392:21): [True: 0, False: 26.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  42.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 27.3k, False: 15.3k]
  ------------------
  399|  27.3k|        auto ch = *p;
  400|  27.3k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 27.3k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  27.3k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 176, False: 27.1k]
  ------------------
  404|    176|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 176]
  |  Branch (404:32): [True: 176, False: 0]
  |  Branch (404:46): [True: 0, False: 176]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    176|            const auto cp_len =
  412|    176|                detail::code_point_length_by_starting_code_unit(ch);
  413|    176|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 176]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    176|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 176]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    176|            ++p;
  439|    176|            continue;
  440|    176|        }
  441|  27.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 176, False: 26.9k]
  ------------------
  442|    176|            handler.on_text(begin, p);
  443|    176|        }
  444|  27.1k|        ++p;  // Consume '%'
  445|  27.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 27.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  27.1k|        ch = *p;
  451|  27.1k|        ++p;
  452|       |
  453|  27.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 27.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 27.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 27.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.67k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.67k, False: 25.4k]
  ------------------
  463|  1.67k|                handler.on_full_year();
  464|  1.67k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 27.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 27.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 27.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 27.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.39k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.39k, False: 22.7k]
  ------------------
  479|  4.39k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 27.1k]
  ------------------
  480|  4.39k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 27.1k]
  ------------------
  481|  4.39k|                handler.on_month_name();
  482|  4.39k|                break;
  483|     72|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 72, False: 27.0k]
  ------------------
  484|     72|                handler.on_dec_month();
  485|     72|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 27.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 27.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 27.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 27.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     56|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 56, False: 27.0k]
  ------------------
  502|     56|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 27.1k]
  ------------------
  503|     56|                handler.on_day_of_month();
  504|     56|                break;
  505|       |            // Day of week
  506|  3.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.38k, False: 23.7k]
  ------------------
  507|  3.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 27.1k]
  ------------------
  508|  3.38k|                handler.on_weekday_name();
  509|  3.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 27.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 27.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     48|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 48, False: 27.0k]
  ------------------
  518|     48|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 27.1k]
  ------------------
  519|     48|                handler.on_24_hour();
  520|     48|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 27.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 27.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 27.1k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 27.1k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 27.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 27.1k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 27.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 27.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 27.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 27.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.79k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.79k, False: 25.3k]
  ------------------
  579|  1.79k|                handler.on_us_date();
  580|  1.79k|                break;
  581|  1.98k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.98k, False: 25.1k]
  ------------------
  582|  1.98k|                handler.on_iso_date();
  583|  1.98k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 27.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.8k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.8k, False: 16.3k]
  ------------------
  588|  10.8k|                handler.on_24_hour_time();
  589|  10.8k|                break;
  590|  2.92k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.92k, False: 24.2k]
  ------------------
  591|  2.92k|                handler.on_iso_time();
  592|  2.92k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 27.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 27.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 27.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 27.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 27.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 27.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 27.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 27.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  27.1k|        }
  704|  27.1k|        begin = p;
  705|       |
  706|  27.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.6k, False: 15.5k]
  ------------------
  707|  11.6k|            return p;
  708|  11.6k|        }
  709|  27.1k|    }
  710|  15.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 15.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  15.3k|    handler.verify();
  714|  15.3k|    return p;
  715|  26.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.65k|    {                                                                \
  769|  3.65k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.65k|        field##_set = 1;                                             \
  774|  3.65k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    144|    {                                                                \
  769|    144|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    144|        field##_set = 1;                                             \
  774|    144|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.72k|    {                                                                \
  769|  3.72k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.72k|        field##_set = 1;                                             \
  774|  3.72k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    530|    {                                                                \
  769|    530|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    530|        field##_set = 1;                                             \
  774|    530|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.71k|    {                                                                \
  769|  1.71k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.71k|        field##_set = 1;                                             \
  774|  1.71k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.1k|    {                                                                \
  769|  11.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.1k|        field##_set = 1;                                             \
  774|  11.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.9k|    {                                                                \
  769|  10.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.9k|        field##_set = 1;                                             \
  774|  10.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.29k|    {                                                                \
  769|  1.29k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.29k|        field##_set = 1;                                             \
  774|  1.29k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  15.3k|    {
  800|  15.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.4k, False: 4.89k]
  |  Branch (800:27): [True: 0, False: 10.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  15.3k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 15.3k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  15.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 312, False: 15.0k]
  |  Branch (818:31): [True: 0, False: 312]
  |  Branch (818:46): [True: 0, False: 312]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  15.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 15.3k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  15.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.71k, False: 13.6k]
  |  Branch (829:26): [True: 444, False: 13.1k]
  |  Branch (829:38): [True: 0, False: 13.1k]
  ------------------
  830|  15.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 2.15k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  15.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  32.1k|{
  377|  32.1k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 32.1k]
  |  Branch (377:25): [True: 0, False: 32.1k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  32.1k|    auto p = begin;
  383|  32.1k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 32.1k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  32.1k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 32.1k]
  |  Branch (392:21): [True: 0, False: 32.1k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  53.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 32.4k, False: 20.7k]
  ------------------
  399|  32.4k|        auto ch = *p;
  400|  32.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 32.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  32.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 182, False: 32.3k]
  ------------------
  404|    182|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 182]
  |  Branch (404:32): [True: 182, False: 0]
  |  Branch (404:46): [True: 0, False: 182]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    182|            const auto cp_len =
  412|    182|                detail::code_point_length_by_starting_code_unit(ch);
  413|    182|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 182]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    182|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 182]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    182|            ++p;
  439|    182|            continue;
  440|    182|        }
  441|  32.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 182, False: 32.1k]
  ------------------
  442|    182|            handler.on_text(begin, p);
  443|    182|        }
  444|  32.3k|        ++p;  // Consume '%'
  445|  32.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 32.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  32.3k|        ch = *p;
  451|  32.3k|        ++p;
  452|       |
  453|  32.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 32.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 32.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 32.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.64k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.64k, False: 30.6k]
  ------------------
  463|  1.64k|                handler.on_full_year();
  464|  1.64k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 32.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 32.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 32.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 32.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.37k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.37k, False: 27.9k]
  ------------------
  479|  4.37k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 32.3k]
  ------------------
  480|  4.37k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 32.3k]
  ------------------
  481|  4.37k|                handler.on_month_name();
  482|  4.37k|                break;
  483|     78|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 78, False: 32.2k]
  ------------------
  484|     78|                handler.on_dec_month();
  485|     78|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 32.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 32.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 32.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 32.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     56|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 56, False: 32.2k]
  ------------------
  502|     56|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 32.3k]
  ------------------
  503|     56|                handler.on_day_of_month();
  504|     56|                break;
  505|       |            // Day of week
  506|  3.42k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.42k, False: 28.8k]
  ------------------
  507|  3.42k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 32.3k]
  ------------------
  508|  3.42k|                handler.on_weekday_name();
  509|  3.42k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 32.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 32.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     48|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 48, False: 32.2k]
  ------------------
  518|     48|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 32.3k]
  ------------------
  519|     48|                handler.on_24_hour();
  520|     48|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 32.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 32.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 32.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 32.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 32.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 32.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 32.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 32.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 32.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 32.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.45k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.45k, False: 25.8k]
  ------------------
  579|  6.45k|                handler.on_us_date();
  580|  6.45k|                break;
  581|  1.95k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.95k, False: 30.3k]
  ------------------
  582|  1.95k|                handler.on_iso_date();
  583|  1.95k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 32.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.3k, False: 20.9k]
  ------------------
  588|  11.3k|                handler.on_24_hour_time();
  589|  11.3k|                break;
  590|  2.94k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.94k, False: 29.3k]
  ------------------
  591|  2.94k|                handler.on_iso_time();
  592|  2.94k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 32.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 32.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 32.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 32.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 32.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 32.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 32.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 32.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  32.3k|        }
  704|  32.3k|        begin = p;
  705|       |
  706|  32.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.3k, False: 20.9k]
  ------------------
  707|  11.3k|            return p;
  708|  11.3k|        }
  709|  32.3k|    }
  710|  20.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 20.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  20.7k|    handler.verify();
  714|  20.7k|    return p;
  715|  32.1k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.59k|    {                                                                \
  769|  3.59k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.59k|        field##_set = 1;                                             \
  774|  3.59k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  6.45k|    {                                                                \
  769|  6.45k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.45k|        field##_set = 1;                                             \
  774|  6.45k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  8.48k|    {                                                                \
  769|  8.48k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.48k|        field##_set = 1;                                             \
  774|  8.48k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.25k|    {                                                                \
  769|  5.25k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.25k|        field##_set = 1;                                             \
  774|  5.25k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.78k|    {                                                                \
  769|  1.78k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.78k|        field##_set = 1;                                             \
  774|  1.78k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.9k|    {                                                                \
  769|  11.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.9k|        field##_set = 1;                                             \
  774|  11.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.5k|    {                                                                \
  769|  11.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.5k|        field##_set = 1;                                             \
  774|  11.5k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.34k|    {                                                                \
  769|  1.34k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.34k|        field##_set = 1;                                             \
  774|  1.34k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  20.7k|    {
  800|  20.7k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.0k, False: 9.67k]
  |  Branch (800:27): [True: 0, False: 11.0k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  20.7k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 20.7k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  20.7k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 312, False: 20.4k]
  |  Branch (818:31): [True: 0, False: 312]
  |  Branch (818:46): [True: 0, False: 312]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  20.7k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 20.7k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  20.7k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.78k, False: 18.9k]
  |  Branch (829:26): [True: 5.14k, False: 13.8k]
  |  Branch (829:38): [True: 0, False: 13.8k]
  ------------------
  830|  20.7k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.92k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  20.7k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  26.9k|{
  377|  26.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 26.9k]
  |  Branch (377:25): [True: 0, False: 26.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  26.9k|    auto p = begin;
  383|  26.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 26.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  26.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 26.9k]
  |  Branch (392:21): [True: 0, False: 26.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  42.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 27.3k, False: 15.3k]
  ------------------
  399|  27.3k|        auto ch = *p;
  400|  27.3k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 27.3k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  27.3k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 176, False: 27.1k]
  ------------------
  404|    176|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 176]
  |  Branch (404:32): [True: 176, False: 0]
  |  Branch (404:46): [True: 0, False: 176]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    176|            const auto cp_len =
  412|    176|                detail::code_point_length_by_starting_code_unit(ch);
  413|    176|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 176]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    176|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 176]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    176|            ++p;
  439|    176|            continue;
  440|    176|        }
  441|  27.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 176, False: 26.9k]
  ------------------
  442|    176|            handler.on_text(begin, p);
  443|    176|        }
  444|  27.1k|        ++p;  // Consume '%'
  445|  27.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 27.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  27.1k|        ch = *p;
  451|  27.1k|        ++p;
  452|       |
  453|  27.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 27.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 27.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 27.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.67k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.67k, False: 25.4k]
  ------------------
  463|  1.67k|                handler.on_full_year();
  464|  1.67k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 27.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 27.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 27.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 27.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.39k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.39k, False: 22.7k]
  ------------------
  479|  4.39k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 27.1k]
  ------------------
  480|  4.39k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 27.1k]
  ------------------
  481|  4.39k|                handler.on_month_name();
  482|  4.39k|                break;
  483|     72|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 72, False: 27.0k]
  ------------------
  484|     72|                handler.on_dec_month();
  485|     72|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 27.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 27.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 27.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 27.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     56|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 56, False: 27.0k]
  ------------------
  502|     56|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 27.1k]
  ------------------
  503|     56|                handler.on_day_of_month();
  504|     56|                break;
  505|       |            // Day of week
  506|  3.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.38k, False: 23.7k]
  ------------------
  507|  3.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 27.1k]
  ------------------
  508|  3.38k|                handler.on_weekday_name();
  509|  3.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 27.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 27.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     48|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 48, False: 27.0k]
  ------------------
  518|     48|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 27.1k]
  ------------------
  519|     48|                handler.on_24_hour();
  520|     48|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 27.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 27.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 27.1k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 27.1k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 27.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 27.1k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 27.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 27.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 27.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 27.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.79k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.79k, False: 25.3k]
  ------------------
  579|  1.79k|                handler.on_us_date();
  580|  1.79k|                break;
  581|  1.98k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.98k, False: 25.1k]
  ------------------
  582|  1.98k|                handler.on_iso_date();
  583|  1.98k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 27.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.8k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.8k, False: 16.3k]
  ------------------
  588|  10.8k|                handler.on_24_hour_time();
  589|  10.8k|                break;
  590|  2.92k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.92k, False: 24.2k]
  ------------------
  591|  2.92k|                handler.on_iso_time();
  592|  2.92k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 27.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 27.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 27.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 27.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 27.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 27.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 27.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 27.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  27.1k|        }
  704|  27.1k|        begin = p;
  705|       |
  706|  27.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.6k, False: 15.5k]
  ------------------
  707|  11.6k|            return p;
  708|  11.6k|        }
  709|  27.1k|    }
  710|  15.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 15.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  15.3k|    handler.verify();
  714|  15.3k|    return p;
  715|  26.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.65k|    {                                                                \
  769|  3.65k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.65k|        field##_set = 1;                                             \
  774|  3.65k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.79k|    {                                                                \
  769|  1.79k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.79k|        field##_set = 1;                                             \
  774|  1.79k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.72k|    {                                                                \
  769|  3.72k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.72k|        field##_set = 1;                                             \
  774|  3.72k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    530|    {                                                                \
  769|    530|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    530|        field##_set = 1;                                             \
  774|    530|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.71k|    {                                                                \
  769|  1.71k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.71k|        field##_set = 1;                                             \
  774|  1.71k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.1k|    {                                                                \
  769|  11.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.1k|        field##_set = 1;                                             \
  774|  11.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.9k|    {                                                                \
  769|  10.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.9k|        field##_set = 1;                                             \
  774|  10.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.29k|    {                                                                \
  769|  1.29k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.29k|        field##_set = 1;                                             \
  774|  1.29k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  15.3k|    {
  800|  15.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.4k, False: 4.89k]
  |  Branch (800:27): [True: 0, False: 10.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  15.3k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 15.3k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  15.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 312, False: 15.0k]
  |  Branch (818:31): [True: 0, False: 312]
  |  Branch (818:46): [True: 0, False: 312]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  15.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 15.3k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  15.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.71k, False: 13.6k]
  |  Branch (829:26): [True: 444, False: 13.1k]
  |  Branch (829:38): [True: 0, False: 13.1k]
  ------------------
  830|  15.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 2.15k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  15.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  30.6k|{
  377|  30.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.6k]
  |  Branch (377:25): [True: 0, False: 30.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.6k|    auto p = begin;
  383|  30.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.6k]
  |  Branch (392:21): [True: 0, False: 30.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.7k, False: 7.26k]
  ------------------
  399|  30.7k|        auto ch = *p;
  400|  30.7k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.7k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.7k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 64, False: 30.7k]
  ------------------
  404|     64|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 64]
  |  Branch (404:32): [True: 64, False: 0]
  |  Branch (404:46): [True: 0, False: 64]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     64|            const auto cp_len =
  412|     64|                detail::code_point_length_by_starting_code_unit(ch);
  413|     64|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 64]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     64|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 64]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     64|            ++p;
  439|     64|            continue;
  440|     64|        }
  441|  30.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 64, False: 30.6k]
  ------------------
  442|     64|            handler.on_text(begin, p);
  443|     64|        }
  444|  30.7k|        ++p;  // Consume '%'
  445|  30.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.7k|        ch = *p;
  451|  30.7k|        ++p;
  452|       |
  453|  30.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.35k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.35k, False: 27.3k]
  ------------------
  463|  3.35k|                handler.on_full_year();
  464|  3.35k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.06k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.06k, False: 26.6k]
  ------------------
  479|  4.06k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.7k]
  ------------------
  480|  4.06k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.7k]
  ------------------
  481|  4.06k|                handler.on_month_name();
  482|  4.06k|                break;
  483|     36|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 36, False: 30.6k]
  ------------------
  484|     36|                handler.on_dec_month();
  485|     36|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     18|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 18, False: 30.7k]
  ------------------
  502|     18|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.7k]
  ------------------
  503|     18|                handler.on_day_of_month();
  504|     18|                break;
  505|       |            // Day of week
  506|  3.35k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.35k, False: 27.3k]
  ------------------
  507|  3.35k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.7k]
  ------------------
  508|  3.35k|                handler.on_weekday_name();
  509|  3.35k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     10|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 10, False: 30.7k]
  ------------------
  518|     10|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.7k]
  ------------------
  519|     10|                handler.on_24_hour();
  520|     10|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.35k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.35k, False: 27.3k]
  ------------------
  579|  3.35k|                handler.on_us_date();
  580|  3.35k|                break;
  581|  3.36k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.36k, False: 27.3k]
  ------------------
  582|  3.36k|                handler.on_iso_date();
  583|  3.36k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.62k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.62k, False: 21.1k]
  ------------------
  588|  9.62k|                handler.on_24_hour_time();
  589|  9.62k|                break;
  590|  3.55k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.55k, False: 27.1k]
  ------------------
  591|  3.55k|                handler.on_iso_time();
  592|  3.55k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.7k|        }
  704|  30.7k|        begin = p;
  705|       |
  706|  30.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.3k, False: 7.33k]
  ------------------
  707|  23.3k|            return p;
  708|  23.3k|        }
  709|  30.7k|    }
  710|  7.26k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.26k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.26k|    handler.verify();
  714|  7.26k|    return p;
  715|  30.6k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.71k|    {                                                                \
  769|  6.71k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.71k|        field##_set = 1;                                             \
  774|  6.71k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.07k|    {                                                                \
  769|  1.07k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.07k|        field##_set = 1;                                             \
  774|  1.07k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     74|    {                                                                \
  769|     74|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     74|        field##_set = 1;                                             \
  774|     74|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.90k|    {                                                                \
  769|  6.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.90k|        field##_set = 1;                                             \
  774|  6.90k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.87k|    {                                                                \
  769|  6.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.87k|        field##_set = 1;                                             \
  774|  6.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    230|    {                                                                \
  769|    230|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    230|        field##_set = 1;                                             \
  774|    230|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.26k|    {
  800|  7.26k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.52k, False: 748]
  |  Branch (800:27): [True: 0, False: 6.52k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.26k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.26k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.26k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 10, False: 7.25k]
  |  Branch (818:31): [True: 0, False: 10]
  |  Branch (818:46): [True: 0, False: 10]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.26k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.26k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.26k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.26k]
  |  Branch (829:26): [True: 20, False: 7.24k]
  |  Branch (829:38): [True: 0, False: 7.24k]
  ------------------
  830|  7.26k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 20]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.26k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  30.6k|{
  377|  30.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.6k]
  |  Branch (377:25): [True: 0, False: 30.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.6k|    auto p = begin;
  383|  30.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.6k]
  |  Branch (392:21): [True: 0, False: 30.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.7k, False: 7.26k]
  ------------------
  399|  30.7k|        auto ch = *p;
  400|  30.7k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.7k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.7k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 64, False: 30.7k]
  ------------------
  404|     64|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 64]
  |  Branch (404:32): [True: 64, False: 0]
  |  Branch (404:46): [True: 0, False: 64]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     64|            const auto cp_len =
  412|     64|                detail::code_point_length_by_starting_code_unit(ch);
  413|     64|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 64]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     64|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 64]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     64|            ++p;
  439|     64|            continue;
  440|     64|        }
  441|  30.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 64, False: 30.6k]
  ------------------
  442|     64|            handler.on_text(begin, p);
  443|     64|        }
  444|  30.7k|        ++p;  // Consume '%'
  445|  30.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.7k|        ch = *p;
  451|  30.7k|        ++p;
  452|       |
  453|  30.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.35k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.35k, False: 27.3k]
  ------------------
  463|  3.35k|                handler.on_full_year();
  464|  3.35k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.06k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.06k, False: 26.6k]
  ------------------
  479|  4.06k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.7k]
  ------------------
  480|  4.06k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.7k]
  ------------------
  481|  4.06k|                handler.on_month_name();
  482|  4.06k|                break;
  483|     36|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 36, False: 30.6k]
  ------------------
  484|     36|                handler.on_dec_month();
  485|     36|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     18|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 18, False: 30.7k]
  ------------------
  502|     18|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.7k]
  ------------------
  503|     18|                handler.on_day_of_month();
  504|     18|                break;
  505|       |            // Day of week
  506|  3.35k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.35k, False: 27.3k]
  ------------------
  507|  3.35k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.7k]
  ------------------
  508|  3.35k|                handler.on_weekday_name();
  509|  3.35k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     10|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 10, False: 30.7k]
  ------------------
  518|     10|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.7k]
  ------------------
  519|     10|                handler.on_24_hour();
  520|     10|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.35k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.35k, False: 27.3k]
  ------------------
  579|  3.35k|                handler.on_us_date();
  580|  3.35k|                break;
  581|  3.36k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.36k, False: 27.3k]
  ------------------
  582|  3.36k|                handler.on_iso_date();
  583|  3.36k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.62k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.62k, False: 21.1k]
  ------------------
  588|  9.62k|                handler.on_24_hour_time();
  589|  9.62k|                break;
  590|  3.55k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.55k, False: 27.1k]
  ------------------
  591|  3.55k|                handler.on_iso_time();
  592|  3.55k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.7k|        }
  704|  30.7k|        begin = p;
  705|       |
  706|  30.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.3k, False: 7.33k]
  ------------------
  707|  23.3k|            return p;
  708|  23.3k|        }
  709|  30.7k|    }
  710|  7.26k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.26k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.26k|    handler.verify();
  714|  7.26k|    return p;
  715|  30.6k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.71k|    {                                                                \
  769|  6.71k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.71k|        field##_set = 1;                                             \
  774|  6.71k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.07k|    {                                                                \
  769|  1.07k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.07k|        field##_set = 1;                                             \
  774|  1.07k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     74|    {                                                                \
  769|     74|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     74|        field##_set = 1;                                             \
  774|     74|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.90k|    {                                                                \
  769|  6.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.90k|        field##_set = 1;                                             \
  774|  6.90k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.87k|    {                                                                \
  769|  6.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.87k|        field##_set = 1;                                             \
  774|  6.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    230|    {                                                                \
  769|    230|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    230|        field##_set = 1;                                             \
  774|    230|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.26k|    {
  800|  7.26k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.52k, False: 748]
  |  Branch (800:27): [True: 0, False: 6.52k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.26k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.26k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.26k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 10, False: 7.25k]
  |  Branch (818:31): [True: 0, False: 10]
  |  Branch (818:46): [True: 0, False: 10]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.26k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.26k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.26k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.26k]
  |  Branch (829:26): [True: 20, False: 7.24k]
  |  Branch (829:38): [True: 0, False: 7.24k]
  ------------------
  830|  7.26k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 20]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.26k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  30.6k|{
  377|  30.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.6k]
  |  Branch (377:25): [True: 0, False: 30.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.6k|    auto p = begin;
  383|  30.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.6k]
  |  Branch (392:21): [True: 0, False: 30.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.7k, False: 7.26k]
  ------------------
  399|  30.7k|        auto ch = *p;
  400|  30.7k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.7k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.7k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 64, False: 30.7k]
  ------------------
  404|     64|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 64]
  |  Branch (404:32): [True: 64, False: 0]
  |  Branch (404:46): [True: 0, False: 64]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     64|            const auto cp_len =
  412|     64|                detail::code_point_length_by_starting_code_unit(ch);
  413|     64|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 64]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     64|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 64]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     64|            ++p;
  439|     64|            continue;
  440|     64|        }
  441|  30.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 64, False: 30.6k]
  ------------------
  442|     64|            handler.on_text(begin, p);
  443|     64|        }
  444|  30.7k|        ++p;  // Consume '%'
  445|  30.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.7k|        ch = *p;
  451|  30.7k|        ++p;
  452|       |
  453|  30.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.35k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.35k, False: 27.3k]
  ------------------
  463|  3.35k|                handler.on_full_year();
  464|  3.35k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.06k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.06k, False: 26.6k]
  ------------------
  479|  4.06k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.7k]
  ------------------
  480|  4.06k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.7k]
  ------------------
  481|  4.06k|                handler.on_month_name();
  482|  4.06k|                break;
  483|     36|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 36, False: 30.6k]
  ------------------
  484|     36|                handler.on_dec_month();
  485|     36|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     18|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 18, False: 30.7k]
  ------------------
  502|     18|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.7k]
  ------------------
  503|     18|                handler.on_day_of_month();
  504|     18|                break;
  505|       |            // Day of week
  506|  3.35k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.35k, False: 27.3k]
  ------------------
  507|  3.35k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.7k]
  ------------------
  508|  3.35k|                handler.on_weekday_name();
  509|  3.35k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     10|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 10, False: 30.7k]
  ------------------
  518|     10|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.7k]
  ------------------
  519|     10|                handler.on_24_hour();
  520|     10|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.35k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.35k, False: 27.3k]
  ------------------
  579|  3.35k|                handler.on_us_date();
  580|  3.35k|                break;
  581|  3.36k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.36k, False: 27.3k]
  ------------------
  582|  3.36k|                handler.on_iso_date();
  583|  3.36k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.62k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.62k, False: 21.1k]
  ------------------
  588|  9.62k|                handler.on_24_hour_time();
  589|  9.62k|                break;
  590|  3.55k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.55k, False: 27.1k]
  ------------------
  591|  3.55k|                handler.on_iso_time();
  592|  3.55k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.7k|        }
  704|  30.7k|        begin = p;
  705|       |
  706|  30.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.3k, False: 7.33k]
  ------------------
  707|  23.3k|            return p;
  708|  23.3k|        }
  709|  30.7k|    }
  710|  7.26k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.26k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.26k|    handler.verify();
  714|  7.26k|    return p;
  715|  30.6k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.71k|    {                                                                \
  769|  6.71k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.71k|        field##_set = 1;                                             \
  774|  6.71k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.07k|    {                                                                \
  769|  1.07k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.07k|        field##_set = 1;                                             \
  774|  1.07k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     74|    {                                                                \
  769|     74|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     74|        field##_set = 1;                                             \
  774|     74|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.90k|    {                                                                \
  769|  6.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.90k|        field##_set = 1;                                             \
  774|  6.90k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.87k|    {                                                                \
  769|  6.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.87k|        field##_set = 1;                                             \
  774|  6.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    230|    {                                                                \
  769|    230|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    230|        field##_set = 1;                                             \
  774|    230|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.26k|    {
  800|  7.26k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.52k, False: 748]
  |  Branch (800:27): [True: 0, False: 6.52k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.26k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.26k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.26k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 10, False: 7.25k]
  |  Branch (818:31): [True: 0, False: 10]
  |  Branch (818:46): [True: 0, False: 10]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.26k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.26k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.26k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.26k]
  |  Branch (829:26): [True: 20, False: 7.24k]
  |  Branch (829:38): [True: 0, False: 7.24k]
  ------------------
  830|  7.26k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 20]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.26k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  30.6k|{
  377|  30.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.6k]
  |  Branch (377:25): [True: 0, False: 30.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.6k|    auto p = begin;
  383|  30.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.6k]
  |  Branch (392:21): [True: 0, False: 30.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.7k, False: 7.26k]
  ------------------
  399|  30.7k|        auto ch = *p;
  400|  30.7k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.7k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.7k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 64, False: 30.7k]
  ------------------
  404|     64|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 64]
  |  Branch (404:32): [True: 64, False: 0]
  |  Branch (404:46): [True: 0, False: 64]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     64|            const auto cp_len =
  412|     64|                detail::code_point_length_by_starting_code_unit(ch);
  413|     64|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 64]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     64|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 64]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     64|            ++p;
  439|     64|            continue;
  440|     64|        }
  441|  30.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 64, False: 30.6k]
  ------------------
  442|     64|            handler.on_text(begin, p);
  443|     64|        }
  444|  30.7k|        ++p;  // Consume '%'
  445|  30.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.7k|        ch = *p;
  451|  30.7k|        ++p;
  452|       |
  453|  30.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.35k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.35k, False: 27.3k]
  ------------------
  463|  3.35k|                handler.on_full_year();
  464|  3.35k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.06k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.06k, False: 26.6k]
  ------------------
  479|  4.06k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.7k]
  ------------------
  480|  4.06k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.7k]
  ------------------
  481|  4.06k|                handler.on_month_name();
  482|  4.06k|                break;
  483|     36|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 36, False: 30.6k]
  ------------------
  484|     36|                handler.on_dec_month();
  485|     36|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     18|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 18, False: 30.7k]
  ------------------
  502|     18|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.7k]
  ------------------
  503|     18|                handler.on_day_of_month();
  504|     18|                break;
  505|       |            // Day of week
  506|  3.35k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.35k, False: 27.3k]
  ------------------
  507|  3.35k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.7k]
  ------------------
  508|  3.35k|                handler.on_weekday_name();
  509|  3.35k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     10|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 10, False: 30.7k]
  ------------------
  518|     10|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.7k]
  ------------------
  519|     10|                handler.on_24_hour();
  520|     10|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.35k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.35k, False: 27.3k]
  ------------------
  579|  3.35k|                handler.on_us_date();
  580|  3.35k|                break;
  581|  3.36k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.36k, False: 27.3k]
  ------------------
  582|  3.36k|                handler.on_iso_date();
  583|  3.36k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.62k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.62k, False: 21.1k]
  ------------------
  588|  9.62k|                handler.on_24_hour_time();
  589|  9.62k|                break;
  590|  3.55k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.55k, False: 27.1k]
  ------------------
  591|  3.55k|                handler.on_iso_time();
  592|  3.55k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.7k|        }
  704|  30.7k|        begin = p;
  705|       |
  706|  30.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.3k, False: 7.33k]
  ------------------
  707|  23.3k|            return p;
  708|  23.3k|        }
  709|  30.7k|    }
  710|  7.26k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.26k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.26k|    handler.verify();
  714|  7.26k|    return p;
  715|  30.6k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.71k|    {                                                                \
  769|  6.71k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.71k|        field##_set = 1;                                             \
  774|  6.71k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.07k|    {                                                                \
  769|  1.07k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.07k|        field##_set = 1;                                             \
  774|  1.07k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     74|    {                                                                \
  769|     74|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     74|        field##_set = 1;                                             \
  774|     74|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.90k|    {                                                                \
  769|  6.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.90k|        field##_set = 1;                                             \
  774|  6.90k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.87k|    {                                                                \
  769|  6.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.87k|        field##_set = 1;                                             \
  774|  6.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    230|    {                                                                \
  769|    230|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    230|        field##_set = 1;                                             \
  774|    230|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.26k|    {
  800|  7.26k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.52k, False: 748]
  |  Branch (800:27): [True: 0, False: 6.52k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.26k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.26k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.26k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 10, False: 7.25k]
  |  Branch (818:31): [True: 0, False: 10]
  |  Branch (818:46): [True: 0, False: 10]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.26k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.26k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.26k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.26k]
  |  Branch (829:26): [True: 20, False: 7.24k]
  |  Branch (829:38): [True: 0, False: 7.24k]
  ------------------
  830|  7.26k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 20]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.26k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  30.6k|{
  377|  30.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.6k]
  |  Branch (377:25): [True: 0, False: 30.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.6k|    auto p = begin;
  383|  30.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.6k]
  |  Branch (392:21): [True: 0, False: 30.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.7k, False: 7.26k]
  ------------------
  399|  30.7k|        auto ch = *p;
  400|  30.7k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.7k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.7k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 64, False: 30.7k]
  ------------------
  404|     64|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 64]
  |  Branch (404:32): [True: 64, False: 0]
  |  Branch (404:46): [True: 0, False: 64]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     64|            const auto cp_len =
  412|     64|                detail::code_point_length_by_starting_code_unit(ch);
  413|     64|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 64]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     64|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 64]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     64|            ++p;
  439|     64|            continue;
  440|     64|        }
  441|  30.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 64, False: 30.6k]
  ------------------
  442|     64|            handler.on_text(begin, p);
  443|     64|        }
  444|  30.7k|        ++p;  // Consume '%'
  445|  30.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.7k|        ch = *p;
  451|  30.7k|        ++p;
  452|       |
  453|  30.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.35k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.35k, False: 27.3k]
  ------------------
  463|  3.35k|                handler.on_full_year();
  464|  3.35k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.06k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.06k, False: 26.6k]
  ------------------
  479|  4.06k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.7k]
  ------------------
  480|  4.06k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.7k]
  ------------------
  481|  4.06k|                handler.on_month_name();
  482|  4.06k|                break;
  483|     36|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 36, False: 30.6k]
  ------------------
  484|     36|                handler.on_dec_month();
  485|     36|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     18|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 18, False: 30.7k]
  ------------------
  502|     18|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.7k]
  ------------------
  503|     18|                handler.on_day_of_month();
  504|     18|                break;
  505|       |            // Day of week
  506|  3.35k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.35k, False: 27.3k]
  ------------------
  507|  3.35k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.7k]
  ------------------
  508|  3.35k|                handler.on_weekday_name();
  509|  3.35k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     10|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 10, False: 30.7k]
  ------------------
  518|     10|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.7k]
  ------------------
  519|     10|                handler.on_24_hour();
  520|     10|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.35k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.35k, False: 27.3k]
  ------------------
  579|  3.35k|                handler.on_us_date();
  580|  3.35k|                break;
  581|  3.36k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.36k, False: 27.3k]
  ------------------
  582|  3.36k|                handler.on_iso_date();
  583|  3.36k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.62k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.62k, False: 21.1k]
  ------------------
  588|  9.62k|                handler.on_24_hour_time();
  589|  9.62k|                break;
  590|  3.55k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.55k, False: 27.1k]
  ------------------
  591|  3.55k|                handler.on_iso_time();
  592|  3.55k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.7k|        }
  704|  30.7k|        begin = p;
  705|       |
  706|  30.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.3k, False: 7.33k]
  ------------------
  707|  23.3k|            return p;
  708|  23.3k|        }
  709|  30.7k|    }
  710|  7.26k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.26k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.26k|    handler.verify();
  714|  7.26k|    return p;
  715|  30.6k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.71k|    {                                                                \
  769|  6.71k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.71k|        field##_set = 1;                                             \
  774|  6.71k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  3.35k|    {                                                                \
  769|  3.35k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.35k|        field##_set = 1;                                             \
  774|  3.35k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.07k|    {                                                                \
  769|  1.07k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.07k|        field##_set = 1;                                             \
  774|  1.07k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     74|    {                                                                \
  769|     74|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     74|        field##_set = 1;                                             \
  774|     74|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.90k|    {                                                                \
  769|  6.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.90k|        field##_set = 1;                                             \
  774|  6.90k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.87k|    {                                                                \
  769|  6.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.87k|        field##_set = 1;                                             \
  774|  6.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    230|    {                                                                \
  769|    230|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    230|        field##_set = 1;                                             \
  774|    230|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.26k|    {
  800|  7.26k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.52k, False: 748]
  |  Branch (800:27): [True: 0, False: 6.52k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.26k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.26k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.26k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 10, False: 7.25k]
  |  Branch (818:31): [True: 0, False: 10]
  |  Branch (818:46): [True: 0, False: 10]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.26k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.26k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.26k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.26k]
  |  Branch (829:26): [True: 20, False: 7.24k]
  |  Branch (829:38): [True: 0, False: 7.24k]
  ------------------
  830|  7.26k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 20]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.26k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  30.6k|{
  377|  30.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.6k]
  |  Branch (377:25): [True: 0, False: 30.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.6k|    auto p = begin;
  383|  30.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.6k]
  |  Branch (392:21): [True: 0, False: 30.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.7k, False: 7.26k]
  ------------------
  399|  30.7k|        auto ch = *p;
  400|  30.7k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.7k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.7k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 64, False: 30.7k]
  ------------------
  404|     64|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 64]
  |  Branch (404:32): [True: 64, False: 0]
  |  Branch (404:46): [True: 0, False: 64]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     64|            const auto cp_len =
  412|     64|                detail::code_point_length_by_starting_code_unit(ch);
  413|     64|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 64]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     64|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 64]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     64|            ++p;
  439|     64|            continue;
  440|     64|        }
  441|  30.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 64, False: 30.6k]
  ------------------
  442|     64|            handler.on_text(begin, p);
  443|     64|        }
  444|  30.7k|        ++p;  // Consume '%'
  445|  30.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.7k|        ch = *p;
  451|  30.7k|        ++p;
  452|       |
  453|  30.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.35k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.35k, False: 27.3k]
  ------------------
  463|  3.35k|                handler.on_full_year();
  464|  3.35k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.06k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.06k, False: 26.6k]
  ------------------
  479|  4.06k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.7k]
  ------------------
  480|  4.06k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.7k]
  ------------------
  481|  4.06k|                handler.on_month_name();
  482|  4.06k|                break;
  483|     36|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 36, False: 30.6k]
  ------------------
  484|     36|                handler.on_dec_month();
  485|     36|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     18|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 18, False: 30.7k]
  ------------------
  502|     18|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.7k]
  ------------------
  503|     18|                handler.on_day_of_month();
  504|     18|                break;
  505|       |            // Day of week
  506|  3.35k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.35k, False: 27.3k]
  ------------------
  507|  3.35k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.7k]
  ------------------
  508|  3.35k|                handler.on_weekday_name();
  509|  3.35k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     10|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 10, False: 30.7k]
  ------------------
  518|     10|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.7k]
  ------------------
  519|     10|                handler.on_24_hour();
  520|     10|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.35k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.35k, False: 27.3k]
  ------------------
  579|  3.35k|                handler.on_us_date();
  580|  3.35k|                break;
  581|  3.36k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.36k, False: 27.3k]
  ------------------
  582|  3.36k|                handler.on_iso_date();
  583|  3.36k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.62k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.62k, False: 21.1k]
  ------------------
  588|  9.62k|                handler.on_24_hour_time();
  589|  9.62k|                break;
  590|  3.55k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.55k, False: 27.1k]
  ------------------
  591|  3.55k|                handler.on_iso_time();
  592|  3.55k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.7k|        }
  704|  30.7k|        begin = p;
  705|       |
  706|  30.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.3k, False: 7.33k]
  ------------------
  707|  23.3k|            return p;
  708|  23.3k|        }
  709|  30.7k|    }
  710|  7.26k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.26k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.26k|    handler.verify();
  714|  7.26k|    return p;
  715|  30.6k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.71k|    {                                                                \
  769|  6.71k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.71k|        field##_set = 1;                                             \
  774|  6.71k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  3.35k|    {                                                                \
  769|  3.35k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.35k|        field##_set = 1;                                             \
  774|  3.35k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.07k|    {                                                                \
  769|  1.07k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.07k|        field##_set = 1;                                             \
  774|  1.07k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     74|    {                                                                \
  769|     74|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     74|        field##_set = 1;                                             \
  774|     74|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.90k|    {                                                                \
  769|  6.90k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.90k|        field##_set = 1;                                             \
  774|  6.90k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.87k|    {                                                                \
  769|  6.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.87k|        field##_set = 1;                                             \
  774|  6.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    230|    {                                                                \
  769|    230|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    230|        field##_set = 1;                                             \
  774|    230|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.26k|    {
  800|  7.26k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.52k, False: 748]
  |  Branch (800:27): [True: 0, False: 6.52k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.26k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.26k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.26k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 10, False: 7.25k]
  |  Branch (818:31): [True: 0, False: 10]
  |  Branch (818:46): [True: 0, False: 10]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.26k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.26k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.26k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.26k]
  |  Branch (829:26): [True: 20, False: 7.24k]
  |  Branch (829:38): [True: 0, False: 7.24k]
  ------------------
  830|  7.26k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 20]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.26k|    }

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4085|   907k|{
 4086|   907k|    if constexpr (sizeof(U) == 1) {
 4087|   907k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|       |    else {
 4093|       |        // utf-32
 4094|       |        static_assert(sizeof(U) == 4);
 4095|       |        SCN_UNUSED(ch);
 4096|       |        return 1;
 4097|       |    }
 4098|   907k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4049|   907k|{
 4050|   907k|    static_assert(sizeof(U8) == 1);
 4051|       |
 4052|   907k|    SCN_GCC_COMPAT_PUSH
 4053|   907k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4054|   907k|    constexpr char lengths[] =
 4055|   907k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4056|   907k|        "\1\1\1\1\1\1\1\1"
 4057|   907k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4058|       |                            // byte
 4059|   907k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4060|   907k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4061|   907k|        "\4";               // highest bits 11110 -> 4-byte cp
 4062|   907k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4063|   907k|    SCN_GCC_COMPAT_POP
 4064|   907k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|   422k|{
 4292|   422k|    if constexpr (sizeof(CharT) == 1) {
 4293|   422k|        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|       |    else {
 4299|       |        SCN_EXPECT(input.size() == 1);
 4300|       |        auto cp = static_cast<char32_t>(input.front());
 4301|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4302|       |            return invalid_code_point;
 4303|       |        }
 4304|       |        return cp;
 4305|       |    }
 4306|   422k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4104|   422k|{
 4105|   422k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1104|   422k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   422k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4106|       |
 4107|   422k|    const auto is_trailing_code_unit = [](char ch) {
 4108|   422k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|   422k|    };
 4110|       |
 4111|   422k|    if (input.size() == 1) {
  ------------------
  |  Branch (4111:9): [True: 412k, False: 10.5k]
  ------------------
 4112|   412k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4112:13): [True: 174, False: 412k]
  ------------------
 4113|    174|            SCN_UNLIKELY_ATTR
 4114|    174|            return invalid_code_point;
 4115|    174|        }
 4116|   412k|        return static_cast<char32_t>(input[0]);
 4117|   412k|    }
 4118|       |
 4119|  10.5k|    if (input.size() == 2) {
  ------------------
  |  Branch (4119:9): [True: 8.71k, False: 1.84k]
  ------------------
 4120|  8.71k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4120:13): [True: 102, False: 8.61k]
  ------------------
 4121|    102|            SCN_UNLIKELY_ATTR
 4122|    102|            return invalid_code_point;
 4123|    102|        }
 4124|  8.61k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4124:13): [True: 1.99k, False: 6.61k]
  ------------------
 4125|  1.99k|            SCN_UNLIKELY_ATTR
 4126|  1.99k|            return invalid_code_point;
 4127|  1.99k|        }
 4128|       |
 4129|  6.61k|        char32_t cp{};
 4130|  6.61k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4131|  6.61k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4132|  6.61k|        return cp;
 4133|  8.61k|    }
 4134|       |
 4135|  1.84k|    if (input.size() == 3) {
  ------------------
  |  Branch (4135:9): [True: 643, False: 1.19k]
  ------------------
 4136|    643|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4136:13): [True: 48, False: 595]
  ------------------
 4137|     48|            SCN_UNLIKELY_ATTR
 4138|     48|            return invalid_code_point;
 4139|     48|        }
 4140|    595|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4140:13): [True: 321, False: 274]
  ------------------
 4141|    595|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4141:13): [True: 151, False: 123]
  ------------------
 4142|    472|            SCN_UNLIKELY_ATTR
 4143|    472|            return invalid_code_point;
 4144|    472|        }
 4145|       |
 4146|    123|        char32_t cp{};
 4147|    123|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4148|    123|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4149|    123|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4150|    123|        return cp;
 4151|    595|    }
 4152|       |
 4153|  1.19k|    if (input.size() == 4) {
  ------------------
  |  Branch (4153:9): [True: 1.19k, False: 0]
  ------------------
 4154|  1.19k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4154:13): [True: 0, False: 1.19k]
  ------------------
 4155|      0|            SCN_UNLIKELY_ATTR
 4156|      0|            return invalid_code_point;
 4157|      0|        }
 4158|  1.19k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4158:13): [True: 375, False: 823]
  ------------------
 4159|    375|            SCN_UNLIKELY_ATTR
 4160|    375|            return invalid_code_point;
 4161|    375|        }
 4162|    823|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4162:13): [True: 436, False: 387]
  ------------------
 4163|    823|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4163:13): [True: 123, False: 264]
  ------------------
 4164|    823|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4164:13): [True: 129, False: 135]
  ------------------
 4165|    688|            SCN_UNLIKELY_ATTR
 4166|    688|            return invalid_code_point;
 4167|    688|        }
 4168|       |
 4169|    135|        char32_t cp{};
 4170|    135|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4171|    135|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4172|    135|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4173|    135|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4174|    135|        return cp;
 4175|    823|    }
 4176|       |
 4177|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4178|       |    // gcc 7 thinks we'll get here, even when we won't
 4179|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4180|      0|#endif
 4181|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4182|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4107|  10.9k|    const auto is_trailing_code_unit = [](char ch) {
 4108|  10.9k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  10.9k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|   317k|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|   317k|    else {
 3984|   317k|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|   317k|                                       to_address(first), to_address(last)))};
 3986|   317k|    }
 3987|   317k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   958k|{
  331|   958k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   958k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   958k|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  1.28M|{
  309|  1.28M|    return p;
  310|  1.28M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4008|   461k|{
 4009|       |    if constexpr (std::is_constructible_v<
 4010|       |                      typename std::basic_string_view<CharT>::iterator,
 4011|       |                      decltype(it)> &&
 4012|   461k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4013|   461k|        SCN_UNUSED(sv);
  ------------------
  |  | 1089|   461k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4014|   461k|        return it;
 4015|       |    }
 4016|       |    else {
 4017|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4018|       |    }
 4019|   461k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  39.0k|    {
 2883|  39.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  39.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  39.0k|    {
 2864|  39.0k|        return decay_copy(t.begin());
 2865|  39.0k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2107|   995k|{
 2108|   995k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   995k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   995k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   169k|    {
 2940|   169k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   169k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   169k|    {
 2922|   169k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   169k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9892|  13.6k|{
 9893|  13.6k|    auto result = make_scan_result<Source, Args...>();
 9894|  13.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  13.6k|                                   make_scan_args(result->values())));
 9896|  13.6k|    return result;
 9897|  13.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEEDav:
 9848|  28.0k|{
 9849|  28.0k|    return scan_result_type<Source, Args...>();
 9850|  28.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1565|  28.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  441|  28.0k|        : m_value(T{}), m_has_value(true)
  442|  28.0k|    {
  443|  28.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2Ev:
 6692|  28.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6535|  84.1k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3473|  84.1k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJ2tmEEC2Ev:
 6466|   126k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9833|  28.0k|{
 9834|  28.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.7k, False: 15.3k]
  |  |  ------------------
  ------------------
 9835|  12.7k|        out = unexpected(in.error());
 9836|  12.7k|    }
 9837|  15.3k|    else {
 9838|  15.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  15.3k|    static_cast<    \
  |  | 1109|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  15.3k|    }
 9840|  28.0k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1753|  84.1k|    {
 1754|  84.1k|        return has_value();
 1755|  84.1k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   168k|    {
  505|   168k|        return m_has_value;
  506|   168k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1759|  38.1k|    {
 1760|  38.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  38.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  38.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  38.1k|        return this->get_unexpected().error();
 1762|  38.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  38.1k|    {
  488|  38.1k|        return m_unexpected;
  489|  38.1k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  379|  3.59M|    {
  380|  3.59M|        return m_unexpected;
  381|  3.59M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  364|  1.88M|        : m_unexpected(std::forward<Err>(e))
  365|  1.88M|    {
  366|  1.88M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  1.88M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  1.88M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|  12.7k|        : base(unexpect, std::move(e.error())),
 1630|  12.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.7k|    {
 1632|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  464|  12.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  12.7k|          m_has_value(false)
  466|  12.7k|    {
  467|  12.7k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  373|  1.90M|        : m_unexpected(std::forward<Args>(args)...)
  374|  1.90M|    {
  375|  1.90M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  1.90M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  1.90M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.7k|    {
 1330|  12.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1570|  12.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  916|  12.7k|    {
  917|  12.7k|        assign_common(std::move(other));
  918|  12.7k|        return *this;
  919|  12.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  12.7k|    {
  964|  12.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 12.7k, False: 0]
  ------------------
  965|  12.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 12.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  12.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  12.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   112k|    {
  505|   112k|        return m_has_value;
  506|   112k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  58.7k|    {
  471|  58.7k|        return m_value;
  472|  58.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  12.7k|    {
 1060|  12.7k|        this->destroy_value();
 1061|  12.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  12.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  518|  12.7k|    {
  519|  12.7k|        scn::detail::construct_at(&get_unexpected(),
  520|  12.7k|                                  std::forward<Args>(args)...);
  521|  12.7k|        m_has_value = false;
  522|  12.7k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  410|   228k|{
  411|   228k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   228k|        T(std::forward<Args>(args)...);
  413|   228k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  12.7k|    {
  488|  12.7k|        return m_unexpected;
  489|  12.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  12.7k|    {
  496|  12.7k|        return std::move(m_unexpected);
  497|  12.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6566|  46.0k|    {
 6567|  46.0k|        m_range = std::forward<Other>(r);
 6568|  46.0k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|  46.0k|    {
 1809|  46.0k|        return value();
 1810|  46.0k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|  46.0k|    {
 1783|  46.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  46.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  46.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  46.0k|        return this->get_value();
 1785|  46.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  46.0k|    {
  471|  46.0k|        return m_value;
  472|  46.0k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9654|  40.8k|{
 9655|  40.8k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  40.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|  40.8k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|  40.8k|{
 9592|  40.8k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  40.8k|    auto result = vscan_impl(buffer, format, args);
 9595|  40.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.8k, False: 23.0k]
  |  |  ------------------
  ------------------
 9596|  17.8k|        return unexpected(result.error());
 9597|  17.8k|    }
 9598|  23.0k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  40.8k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5398|  84.1k|{
 5399|  84.1k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|  84.1k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|  84.1k|                  "\n"
 5403|  84.1k|                  "Unsupported range type given as input to a scanning "
 5404|  84.1k|                  "function.\n"
 5405|  84.1k|                  "A range needs to have a character type (value type) "
 5406|  84.1k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|  84.1k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|  84.1k|                  "to be included.\n"
 5409|  84.1k|                  "See the scnlib documentation for more details.");
 5410|  84.1k|    static_assert(
 5411|  84.1k|        !std::is_same_v<T, custom_char_traits>,
 5412|  84.1k|        "\n"
 5413|  84.1k|        "Unsupported range type given as input to a scanning "
 5414|  84.1k|        "function.\n"
 5415|  84.1k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|  84.1k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|  84.1k|        "not supported.");
 5418|  84.1k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|  84.1k|                  "\n"
 5420|  84.1k|                  "Unsupported range type given as input to a scanning "
 5421|  84.1k|                  "function.\n"
 5422|  84.1k|                  "file_marker_found cannot be used as an "
 5423|  84.1k|                  "source range type to scn::scan.\n"
 5424|  84.1k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|  84.1k|                  "and do not provide an explicit source range, "
 5426|  84.1k|                  "or use scn::scan with a FILE* directly.");
 5427|  84.1k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|  84.1k|                  "\n"
 5429|  84.1k|                  "Unsupported range type given as input to a scanning "
 5430|  84.1k|                  "function.\n"
 5431|  84.1k|                  "In order to be scannable, a range needs to satisfy "
 5432|  84.1k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|  84.1k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|  84.1k|                  "\n"
 5435|  84.1k|                  "Unsupported range type given as input to a scanning "
 5436|  84.1k|                  "function.\n"
 5437|  84.1k|                  "A range needs to model forward_range and have a valid "
 5438|  84.1k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|  84.1k|                  "Examples of scannable ranges are std::string, "
 5440|  84.1k|                  "std::string_view, "
 5441|  84.1k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|  84.1k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|  84.1k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|  84.1k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|  84.1k|{
 5338|  84.1k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|  84.1k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|  84.1k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  84.1k|    {
 3014|  84.1k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  84.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  84.1k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  84.1k|    {
 2995|  84.1k|        return t.data();
 2996|  84.1k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3396|  84.1k|    {
 3397|  84.1k|        return detail::to_address(ranges::begin(derived()));
 3398|  84.1k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   331k|{
  331|   331k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   331k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   130k|    {
 2883|   130k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   130k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   130k|    {
 2864|   130k|        return decay_copy(t.begin());
 2865|   130k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3493|  1.12M|    {
 3494|  1.12M|        return m_iterator;
 3495|  1.12M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3352|  84.1k|    {
 3353|  84.1k|        return static_cast<const D&>(*this);
 3354|  84.1k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|  84.1k|    {
 3089|  84.1k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  84.1k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|  84.1k|    {
 3055|  84.1k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  84.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  84.1k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2107|   706k|{
 2108|   706k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   706k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   706k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|   377k|    {
 3510|   377k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|   377k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1753|   579k|    {
 1754|   579k|        return has_value();
 1755|   579k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  504|  1.04M|    {
  505|  1.04M|        return m_has_value;
  506|  1.04M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1759|   228k|    {
 1760|   228k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   228k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   228k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   228k|        return this->get_unexpected().error();
 1762|   228k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   228k|    {
  488|   228k|        return m_unexpected;
  489|   228k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  38.1k|        : base(unexpect, std::move(e.error())),
 1630|  38.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  38.1k|    {
 1632|  38.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  38.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  38.1k|          m_has_value(false)
  466|  38.1k|    {
  467|  38.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  84.1k|    {
 1330|  84.1k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|  46.0k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  46.0k|                      ranges::iterator_t<SourceRange>>) {
 6799|  46.0k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  46.0k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   374k|    {
 2883|   374k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   374k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   374k|    {
 2864|   374k|        return decay_copy(t.begin());
 2865|   374k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6783|  46.0k|{
 6784|  46.0k|    return ranges::end(source);
 6785|  46.0k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   119k|    {
 2940|   119k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   119k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   119k|    {
 2922|   119k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   119k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3497|   855k|    {
 3498|   855k|        return m_sentinel;
 3499|   855k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1808|   235k|    {
 1809|   235k|        return value();
 1810|   235k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1782|   235k|    {
 1783|   235k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   235k|        return this->get_value();
 1785|   235k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  470|   235k|    {
  471|   235k|        return m_value;
  472|   235k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  46.0k|        : base(std::in_place, std::forward<U>(val)),
 1584|  46.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  46.0k|    {
 1586|  46.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|  46.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  46.0k|    {
  457|  46.0k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8854|  27.2k|    {
 8855|  27.2k|        return m_str;
 8856|  27.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  59.8k|{
 6196|  59.8k|    detail::check_scan_arg_types<Args...>();
 6197|  59.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  59.8k|}
_ZN3scn2v46detail20check_scan_arg_typesIJ2tmEEEbv:
 5910|   126k|{
 5911|   126k|    constexpr bool default_constructible_constraint =
 5912|   126k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   126k|    static_assert(default_constructible_constraint,
 5914|   126k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   126k|    constexpr bool destructible_constraint =
 5917|   126k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   126k|    static_assert(destructible_constraint,
 5919|   126k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   126k|    constexpr bool non_reference_constraint =
 5922|   126k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   126k|    static_assert(non_reference_constraint,
 5924|   126k|                  "Scan argument types must not be references");
 5925|       |
 5926|   126k|    constexpr bool movable_constraint =
 5927|   126k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   126k|    static_assert(movable_constraint,
 5929|   126k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   126k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   126k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   126k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  59.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  59.8k|    {
 6173|  59.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6180|  59.8k|    {
 6181|  59.8k|        return {detail::make_arg<
 6182|  59.8k|            kind, Context,
 6183|  59.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  59.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  59.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE29E2tmvEENS1_9arg_valueERT2_:
 5969|  59.8k|{
 5970|  59.8k|    return make_value<Context>(value);
 5971|  59.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEEDaRT0_:
 5895|  61.5k|{
 5896|  61.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|       |                                  needs_context_tag>) {
 5900|       |        return make_value_impl<T>(SCN_FWD(arg));
 5901|       |    }
 5902|  61.5k|    else {
 5903|  61.5k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|  61.5k|            value, context_tag<Context>{}));
 5905|  61.5k|    }
 5906|  61.5k|}
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5795|  61.5k|    {
 5796|  61.5k|        return {};
 5797|  61.5k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5864|  61.5k|{
 5865|  61.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  61.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  61.5k|    constexpr bool scannable_char =
 5869|  61.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  61.5k|    static_assert(scannable_char,
 5871|  61.5k|                  "Cannot scan an argument of an unsupported character "
 5872|  61.5k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  61.5k|    constexpr bool scannable_const =
 5875|  61.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  61.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  61.5k|    constexpr bool scannable_disabled =
 5879|  61.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  61.5k|    static_assert(scannable_disabled,
 5881|  61.5k|                  "Cannot scan an argument that has been disabled by "
 5882|  61.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  61.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  61.5k|    static_assert(
 5886|  61.5k|        scannable,
 5887|  61.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  61.5k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  61.5k|    return arg_value{arg};
 5891|  61.5k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5651|  61.5k|        : custom_value{static_cast<void*>(&val.val),
 5652|  61.5k|                       scan_custom_arg<T, Context>}
 5653|  61.5k|    {
 5654|  61.5k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5669|  61.5k|    {
 5670|  61.5k|        static_assert(!is_type_disabled<T>,
 5671|  61.5k|                      "Scanning of custom types is disabled by "
 5672|  61.5k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5673|  61.5k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1104|  61.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  61.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5674|       |
 5675|  61.5k|        using context_type = Context;
 5676|  61.5k|        using parse_context_type = typename context_type::parse_context_type;
 5677|  61.5k|        using scanner_type = typename context_type::template scanner_type<T>;
 5678|       |
 5679|  61.5k|        auto s = scanner_type{};
 5680|       |
 5681|  61.5k|        auto& arg_ref = *static_cast<T*>(arg);
 5682|  61.5k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5683|  61.5k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5684|       |
 5685|  61.5k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3948|  61.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.69k, False: 59.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.69k|    }
  ------------------
 5686|  59.8k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3958|  59.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  59.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  59.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  59.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.7k, False: 36.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.7k|    }                                                  \
  |  |  |  | 3957|  59.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  36.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5687|  36.0k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  36.0k|    static_cast<    \
  |  | 1109|  36.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5688|       |
 5689|  36.0k|        return {};
 5690|  59.8k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5602|  61.5k|{
 5603|  61.5k|#if SCN_HAS_EXCEPTIONS
 5604|  61.5k|    auto fmt_it = pctx.begin();
 5605|  61.5k|    try {
 5606|  61.5k|        fmt_it = s.parse(pctx);
 5607|  61.5k|    }
 5608|  61.5k|    catch (const detail::scan_format_string_error_base& ex) {
 5609|       |        // scan_error takes a const char*.
 5610|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5611|       |        // stores a reference-counted string,
 5612|       |        // that will go out of scope here.
 5613|       |        // We need to provide a const char* that will stay in scope.
 5614|       |        // If scan_format_string_error was thrown with a string literal,
 5615|       |        // use that, otherwise refer to a thread_local std::string
 5616|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5616:25): [True: 0, False: 0]
  ------------------
 5617|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5618|      0|        }
 5619|      0|        thread_local std::string err_msg{};
 5620|      0|        err_msg = ex.what();
 5621|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                     err_msg.c_str());
 5623|      0|    }
 5624|       |#else
 5625|       |    auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  61.5k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.69k, False: 59.8k]
  |  |  ------------------
  ------------------
 5628|  1.69k|        return e;
 5629|  1.69k|    }
 5630|  59.8k|    pctx.advance_to(fmt_it);
 5631|  59.8k|    return {};
 5632|  61.5k|}
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6380|   907k|    {
 6381|   907k|        return m_format.data();
 6382|   907k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE3endEv:
 6385|   184k|    {
 6386|   184k|        return m_format.data() + m_format.size();
 6387|   184k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6426|  5.08k|    {
 6427|  5.08k|        m_error = unexpected(detail::handle_error(
 6428|  5.08k|            scan_error{scan_error::invalid_format_string, msg}));
 6429|  5.08k|        return m_error.error();
 6430|  5.08k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3758|   890k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3759|   890k|    {
 3760|   890k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|   890k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3761|   890k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  364|  15.2k|        : m_unexpected(std::forward<Err>(e))
  365|  15.2k|    {
  366|  15.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  15.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  15.2k|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  586|  5.43M|    {
  587|  5.43M|        return m_has_value;
  588|  5.43M|    }
_ZN3scn2v46detail11is_cp_spaceEDi:
 4325|   564k|{
 4326|       |    // Pattern_White_Space property
 4327|   564k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4327:13): [True: 484k, False: 79.5k]
  |  Branch (4327:27): [True: 7.57k, False: 477k]
  ------------------
 4328|   564k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4328:12): [True: 255k, False: 300k]
  ------------------
 4329|   564k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4329:12): [True: 7.27k, False: 293k]
  ------------------
 4330|   564k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4330:12): [True: 660, False: 292k]
  ------------------
 4331|   564k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4331:12): [True: 1.09k, False: 291k]
  ------------------
 4332|   564k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4332:12): [True: 288, False: 291k]
  ------------------
 4333|   564k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4333:12): [True: 0, False: 291k]
  ------------------
 4334|   564k|}
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   342k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   342k|    else {
 3999|   342k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   342k|    }
 4001|   342k|}
_ZN3scn2v424basic_scan_parse_contextIcE9get_errorEv:
 6433|   184k|    {
 6434|   184k|        return m_error;
 6435|   184k|    }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6391|   358k|    {
 6392|   358k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   358k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1753|  3.87M|    {
 1754|  3.87M|        return has_value();
 1755|  3.87M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1759|   682k|    {
 1760|   682k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   682k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   682k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   682k|        return this->get_unexpected().error();
 1762|   682k|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  569|   682k|    {
  570|   682k|        return m_unexpected;
  571|   682k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   667k|        : base(unexpect, std::move(e.error())),
 1630|   667k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   667k|    {
 1632|   667k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  563|   667k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  564|   667k|          m_has_value(false)
  565|   667k|    {
  566|   667k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   667k|    {
 1330|   667k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|   459k|    {
 1754|   459k|        return has_value();
 1755|   459k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|   918k|    {
  505|   918k|        return m_has_value;
  506|   918k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|   146k|    {
 1760|   146k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   146k|        return this->get_unexpected().error();
 1762|   146k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   146k|    {
  488|   146k|        return m_unexpected;
  489|   146k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   204k|    {
 1819|   204k|        return std::move(value());
 1820|   204k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   312k|    {
 1783|   312k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   312k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   312k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   312k|        return this->get_value();
 1785|   312k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|   312k|    {
  471|   312k|        return m_value;
  472|   312k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9057|   266k|    {
 9058|   266k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   266k|    static_cast<    \
  |  | 1109|   266k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   266k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1565|  1.99M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  543|  1.99M|        : m_deferred_init(), m_has_value(true)
  544|  1.99M|    {
  545|  1.99M|    }
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5803|  61.5k|    {
 5804|  61.5k|        return {val};
 5805|  61.5k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE6valuesEv:
 6475|   121k|    {
 6476|   121k|        return m_values;
 6477|   121k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  59.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  59.8k|    {
 6223|  59.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKNS3_9arg_valueE:
 6278|   179k|        : m_desc(desc), m_values(data)
 6279|   179k|    {
 6280|   179k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|   621k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   621k|    static_cast<    \
  |  | 1109|   621k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   621k|    static_cast<    \
  |  | 1109|   621k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   621k|    {
 3480|   621k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8531|   179k|{
 8532|   179k|    return s;
 8533|   179k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8508|   179k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  27.2k|        : m_str(r.str)
 8850|  27.2k|    {
 8851|  27.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1753|  28.0k|    {
 1754|  28.0k|        return has_value();
 1755|  28.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1828|  58.7k|    {
 1829|  58.7k|        return &value();
 1830|  58.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1782|  58.7k|    {
 1783|  58.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  58.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  58.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  58.7k|        return this->get_value();
 1785|  58.7k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6555|  46.0k|    {
 6556|  46.0k|        return ranges::begin(m_range);
 6557|  46.0k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9961|  13.6k|{
 9962|  13.6k|    auto result = make_scan_result<Source, Args...>();
 9963|  13.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  13.6k|                                   make_scan_args(result->values())));
 9965|  13.6k|    return result;
 9966|  13.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9672|  40.8k|{
 9673|  40.8k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  40.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|  40.8k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|  40.8k|{
 9608|  40.8k|#if !SCN_DISABLE_LOCALE
 9609|  40.8k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  40.8k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  40.8k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  40.8k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  40.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.8k, False: 23.0k]
  |  |  ------------------
  ------------------
 9616|  17.8k|        return unexpected(result.error());
 9617|  17.8k|    }
 9618|  23.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  40.8k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
10002|    848|{
10003|    848|    auto result = make_scan_result<Source, T>();
10004|    848|    fill_scan_result(
10005|    848|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|    848|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|    848|                            detail::make_arg<scan_context>(result->value())));
10007|    848|    return result;
10008|    848|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9685|  2.54k|{
 9686|  2.54k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  2.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  2.54k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  2.54k|{
 9632|  2.54k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  2.54k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  2.54k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  2.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.54k, False: 0]
  |  |  ------------------
  ------------------
 9636|  2.54k|        return unexpected(result.error());
 9637|  2.54k|    }
 9638|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  2.54k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5945|  1.69k|{
 5946|  1.69k|    check_scan_arg_types<T>();
 5947|       |
 5948|  1.69k|    basic_scan_arg<Context> arg;
 5949|  1.69k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  1.69k|    arg.m_value = make_value<Context>(value);
 5951|  1.69k|    return arg;
 5952|  1.69k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6040|   184k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5641|   380k|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  5.08k|    {
 6498|  5.08k|        return std::get<0>(m_values);
 6499|  5.08k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9892|  13.6k|{
 9893|  13.6k|    auto result = make_scan_result<Source, Args...>();
 9894|  13.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  13.6k|                                   make_scan_args(result->values())));
 9896|  13.6k|    return result;
 9897|  13.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEEDav:
 9848|  28.0k|{
 9849|  28.0k|    return scan_result_type<Source, Args...>();
 9850|  28.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1565|  28.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  626|  28.0k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  28.0k|    {
  628|  28.0k|        construct();
  629|  28.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  28.0k|    {
  709|  28.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  28.0k|        m_has_value = true;
  711|  28.0k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  410|  28.0k|{
  411|  28.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  28.0k|        T(std::forward<Args>(args)...);
  413|  28.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6692|  28.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEEC2Ev:
 6466|   126k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   114k|    {
  733|   114k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   114k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   114k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9833|  28.0k|{
 9834|  28.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.7k, False: 15.3k]
  |  |  ------------------
  ------------------
 9835|  12.7k|        out = unexpected(in.error());
 9836|  12.7k|    }
 9837|  15.3k|    else {
 9838|  15.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  15.3k|    static_cast<    \
  |  | 1109|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  15.3k|    }
 9840|  28.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|  12.7k|        : base(unexpect, std::move(e.error())),
 1630|  12.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.7k|    {
 1632|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  651|  12.7k|        : m_has_value(false)
  652|  12.7k|    {
  653|  12.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  715|  12.7k|    {
  716|  12.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.7k|                                  std::forward<Args>(args)...);
  718|  12.7k|        m_has_value = false;
  719|  12.7k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  410|   152k|{
  411|   152k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   152k|        T(std::forward<Args>(args)...);
  413|   152k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  63.6k|    {
  745|  63.6k|        return reinterpret_cast<unexpected<E>*>(
  746|  63.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  63.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  63.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.7k|    {
 1330|  12.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1570|  12.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  916|  12.7k|    {
  917|  12.7k|        assign_common(std::move(other));
  918|  12.7k|        return *this;
  919|  12.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  12.7k|    {
  964|  12.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 12.7k, False: 0]
  ------------------
  965|  12.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 12.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  12.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  12.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   153k|    {
  702|   153k|        return m_has_value;
  703|   153k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  58.7k|    {
  668|  58.7k|        return *value_ptr();
  669|  58.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  12.7k|    {
 1060|  12.7k|        this->destroy_value();
 1061|  12.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  28.0k|    {
  723|  28.0k|        scn::detail::destroy_at(value_ptr());
  724|  28.0k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  416|  28.0k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  28.0k|    else {
  423|  28.0k|        p->~T();
  424|  28.0k|    }
  425|  28.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEED2Ev:
 6699|  28.0k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  715|  12.7k|    {
  716|  12.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.7k|                                  std::forward<Args>(args)...);
  718|  12.7k|        m_has_value = false;
  719|  12.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  12.7k|    {
  693|  12.7k|        return std::move(*unexpected_ptr());
  694|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  25.4k|    {
  727|  25.4k|        scn::detail::destroy_at(unexpected_ptr());
  728|  25.4k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  416|   305k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|   305k|    else {
  423|   305k|        p->~T();
  424|   305k|    }
  425|   305k|}
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8854|  27.2k|    {
 8855|  27.2k|        return m_str;
 8856|  27.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  59.8k|{
 6196|  59.8k|    detail::check_scan_arg_types<Args...>();
 6197|  59.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  59.8k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_10tm_with_tzEEEEbv:
 5910|   126k|{
 5911|   126k|    constexpr bool default_constructible_constraint =
 5912|   126k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   126k|    static_assert(default_constructible_constraint,
 5914|   126k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   126k|    constexpr bool destructible_constraint =
 5917|   126k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   126k|    static_assert(destructible_constraint,
 5919|   126k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   126k|    constexpr bool non_reference_constraint =
 5922|   126k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   126k|    static_assert(non_reference_constraint,
 5924|   126k|                  "Scan argument types must not be references");
 5925|       |
 5926|   126k|    constexpr bool movable_constraint =
 5927|   126k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   126k|    static_assert(movable_constraint,
 5929|   126k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   126k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   126k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   126k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  59.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  59.8k|    {
 6173|  59.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6180|  59.8k|    {
 6181|  59.8k|        return {detail::make_arg<
 6182|  59.8k|            kind, Context,
 6183|  59.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  59.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  59.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE29ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5969|  59.8k|{
 5970|  59.8k|    return make_value<Context>(value);
 5971|  59.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEEDaRT0_:
 5895|  61.5k|{
 5896|  61.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|       |                                  needs_context_tag>) {
 5900|       |        return make_value_impl<T>(SCN_FWD(arg));
 5901|       |    }
 5902|  61.5k|    else {
 5903|  61.5k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|  61.5k|            value, context_tag<Context>{}));
 5905|  61.5k|    }
 5906|  61.5k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5795|  61.5k|    {
 5796|  61.5k|        return {};
 5797|  61.5k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5864|  61.5k|{
 5865|  61.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  61.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  61.5k|    constexpr bool scannable_char =
 5869|  61.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  61.5k|    static_assert(scannable_char,
 5871|  61.5k|                  "Cannot scan an argument of an unsupported character "
 5872|  61.5k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  61.5k|    constexpr bool scannable_const =
 5875|  61.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  61.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  61.5k|    constexpr bool scannable_disabled =
 5879|  61.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  61.5k|    static_assert(scannable_disabled,
 5881|  61.5k|                  "Cannot scan an argument that has been disabled by "
 5882|  61.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  61.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  61.5k|    static_assert(
 5886|  61.5k|        scannable,
 5887|  61.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  61.5k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  61.5k|    return arg_value{arg};
 5891|  61.5k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5651|  61.5k|        : custom_value{static_cast<void*>(&val.val),
 5652|  61.5k|                       scan_custom_arg<T, Context>}
 5653|  61.5k|    {
 5654|  61.5k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5669|  61.5k|    {
 5670|  61.5k|        static_assert(!is_type_disabled<T>,
 5671|  61.5k|                      "Scanning of custom types is disabled by "
 5672|  61.5k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5673|  61.5k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1104|  61.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  61.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5674|       |
 5675|  61.5k|        using context_type = Context;
 5676|  61.5k|        using parse_context_type = typename context_type::parse_context_type;
 5677|  61.5k|        using scanner_type = typename context_type::template scanner_type<T>;
 5678|       |
 5679|  61.5k|        auto s = scanner_type{};
 5680|       |
 5681|  61.5k|        auto& arg_ref = *static_cast<T*>(arg);
 5682|  61.5k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5683|  61.5k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5684|       |
 5685|  61.5k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3948|  61.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.69k, False: 59.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.69k|    }
  ------------------
 5686|  59.8k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3958|  59.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  59.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  59.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  59.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.7k, False: 36.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.7k|    }                                                  \
  |  |  |  | 3957|  59.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  36.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5687|  36.0k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  36.0k|    static_cast<    \
  |  | 1109|  36.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5688|       |
 5689|  36.0k|        return {};
 5690|  59.8k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5602|  61.5k|{
 5603|  61.5k|#if SCN_HAS_EXCEPTIONS
 5604|  61.5k|    auto fmt_it = pctx.begin();
 5605|  61.5k|    try {
 5606|  61.5k|        fmt_it = s.parse(pctx);
 5607|  61.5k|    }
 5608|  61.5k|    catch (const detail::scan_format_string_error_base& ex) {
 5609|       |        // scan_error takes a const char*.
 5610|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5611|       |        // stores a reference-counted string,
 5612|       |        // that will go out of scope here.
 5613|       |        // We need to provide a const char* that will stay in scope.
 5614|       |        // If scan_format_string_error was thrown with a string literal,
 5615|       |        // use that, otherwise refer to a thread_local std::string
 5616|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5616:25): [True: 0, False: 0]
  ------------------
 5617|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5618|      0|        }
 5619|      0|        thread_local std::string err_msg{};
 5620|      0|        err_msg = ex.what();
 5621|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                     err_msg.c_str());
 5623|      0|    }
 5624|       |#else
 5625|       |    auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  61.5k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.69k, False: 59.8k]
  |  |  ------------------
  ------------------
 5628|  1.69k|        return e;
 5629|  1.69k|    }
 5630|  59.8k|    pctx.advance_to(fmt_it);
 5631|  59.8k|    return {};
 5632|  61.5k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5803|  61.5k|    {
 5804|  61.5k|        return {val};
 5805|  61.5k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE6valuesEv:
 6475|   121k|    {
 6476|   121k|        return m_values;
 6477|   121k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  59.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  59.8k|    {
 6223|  59.8k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  27.2k|        : m_str(r.str)
 8850|  27.2k|    {
 8851|  27.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1753|  28.0k|    {
 1754|  28.0k|        return has_value();
 1755|  28.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1828|  58.7k|    {
 1829|  58.7k|        return &value();
 1830|  58.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1782|  58.7k|    {
 1783|  58.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  58.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  58.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  58.7k|        return this->get_value();
 1785|  58.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  657|  40.7k|    {
  658|  40.7k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 15.3k, False: 25.4k]
  ------------------
  659|  15.3k|            destroy_value();
  660|  15.3k|        }
  661|  25.4k|        else {
  662|  25.4k|            destroy_unexpected();
  663|  25.4k|        }
  664|  40.7k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9961|  13.6k|{
 9962|  13.6k|    auto result = make_scan_result<Source, Args...>();
 9963|  13.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  13.6k|                                   make_scan_args(result->values())));
 9965|  13.6k|    return result;
 9966|  13.6k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
10002|    848|{
10003|    848|    auto result = make_scan_result<Source, T>();
10004|    848|    fill_scan_result(
10005|    848|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|    848|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|    848|                            detail::make_arg<scan_context>(result->value())));
10007|    848|    return result;
10008|    848|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5945|  1.69k|{
 5946|  1.69k|    check_scan_arg_types<T>();
 5947|       |
 5948|  1.69k|    basic_scan_arg<Context> arg;
 5949|  1.69k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  1.69k|    arg.m_value = make_value<Context>(value);
 5951|  1.69k|    return arg;
 5952|  1.69k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  5.08k|    {
 6498|  5.08k|        return std::get<0>(m_values);
 6499|  5.08k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9892|  13.6k|{
 9893|  13.6k|    auto result = make_scan_result<Source, Args...>();
 9894|  13.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  13.6k|                                   make_scan_args(result->values())));
 9896|  13.6k|    return result;
 9897|  13.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEEDav:
 9848|  28.0k|{
 9849|  28.0k|    return scan_result_type<Source, Args...>();
 9850|  28.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1565|  28.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  626|  28.0k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  28.0k|    {
  628|  28.0k|        construct();
  629|  28.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  28.0k|    {
  709|  28.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  28.0k|        m_has_value = true;
  711|  28.0k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  410|  28.0k|{
  411|  28.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  28.0k|        T(std::forward<Args>(args)...);
  413|  28.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6692|  28.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEEC2Ev:
 6466|   126k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   114k|    {
  733|   114k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   114k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   114k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9833|  28.0k|{
 9834|  28.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.7k, False: 15.3k]
  |  |  ------------------
  ------------------
 9835|  12.7k|        out = unexpected(in.error());
 9836|  12.7k|    }
 9837|  15.3k|    else {
 9838|  15.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  15.3k|    static_cast<    \
  |  | 1109|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  15.3k|    }
 9840|  28.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|  12.7k|        : base(unexpect, std::move(e.error())),
 1630|  12.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.7k|    {
 1632|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  651|  12.7k|        : m_has_value(false)
  652|  12.7k|    {
  653|  12.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  715|  12.7k|    {
  716|  12.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.7k|                                  std::forward<Args>(args)...);
  718|  12.7k|        m_has_value = false;
  719|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  63.6k|    {
  745|  63.6k|        return reinterpret_cast<unexpected<E>*>(
  746|  63.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  63.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  63.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.7k|    {
 1330|  12.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1570|  12.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  916|  12.7k|    {
  917|  12.7k|        assign_common(std::move(other));
  918|  12.7k|        return *this;
  919|  12.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  12.7k|    {
  964|  12.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 12.7k, False: 0]
  ------------------
  965|  12.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 12.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  12.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  12.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   153k|    {
  702|   153k|        return m_has_value;
  703|   153k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  58.7k|    {
  668|  58.7k|        return *value_ptr();
  669|  58.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  12.7k|    {
 1060|  12.7k|        this->destroy_value();
 1061|  12.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  28.0k|    {
  723|  28.0k|        scn::detail::destroy_at(value_ptr());
  724|  28.0k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  416|  28.0k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  28.0k|    else {
  423|  28.0k|        p->~T();
  424|  28.0k|    }
  425|  28.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEED2Ev:
 6699|  28.0k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  715|  12.7k|    {
  716|  12.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.7k|                                  std::forward<Args>(args)...);
  718|  12.7k|        m_has_value = false;
  719|  12.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  12.7k|    {
  693|  12.7k|        return std::move(*unexpected_ptr());
  694|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  25.4k|    {
  727|  25.4k|        scn::detail::destroy_at(unexpected_ptr());
  728|  25.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8854|  27.2k|    {
 8855|  27.2k|        return m_str;
 8856|  27.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  59.8k|{
 6196|  59.8k|    detail::check_scan_arg_types<Args...>();
 6197|  59.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  59.8k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_19datetime_componentsEEEEbv:
 5910|   126k|{
 5911|   126k|    constexpr bool default_constructible_constraint =
 5912|   126k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   126k|    static_assert(default_constructible_constraint,
 5914|   126k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   126k|    constexpr bool destructible_constraint =
 5917|   126k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   126k|    static_assert(destructible_constraint,
 5919|   126k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   126k|    constexpr bool non_reference_constraint =
 5922|   126k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   126k|    static_assert(non_reference_constraint,
 5924|   126k|                  "Scan argument types must not be references");
 5925|       |
 5926|   126k|    constexpr bool movable_constraint =
 5927|   126k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   126k|    static_assert(movable_constraint,
 5929|   126k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   126k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   126k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   126k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  59.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  59.8k|    {
 6173|  59.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6180|  59.8k|    {
 6181|  59.8k|        return {detail::make_arg<
 6182|  59.8k|            kind, Context,
 6183|  59.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  59.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  59.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE29ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5969|  59.8k|{
 5970|  59.8k|    return make_value<Context>(value);
 5971|  59.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEEDaRT0_:
 5895|  61.5k|{
 5896|  61.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|       |                                  needs_context_tag>) {
 5900|       |        return make_value_impl<T>(SCN_FWD(arg));
 5901|       |    }
 5902|  61.5k|    else {
 5903|  61.5k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|  61.5k|            value, context_tag<Context>{}));
 5905|  61.5k|    }
 5906|  61.5k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5795|  61.5k|    {
 5796|  61.5k|        return {};
 5797|  61.5k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5864|  61.5k|{
 5865|  61.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  61.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  61.5k|    constexpr bool scannable_char =
 5869|  61.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  61.5k|    static_assert(scannable_char,
 5871|  61.5k|                  "Cannot scan an argument of an unsupported character "
 5872|  61.5k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  61.5k|    constexpr bool scannable_const =
 5875|  61.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  61.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  61.5k|    constexpr bool scannable_disabled =
 5879|  61.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  61.5k|    static_assert(scannable_disabled,
 5881|  61.5k|                  "Cannot scan an argument that has been disabled by "
 5882|  61.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  61.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  61.5k|    static_assert(
 5886|  61.5k|        scannable,
 5887|  61.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  61.5k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  61.5k|    return arg_value{arg};
 5891|  61.5k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5651|  61.5k|        : custom_value{static_cast<void*>(&val.val),
 5652|  61.5k|                       scan_custom_arg<T, Context>}
 5653|  61.5k|    {
 5654|  61.5k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5669|  61.5k|    {
 5670|  61.5k|        static_assert(!is_type_disabled<T>,
 5671|  61.5k|                      "Scanning of custom types is disabled by "
 5672|  61.5k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5673|  61.5k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1104|  61.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  61.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5674|       |
 5675|  61.5k|        using context_type = Context;
 5676|  61.5k|        using parse_context_type = typename context_type::parse_context_type;
 5677|  61.5k|        using scanner_type = typename context_type::template scanner_type<T>;
 5678|       |
 5679|  61.5k|        auto s = scanner_type{};
 5680|       |
 5681|  61.5k|        auto& arg_ref = *static_cast<T*>(arg);
 5682|  61.5k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5683|  61.5k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5684|       |
 5685|  61.5k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3948|  61.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.69k, False: 59.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.69k|    }
  ------------------
 5686|  59.8k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3958|  59.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  59.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  59.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  59.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.7k, False: 36.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.7k|    }                                                  \
  |  |  |  | 3957|  59.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  36.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5687|  36.0k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  36.0k|    static_cast<    \
  |  | 1109|  36.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5688|       |
 5689|  36.0k|        return {};
 5690|  59.8k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5602|  61.5k|{
 5603|  61.5k|#if SCN_HAS_EXCEPTIONS
 5604|  61.5k|    auto fmt_it = pctx.begin();
 5605|  61.5k|    try {
 5606|  61.5k|        fmt_it = s.parse(pctx);
 5607|  61.5k|    }
 5608|  61.5k|    catch (const detail::scan_format_string_error_base& ex) {
 5609|       |        // scan_error takes a const char*.
 5610|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5611|       |        // stores a reference-counted string,
 5612|       |        // that will go out of scope here.
 5613|       |        // We need to provide a const char* that will stay in scope.
 5614|       |        // If scan_format_string_error was thrown with a string literal,
 5615|       |        // use that, otherwise refer to a thread_local std::string
 5616|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5616:25): [True: 0, False: 0]
  ------------------
 5617|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5618|      0|        }
 5619|      0|        thread_local std::string err_msg{};
 5620|      0|        err_msg = ex.what();
 5621|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                     err_msg.c_str());
 5623|      0|    }
 5624|       |#else
 5625|       |    auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  61.5k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.69k, False: 59.8k]
  |  |  ------------------
  ------------------
 5628|  1.69k|        return e;
 5629|  1.69k|    }
 5630|  59.8k|    pctx.advance_to(fmt_it);
 5631|  59.8k|    return {};
 5632|  61.5k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5803|  61.5k|    {
 5804|  61.5k|        return {val};
 5805|  61.5k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE6valuesEv:
 6475|   121k|    {
 6476|   121k|        return m_values;
 6477|   121k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  59.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  59.8k|    {
 6223|  59.8k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  27.2k|        : m_str(r.str)
 8850|  27.2k|    {
 8851|  27.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1753|  28.0k|    {
 1754|  28.0k|        return has_value();
 1755|  28.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1828|  58.7k|    {
 1829|  58.7k|        return &value();
 1830|  58.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1782|  58.7k|    {
 1783|  58.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  58.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  58.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  58.7k|        return this->get_value();
 1785|  58.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  657|  40.7k|    {
  658|  40.7k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 15.3k, False: 25.4k]
  ------------------
  659|  15.3k|            destroy_value();
  660|  15.3k|        }
  661|  25.4k|        else {
  662|  25.4k|            destroy_unexpected();
  663|  25.4k|        }
  664|  40.7k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9961|  13.6k|{
 9962|  13.6k|    auto result = make_scan_result<Source, Args...>();
 9963|  13.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  13.6k|                                   make_scan_args(result->values())));
 9965|  13.6k|    return result;
 9966|  13.6k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
10002|    848|{
10003|    848|    auto result = make_scan_result<Source, T>();
10004|    848|    fill_scan_result(
10005|    848|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|    848|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|    848|                            detail::make_arg<scan_context>(result->value())));
10007|    848|    return result;
10008|    848|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5945|  1.69k|{
 5946|  1.69k|    check_scan_arg_types<T>();
 5947|       |
 5948|  1.69k|    basic_scan_arg<Context> arg;
 5949|  1.69k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  1.69k|    arg.m_value = make_value<Context>(value);
 5951|  1.69k|    return arg;
 5952|  1.69k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  5.08k|    {
 6498|  5.08k|        return std::get<0>(m_values);
 6499|  5.08k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  38.1k|    {
 2883|  38.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  38.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  38.1k|    {
 2864|  38.1k|        return decay_copy(t.begin());
 2865|  38.1k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2107|  2.85M|{
 2108|  2.85M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  2.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  2.85M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   200k|    {
 2940|   200k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   200k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   200k|    {
 2922|   200k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   200k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9892|  16.3k|{
 9893|  16.3k|    auto result = make_scan_result<Source, Args...>();
 9894|  16.3k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  16.3k|                                   make_scan_args(result->values())));
 9896|  16.3k|    return result;
 9897|  16.3k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEEDav:
 9848|  33.4k|{
 9849|  33.4k|    return scan_result_type<Source, Args...>();
 9850|  33.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1565|  33.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  441|  33.4k|        : m_value(T{}), m_has_value(true)
  442|  33.4k|    {
  443|  33.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2Ev:
 6692|  33.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6535|   100k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3473|   100k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  33.4k|{
 9834|  33.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  33.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.7k, False: 20.7k]
  |  |  ------------------
  ------------------
 9835|  12.7k|        out = unexpected(in.error());
 9836|  12.7k|    }
 9837|  20.7k|    else {
 9838|  20.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  20.7k|    static_cast<    \
  |  | 1109|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  20.7k|    }
 9840|  33.4k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1753|   100k|    {
 1754|   100k|        return has_value();
 1755|   100k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   200k|    {
  505|   200k|        return m_has_value;
  506|   200k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1759|  38.1k|    {
 1760|  38.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  38.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  38.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  38.1k|        return this->get_unexpected().error();
 1762|  38.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  38.1k|    {
  488|  38.1k|        return m_unexpected;
  489|  38.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  12.7k|        : base(unexpect, std::move(e.error())),
 1630|  12.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.7k|    {
 1632|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  464|  12.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  12.7k|          m_has_value(false)
  466|  12.7k|    {
  467|  12.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.7k|    {
 1330|  12.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1570|  12.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  916|  12.7k|    {
  917|  12.7k|        assign_common(std::move(other));
  918|  12.7k|        return *this;
  919|  12.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  12.7k|    {
  964|  12.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 12.7k, False: 0]
  ------------------
  965|  12.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 12.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  12.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  12.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   133k|    {
  505|   133k|        return m_has_value;
  506|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  74.9k|    {
  471|  74.9k|        return m_value;
  472|  74.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  12.7k|    {
 1060|  12.7k|        this->destroy_value();
 1061|  12.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  12.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  518|  12.7k|    {
  519|  12.7k|        scn::detail::construct_at(&get_unexpected(),
  520|  12.7k|                                  std::forward<Args>(args)...);
  521|  12.7k|        m_has_value = false;
  522|  12.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  12.7k|    {
  488|  12.7k|        return m_unexpected;
  489|  12.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  12.7k|    {
  496|  12.7k|        return std::move(m_unexpected);
  497|  12.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6566|  62.2k|    {
 6567|  62.2k|        m_range = std::forward<Other>(r);
 6568|  62.2k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|  62.2k|    {
 1809|  62.2k|        return value();
 1810|  62.2k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|  62.2k|    {
 1783|  62.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  62.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  62.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  62.2k|        return this->get_value();
 1785|  62.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  62.2k|    {
  471|  62.2k|        return m_value;
  472|  62.2k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9654|  48.9k|{
 9655|  48.9k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|  48.9k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|  48.9k|{
 9592|  48.9k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  48.9k|    auto result = vscan_impl(buffer, format, args);
 9595|  48.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  48.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.8k, False: 31.1k]
  |  |  ------------------
  ------------------
 9596|  17.8k|        return unexpected(result.error());
 9597|  17.8k|    }
 9598|  31.1k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  48.9k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5398|   100k|{
 5399|   100k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   100k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   100k|                  "\n"
 5403|   100k|                  "Unsupported range type given as input to a scanning "
 5404|   100k|                  "function.\n"
 5405|   100k|                  "A range needs to have a character type (value type) "
 5406|   100k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   100k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   100k|                  "to be included.\n"
 5409|   100k|                  "See the scnlib documentation for more details.");
 5410|   100k|    static_assert(
 5411|   100k|        !std::is_same_v<T, custom_char_traits>,
 5412|   100k|        "\n"
 5413|   100k|        "Unsupported range type given as input to a scanning "
 5414|   100k|        "function.\n"
 5415|   100k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   100k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   100k|        "not supported.");
 5418|   100k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   100k|                  "\n"
 5420|   100k|                  "Unsupported range type given as input to a scanning "
 5421|   100k|                  "function.\n"
 5422|   100k|                  "file_marker_found cannot be used as an "
 5423|   100k|                  "source range type to scn::scan.\n"
 5424|   100k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   100k|                  "and do not provide an explicit source range, "
 5426|   100k|                  "or use scn::scan with a FILE* directly.");
 5427|   100k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   100k|                  "\n"
 5429|   100k|                  "Unsupported range type given as input to a scanning "
 5430|   100k|                  "function.\n"
 5431|   100k|                  "In order to be scannable, a range needs to satisfy "
 5432|   100k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   100k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   100k|                  "\n"
 5435|   100k|                  "Unsupported range type given as input to a scanning "
 5436|   100k|                  "function.\n"
 5437|   100k|                  "A range needs to model forward_range and have a valid "
 5438|   100k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   100k|                  "Examples of scannable ranges are std::string, "
 5440|   100k|                  "std::string_view, "
 5441|   100k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   100k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   100k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   100k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|   100k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|   100k|    else {
 5384|   100k|        return make_forward_scan_buffer(r);
 5385|   100k|    }
 5386|   100k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5202|   100k|{
 5203|   100k|    return basic_scan_forward_buffer_impl(range);
 5204|   100k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|   100k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|   100k|          m_cursor(ranges::begin(*m_range))
 4784|   100k|    {
 4785|   100k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4754|   100k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|   100k|    {
 4756|   100k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4445|   100k|        : m_current_view(sv), m_is_contiguous(false)
 4446|   100k|    {
 4447|   100k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4358|   181k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   162k|    {
 2883|   162k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   162k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   162k|    {
 2864|   162k|        return decay_copy(t.begin());
 2865|   162k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3493|   224k|    {
 3494|   224k|        return m_iterator;
 3495|   224k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4788|   787k|    {
 4789|   787k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 14.8k, False: 772k]
  ------------------
 4790|  14.8k|            return false;
 4791|  14.8k|        }
 4792|   772k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|   772k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|   772k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   772k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|   772k|        }
 4795|   772k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 674k, False: 97.6k]
  ------------------
 4796|   674k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|   674k|                                          this->m_current_view.begin(),
 4798|   674k|                                          this->m_current_view.end());
 4799|   674k|        }
 4800|   772k|        m_latest = *m_cursor;
 4801|   772k|        ++m_cursor;
 4802|   772k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|   772k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|   772k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|   772k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   772k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|   772k|        }
 4806|   772k|        return true;
 4807|   787k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  2.33M|    {
 2940|  2.33M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.33M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  2.33M|    {
 2922|  2.33M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  2.33M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3497|  2.39M|    {
 3498|  2.39M|        return m_sentinel;
 3499|  2.39M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4363|   100k|    {
 4364|   100k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|   100k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|   100k|        return true;
 4366|   100k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|  38.1k|        : base(unexpect, std::move(e.error())),
 1630|  38.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  38.1k|    {
 1632|  38.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|  38.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  38.1k|          m_has_value(false)
  466|  38.1k|    {
  467|  38.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   100k|    {
 1330|   100k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|  62.2k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  62.2k|                      ranges::iterator_t<SourceRange>>) {
 6799|  62.2k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  62.2k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  62.2k|    {
 2883|  62.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  62.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  62.2k|    {
 2864|  62.2k|        return decay_copy(t.begin());
 2865|  62.2k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6783|  62.2k|{
 6784|  62.2k|    return ranges::end(source);
 6785|  62.2k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  62.2k|    {
 2940|  62.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  62.2k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  62.2k|    {
 2922|  62.2k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  62.2k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|  62.2k|        : base(std::in_place, std::forward<U>(val)),
 1584|  62.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  62.2k|    {
 1586|  62.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|  62.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  62.2k|    {
  457|  62.2k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|  32.6k|    {
 8855|  32.6k|        return m_str;
 8856|  32.6k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|   162k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   162k|    static_cast<    \
  |  | 1109|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   162k|    static_cast<    \
  |  | 1109|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   162k|    {
 3480|   162k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  32.6k|        : m_str(r.str)
 8850|  32.6k|    {
 8851|  32.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1753|  33.4k|    {
 1754|  33.4k|        return has_value();
 1755|  33.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1828|  74.9k|    {
 1829|  74.9k|        return &value();
 1830|  74.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  74.9k|    {
 1783|  74.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  74.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  74.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  74.9k|        return this->get_value();
 1785|  74.9k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6555|  62.2k|    {
 6556|  62.2k|        return ranges::begin(m_range);
 6557|  62.2k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9961|  16.3k|{
 9962|  16.3k|    auto result = make_scan_result<Source, Args...>();
 9963|  16.3k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  16.3k|                                   make_scan_args(result->values())));
 9965|  16.3k|    return result;
 9966|  16.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9672|  48.9k|{
 9673|  48.9k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|  48.9k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|  48.9k|{
 9608|  48.9k|#if !SCN_DISABLE_LOCALE
 9609|  48.9k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  48.9k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  48.9k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  48.9k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  48.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  48.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.8k, False: 31.1k]
  |  |  ------------------
  ------------------
 9616|  17.8k|        return unexpected(result.error());
 9617|  17.8k|    }
 9618|  31.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  48.9k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
10002|    848|{
10003|    848|    auto result = make_scan_result<Source, T>();
10004|    848|    fill_scan_result(
10005|    848|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|    848|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|    848|                            detail::make_arg<scan_context>(result->value())));
10007|    848|    return result;
10008|    848|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9685|  2.54k|{
 9686|  2.54k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  2.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  2.54k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  2.54k|{
 9632|  2.54k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  2.54k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  2.54k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  2.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.54k, False: 0]
  |  |  ------------------
  ------------------
 9636|  2.54k|        return unexpected(result.error());
 9637|  2.54k|    }
 9638|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  2.54k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9892|  16.3k|{
 9893|  16.3k|    auto result = make_scan_result<Source, Args...>();
 9894|  16.3k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  16.3k|                                   make_scan_args(result->values())));
 9896|  16.3k|    return result;
 9897|  16.3k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9848|  33.4k|{
 9849|  33.4k|    return scan_result_type<Source, Args...>();
 9850|  33.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1565|  33.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  626|  33.4k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  33.4k|    {
  628|  33.4k|        construct();
  629|  33.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  33.4k|    {
  709|  33.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  33.4k|        m_has_value = true;
  711|  33.4k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  410|  33.4k|{
  411|  33.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  33.4k|        T(std::forward<Args>(args)...);
  413|  33.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6692|  33.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   141k|    {
  733|   141k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   141k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   141k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  33.4k|{
 9834|  33.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  33.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.7k, False: 20.7k]
  |  |  ------------------
  ------------------
 9835|  12.7k|        out = unexpected(in.error());
 9836|  12.7k|    }
 9837|  20.7k|    else {
 9838|  20.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  20.7k|    static_cast<    \
  |  | 1109|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  20.7k|    }
 9840|  33.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  12.7k|        : base(unexpect, std::move(e.error())),
 1630|  12.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.7k|    {
 1632|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  12.7k|        : m_has_value(false)
  652|  12.7k|    {
  653|  12.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  715|  12.7k|    {
  716|  12.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.7k|                                  std::forward<Args>(args)...);
  718|  12.7k|        m_has_value = false;
  719|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  63.6k|    {
  745|  63.6k|        return reinterpret_cast<unexpected<E>*>(
  746|  63.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  63.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  63.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.7k|    {
 1330|  12.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  12.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  916|  12.7k|    {
  917|  12.7k|        assign_common(std::move(other));
  918|  12.7k|        return *this;
  919|  12.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  12.7k|    {
  964|  12.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 12.7k, False: 0]
  ------------------
  965|  12.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 12.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  12.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  12.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   179k|    {
  702|   179k|        return m_has_value;
  703|   179k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  74.9k|    {
  668|  74.9k|        return *value_ptr();
  669|  74.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  12.7k|    {
 1060|  12.7k|        this->destroy_value();
 1061|  12.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  33.4k|    {
  723|  33.4k|        scn::detail::destroy_at(value_ptr());
  724|  33.4k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  416|  33.4k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  33.4k|    else {
  423|  33.4k|        p->~T();
  424|  33.4k|    }
  425|  33.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6699|  33.4k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  12.7k|    {
  716|  12.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.7k|                                  std::forward<Args>(args)...);
  718|  12.7k|        m_has_value = false;
  719|  12.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  12.7k|    {
  693|  12.7k|        return std::move(*unexpected_ptr());
  694|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  25.4k|    {
  727|  25.4k|        scn::detail::destroy_at(unexpected_ptr());
  728|  25.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|  32.6k|    {
 8855|  32.6k|        return m_str;
 8856|  32.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  32.6k|        : m_str(r.str)
 8850|  32.6k|    {
 8851|  32.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1753|  33.4k|    {
 1754|  33.4k|        return has_value();
 1755|  33.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1828|  74.9k|    {
 1829|  74.9k|        return &value();
 1830|  74.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  74.9k|    {
 1783|  74.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  74.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  74.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  74.9k|        return this->get_value();
 1785|  74.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  657|  46.1k|    {
  658|  46.1k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 20.7k, False: 25.4k]
  ------------------
  659|  20.7k|            destroy_value();
  660|  20.7k|        }
  661|  25.4k|        else {
  662|  25.4k|            destroy_unexpected();
  663|  25.4k|        }
  664|  46.1k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9961|  16.3k|{
 9962|  16.3k|    auto result = make_scan_result<Source, Args...>();
 9963|  16.3k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  16.3k|                                   make_scan_args(result->values())));
 9965|  16.3k|    return result;
 9966|  16.3k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
10002|    848|{
10003|    848|    auto result = make_scan_result<Source, T>();
10004|    848|    fill_scan_result(
10005|    848|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|    848|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|    848|                            detail::make_arg<scan_context>(result->value())));
10007|    848|    return result;
10008|    848|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9892|  16.3k|{
 9893|  16.3k|    auto result = make_scan_result<Source, Args...>();
 9894|  16.3k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  16.3k|                                   make_scan_args(result->values())));
 9896|  16.3k|    return result;
 9897|  16.3k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9848|  33.4k|{
 9849|  33.4k|    return scan_result_type<Source, Args...>();
 9850|  33.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1565|  33.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  626|  33.4k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  33.4k|    {
  628|  33.4k|        construct();
  629|  33.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  33.4k|    {
  709|  33.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  33.4k|        m_has_value = true;
  711|  33.4k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  410|  33.4k|{
  411|  33.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  33.4k|        T(std::forward<Args>(args)...);
  413|  33.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6692|  33.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   141k|    {
  733|   141k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   141k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   141k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  33.4k|{
 9834|  33.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  33.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.7k, False: 20.7k]
  |  |  ------------------
  ------------------
 9835|  12.7k|        out = unexpected(in.error());
 9836|  12.7k|    }
 9837|  20.7k|    else {
 9838|  20.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  20.7k|    static_cast<    \
  |  | 1109|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  20.7k|    }
 9840|  33.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  12.7k|        : base(unexpect, std::move(e.error())),
 1630|  12.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.7k|    {
 1632|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  12.7k|        : m_has_value(false)
  652|  12.7k|    {
  653|  12.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  715|  12.7k|    {
  716|  12.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.7k|                                  std::forward<Args>(args)...);
  718|  12.7k|        m_has_value = false;
  719|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  63.6k|    {
  745|  63.6k|        return reinterpret_cast<unexpected<E>*>(
  746|  63.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  63.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  63.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.7k|    {
 1330|  12.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  12.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  916|  12.7k|    {
  917|  12.7k|        assign_common(std::move(other));
  918|  12.7k|        return *this;
  919|  12.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  12.7k|    {
  964|  12.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 12.7k, False: 0]
  ------------------
  965|  12.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 12.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  12.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  12.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   179k|    {
  702|   179k|        return m_has_value;
  703|   179k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  74.9k|    {
  668|  74.9k|        return *value_ptr();
  669|  74.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  12.7k|    {
 1060|  12.7k|        this->destroy_value();
 1061|  12.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  33.4k|    {
  723|  33.4k|        scn::detail::destroy_at(value_ptr());
  724|  33.4k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  416|  33.4k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  33.4k|    else {
  423|  33.4k|        p->~T();
  424|  33.4k|    }
  425|  33.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6699|  33.4k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  12.7k|    {
  716|  12.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.7k|                                  std::forward<Args>(args)...);
  718|  12.7k|        m_has_value = false;
  719|  12.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  12.7k|    {
  693|  12.7k|        return std::move(*unexpected_ptr());
  694|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  25.4k|    {
  727|  25.4k|        scn::detail::destroy_at(unexpected_ptr());
  728|  25.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|  32.6k|    {
 8855|  32.6k|        return m_str;
 8856|  32.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  32.6k|        : m_str(r.str)
 8850|  32.6k|    {
 8851|  32.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1753|  33.4k|    {
 1754|  33.4k|        return has_value();
 1755|  33.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1828|  74.9k|    {
 1829|  74.9k|        return &value();
 1830|  74.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  74.9k|    {
 1783|  74.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  74.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  74.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  74.9k|        return this->get_value();
 1785|  74.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  657|  46.1k|    {
  658|  46.1k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 20.7k, False: 25.4k]
  ------------------
  659|  20.7k|            destroy_value();
  660|  20.7k|        }
  661|  25.4k|        else {
  662|  25.4k|            destroy_unexpected();
  663|  25.4k|        }
  664|  46.1k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9961|  16.3k|{
 9962|  16.3k|    auto result = make_scan_result<Source, Args...>();
 9963|  16.3k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  16.3k|                                   make_scan_args(result->values())));
 9965|  16.3k|    return result;
 9966|  16.3k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
10002|    848|{
10003|    848|    auto result = make_scan_result<Source, T>();
10004|    848|    fill_scan_result(
10005|    848|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|    848|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|    848|                            detail::make_arg<scan_context>(result->value())));
10007|    848|    return result;
10008|    848|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  78.0k|    {
 2883|  78.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  78.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  78.0k|    {
 2864|  78.0k|        return decay_copy(t.begin());
 2865|  78.0k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2107|   999k|{
 2108|   999k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   999k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   999k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   197k|    {
 2940|   197k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   197k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   197k|    {
 2922|   197k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   197k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEEDav:
 9848|  32.7k|{
 9849|  32.7k|    return scan_result_type<Source, Args...>();
 9850|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1565|  32.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  441|  32.7k|        : m_value(T{}), m_has_value(true)
  442|  32.7k|    {
  443|  32.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2Ev:
 6692|  32.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6535|  98.1k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3473|  98.1k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9833|  32.7k|{
 9834|  32.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 25.4k, False: 7.26k]
  |  |  ------------------
  ------------------
 9835|  25.4k|        out = unexpected(in.error());
 9836|  25.4k|    }
 9837|  7.26k|    else {
 9838|  7.26k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  7.26k|    static_cast<    \
  |  | 1109|  7.26k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  7.26k|    }
 9840|  32.7k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1753|  98.1k|    {
 1754|  98.1k|        return has_value();
 1755|  98.1k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   196k|    {
  505|   196k|        return m_has_value;
  506|   196k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1759|  76.3k|    {
 1760|  76.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  76.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  76.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  76.3k|        return this->get_unexpected().error();
 1762|  76.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  76.3k|    {
  488|  76.3k|        return m_unexpected;
  489|  76.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|  25.4k|        : base(unexpect, std::move(e.error())),
 1630|  25.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.4k|    {
 1632|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  464|  25.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  25.4k|          m_has_value(false)
  466|  25.4k|    {
  467|  25.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  25.4k|    {
 1330|  25.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1570|  25.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  916|  25.4k|    {
  917|  25.4k|        assign_common(std::move(other));
  918|  25.4k|        return *this;
  919|  25.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  25.4k|    {
  964|  25.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 25.4k, False: 0]
  ------------------
  965|  25.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 25.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  25.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  25.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   130k|    {
  505|   130k|        return m_has_value;
  506|   130k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  47.2k|    {
  471|  47.2k|        return m_value;
  472|  47.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  25.4k|    {
 1060|  25.4k|        this->destroy_value();
 1061|  25.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  25.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  518|  25.4k|    {
  519|  25.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  25.4k|                                  std::forward<Args>(args)...);
  521|  25.4k|        m_has_value = false;
  522|  25.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  25.4k|    {
  488|  25.4k|        return m_unexpected;
  489|  25.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  25.4k|    {
  496|  25.4k|        return std::move(m_unexpected);
  497|  25.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6566|  21.8k|    {
 6567|  21.8k|        m_range = std::forward<Other>(r);
 6568|  21.8k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|  21.8k|    {
 1809|  21.8k|        return value();
 1810|  21.8k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|  21.8k|    {
 1783|  21.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  21.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  21.8k|        return this->get_value();
 1785|  21.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  21.8k|    {
  471|  21.8k|        return m_value;
  472|  21.8k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|  46.5k|{
 9592|  46.5k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  46.5k|    auto result = vscan_impl(buffer, format, args);
 9595|  46.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  46.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.6k, False: 10.9k]
  |  |  ------------------
  ------------------
 9596|  35.6k|        return unexpected(result.error());
 9597|  35.6k|    }
 9598|  10.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  46.5k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5398|  98.1k|{
 5399|  98.1k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|  98.1k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|  98.1k|                  "\n"
 5403|  98.1k|                  "Unsupported range type given as input to a scanning "
 5404|  98.1k|                  "function.\n"
 5405|  98.1k|                  "A range needs to have a character type (value type) "
 5406|  98.1k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|  98.1k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|  98.1k|                  "to be included.\n"
 5409|  98.1k|                  "See the scnlib documentation for more details.");
 5410|  98.1k|    static_assert(
 5411|  98.1k|        !std::is_same_v<T, custom_char_traits>,
 5412|  98.1k|        "\n"
 5413|  98.1k|        "Unsupported range type given as input to a scanning "
 5414|  98.1k|        "function.\n"
 5415|  98.1k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|  98.1k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|  98.1k|        "not supported.");
 5418|  98.1k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|  98.1k|                  "\n"
 5420|  98.1k|                  "Unsupported range type given as input to a scanning "
 5421|  98.1k|                  "function.\n"
 5422|  98.1k|                  "file_marker_found cannot be used as an "
 5423|  98.1k|                  "source range type to scn::scan.\n"
 5424|  98.1k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|  98.1k|                  "and do not provide an explicit source range, "
 5426|  98.1k|                  "or use scn::scan with a FILE* directly.");
 5427|  98.1k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|  98.1k|                  "\n"
 5429|  98.1k|                  "Unsupported range type given as input to a scanning "
 5430|  98.1k|                  "function.\n"
 5431|  98.1k|                  "In order to be scannable, a range needs to satisfy "
 5432|  98.1k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|  98.1k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|  98.1k|                  "\n"
 5435|  98.1k|                  "Unsupported range type given as input to a scanning "
 5436|  98.1k|                  "function.\n"
 5437|  98.1k|                  "A range needs to model forward_range and have a valid "
 5438|  98.1k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|  98.1k|                  "Examples of scannable ranges are std::string, "
 5440|  98.1k|                  "std::string_view, "
 5441|  98.1k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|  98.1k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|  98.1k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|  98.1k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|  98.1k|{
 5338|  98.1k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|  98.1k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|  98.1k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  98.1k|    {
 3014|  98.1k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  98.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  98.1k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  98.1k|    {
 2995|  98.1k|        return t.data();
 2996|  98.1k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3396|  98.1k|    {
 3397|  98.1k|        return detail::to_address(ranges::begin(derived()));
 3398|  98.1k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   289k|{
  331|   289k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   289k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  308|   289k|{
  309|   289k|    return p;
  310|   289k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   119k|    {
 2883|   119k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   119k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   119k|    {
 2864|   119k|        return decay_copy(t.begin());
 2865|   119k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3493|  1.70M|    {
 3494|  1.70M|        return m_iterator;
 3495|  1.70M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3352|  98.1k|    {
 3353|  98.1k|        return static_cast<const D&>(*this);
 3354|  98.1k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|  98.1k|    {
 3089|  98.1k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  98.1k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|  98.1k|    {
 3055|  98.1k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  98.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  98.1k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|   311k|    {
 3510|   311k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|   311k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  76.3k|        : base(unexpect, std::move(e.error())),
 1630|  76.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  76.3k|    {
 1632|  76.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  76.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  76.3k|          m_has_value(false)
  466|  76.3k|    {
  467|  76.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  98.1k|    {
 1330|  98.1k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|  21.8k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  21.8k|                      ranges::iterator_t<SourceRange>>) {
 6799|  21.8k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  21.8k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   304k|    {
 2883|   304k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   304k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   304k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   304k|    {
 2864|   304k|        return decay_copy(t.begin());
 2865|   304k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6783|  21.8k|{
 6784|  21.8k|    return ranges::end(source);
 6785|  21.8k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   112k|    {
 2940|   112k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   112k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   112k|    {
 2922|   112k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   112k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3497|  1.35M|    {
 3498|  1.35M|        return m_sentinel;
 3499|  1.35M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  21.8k|        : base(std::in_place, std::forward<U>(val)),
 1584|  21.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  21.8k|    {
 1586|  21.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|  21.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  21.8k|    {
  457|  21.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8854|  31.0k|    {
 8855|  31.0k|        return m_str;
 8856|  31.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  62.0k|{
 6196|  62.0k|    detail::check_scan_arg_types<Args...>();
 6197|  62.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  62.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  62.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  62.0k|    {
 6173|  62.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6180|  62.0k|    {
 6181|  62.0k|        return {detail::make_arg<
 6182|  62.0k|            kind, Context,
 6183|  62.0k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  62.0k|                                 typename Context::char_type>::value>(args)...};
 6185|  62.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE29E2tmvEENS1_9arg_valueERT2_:
 5969|  62.0k|{
 5970|  62.0k|    return make_value<Context>(value);
 5971|  62.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEEDaRT0_:
 5895|  65.4k|{
 5896|  65.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|       |                                  needs_context_tag>) {
 5900|       |        return make_value_impl<T>(SCN_FWD(arg));
 5901|       |    }
 5902|  65.4k|    else {
 5903|  65.4k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|  65.4k|            value, context_tag<Context>{}));
 5905|  65.4k|    }
 5906|  65.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5795|  65.4k|    {
 5796|  65.4k|        return {};
 5797|  65.4k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5864|  65.4k|{
 5865|  65.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  65.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  65.4k|    constexpr bool scannable_char =
 5869|  65.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  65.4k|    static_assert(scannable_char,
 5871|  65.4k|                  "Cannot scan an argument of an unsupported character "
 5872|  65.4k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  65.4k|    constexpr bool scannable_const =
 5875|  65.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  65.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  65.4k|    constexpr bool scannable_disabled =
 5879|  65.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  65.4k|    static_assert(scannable_disabled,
 5881|  65.4k|                  "Cannot scan an argument that has been disabled by "
 5882|  65.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  65.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  65.4k|    static_assert(
 5886|  65.4k|        scannable,
 5887|  65.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  65.4k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  65.4k|    return arg_value{arg};
 5891|  65.4k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5651|  65.4k|        : custom_value{static_cast<void*>(&val.val),
 5652|  65.4k|                       scan_custom_arg<T, Context>}
 5653|  65.4k|    {
 5654|  65.4k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5669|  65.4k|    {
 5670|  65.4k|        static_assert(!is_type_disabled<T>,
 5671|  65.4k|                      "Scanning of custom types is disabled by "
 5672|  65.4k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5673|  65.4k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1104|  65.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  65.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5674|       |
 5675|  65.4k|        using context_type = Context;
 5676|  65.4k|        using parse_context_type = typename context_type::parse_context_type;
 5677|  65.4k|        using scanner_type = typename context_type::template scanner_type<T>;
 5678|       |
 5679|  65.4k|        auto s = scanner_type{};
 5680|       |
 5681|  65.4k|        auto& arg_ref = *static_cast<T*>(arg);
 5682|  65.4k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5683|  65.4k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5684|       |
 5685|  65.4k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3948|  65.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.39k, False: 62.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.39k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.39k|    }
  ------------------
 5686|  62.0k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3958|  62.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  62.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  62.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  62.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 47.4k, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  47.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  47.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  47.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  47.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  47.4k|    }                                                  \
  |  |  |  | 3957|  62.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5687|  14.5k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  14.5k|    static_cast<    \
  |  | 1109|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5688|       |
 5689|  14.5k|        return {};
 5690|  62.0k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5602|  65.4k|{
 5603|  65.4k|#if SCN_HAS_EXCEPTIONS
 5604|  65.4k|    auto fmt_it = pctx.begin();
 5605|  65.4k|    try {
 5606|  65.4k|        fmt_it = s.parse(pctx);
 5607|  65.4k|    }
 5608|  65.4k|    catch (const detail::scan_format_string_error_base& ex) {
 5609|       |        // scan_error takes a const char*.
 5610|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5611|       |        // stores a reference-counted string,
 5612|       |        // that will go out of scope here.
 5613|       |        // We need to provide a const char* that will stay in scope.
 5614|       |        // If scan_format_string_error was thrown with a string literal,
 5615|       |        // use that, otherwise refer to a thread_local std::string
 5616|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5616:25): [True: 0, False: 0]
  ------------------
 5617|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5618|      0|        }
 5619|      0|        thread_local std::string err_msg{};
 5620|      0|        err_msg = ex.what();
 5621|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                     err_msg.c_str());
 5623|      0|    }
 5624|       |#else
 5625|       |    auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  65.4k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.39k, False: 62.0k]
  |  |  ------------------
  ------------------
 5628|  3.39k|        return e;
 5629|  3.39k|    }
 5630|  62.0k|    pctx.advance_to(fmt_it);
 5631|  62.0k|    return {};
 5632|  65.4k|}
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6380|   950k|    {
 6381|   950k|        return m_format.data();
 6382|   950k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE3endEv:
 6385|   196k|    {
 6386|   196k|        return m_format.data() + m_format.size();
 6387|   196k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6426|  10.1k|    {
 6427|  10.1k|        m_error = unexpected(detail::handle_error(
 6428|  10.1k|            scan_error{scan_error::invalid_format_string, msg}));
 6429|  10.1k|        return m_error.error();
 6430|  10.1k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4085|   446k|{
 4086|       |    if constexpr (sizeof(U) == 1) {
 4087|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|   446k|    else {
 4093|       |        // utf-32
 4094|   446k|        static_assert(sizeof(U) == 4);
 4095|   446k|        SCN_UNUSED(ch);
  ------------------
  |  | 1089|   446k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4096|   446k|        return 1;
 4097|   446k|    }
 4098|   446k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|   344k|{
 4292|       |    if constexpr (sizeof(CharT) == 1) {
 4293|       |        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|   344k|    else {
 4299|   344k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1104|   344k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   344k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4300|   344k|        auto cp = static_cast<char32_t>(input.front());
 4301|   344k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 46.1k, False: 297k]
  |  |  ------------------
  ------------------
 4302|  46.1k|            return invalid_code_point;
 4303|  46.1k|        }
 4304|   297k|        return cp;
 4305|   344k|    }
 4306|   344k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   372k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   372k|    else {
 3999|   372k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   372k|    }
 4001|   372k|}
_ZN3scn2v424basic_scan_parse_contextIwE9get_errorEv:
 6433|   196k|    {
 6434|   196k|        return m_error;
 6435|   196k|    }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6391|   372k|    {
 6392|   372k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   372k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|   470k|    {
 1754|   470k|        return has_value();
 1755|   470k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|   940k|    {
  505|   940k|        return m_has_value;
  506|   940k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|   291k|    {
 1760|   291k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   291k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   291k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   291k|        return this->get_unexpected().error();
 1762|   291k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   291k|    {
  488|   291k|        return m_unexpected;
  489|   291k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   135k|    {
 1819|   135k|        return std::move(value());
 1820|   135k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   179k|    {
 1783|   179k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   179k|        return this->get_value();
 1785|   179k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|   179k|    {
  471|   179k|        return m_value;
  472|   179k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9057|   157k|    {
 9058|   157k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   157k|    static_cast<    \
  |  | 1109|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   157k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5803|  65.4k|    {
 5804|  65.4k|        return {val};
 5805|  65.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  62.0k|        : basic_scan_args(store.desc, store.args.data())
 6222|  62.0k|    {
 6223|  62.0k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKNS3_9arg_valueE:
 6278|   186k|        : m_desc(desc), m_values(data)
 6279|   186k|    {
 6280|   186k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|   854k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   854k|    static_cast<    \
  |  | 1109|   854k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   854k|    static_cast<    \
  |  | 1109|   854k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   854k|    {
 3480|   854k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8536|   186k|{
 8537|   186k|    return s;
 8538|   186k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8508|   186k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  31.0k|        : m_str(r.str)
 8850|  31.0k|    {
 8851|  31.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1753|  32.7k|    {
 1754|  32.7k|        return has_value();
 1755|  32.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1828|  47.2k|    {
 1829|  47.2k|        return &value();
 1830|  47.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1782|  47.2k|    {
 1783|  47.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  47.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  47.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  47.2k|        return this->get_value();
 1785|  47.2k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6555|  21.8k|    {
 6556|  21.8k|        return ranges::begin(m_range);
 6557|  21.8k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|  46.5k|{
 9608|  46.5k|#if !SCN_DISABLE_LOCALE
 9609|  46.5k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  46.5k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  46.5k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  46.5k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  46.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  46.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.6k, False: 10.9k]
  |  |  ------------------
  ------------------
 9616|  35.6k|        return unexpected(result.error());
 9617|  35.6k|    }
 9618|  10.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  46.5k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  5.08k|{
 9632|  5.08k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  5.08k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  5.08k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  5.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.08k, False: 0]
  |  |  ------------------
  ------------------
 9636|  5.08k|        return unexpected(result.error());
 9637|  5.08k|    }
 9638|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  5.08k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5945|  3.39k|{
 5946|  3.39k|    check_scan_arg_types<T>();
 5947|       |
 5948|  3.39k|    basic_scan_arg<Context> arg;
 5949|  3.39k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  3.39k|    arg.m_value = make_value<Context>(value);
 5951|  3.39k|    return arg;
 5952|  3.39k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6040|   196k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEEDav:
 9848|  32.7k|{
 9849|  32.7k|    return scan_result_type<Source, Args...>();
 9850|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1565|  32.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  626|  32.7k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  32.7k|    {
  628|  32.7k|        construct();
  629|  32.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  32.7k|    {
  709|  32.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  32.7k|        m_has_value = true;
  711|  32.7k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  410|  32.7k|{
  411|  32.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  32.7k|        T(std::forward<Args>(args)...);
  413|  32.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6692|  32.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   112k|    {
  733|   112k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   112k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   112k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9833|  32.7k|{
 9834|  32.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 25.4k, False: 7.26k]
  |  |  ------------------
  ------------------
 9835|  25.4k|        out = unexpected(in.error());
 9836|  25.4k|    }
 9837|  7.26k|    else {
 9838|  7.26k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  7.26k|    static_cast<    \
  |  | 1109|  7.26k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  7.26k|    }
 9840|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|  25.4k|        : base(unexpect, std::move(e.error())),
 1630|  25.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.4k|    {
 1632|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  651|  25.4k|        : m_has_value(false)
  652|  25.4k|    {
  653|  25.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  715|  25.4k|    {
  716|  25.4k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.4k|                                  std::forward<Args>(args)...);
  718|  25.4k|        m_has_value = false;
  719|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|   127k|    {
  745|   127k|        return reinterpret_cast<unexpected<E>*>(
  746|   127k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|   127k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|   127k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  25.4k|    {
 1330|  25.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1570|  25.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  916|  25.4k|    {
  917|  25.4k|        assign_common(std::move(other));
  918|  25.4k|        return *this;
  919|  25.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  25.4k|    {
  964|  25.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 25.4k, False: 0]
  ------------------
  965|  25.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 25.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  25.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  25.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   188k|    {
  702|   188k|        return m_has_value;
  703|   188k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  47.2k|    {
  668|  47.2k|        return *value_ptr();
  669|  47.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  25.4k|    {
 1060|  25.4k|        this->destroy_value();
 1061|  25.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  32.7k|    {
  723|  32.7k|        scn::detail::destroy_at(value_ptr());
  724|  32.7k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  416|  32.7k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  32.7k|    else {
  423|  32.7k|        p->~T();
  424|  32.7k|    }
  425|  32.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEED2Ev:
 6699|  32.7k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  715|  25.4k|    {
  716|  25.4k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.4k|                                  std::forward<Args>(args)...);
  718|  25.4k|        m_has_value = false;
  719|  25.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  25.4k|    {
  693|  25.4k|        return std::move(*unexpected_ptr());
  694|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  50.8k|    {
  727|  50.8k|        scn::detail::destroy_at(unexpected_ptr());
  728|  50.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8854|  31.0k|    {
 8855|  31.0k|        return m_str;
 8856|  31.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  62.0k|{
 6196|  62.0k|    detail::check_scan_arg_types<Args...>();
 6197|  62.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  62.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  62.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  62.0k|    {
 6173|  62.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6180|  62.0k|    {
 6181|  62.0k|        return {detail::make_arg<
 6182|  62.0k|            kind, Context,
 6183|  62.0k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  62.0k|                                 typename Context::char_type>::value>(args)...};
 6185|  62.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE29ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5969|  62.0k|{
 5970|  62.0k|    return make_value<Context>(value);
 5971|  62.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEEDaRT0_:
 5895|  65.4k|{
 5896|  65.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|       |                                  needs_context_tag>) {
 5900|       |        return make_value_impl<T>(SCN_FWD(arg));
 5901|       |    }
 5902|  65.4k|    else {
 5903|  65.4k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|  65.4k|            value, context_tag<Context>{}));
 5905|  65.4k|    }
 5906|  65.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5795|  65.4k|    {
 5796|  65.4k|        return {};
 5797|  65.4k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5864|  65.4k|{
 5865|  65.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  65.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  65.4k|    constexpr bool scannable_char =
 5869|  65.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  65.4k|    static_assert(scannable_char,
 5871|  65.4k|                  "Cannot scan an argument of an unsupported character "
 5872|  65.4k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  65.4k|    constexpr bool scannable_const =
 5875|  65.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  65.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  65.4k|    constexpr bool scannable_disabled =
 5879|  65.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  65.4k|    static_assert(scannable_disabled,
 5881|  65.4k|                  "Cannot scan an argument that has been disabled by "
 5882|  65.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  65.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  65.4k|    static_assert(
 5886|  65.4k|        scannable,
 5887|  65.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  65.4k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  65.4k|    return arg_value{arg};
 5891|  65.4k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5651|  65.4k|        : custom_value{static_cast<void*>(&val.val),
 5652|  65.4k|                       scan_custom_arg<T, Context>}
 5653|  65.4k|    {
 5654|  65.4k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5669|  65.4k|    {
 5670|  65.4k|        static_assert(!is_type_disabled<T>,
 5671|  65.4k|                      "Scanning of custom types is disabled by "
 5672|  65.4k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5673|  65.4k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1104|  65.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  65.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5674|       |
 5675|  65.4k|        using context_type = Context;
 5676|  65.4k|        using parse_context_type = typename context_type::parse_context_type;
 5677|  65.4k|        using scanner_type = typename context_type::template scanner_type<T>;
 5678|       |
 5679|  65.4k|        auto s = scanner_type{};
 5680|       |
 5681|  65.4k|        auto& arg_ref = *static_cast<T*>(arg);
 5682|  65.4k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5683|  65.4k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5684|       |
 5685|  65.4k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3948|  65.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.39k, False: 62.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.39k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.39k|    }
  ------------------
 5686|  62.0k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3958|  62.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  62.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  62.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  62.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 47.4k, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  47.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  47.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  47.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  47.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  47.4k|    }                                                  \
  |  |  |  | 3957|  62.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5687|  14.5k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  14.5k|    static_cast<    \
  |  | 1109|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5688|       |
 5689|  14.5k|        return {};
 5690|  62.0k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5602|  65.4k|{
 5603|  65.4k|#if SCN_HAS_EXCEPTIONS
 5604|  65.4k|    auto fmt_it = pctx.begin();
 5605|  65.4k|    try {
 5606|  65.4k|        fmt_it = s.parse(pctx);
 5607|  65.4k|    }
 5608|  65.4k|    catch (const detail::scan_format_string_error_base& ex) {
 5609|       |        // scan_error takes a const char*.
 5610|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5611|       |        // stores a reference-counted string,
 5612|       |        // that will go out of scope here.
 5613|       |        // We need to provide a const char* that will stay in scope.
 5614|       |        // If scan_format_string_error was thrown with a string literal,
 5615|       |        // use that, otherwise refer to a thread_local std::string
 5616|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5616:25): [True: 0, False: 0]
  ------------------
 5617|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5618|      0|        }
 5619|      0|        thread_local std::string err_msg{};
 5620|      0|        err_msg = ex.what();
 5621|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                     err_msg.c_str());
 5623|      0|    }
 5624|       |#else
 5625|       |    auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  65.4k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.39k, False: 62.0k]
  |  |  ------------------
  ------------------
 5628|  3.39k|        return e;
 5629|  3.39k|    }
 5630|  62.0k|    pctx.advance_to(fmt_it);
 5631|  62.0k|    return {};
 5632|  65.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5803|  65.4k|    {
 5804|  65.4k|        return {val};
 5805|  65.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  62.0k|        : basic_scan_args(store.desc, store.args.data())
 6222|  62.0k|    {
 6223|  62.0k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  31.0k|        : m_str(r.str)
 8850|  31.0k|    {
 8851|  31.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1753|  32.7k|    {
 1754|  32.7k|        return has_value();
 1755|  32.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1828|  47.2k|    {
 1829|  47.2k|        return &value();
 1830|  47.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1782|  47.2k|    {
 1783|  47.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  47.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  47.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  47.2k|        return this->get_value();
 1785|  47.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  657|  58.1k|    {
  658|  58.1k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 7.26k, False: 50.8k]
  ------------------
  659|  7.26k|            destroy_value();
  660|  7.26k|        }
  661|  50.8k|        else {
  662|  50.8k|            destroy_unexpected();
  663|  50.8k|        }
  664|  58.1k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5945|  3.39k|{
 5946|  3.39k|    check_scan_arg_types<T>();
 5947|       |
 5948|  3.39k|    basic_scan_arg<Context> arg;
 5949|  3.39k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  3.39k|    arg.m_value = make_value<Context>(value);
 5951|  3.39k|    return arg;
 5952|  3.39k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEEDav:
 9848|  32.7k|{
 9849|  32.7k|    return scan_result_type<Source, Args...>();
 9850|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1565|  32.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  626|  32.7k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  32.7k|    {
  628|  32.7k|        construct();
  629|  32.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  32.7k|    {
  709|  32.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  32.7k|        m_has_value = true;
  711|  32.7k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  410|  32.7k|{
  411|  32.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  32.7k|        T(std::forward<Args>(args)...);
  413|  32.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6692|  32.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   112k|    {
  733|   112k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   112k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   112k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9833|  32.7k|{
 9834|  32.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 25.4k, False: 7.26k]
  |  |  ------------------
  ------------------
 9835|  25.4k|        out = unexpected(in.error());
 9836|  25.4k|    }
 9837|  7.26k|    else {
 9838|  7.26k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  7.26k|    static_cast<    \
  |  | 1109|  7.26k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  7.26k|    }
 9840|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|  25.4k|        : base(unexpect, std::move(e.error())),
 1630|  25.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.4k|    {
 1632|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  651|  25.4k|        : m_has_value(false)
  652|  25.4k|    {
  653|  25.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  715|  25.4k|    {
  716|  25.4k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.4k|                                  std::forward<Args>(args)...);
  718|  25.4k|        m_has_value = false;
  719|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|   127k|    {
  745|   127k|        return reinterpret_cast<unexpected<E>*>(
  746|   127k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|   127k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|   127k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  25.4k|    {
 1330|  25.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1570|  25.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  916|  25.4k|    {
  917|  25.4k|        assign_common(std::move(other));
  918|  25.4k|        return *this;
  919|  25.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  25.4k|    {
  964|  25.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 25.4k, False: 0]
  ------------------
  965|  25.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 25.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  25.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  25.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   188k|    {
  702|   188k|        return m_has_value;
  703|   188k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  47.2k|    {
  668|  47.2k|        return *value_ptr();
  669|  47.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  25.4k|    {
 1060|  25.4k|        this->destroy_value();
 1061|  25.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  32.7k|    {
  723|  32.7k|        scn::detail::destroy_at(value_ptr());
  724|  32.7k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  416|  32.7k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  32.7k|    else {
  423|  32.7k|        p->~T();
  424|  32.7k|    }
  425|  32.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEED2Ev:
 6699|  32.7k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  715|  25.4k|    {
  716|  25.4k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.4k|                                  std::forward<Args>(args)...);
  718|  25.4k|        m_has_value = false;
  719|  25.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  25.4k|    {
  693|  25.4k|        return std::move(*unexpected_ptr());
  694|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  50.8k|    {
  727|  50.8k|        scn::detail::destroy_at(unexpected_ptr());
  728|  50.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8854|  31.0k|    {
 8855|  31.0k|        return m_str;
 8856|  31.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  62.0k|{
 6196|  62.0k|    detail::check_scan_arg_types<Args...>();
 6197|  62.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  62.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  62.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  62.0k|    {
 6173|  62.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6180|  62.0k|    {
 6181|  62.0k|        return {detail::make_arg<
 6182|  62.0k|            kind, Context,
 6183|  62.0k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  62.0k|                                 typename Context::char_type>::value>(args)...};
 6185|  62.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE29ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5969|  62.0k|{
 5970|  62.0k|    return make_value<Context>(value);
 5971|  62.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEEDaRT0_:
 5895|  65.4k|{
 5896|  65.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|       |                                  needs_context_tag>) {
 5900|       |        return make_value_impl<T>(SCN_FWD(arg));
 5901|       |    }
 5902|  65.4k|    else {
 5903|  65.4k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|  65.4k|            value, context_tag<Context>{}));
 5905|  65.4k|    }
 5906|  65.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5795|  65.4k|    {
 5796|  65.4k|        return {};
 5797|  65.4k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5864|  65.4k|{
 5865|  65.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  65.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  65.4k|    constexpr bool scannable_char =
 5869|  65.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  65.4k|    static_assert(scannable_char,
 5871|  65.4k|                  "Cannot scan an argument of an unsupported character "
 5872|  65.4k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  65.4k|    constexpr bool scannable_const =
 5875|  65.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  65.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  65.4k|    constexpr bool scannable_disabled =
 5879|  65.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  65.4k|    static_assert(scannable_disabled,
 5881|  65.4k|                  "Cannot scan an argument that has been disabled by "
 5882|  65.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  65.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  65.4k|    static_assert(
 5886|  65.4k|        scannable,
 5887|  65.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  65.4k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  65.4k|    return arg_value{arg};
 5891|  65.4k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5651|  65.4k|        : custom_value{static_cast<void*>(&val.val),
 5652|  65.4k|                       scan_custom_arg<T, Context>}
 5653|  65.4k|    {
 5654|  65.4k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5669|  65.4k|    {
 5670|  65.4k|        static_assert(!is_type_disabled<T>,
 5671|  65.4k|                      "Scanning of custom types is disabled by "
 5672|  65.4k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5673|  65.4k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1104|  65.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  65.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5674|       |
 5675|  65.4k|        using context_type = Context;
 5676|  65.4k|        using parse_context_type = typename context_type::parse_context_type;
 5677|  65.4k|        using scanner_type = typename context_type::template scanner_type<T>;
 5678|       |
 5679|  65.4k|        auto s = scanner_type{};
 5680|       |
 5681|  65.4k|        auto& arg_ref = *static_cast<T*>(arg);
 5682|  65.4k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5683|  65.4k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5684|       |
 5685|  65.4k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3948|  65.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.39k, False: 62.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.39k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.39k|    }
  ------------------
 5686|  62.0k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3958|  62.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  62.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  62.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  62.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 47.4k, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  47.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  47.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  47.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  47.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  47.4k|    }                                                  \
  |  |  |  | 3957|  62.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5687|  14.5k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  14.5k|    static_cast<    \
  |  | 1109|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5688|       |
 5689|  14.5k|        return {};
 5690|  62.0k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5602|  65.4k|{
 5603|  65.4k|#if SCN_HAS_EXCEPTIONS
 5604|  65.4k|    auto fmt_it = pctx.begin();
 5605|  65.4k|    try {
 5606|  65.4k|        fmt_it = s.parse(pctx);
 5607|  65.4k|    }
 5608|  65.4k|    catch (const detail::scan_format_string_error_base& ex) {
 5609|       |        // scan_error takes a const char*.
 5610|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5611|       |        // stores a reference-counted string,
 5612|       |        // that will go out of scope here.
 5613|       |        // We need to provide a const char* that will stay in scope.
 5614|       |        // If scan_format_string_error was thrown with a string literal,
 5615|       |        // use that, otherwise refer to a thread_local std::string
 5616|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5616:25): [True: 0, False: 0]
  ------------------
 5617|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5618|      0|        }
 5619|      0|        thread_local std::string err_msg{};
 5620|      0|        err_msg = ex.what();
 5621|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                     err_msg.c_str());
 5623|      0|    }
 5624|       |#else
 5625|       |    auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  65.4k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.39k, False: 62.0k]
  |  |  ------------------
  ------------------
 5628|  3.39k|        return e;
 5629|  3.39k|    }
 5630|  62.0k|    pctx.advance_to(fmt_it);
 5631|  62.0k|    return {};
 5632|  65.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5803|  65.4k|    {
 5804|  65.4k|        return {val};
 5805|  65.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  62.0k|        : basic_scan_args(store.desc, store.args.data())
 6222|  62.0k|    {
 6223|  62.0k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  31.0k|        : m_str(r.str)
 8850|  31.0k|    {
 8851|  31.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1753|  32.7k|    {
 1754|  32.7k|        return has_value();
 1755|  32.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1828|  47.2k|    {
 1829|  47.2k|        return &value();
 1830|  47.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1782|  47.2k|    {
 1783|  47.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  47.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  47.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  47.2k|        return this->get_value();
 1785|  47.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  657|  58.1k|    {
  658|  58.1k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 7.26k, False: 50.8k]
  ------------------
  659|  7.26k|            destroy_value();
  660|  7.26k|        }
  661|  50.8k|        else {
  662|  50.8k|            destroy_unexpected();
  663|  50.8k|        }
  664|  58.1k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5945|  3.39k|{
 5946|  3.39k|    check_scan_arg_types<T>();
 5947|       |
 5948|  3.39k|    basic_scan_arg<Context> arg;
 5949|  3.39k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  3.39k|    arg.m_value = make_value<Context>(value);
 5951|  3.39k|    return arg;
 5952|  3.39k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  76.3k|    {
 2883|  76.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  76.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  76.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  76.3k|    {
 2864|  76.3k|        return decay_copy(t.begin());
 2865|  76.3k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2107|  1.39M|{
 2108|  1.39M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  1.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  1.39M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   196k|    {
 2940|   196k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   196k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   196k|    {
 2922|   196k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   196k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEEDav:
 9848|  32.7k|{
 9849|  32.7k|    return scan_result_type<Source, Args...>();
 9850|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1565|  32.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  441|  32.7k|        : m_value(T{}), m_has_value(true)
  442|  32.7k|    {
  443|  32.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2Ev:
 6692|  32.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6535|  98.1k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3473|  98.1k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  32.7k|{
 9834|  32.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 25.4k, False: 7.26k]
  |  |  ------------------
  ------------------
 9835|  25.4k|        out = unexpected(in.error());
 9836|  25.4k|    }
 9837|  7.26k|    else {
 9838|  7.26k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  7.26k|    static_cast<    \
  |  | 1109|  7.26k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  7.26k|    }
 9840|  32.7k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1753|  98.1k|    {
 1754|  98.1k|        return has_value();
 1755|  98.1k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   196k|    {
  505|   196k|        return m_has_value;
  506|   196k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1759|  76.3k|    {
 1760|  76.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  76.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  76.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  76.3k|        return this->get_unexpected().error();
 1762|  76.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  76.3k|    {
  488|  76.3k|        return m_unexpected;
  489|  76.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  25.4k|        : base(unexpect, std::move(e.error())),
 1630|  25.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.4k|    {
 1632|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  464|  25.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  25.4k|          m_has_value(false)
  466|  25.4k|    {
  467|  25.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  25.4k|    {
 1330|  25.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1570|  25.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  916|  25.4k|    {
  917|  25.4k|        assign_common(std::move(other));
  918|  25.4k|        return *this;
  919|  25.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  25.4k|    {
  964|  25.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 25.4k, False: 0]
  ------------------
  965|  25.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 25.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  25.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  25.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   130k|    {
  505|   130k|        return m_has_value;
  506|   130k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  47.2k|    {
  471|  47.2k|        return m_value;
  472|  47.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  25.4k|    {
 1060|  25.4k|        this->destroy_value();
 1061|  25.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  25.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  518|  25.4k|    {
  519|  25.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  25.4k|                                  std::forward<Args>(args)...);
  521|  25.4k|        m_has_value = false;
  522|  25.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  25.4k|    {
  488|  25.4k|        return m_unexpected;
  489|  25.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  25.4k|    {
  496|  25.4k|        return std::move(m_unexpected);
  497|  25.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6566|  21.8k|    {
 6567|  21.8k|        m_range = std::forward<Other>(r);
 6568|  21.8k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|  21.8k|    {
 1809|  21.8k|        return value();
 1810|  21.8k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|  21.8k|    {
 1783|  21.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  21.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  21.8k|        return this->get_value();
 1785|  21.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  21.8k|    {
  471|  21.8k|        return m_value;
  472|  21.8k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|  46.5k|{
 9592|  46.5k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  46.5k|    auto result = vscan_impl(buffer, format, args);
 9595|  46.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  46.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.6k, False: 10.9k]
  |  |  ------------------
  ------------------
 9596|  35.6k|        return unexpected(result.error());
 9597|  35.6k|    }
 9598|  10.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  46.5k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5398|  98.1k|{
 5399|  98.1k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|  98.1k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|  98.1k|                  "\n"
 5403|  98.1k|                  "Unsupported range type given as input to a scanning "
 5404|  98.1k|                  "function.\n"
 5405|  98.1k|                  "A range needs to have a character type (value type) "
 5406|  98.1k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|  98.1k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|  98.1k|                  "to be included.\n"
 5409|  98.1k|                  "See the scnlib documentation for more details.");
 5410|  98.1k|    static_assert(
 5411|  98.1k|        !std::is_same_v<T, custom_char_traits>,
 5412|  98.1k|        "\n"
 5413|  98.1k|        "Unsupported range type given as input to a scanning "
 5414|  98.1k|        "function.\n"
 5415|  98.1k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|  98.1k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|  98.1k|        "not supported.");
 5418|  98.1k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|  98.1k|                  "\n"
 5420|  98.1k|                  "Unsupported range type given as input to a scanning "
 5421|  98.1k|                  "function.\n"
 5422|  98.1k|                  "file_marker_found cannot be used as an "
 5423|  98.1k|                  "source range type to scn::scan.\n"
 5424|  98.1k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|  98.1k|                  "and do not provide an explicit source range, "
 5426|  98.1k|                  "or use scn::scan with a FILE* directly.");
 5427|  98.1k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|  98.1k|                  "\n"
 5429|  98.1k|                  "Unsupported range type given as input to a scanning "
 5430|  98.1k|                  "function.\n"
 5431|  98.1k|                  "In order to be scannable, a range needs to satisfy "
 5432|  98.1k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|  98.1k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|  98.1k|                  "\n"
 5435|  98.1k|                  "Unsupported range type given as input to a scanning "
 5436|  98.1k|                  "function.\n"
 5437|  98.1k|                  "A range needs to model forward_range and have a valid "
 5438|  98.1k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|  98.1k|                  "Examples of scannable ranges are std::string, "
 5440|  98.1k|                  "std::string_view, "
 5441|  98.1k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|  98.1k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|  98.1k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|  98.1k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|  98.1k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|  98.1k|    else {
 5384|  98.1k|        return make_forward_scan_buffer(r);
 5385|  98.1k|    }
 5386|  98.1k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5202|  98.1k|{
 5203|  98.1k|    return basic_scan_forward_buffer_impl(range);
 5204|  98.1k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|  98.1k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|  98.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|  98.1k|          m_cursor(ranges::begin(*m_range))
 4784|  98.1k|    {
 4785|  98.1k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4754|  98.1k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|  98.1k|    {
 4756|  98.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4445|  98.1k|        : m_current_view(sv), m_is_contiguous(false)
 4446|  98.1k|    {
 4447|  98.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4358|   191k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   119k|    {
 2883|   119k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   119k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   119k|    {
 2864|   119k|        return decay_copy(t.begin());
 2865|   119k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3493|   141k|    {
 3494|   141k|        return m_iterator;
 3495|   141k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4788|   331k|    {
 4789|   331k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 18.7k, False: 312k]
  ------------------
 4790|  18.7k|            return false;
 4791|  18.7k|        }
 4792|   312k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|   312k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|   312k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   312k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|   312k|        }
 4795|   312k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 219k, False: 92.9k]
  ------------------
 4796|   219k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|   219k|                                          this->m_current_view.begin(),
 4798|   219k|                                          this->m_current_view.end());
 4799|   219k|        }
 4800|   312k|        m_latest = *m_cursor;
 4801|   312k|        ++m_cursor;
 4802|   312k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|   312k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|   312k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|   312k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   312k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|   312k|        }
 4806|   312k|        return true;
 4807|   331k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   957k|    {
 2940|   957k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   957k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   957k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   957k|    {
 2922|   957k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   957k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   957k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3497|   979k|    {
 3498|   979k|        return m_sentinel;
 3499|   979k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4363|  98.1k|    {
 4364|  98.1k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|  98.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|  98.1k|        return true;
 4366|  98.1k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|  76.3k|        : base(unexpect, std::move(e.error())),
 1630|  76.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  76.3k|    {
 1632|  76.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|  76.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  76.3k|          m_has_value(false)
  466|  76.3k|    {
  467|  76.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  98.1k|    {
 1330|  98.1k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|  21.8k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  21.8k|                      ranges::iterator_t<SourceRange>>) {
 6799|  21.8k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  21.8k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  21.8k|    {
 2883|  21.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  21.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  21.8k|    {
 2864|  21.8k|        return decay_copy(t.begin());
 2865|  21.8k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6783|  21.8k|{
 6784|  21.8k|    return ranges::end(source);
 6785|  21.8k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  21.8k|    {
 2940|  21.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  21.8k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  21.8k|    {
 2922|  21.8k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  21.8k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|  21.8k|        : base(std::in_place, std::forward<U>(val)),
 1584|  21.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  21.8k|    {
 1586|  21.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|  21.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  21.8k|    {
  457|  21.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|  31.0k|    {
 8855|  31.0k|        return m_str;
 8856|  31.0k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|   119k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   119k|    static_cast<    \
  |  | 1109|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   119k|    static_cast<    \
  |  | 1109|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   119k|    {
 3480|   119k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  31.0k|        : m_str(r.str)
 8850|  31.0k|    {
 8851|  31.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1753|  32.7k|    {
 1754|  32.7k|        return has_value();
 1755|  32.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1828|  47.2k|    {
 1829|  47.2k|        return &value();
 1830|  47.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  47.2k|    {
 1783|  47.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  47.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  47.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  47.2k|        return this->get_value();
 1785|  47.2k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6555|  21.8k|    {
 6556|  21.8k|        return ranges::begin(m_range);
 6557|  21.8k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|  46.5k|{
 9608|  46.5k|#if !SCN_DISABLE_LOCALE
 9609|  46.5k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  46.5k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  46.5k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  46.5k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  46.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  46.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.6k, False: 10.9k]
  |  |  ------------------
  ------------------
 9616|  35.6k|        return unexpected(result.error());
 9617|  35.6k|    }
 9618|  10.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  46.5k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  5.08k|{
 9632|  5.08k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  5.08k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  5.08k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  5.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.08k, False: 0]
  |  |  ------------------
  ------------------
 9636|  5.08k|        return unexpected(result.error());
 9637|  5.08k|    }
 9638|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  5.08k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9848|  32.7k|{
 9849|  32.7k|    return scan_result_type<Source, Args...>();
 9850|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1565|  32.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  626|  32.7k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  32.7k|    {
  628|  32.7k|        construct();
  629|  32.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  32.7k|    {
  709|  32.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  32.7k|        m_has_value = true;
  711|  32.7k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  410|  32.7k|{
  411|  32.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  32.7k|        T(std::forward<Args>(args)...);
  413|  32.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6692|  32.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   112k|    {
  733|   112k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   112k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   112k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  32.7k|{
 9834|  32.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 25.4k, False: 7.26k]
  |  |  ------------------
  ------------------
 9835|  25.4k|        out = unexpected(in.error());
 9836|  25.4k|    }
 9837|  7.26k|    else {
 9838|  7.26k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  7.26k|    static_cast<    \
  |  | 1109|  7.26k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  7.26k|    }
 9840|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  25.4k|        : base(unexpect, std::move(e.error())),
 1630|  25.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.4k|    {
 1632|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  25.4k|        : m_has_value(false)
  652|  25.4k|    {
  653|  25.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  715|  25.4k|    {
  716|  25.4k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.4k|                                  std::forward<Args>(args)...);
  718|  25.4k|        m_has_value = false;
  719|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|   127k|    {
  745|   127k|        return reinterpret_cast<unexpected<E>*>(
  746|   127k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|   127k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|   127k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  25.4k|    {
 1330|  25.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  25.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  916|  25.4k|    {
  917|  25.4k|        assign_common(std::move(other));
  918|  25.4k|        return *this;
  919|  25.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  25.4k|    {
  964|  25.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 25.4k, False: 0]
  ------------------
  965|  25.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 25.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  25.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  25.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   188k|    {
  702|   188k|        return m_has_value;
  703|   188k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  47.2k|    {
  668|  47.2k|        return *value_ptr();
  669|  47.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  25.4k|    {
 1060|  25.4k|        this->destroy_value();
 1061|  25.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  32.7k|    {
  723|  32.7k|        scn::detail::destroy_at(value_ptr());
  724|  32.7k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  416|  32.7k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  32.7k|    else {
  423|  32.7k|        p->~T();
  424|  32.7k|    }
  425|  32.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6699|  32.7k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  25.4k|    {
  716|  25.4k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.4k|                                  std::forward<Args>(args)...);
  718|  25.4k|        m_has_value = false;
  719|  25.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  25.4k|    {
  693|  25.4k|        return std::move(*unexpected_ptr());
  694|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  50.8k|    {
  727|  50.8k|        scn::detail::destroy_at(unexpected_ptr());
  728|  50.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|  31.0k|    {
 8855|  31.0k|        return m_str;
 8856|  31.0k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  31.0k|        : m_str(r.str)
 8850|  31.0k|    {
 8851|  31.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1753|  32.7k|    {
 1754|  32.7k|        return has_value();
 1755|  32.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1828|  47.2k|    {
 1829|  47.2k|        return &value();
 1830|  47.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  47.2k|    {
 1783|  47.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  47.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  47.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  47.2k|        return this->get_value();
 1785|  47.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  657|  58.1k|    {
  658|  58.1k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 7.26k, False: 50.8k]
  ------------------
  659|  7.26k|            destroy_value();
  660|  7.26k|        }
  661|  50.8k|        else {
  662|  50.8k|            destroy_unexpected();
  663|  50.8k|        }
  664|  58.1k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9848|  32.7k|{
 9849|  32.7k|    return scan_result_type<Source, Args...>();
 9850|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1565|  32.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  626|  32.7k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  32.7k|    {
  628|  32.7k|        construct();
  629|  32.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  32.7k|    {
  709|  32.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  32.7k|        m_has_value = true;
  711|  32.7k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  410|  32.7k|{
  411|  32.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  32.7k|        T(std::forward<Args>(args)...);
  413|  32.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6692|  32.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   112k|    {
  733|   112k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   112k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   112k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  32.7k|{
 9834|  32.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 25.4k, False: 7.26k]
  |  |  ------------------
  ------------------
 9835|  25.4k|        out = unexpected(in.error());
 9836|  25.4k|    }
 9837|  7.26k|    else {
 9838|  7.26k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  7.26k|    static_cast<    \
  |  | 1109|  7.26k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  7.26k|    }
 9840|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  25.4k|        : base(unexpect, std::move(e.error())),
 1630|  25.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.4k|    {
 1632|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  25.4k|        : m_has_value(false)
  652|  25.4k|    {
  653|  25.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  715|  25.4k|    {
  716|  25.4k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.4k|                                  std::forward<Args>(args)...);
  718|  25.4k|        m_has_value = false;
  719|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|   127k|    {
  745|   127k|        return reinterpret_cast<unexpected<E>*>(
  746|   127k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|   127k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|   127k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  25.4k|    {
 1330|  25.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  25.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  916|  25.4k|    {
  917|  25.4k|        assign_common(std::move(other));
  918|  25.4k|        return *this;
  919|  25.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  25.4k|    {
  964|  25.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 25.4k, False: 0]
  ------------------
  965|  25.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 25.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  25.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  25.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   188k|    {
  702|   188k|        return m_has_value;
  703|   188k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  47.2k|    {
  668|  47.2k|        return *value_ptr();
  669|  47.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  25.4k|    {
 1060|  25.4k|        this->destroy_value();
 1061|  25.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  32.7k|    {
  723|  32.7k|        scn::detail::destroy_at(value_ptr());
  724|  32.7k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  416|  32.7k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  32.7k|    else {
  423|  32.7k|        p->~T();
  424|  32.7k|    }
  425|  32.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6699|  32.7k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  25.4k|    {
  716|  25.4k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.4k|                                  std::forward<Args>(args)...);
  718|  25.4k|        m_has_value = false;
  719|  25.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  25.4k|    {
  693|  25.4k|        return std::move(*unexpected_ptr());
  694|  25.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  50.8k|    {
  727|  50.8k|        scn::detail::destroy_at(unexpected_ptr());
  728|  50.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|  31.0k|    {
 8855|  31.0k|        return m_str;
 8856|  31.0k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  31.0k|        : m_str(r.str)
 8850|  31.0k|    {
 8851|  31.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1753|  32.7k|    {
 1754|  32.7k|        return has_value();
 1755|  32.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1828|  47.2k|    {
 1829|  47.2k|        return &value();
 1830|  47.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  47.2k|    {
 1783|  47.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  47.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  47.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  47.2k|        return this->get_value();
 1785|  47.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  657|  58.1k|    {
  658|  58.1k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 7.26k, False: 50.8k]
  ------------------
  659|  7.26k|            destroy_value();
  660|  7.26k|        }
  661|  50.8k|        else {
  662|  50.8k|            destroy_unexpected();
  663|  50.8k|        }
  664|  58.1k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  1.33M|    {
 3494|  1.33M|        return m_iterator;
 3495|  1.33M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  1.07M|    {
 3494|  1.07M|        return m_iterator;
 3495|  1.07M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4490|  13.0M|    {
 4491|  13.0M|        assert(m_begin);
 4492|  13.0M|        return m_end == nullptr;
 4493|  13.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4507|   179k|    {
 4508|   179k|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 81.6k, False: 97.8k]
  ------------------
 4509|  81.6k|            return make_string_view_from_pointers(
 4510|  81.6k|                static_cast<const CharT*>(m_begin) + position(),
 4511|  81.6k|                static_cast<const CharT*>(m_end));
 4512|  81.6k|        }
 4513|  97.8k|        return parent()->get_segment_starting_at(position());
 4514|   179k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4501|  7.55M|    {
 4502|  7.55M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  7.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  7.55M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  7.55M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4394|  97.8k|    {
 4395|  97.8k|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  97.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 97.8k]
  |  |  ------------------
  ------------------
 4396|  97.8k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|      0|        }
 4399|  97.8k|        const auto start = pos - m_putback_buffer.size();
 4400|  97.8k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|  97.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  97.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|  97.8k|        return m_current_view.substr(start);
 4402|  97.8k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4485|   271k|    {
 4486|   271k|        return m_position;
 4487|   271k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4416|   382k|    {
 4417|   382k|        return m_is_contiguous;
 4418|   382k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4490|  6.49M|    {
 4491|  6.49M|        assert(m_begin);
 4492|  6.49M|        return m_end == nullptr;
 4493|  6.49M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4507|  93.0k|    {
 4508|  93.0k|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 93.0k, False: 0]
  ------------------
 4509|  93.0k|            return make_string_view_from_pointers(
 4510|  93.0k|                static_cast<const CharT*>(m_begin) + position(),
 4511|  93.0k|                static_cast<const CharT*>(m_end));
 4512|  93.0k|        }
 4513|      0|        return parent()->get_segment_starting_at(position());
 4514|  93.0k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4501|  3.59M|    {
 4502|  3.59M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  3.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  3.59M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  3.59M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4485|   136k|    {
 4486|   136k|        return m_position;
 4487|   136k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4416|   387k|    {
 4417|   387k|        return m_is_contiguous;
 4418|   387k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3347|   247k|    {
 3348|   247k|        return static_cast<D&>(*this);
 3349|   247k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3388|   247k|    {
 3389|   247k|        return detail::to_address(ranges::begin(derived()));
 3390|   247k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3347|   191k|    {
 3348|   191k|        return static_cast<D&>(*this);
 3349|   191k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3388|   191k|    {
 3389|   191k|        return detail::to_address(ranges::begin(derived()));
 3390|   191k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9051|   194k|    {
 9052|   194k|        return ranges::subrange{begin(), end()};
 9053|   194k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9043|   194k|    {
 9044|   194k|        return ranges::default_sentinel;
 9045|   194k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|   716k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   716k|    static_cast<    \
  |  | 1109|   716k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   716k|    static_cast<    \
  |  | 1109|   716k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   716k|    {
 3480|   716k|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8870|   198k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  97.8k|    {
 1993|  97.8k|        return detail::transform_error_impl(std::move(*this),
 1994|  97.8k|                                            std::forward<F>(f));
 1995|  97.8k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|  97.8k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  97.8k|    else {
 1486|  97.8k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  97.8k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  97.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 96.3k, False: 1.44k]
  |  |  ------------------
  ------------------
 1488|  97.8k|                   ? result(*std::forward<Exp>(exp))
 1489|  97.8k|                   : result(unexpect,
 1490|  1.44k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.44k|                                           std::forward<Exp>(exp).error()));
 1492|  97.8k|    }
 1493|  97.8k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   195k|    {
  505|   195k|        return m_has_value;
  506|   195k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  96.3k|    {
 1819|  96.3k|        return std::move(value());
 1820|  96.3k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  96.3k|    {
 1783|  96.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  96.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  96.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  96.3k|        return this->get_value();
 1785|  96.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  96.3k|    {
  471|  96.3k|        return m_value;
  472|  96.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|   266k|        : base(std::in_place, std::forward<U>(val)),
 1584|   266k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   266k|    {
 1586|   266k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|   266k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   266k|    {
  457|   266k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   459k|    {
 1330|   459k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|  4.26k|{
 1364|  4.26k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  4.26k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  1.44k|    {
 1770|  1.44k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  1.44k|        return std::move(this->get_unexpected().error());
 1772|  1.44k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  1.44k|    {
  488|  1.44k|        return m_unexpected;
  489|  1.44k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  379|  8.53k|    {
  380|  8.53k|        return m_unexpected;
  381|  8.53k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.44k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.44k|    {
 1642|  1.44k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   146k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   146k|          m_has_value(false)
  466|   146k|    {
  467|   146k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9051|   185k|    {
 9052|   185k|        return ranges::subrange{begin(), end()};
 9053|   185k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9043|   185k|    {
 9044|   185k|        return ranges::default_sentinel;
 9045|   185k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|   641k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   641k|    static_cast<    \
  |  | 1109|   641k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   641k|    static_cast<    \
  |  | 1109|   641k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   641k|    {
 3480|   641k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  93.0k|    {
 1993|  93.0k|        return detail::transform_error_impl(std::move(*this),
 1994|  93.0k|                                            std::forward<F>(f));
 1995|  93.0k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|  93.0k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  93.0k|    else {
 1486|  93.0k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  93.0k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  93.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 91.9k, False: 1.04k]
  |  |  ------------------
  ------------------
 1488|  93.0k|                   ? result(*std::forward<Exp>(exp))
 1489|  93.0k|                   : result(unexpect,
 1490|  1.04k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.04k|                                           std::forward<Exp>(exp).error()));
 1492|  93.0k|    }
 1493|  93.0k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   186k|    {
  505|   186k|        return m_has_value;
  506|   186k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  91.9k|    {
 1819|  91.9k|        return std::move(value());
 1820|  91.9k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  91.9k|    {
 1783|  91.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  91.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  91.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  91.9k|        return this->get_value();
 1785|  91.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  91.9k|    {
  471|  91.9k|        return m_value;
  472|  91.9k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|   157k|        : base(std::in_place, std::forward<U>(val)),
 1584|   157k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   157k|    {
 1586|   157k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|   157k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   157k|    {
  457|   157k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   470k|    {
 1330|   470k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  1.04k|    {
 1770|  1.04k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  1.04k|        return std::move(this->get_unexpected().error());
 1772|  1.04k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  1.04k|    {
  488|  1.04k|        return m_unexpected;
  489|  1.04k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.04k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.04k|    {
 1642|  1.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   291k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   291k|          m_has_value(false)
  466|   291k|    {
  467|   291k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   228k|        : base(unexpect, std::move(e.error())),
 1630|   228k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   228k|    {
 1632|   228k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  464|   228k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   228k|          m_has_value(false)
  466|   228k|    {
  467|   228k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   380k|    {
 1330|   380k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|  38.1k|        : base(unexpect, std::move(e.error())),
 1630|  38.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  38.1k|    {
 1632|  38.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|  38.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  38.8k|          m_has_value(false)
  466|  38.8k|    {
  467|  38.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   165k|    {
 1330|   165k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|   126k|        : base(std::in_place, std::forward<U>(val)),
 1584|   126k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   126k|    {
 1586|   126k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   126k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   126k|    {
  457|   126k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1753|   165k|    {
 1754|   165k|        return has_value();
 1755|   165k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  504|   331k|    {
  505|   331k|        return m_has_value;
  506|   331k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1759|  38.8k|    {
 1760|  38.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  38.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  38.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  38.8k|        return this->get_unexpected().error();
 1762|  38.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  38.8k|    {
  488|  38.8k|        return m_unexpected;
  489|  38.8k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|   126k|    {
 1819|   126k|        return std::move(value());
 1820|   126k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|   126k|    {
 1783|   126k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   126k|        return this->get_value();
 1785|   126k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  470|   126k|    {
  471|   126k|        return m_value;
  472|   126k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|  76.3k|        : base(unexpect, std::move(e.error())),
 1630|  76.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  76.3k|    {
 1632|  76.3k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|  77.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  77.3k|          m_has_value(false)
  466|  77.3k|    {
  467|  77.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   191k|    {
 1330|   191k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|   113k|        : base(std::in_place, std::forward<U>(val)),
 1584|   113k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   113k|    {
 1586|   113k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   113k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   113k|    {
  457|   113k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1753|   191k|    {
 1754|   191k|        return has_value();
 1755|   191k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  504|   382k|    {
  505|   382k|        return m_has_value;
  506|   382k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1759|  77.3k|    {
 1760|  77.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  77.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  77.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  77.3k|        return this->get_unexpected().error();
 1762|  77.3k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  77.3k|    {
  488|  77.3k|        return m_unexpected;
  489|  77.3k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|   113k|    {
 1819|   113k|        return std::move(value());
 1820|   113k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|   113k|    {
 1783|   113k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   113k|        return this->get_value();
 1785|   113k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  470|   113k|    {
  471|   113k|        return m_value;
  472|   113k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  81.6k|    {
 1993|  81.6k|        return detail::transform_error_impl(std::move(*this),
 1994|  81.6k|                                            std::forward<F>(f));
 1995|  81.6k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  81.6k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  81.6k|    else {
 1486|  81.6k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  81.6k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  81.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 80.8k, False: 738]
  |  |  ------------------
  ------------------
 1488|  81.6k|                   ? result(*std::forward<Exp>(exp))
 1489|  81.6k|                   : result(unexpect,
 1490|    738|                            trivial_invoke(std::forward<F>(f),
 1491|    738|                                           std::forward<Exp>(exp).error()));
 1492|  81.6k|    }
 1493|  81.6k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   163k|    {
  505|   163k|        return m_has_value;
  506|   163k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  80.8k|    {
 1819|  80.8k|        return std::move(value());
 1820|  80.8k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  80.8k|    {
 1783|  80.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  80.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  80.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  80.8k|        return this->get_value();
 1785|  80.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  80.8k|    {
  471|  80.8k|        return m_value;
  472|  80.8k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1769|    738|    {
 1770|    738|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    738|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    738|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    738|        return std::move(this->get_unexpected().error());
 1772|    738|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|    738|    {
  488|    738|        return m_unexpected;
  489|    738|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|    738|        : base(unexpect, std::forward<Args>(args)...),
 1640|    738|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    738|    {
 1642|    738|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9035|   769k|    {
 9036|   769k|        return m_current;
 9037|   769k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8923|   163k|    {
 8924|   163k|        return m_args;
 8925|   163k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8928|   340k|    {
 8929|   340k|        return m_locale;
 8930|   340k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8934|   347k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   347k|    static_cast<    \
  |  | 1109|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   347k|    static_cast<    \
  |  | 1109|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   347k|    {
 8936|   347k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   163k|    {
 3014|   163k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   163k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   163k|    {
 2995|   163k|        return t.data();
 2996|   163k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|  81.6k|    {
 3089|  81.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  81.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3054|  81.6k|    {
 3055|  81.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  81.6k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   145k|        : base(unexpect, std::move(e.error())),
 1630|   145k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   145k|    {
 1632|   145k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1583|  46.0k|        : base(std::in_place, std::forward<U>(val)),
 1584|  46.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  46.0k|    {
 1586|  46.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|  46.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  46.0k|    {
  457|  46.0k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9035|   644k|    {
 9036|   644k|        return m_current;
 9037|   644k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8923|   186k|    {
 8924|   186k|        return m_args;
 8925|   186k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8928|   370k|    {
 8929|   370k|        return m_locale;
 8930|   370k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8934|   382k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   382k|    static_cast<    \
  |  | 1109|   382k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   382k|    static_cast<    \
  |  | 1109|   382k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   382k|    {
 8936|   382k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   186k|    {
 3014|   186k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   186k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   186k|    {
 2995|   186k|        return t.data();
 2996|   186k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|  93.0k|    {
 3089|  93.0k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  93.0k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3054|  93.0k|    {
 3055|  93.0k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  93.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   290k|        : base(unexpect, std::move(e.error())),
 1630|   290k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   290k|    {
 1632|   290k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1583|  21.8k|        : base(std::in_place, std::forward<U>(val)),
 1584|  21.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  21.8k|    {
 1586|  21.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|  21.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  21.8k|    {
  457|  21.8k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|   540k|    {
 4577|   540k|        return x.is_at_end();
 4578|   540k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4620|  1.34M|    {
 4621|  1.34M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 1.34M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  1.34M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 1.34M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  1.34M|        return !read_at_position();
 4628|  1.34M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4600|  3.90M|    {
 4601|  3.90M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  3.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  3.90M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 3.90M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  3.90M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  3.90M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 3.11M, False: 787k]
  |  |  ------------------
  ------------------
 4608|  3.11M|            return true;
 4609|  3.11M|        }
 4610|       |
 4611|  1.55M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 787k, False: 772k]
  ------------------
 4612|   787k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 14.8k, False: 772k]
  ------------------
 4613|  14.8k|                return false;
 4614|  14.8k|            }
 4615|   787k|        }
 4616|   772k|        return true;
 4617|   787k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4535|  1.21M|    {
 4536|  1.21M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  1.21M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 1.21M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  1.21M|        auto res = read_at_position();
 4545|  1.21M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  1.21M|        return parent()->get_character_at(m_position);
 4547|  1.21M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4405|  1.21M|    {
 4406|  1.21M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 388k, False: 824k]
  |  |  ------------------
  ------------------
 4407|  1.21M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|   388k|            return m_putback_buffer[pos];
 4409|   388k|        }
 4410|   824k|        const auto start = pos - m_putback_buffer.size();
 4411|   824k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|   824k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   824k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|   824k|        return m_current_view[start];
 4413|   824k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|  96.3k|        : base(std::in_place, std::forward<U>(val)),
 1584|  96.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  96.3k|    {
 1586|  96.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  96.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  96.3k|    {
  457|  96.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  97.8k|    {
 1330|  97.8k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  1.44k|        : base(unexpect, std::move(e.error())),
 1630|  1.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.44k|    {
 1632|  1.44k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  1.44k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.44k|          m_has_value(false)
  466|  1.44k|    {
  467|  1.44k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|  4.26k|        : m_unexpected(std::forward<Args>(args)...)
  374|  4.26k|    {
  375|  4.26k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  4.26k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  4.26k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4521|  1.34M|    {
 4522|  1.34M|        ++m_position;
 4523|  1.34M|        (void)read_at_position();
 4524|  1.34M|        return *this;
 4525|  1.34M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4570|   606k|    {
 4571|   606k|        return !(lhs == rhs);
 4572|   606k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4565|   606k|    {
 4566|   606k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 606k, False: 0]
  |  Branch (4566:46): [True: 72.5k, False: 533k]
  ------------------
 4567|   606k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  364|  4.26k|        : m_unexpected(std::forward<Err>(e))
  365|  4.26k|    {
  366|  4.26k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  4.26k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  4.26k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  1.67M|    {
 3498|  1.67M|        return m_sentinel;
 3499|  1.67M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|   800k|    {
 4588|   800k|        return !x.is_at_end();
 4589|   800k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|    738|        : base(unexpect, std::move(e.error())),
 1630|    738|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    738|    {
 1632|    738|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|    738|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    738|          m_has_value(false)
  466|    738|    {
  467|    738|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  81.6k|    {
 1330|  81.6k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  80.8k|        : base(std::in_place, std::forward<U>(val)),
 1584|  80.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  80.8k|    {
 1586|  80.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  80.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  80.8k|    {
  457|  80.8k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   244k|    {
 3014|   244k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   244k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   244k|    {
 2995|   244k|        return t.data();
 2996|   244k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1583|   151k|        : base(std::in_place, std::forward<U>(val)),
 1584|   151k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   151k|    {
 1586|   151k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  455|   151k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   151k|    {
  457|   151k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|   108k|    {
 1809|   108k|        return value();
 1810|   108k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2882|  96.3k|    {
 2883|  96.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  96.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  96.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2863|  96.3k|    {
 2864|  96.3k|        return decay_copy(t.begin());
 2865|  96.3k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2107|  96.3k|{
 2108|  96.3k|    return SCN_FWD(t);
  ------------------
  |  | 1110|  96.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  96.3k|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|  81.6k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  81.6k|    static_cast<    \
  |  | 1109|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  81.6k|    {
 3930|  81.6k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3928|  97.8k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  97.8k|    static_cast<    \
  |  | 1109|  97.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  97.8k|    {
 3930|  97.8k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|   412k|    {
 4577|   412k|        return x.is_at_end();
 4578|   412k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4620|   791k|    {
 4621|   791k|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 791k]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|   791k|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 791k]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|   791k|        return !read_at_position();
 4628|   791k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4600|  1.92M|    {
 4601|  1.92M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  1.92M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 1.92M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  1.92M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  1.92M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.58M, False: 331k]
  |  |  ------------------
  ------------------
 4608|  1.58M|            return true;
 4609|  1.58M|        }
 4610|       |
 4611|   644k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 331k, False: 312k]
  ------------------
 4612|   331k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 18.7k, False: 312k]
  ------------------
 4613|  18.7k|                return false;
 4614|  18.7k|            }
 4615|   331k|        }
 4616|   312k|        return true;
 4617|   331k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4374|  2.56M|    {
 4375|  2.56M|        return m_putback_buffer.size() + m_current_view.size();
 4376|  2.56M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4535|   696k|    {
 4536|   696k|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|   696k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   696k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|   696k|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 696k]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|   696k|        auto res = read_at_position();
 4545|   696k|        SCN_EXPECT(res);
  ------------------
  |  | 1104|   696k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   696k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|   696k|        return parent()->get_character_at(m_position);
 4547|   696k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4405|   696k|    {
 4406|   696k|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|   696k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 380k, False: 315k]
  |  |  ------------------
  ------------------
 4407|   696k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|   380k|            return m_putback_buffer[pos];
 4409|   380k|        }
 4410|   315k|        const auto start = pos - m_putback_buffer.size();
 4411|   315k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|   315k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   315k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|   315k|        return m_current_view[start];
 4413|   315k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|  91.9k|        : base(std::in_place, std::forward<U>(val)),
 1584|  91.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  91.9k|    {
 1586|  91.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  91.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  91.9k|    {
  457|  91.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  93.0k|    {
 1330|  93.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  1.04k|        : base(unexpect, std::move(e.error())),
 1630|  1.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.04k|    {
 1632|  1.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  1.04k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.04k|          m_has_value(false)
  466|  1.04k|    {
  467|  1.04k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4521|   432k|    {
 4522|   432k|        ++m_position;
 4523|   432k|        (void)read_at_position();
 4524|   432k|        return *this;
 4525|   432k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4570|   150k|    {
 4571|   150k|        return !(lhs == rhs);
 4572|   150k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4565|   150k|    {
 4566|   150k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 150k, False: 0]
  |  Branch (4566:46): [True: 21.8k, False: 129k]
  ------------------
 4567|   150k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  1.05M|    {
 3498|  1.05M|        return m_sentinel;
 3499|  1.05M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|   379k|    {
 4588|   379k|        return !x.is_at_end();
 4589|   379k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  1.04k|        : base(unexpect, std::move(e.error())),
 1630|  1.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.04k|    {
 1632|  1.04k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  1.04k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.04k|          m_has_value(false)
  466|  1.04k|    {
  467|  1.04k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  93.0k|    {
 1330|  93.0k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  91.9k|        : base(std::in_place, std::forward<U>(val)),
 1584|  91.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  91.9k|    {
 1586|  91.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  91.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  91.9k|    {
  457|  91.9k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   186k|    {
  505|   186k|        return m_has_value;
  506|   186k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  91.9k|    {
 1783|  91.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  91.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  91.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  91.9k|        return this->get_value();
 1785|  91.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  91.9k|    {
  471|  91.9k|        return m_value;
  472|  91.9k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  93.0k|    {
 1993|  93.0k|        return detail::transform_error_impl(std::move(*this),
 1994|  93.0k|                                            std::forward<F>(f));
 1995|  93.0k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  93.0k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  93.0k|    else {
 1486|  93.0k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  93.0k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  93.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 91.9k, False: 1.04k]
  |  |  ------------------
  ------------------
 1488|  93.0k|                   ? result(*std::forward<Exp>(exp))
 1489|  93.0k|                   : result(unexpect,
 1490|  1.04k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.04k|                                           std::forward<Exp>(exp).error()));
 1492|  93.0k|    }
 1493|  93.0k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  91.9k|    {
 1819|  91.9k|        return std::move(value());
 1820|  91.9k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1769|  1.04k|    {
 1770|  1.04k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  1.04k|        return std::move(this->get_unexpected().error());
 1772|  1.04k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  1.04k|    {
  488|  1.04k|        return m_unexpected;
  489|  1.04k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.04k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.04k|    {
 1642|  1.04k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   186k|    {
 3014|   186k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   186k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   186k|    {
 2995|   186k|        return t.data();
 2996|   186k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|  43.6k|    {
 1809|  43.6k|        return value();
 1810|  43.6k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2882|  91.9k|    {
 2883|  91.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  91.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  91.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2863|  91.9k|    {
 2864|  91.9k|        return decay_copy(t.begin());
 2865|  91.9k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2107|  91.9k|{
 2108|  91.9k|    return SCN_FWD(t);
  ------------------
  |  | 1110|  91.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  91.9k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|  93.0k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  93.0k|    static_cast<    \
  |  | 1109|  93.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  93.0k|    {
 3930|  93.0k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3928|  93.0k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  93.0k|    static_cast<    \
  |  | 1109|  93.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  93.0k|    {
 3930|  93.0k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4374|  5.45M|    {
 4375|  5.45M|        return m_putback_buffer.size() + m_current_view.size();
 4376|  5.45M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6262|   179k|    {
 6263|   179k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|   179k|        return static_cast<std::size_t>(m_desc &
 6268|   179k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|   179k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6288|   358k|    {
 6289|   358k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|   358k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6230|   179k|    {
 6231|   179k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|   179k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|   179k|        const auto t = type(id);
 6243|   179k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|   179k|        basic_scan_arg<Context> arg;
 6248|   179k|        arg.m_type = t;
 6249|   179k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 0, False: 179k]
  ------------------
 6250|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6251|      0|        }
 6252|   179k|        else {
 6253|   179k|            arg.m_value = m_values[id];
 6254|   179k|        }
 6255|   179k|        return arg;
 6256|   179k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6297|   179k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|   179k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|   179k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|   179k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|   179k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6292|   179k|    {
 6293|   179k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|   179k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6046|   363k|    {
 6047|   363k|        return m_type != detail::arg_type::none_type;
 6048|   363k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|  2.54k|{
 9494|  2.54k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  2.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  2.54k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  2.54k|{
 9353|  2.54k|#define SCN_VISIT(Type)                                                \
 9354|  2.54k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  2.54k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  2.54k|    }                                                                  \
 9357|  2.54k|    else {                                                             \
 9358|  2.54k|        return vis(monostate_val);                                     \
 9359|  2.54k|    }
 9360|       |
 9361|  2.54k|    monostate monostate_val{};
 9362|       |
 9363|  2.54k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 2.54k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 2.54k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 2.54k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 2.54k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 2.54k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 2.54k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 2.54k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 2.54k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 2.54k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 2.54k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 2.54k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 2.54k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 2.54k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 2.54k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 2.54k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 2.54k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 2.54k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 2.54k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 2.54k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 2.54k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 2.54k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 2.54k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 2.54k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 2.54k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 2.54k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 2.54k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 2.54k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 2.54k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|  2.54k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 2.54k, False: 0]
  ------------------
 9456|  2.54k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  2.54k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  2.54k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 2.54k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 2.54k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  2.54k|            SCN_CLANG_POP
 9473|  2.54k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|   363k|{
 6092|   363k|    return arg.m_type;
 6093|   363k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|   184k|{
 6104|   184k|    return arg.m_value;
 6105|   184k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEi:
 6361|  2.54k|        : m_format{format},
 6362|  2.54k|          m_next_arg_id{next_arg_id},
 6363|  2.54k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  2.54k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  2.54k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  2.54k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  2.54k|    {
 6369|  2.54k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2ENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEl:
 4478|  84.1k|        : m_begin(const_cast<CharT*>(view.data())),
 4479|  84.1k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4480|  84.1k|          m_position(pos)
 4481|  84.1k|    {
 4482|  84.1k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   184k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   184k|    static_cast<    \
  |  | 1109|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   184k|    {
 9021|   184k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handle4scanERNS0_24basic_scan_parse_contextIcEERS5_:
 6024|   184k|        {
 6025|   184k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 6026|   184k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handleC2ENS3_17custom_value_typeE:
 6029|   184k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4708|   181k|{
 4709|   181k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 81.6k, False: 100k]
  ------------------
 4710|  81.6k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|  81.6k|                                ranges::default_sentinel};
 4712|  81.6k|    }
 4713|   100k|    return ranges::subrange{forward_iterator{this, 0},
 4714|   100k|                            ranges::default_sentinel};
 4715|   181k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4471|   100k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|   100k|    {
 4473|   100k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|   100k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|   100k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|  2.54k|{
 9494|  2.54k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  2.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  2.54k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  2.54k|{
 9353|  2.54k|#define SCN_VISIT(Type)                                                \
 9354|  2.54k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  2.54k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  2.54k|    }                                                                  \
 9357|  2.54k|    else {                                                             \
 9358|  2.54k|        return vis(monostate_val);                                     \
 9359|  2.54k|    }
 9360|       |
 9361|  2.54k|    monostate monostate_val{};
 9362|       |
 9363|  2.54k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 2.54k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 2.54k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 2.54k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 2.54k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 2.54k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 2.54k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 2.54k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 2.54k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 2.54k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 2.54k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 2.54k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 2.54k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 2.54k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 2.54k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 2.54k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 2.54k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 2.54k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 2.54k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 2.54k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 2.54k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 2.54k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 2.54k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 2.54k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 2.54k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 2.54k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 2.54k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 2.54k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 2.54k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|  2.54k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 2.54k, False: 0]
  ------------------
 9456|  2.54k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  2.54k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  2.54k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 2.54k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 2.54k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  2.54k|            SCN_CLANG_POP
 9473|  2.54k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSH_11char_traitsIcEEEEi:
 6361|  2.54k|        : m_format{format},
 6362|  2.54k|          m_next_arg_id{next_arg_id},
 6363|  2.54k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  2.54k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  2.54k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  2.54k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  2.54k|    {
 6369|  2.54k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6361|  81.6k|        : m_format{format},
 6362|  81.6k|          m_next_arg_id{next_arg_id},
 6363|  81.6k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  81.6k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  81.6k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  81.6k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  81.6k|    {
 6369|  81.6k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|  81.6k|    {
 3089|  81.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  81.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|  81.6k|    {
 3055|  81.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  81.6k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|  81.6k|{
 7878|  81.6k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|  81.6k|    handler.check_args_exhausted();
 7880|  81.6k|    return handler.get_error();
 7881|  81.6k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|  81.6k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|  81.6k|    auto begin = format.data();
 7846|  81.6k|    auto it = begin;
 7847|  81.6k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   127k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 81.6k, False: 46.0k]
  ------------------
 7850|  81.6k|        const auto ch = *it++;
 7851|  81.6k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 81.6k, False: 0]
  ------------------
 7852|  81.6k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  81.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  81.6k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 35.6k, False: 46.0k]
  ------------------
 7856|  35.6k|                return;
 7857|  35.6k|            }
 7858|  81.6k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|  81.6k|    }
 7869|       |
 7870|  46.0k|    handler.on_literal_text(begin, end);
 7871|  46.0k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7774|  81.6k|{
 7775|  81.6k|    struct id_adapter {
 7776|  81.6k|        constexpr void operator()()
 7777|  81.6k|        {
 7778|  81.6k|            arg_id = handler.on_arg_id();
 7779|  81.6k|        }
 7780|  81.6k|        constexpr void operator()(std::size_t id)
 7781|  81.6k|        {
 7782|  81.6k|            arg_id = handler.on_arg_id(id);
 7783|  81.6k|        }
 7784|       |
 7785|  81.6k|        constexpr void on_error(const char* msg)
 7786|  81.6k|        {
 7787|  81.6k|            SCN_UNLIKELY_ATTR
 7788|  81.6k|            handler.on_error(msg);
 7789|  81.6k|        }
 7790|       |
 7791|  81.6k|        Handler& handler;
 7792|  81.6k|        std::size_t arg_id;
 7793|  81.6k|    };
 7794|       |
 7795|  81.6k|    ++begin;
 7796|  81.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 81.6k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|  81.6k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 81.6k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|  81.6k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 81.6k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|  81.6k|    else {
 7808|  81.6k|        auto adapter = id_adapter{handler, 0};
 7809|  81.6k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  81.6k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 81.6k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|  81.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 81.6k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|  81.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 81.6k, False: 0]
  ------------------
 7820|  81.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 81.6k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|  81.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  81.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 81.6k]
  |  |  |  Branch (1039:45): [True: 0, False: 81.6k]
  |  |  |  Branch (1039:45): [True: 0, False: 81.6k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|  81.6k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|  81.6k|    }
 7836|  81.6k|    return begin + 1;
 7837|  81.6k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8918|   179k|    {
 8919|   179k|        return m_args.get(id);
 8920|   179k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6396|   179k|    {
 6397|   179k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   179k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   179k|        do_check_arg_id(id);
 6405|   179k|        return id;
 6406|   179k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6890|   179k|{
 6891|   179k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   179k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   179k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  81.6k|{
 7276|  81.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  81.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  81.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  81.6k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 81.6k, False: 0]
  |  Branch (7277:26): [True: 0, False: 81.6k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|  81.6k|    handler();
 7282|  81.6k|    return begin;
 7283|  81.6k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  81.6k|        {
 7778|  81.6k|            arg_id = handler.on_arg_id();
 7779|  81.6k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9493|   179k|{
 9494|   179k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   179k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   179k|{
 9353|   179k|#define SCN_VISIT(Type)                                                \
 9354|   179k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   179k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   179k|    }                                                                  \
 9357|   179k|    else {                                                             \
 9358|   179k|        return vis(monostate_val);                                     \
 9359|   179k|    }
 9360|       |
 9361|   179k|    monostate monostate_val{};
 9362|       |
 9363|   179k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 179k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 179k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 179k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 179k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 179k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 179k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 179k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 179k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 179k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 179k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 179k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 179k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 179k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 179k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 179k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 179k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 179k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 179k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 179k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 179k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 179k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 179k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 179k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 179k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 179k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 179k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 179k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 179k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|   179k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 179k, False: 0]
  ------------------
 9456|   179k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|   179k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|   179k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 179k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 179k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   179k|            SCN_CLANG_POP
 9473|   179k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4734|  81.6k|        : base(typename base::contiguous_tag{}, sv)
 4735|  81.6k|    {
 4736|  81.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4439|  81.6k|        : m_current_view(sv), m_is_contiguous(true)
 4440|  81.6k|    {
 4441|  81.6k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   163k|    {
 3014|   163k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   163k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 3004|   163k|    {
 3005|   163k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  | 1110|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   163k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   163k|    {
 2883|   163k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   163k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   163k|    {
 2864|   163k|        return decay_copy(t.begin());
 2865|   163k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3088|  81.6k|    {
 3089|  81.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  81.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3054|  81.6k|    {
 3055|  81.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  81.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator16batch_advance_toEl:
 4557|  81.6k|    {
 4558|  81.6k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  | 1104|  81.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  81.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4559|  81.6k|        m_position = i;
 4560|  81.6k|        return *this;
 4561|  81.6k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6361|  97.8k|        : m_format{format},
 6362|  97.8k|          m_next_arg_id{next_arg_id},
 6363|  97.8k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  97.8k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  97.8k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  97.8k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  97.8k|    {
 6369|  97.8k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|  97.8k|{
 7878|  97.8k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|  97.8k|    handler.check_args_exhausted();
 7880|  97.8k|    return handler.get_error();
 7881|  97.8k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|  97.8k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|  97.8k|    auto begin = format.data();
 7846|  97.8k|    auto it = begin;
 7847|  97.8k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   160k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 97.8k, False: 62.2k]
  ------------------
 7850|  97.8k|        const auto ch = *it++;
 7851|  97.8k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 97.8k, False: 0]
  ------------------
 7852|  97.8k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  97.8k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  97.8k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 35.6k, False: 62.2k]
  ------------------
 7856|  35.6k|                return;
 7857|  35.6k|            }
 7858|  97.8k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|  97.8k|    }
 7869|       |
 7870|  62.2k|    handler.on_literal_text(begin, end);
 7871|  62.2k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7774|  97.8k|{
 7775|  97.8k|    struct id_adapter {
 7776|  97.8k|        constexpr void operator()()
 7777|  97.8k|        {
 7778|  97.8k|            arg_id = handler.on_arg_id();
 7779|  97.8k|        }
 7780|  97.8k|        constexpr void operator()(std::size_t id)
 7781|  97.8k|        {
 7782|  97.8k|            arg_id = handler.on_arg_id(id);
 7783|  97.8k|        }
 7784|       |
 7785|  97.8k|        constexpr void on_error(const char* msg)
 7786|  97.8k|        {
 7787|  97.8k|            SCN_UNLIKELY_ATTR
 7788|  97.8k|            handler.on_error(msg);
 7789|  97.8k|        }
 7790|       |
 7791|  97.8k|        Handler& handler;
 7792|  97.8k|        std::size_t arg_id;
 7793|  97.8k|    };
 7794|       |
 7795|  97.8k|    ++begin;
 7796|  97.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  97.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 97.8k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|  97.8k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 97.8k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|  97.8k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 97.8k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|  97.8k|    else {
 7808|  97.8k|        auto adapter = id_adapter{handler, 0};
 7809|  97.8k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  97.8k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  97.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 97.8k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|  97.8k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 97.8k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|  97.8k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 97.8k, False: 0]
  ------------------
 7820|  97.8k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  97.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 97.8k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|  97.8k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  97.8k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 97.8k]
  |  |  |  Branch (1039:45): [True: 0, False: 97.8k]
  |  |  |  Branch (1039:45): [True: 0, False: 97.8k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|  97.8k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|  97.8k|    }
 7836|  97.8k|    return begin + 1;
 7837|  97.8k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  97.8k|{
 7276|  97.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  97.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  97.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  97.8k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 97.8k, False: 0]
  |  Branch (7277:26): [True: 0, False: 97.8k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|  97.8k|    handler();
 7282|  97.8k|    return begin;
 7283|  97.8k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  97.8k|        {
 7778|  97.8k|            arg_id = handler.on_arg_id();
 7779|  97.8k|        }
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4369|  38.1k|    {
 4370|  38.1k|        return sync(0);
 4371|  38.1k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6262|   186k|    {
 6263|   186k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|   186k|        return static_cast<std::size_t>(m_desc &
 6268|   186k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|   186k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6288|   372k|    {
 6289|   372k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|   372k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6230|   186k|    {
 6231|   186k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|   186k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|   186k|        const auto t = type(id);
 6243|   186k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|   186k|        basic_scan_arg<Context> arg;
 6248|   186k|        arg.m_type = t;
 6249|   186k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 0, False: 186k]
  ------------------
 6250|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6251|      0|        }
 6252|   186k|        else {
 6253|   186k|            arg.m_value = m_values[id];
 6254|   186k|        }
 6255|   186k|        return arg;
 6256|   186k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6297|   186k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|   186k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|   186k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|   186k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|   186k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6292|   186k|    {
 6293|   186k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|   186k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6046|   382k|    {
 6047|   382k|        return m_type != detail::arg_type::none_type;
 6048|   382k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|  5.08k|{
 9494|  5.08k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  5.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  5.08k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  5.08k|{
 9353|  5.08k|#define SCN_VISIT(Type)                                                \
 9354|  5.08k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  5.08k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  5.08k|    }                                                                  \
 9357|  5.08k|    else {                                                             \
 9358|  5.08k|        return vis(monostate_val);                                     \
 9359|  5.08k|    }
 9360|       |
 9361|  5.08k|    monostate monostate_val{};
 9362|       |
 9363|  5.08k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 5.08k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 5.08k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 5.08k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 5.08k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 5.08k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 5.08k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 5.08k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 5.08k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 5.08k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 5.08k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 5.08k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 5.08k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 5.08k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 5.08k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 5.08k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 5.08k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 5.08k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 5.08k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 5.08k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 5.08k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 5.08k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 5.08k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 5.08k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 5.08k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 5.08k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 5.08k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 5.08k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 5.08k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|  5.08k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 5.08k, False: 0]
  ------------------
 9456|  5.08k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  5.08k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  5.08k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 5.08k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 5.08k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  5.08k|            SCN_CLANG_POP
 9473|  5.08k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|   382k|{
 6092|   382k|    return arg.m_type;
 6093|   382k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|   196k|{
 6104|   196k|    return arg.m_value;
 6105|   196k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEi:
 6361|  5.08k|        : m_format{format},
 6362|  5.08k|          m_next_arg_id{next_arg_id},
 6363|  5.08k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  5.08k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  5.08k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  5.08k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  5.08k|    {
 6369|  5.08k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2ENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEl:
 4478|  98.1k|        : m_begin(const_cast<CharT*>(view.data())),
 4479|  98.1k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4480|  98.1k|          m_position(pos)
 4481|  98.1k|    {
 4482|  98.1k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   196k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   196k|    static_cast<    \
  |  | 1109|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   196k|    {
 9021|   196k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handle4scanERNS0_24basic_scan_parse_contextIwEERS5_:
 6024|   196k|        {
 6025|   196k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 6026|   196k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handleC2ENS3_17custom_value_typeE:
 6029|   196k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6361|  93.0k|        : m_format{format},
 6362|  93.0k|          m_next_arg_id{next_arg_id},
 6363|  93.0k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  93.0k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  93.0k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  93.0k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  93.0k|    {
 6369|  93.0k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|  93.0k|    {
 3089|  93.0k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  93.0k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|  93.0k|    {
 3055|  93.0k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  93.0k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|  93.0k|{
 7878|  93.0k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|  93.0k|    handler.check_args_exhausted();
 7880|  93.0k|    return handler.get_error();
 7881|  93.0k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|  93.0k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|  93.0k|    auto begin = format.data();
 7846|  93.0k|    auto it = begin;
 7847|  93.0k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   114k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 93.0k, False: 21.8k]
  ------------------
 7850|  93.0k|        const auto ch = *it++;
 7851|  93.0k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 93.0k, False: 0]
  ------------------
 7852|  93.0k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  93.0k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  93.0k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 71.2k, False: 21.8k]
  ------------------
 7856|  71.2k|                return;
 7857|  71.2k|            }
 7858|  93.0k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|  93.0k|    }
 7869|       |
 7870|  21.8k|    handler.on_literal_text(begin, end);
 7871|  21.8k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7774|  93.0k|{
 7775|  93.0k|    struct id_adapter {
 7776|  93.0k|        constexpr void operator()()
 7777|  93.0k|        {
 7778|  93.0k|            arg_id = handler.on_arg_id();
 7779|  93.0k|        }
 7780|  93.0k|        constexpr void operator()(std::size_t id)
 7781|  93.0k|        {
 7782|  93.0k|            arg_id = handler.on_arg_id(id);
 7783|  93.0k|        }
 7784|       |
 7785|  93.0k|        constexpr void on_error(const char* msg)
 7786|  93.0k|        {
 7787|  93.0k|            SCN_UNLIKELY_ATTR
 7788|  93.0k|            handler.on_error(msg);
 7789|  93.0k|        }
 7790|       |
 7791|  93.0k|        Handler& handler;
 7792|  93.0k|        std::size_t arg_id;
 7793|  93.0k|    };
 7794|       |
 7795|  93.0k|    ++begin;
 7796|  93.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.0k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|  93.0k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 93.0k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|  93.0k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 93.0k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|  93.0k|    else {
 7808|  93.0k|        auto adapter = id_adapter{handler, 0};
 7809|  93.0k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  93.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.0k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|  93.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 93.0k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|  93.0k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 93.0k, False: 0]
  ------------------
 7820|  93.0k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.0k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|  93.0k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  93.0k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.0k]
  |  |  |  Branch (1039:45): [True: 0, False: 93.0k]
  |  |  |  Branch (1039:45): [True: 0, False: 93.0k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|  93.0k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|  93.0k|    }
 7836|  93.0k|    return begin + 1;
 7837|  93.0k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8918|   186k|    {
 8919|   186k|        return m_args.get(id);
 8920|   186k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6396|   186k|    {
 6397|   186k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   186k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   186k|        do_check_arg_id(id);
 6405|   186k|        return id;
 6406|   186k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6890|   186k|{
 6891|   186k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   186k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   186k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  93.0k|{
 7276|  93.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  93.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  93.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  93.0k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 93.0k, False: 0]
  |  Branch (7277:26): [True: 0, False: 93.0k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|  93.0k|    handler();
 7282|  93.0k|    return begin;
 7283|  93.0k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  93.0k|        {
 7778|  93.0k|            arg_id = handler.on_arg_id();
 7779|  93.0k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9493|   186k|{
 9494|   186k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   186k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   186k|{
 9353|   186k|#define SCN_VISIT(Type)                                                \
 9354|   186k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   186k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   186k|    }                                                                  \
 9357|   186k|    else {                                                             \
 9358|   186k|        return vis(monostate_val);                                     \
 9359|   186k|    }
 9360|       |
 9361|   186k|    monostate monostate_val{};
 9362|       |
 9363|   186k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 186k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 186k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 186k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 186k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 186k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 186k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 186k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 186k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 186k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 186k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 186k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 186k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 186k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 186k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 186k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 186k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 186k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 186k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 186k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 186k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 186k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 186k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 186k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 186k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 186k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 186k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 186k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 186k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|   186k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 186k, False: 0]
  ------------------
 9456|   186k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|   186k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|   186k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 186k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 186k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   186k|            SCN_CLANG_POP
 9473|   186k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4734|  93.0k|        : base(typename base::contiguous_tag{}, sv)
 4735|  93.0k|    {
 4736|  93.0k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4439|  93.0k|        : m_current_view(sv), m_is_contiguous(true)
 4440|  93.0k|    {
 4441|  93.0k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   186k|    {
 3014|   186k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   186k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 3004|   186k|    {
 3005|   186k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  | 1110|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   186k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   186k|    {
 2883|   186k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   186k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   186k|    {
 2864|   186k|        return decay_copy(t.begin());
 2865|   186k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3088|  93.0k|    {
 3089|  93.0k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  93.0k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3054|  93.0k|    {
 3055|  93.0k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  93.0k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4708|   191k|{
 4709|   191k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 93.0k, False: 98.1k]
  ------------------
 4710|  93.0k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|  93.0k|                                ranges::default_sentinel};
 4712|  93.0k|    }
 4713|  98.1k|    return ranges::subrange{forward_iterator{this, 0},
 4714|  98.1k|                            ranges::default_sentinel};
 4715|   191k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4471|  98.1k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|  98.1k|    {
 4473|  98.1k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|  98.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  98.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|  98.1k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|  98.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  98.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|  98.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator16batch_advance_toEl:
 4557|  93.0k|    {
 4558|  93.0k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  | 1104|  93.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  93.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4559|  93.0k|        m_position = i;
 4560|  93.0k|        return *this;
 4561|  93.0k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|  5.08k|{
 9494|  5.08k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  5.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  5.08k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  5.08k|{
 9353|  5.08k|#define SCN_VISIT(Type)                                                \
 9354|  5.08k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  5.08k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  5.08k|    }                                                                  \
 9357|  5.08k|    else {                                                             \
 9358|  5.08k|        return vis(monostate_val);                                     \
 9359|  5.08k|    }
 9360|       |
 9361|  5.08k|    monostate monostate_val{};
 9362|       |
 9363|  5.08k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 5.08k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 5.08k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 5.08k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 5.08k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 5.08k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 5.08k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 5.08k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 5.08k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 5.08k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 5.08k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 5.08k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 5.08k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 5.08k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 5.08k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 5.08k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 5.08k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 5.08k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 5.08k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 5.08k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 5.08k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 5.08k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 5.08k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 5.08k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 5.08k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 5.08k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 5.08k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 5.08k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 5.08k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|  5.08k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 5.08k, False: 0]
  ------------------
 9456|  5.08k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  5.08k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  5.08k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 5.08k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 5.08k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  5.08k|            SCN_CLANG_POP
 9473|  5.08k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSH_11char_traitsIwEEEEi:
 6361|  5.08k|        : m_format{format},
 6362|  5.08k|          m_next_arg_id{next_arg_id},
 6363|  5.08k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  5.08k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  5.08k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  5.08k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  5.08k|    {
 6369|  5.08k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6361|  93.0k|        : m_format{format},
 6362|  93.0k|          m_next_arg_id{next_arg_id},
 6363|  93.0k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  93.0k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  93.0k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  93.0k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  93.0k|    {
 6369|  93.0k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|  93.0k|{
 7878|  93.0k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|  93.0k|    handler.check_args_exhausted();
 7880|  93.0k|    return handler.get_error();
 7881|  93.0k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|  93.0k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|  93.0k|    auto begin = format.data();
 7846|  93.0k|    auto it = begin;
 7847|  93.0k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   114k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 93.0k, False: 21.8k]
  ------------------
 7850|  93.0k|        const auto ch = *it++;
 7851|  93.0k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 93.0k, False: 0]
  ------------------
 7852|  93.0k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  93.0k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  93.0k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 71.2k, False: 21.8k]
  ------------------
 7856|  71.2k|                return;
 7857|  71.2k|            }
 7858|  93.0k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|  93.0k|    }
 7869|       |
 7870|  21.8k|    handler.on_literal_text(begin, end);
 7871|  21.8k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7774|  93.0k|{
 7775|  93.0k|    struct id_adapter {
 7776|  93.0k|        constexpr void operator()()
 7777|  93.0k|        {
 7778|  93.0k|            arg_id = handler.on_arg_id();
 7779|  93.0k|        }
 7780|  93.0k|        constexpr void operator()(std::size_t id)
 7781|  93.0k|        {
 7782|  93.0k|            arg_id = handler.on_arg_id(id);
 7783|  93.0k|        }
 7784|       |
 7785|  93.0k|        constexpr void on_error(const char* msg)
 7786|  93.0k|        {
 7787|  93.0k|            SCN_UNLIKELY_ATTR
 7788|  93.0k|            handler.on_error(msg);
 7789|  93.0k|        }
 7790|       |
 7791|  93.0k|        Handler& handler;
 7792|  93.0k|        std::size_t arg_id;
 7793|  93.0k|    };
 7794|       |
 7795|  93.0k|    ++begin;
 7796|  93.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.0k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|  93.0k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 93.0k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|  93.0k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 93.0k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|  93.0k|    else {
 7808|  93.0k|        auto adapter = id_adapter{handler, 0};
 7809|  93.0k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  93.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.0k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|  93.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 93.0k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|  93.0k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 93.0k, False: 0]
  ------------------
 7820|  93.0k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.0k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|  93.0k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  93.0k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.0k]
  |  |  |  Branch (1039:45): [True: 0, False: 93.0k]
  |  |  |  Branch (1039:45): [True: 0, False: 93.0k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|  93.0k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|  93.0k|    }
 7836|  93.0k|    return begin + 1;
 7837|  93.0k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  93.0k|{
 7276|  93.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  93.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  93.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  93.0k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 93.0k, False: 0]
  |  Branch (7277:26): [True: 0, False: 93.0k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|  93.0k|    handler();
 7282|  93.0k|    return begin;
 7283|  93.0k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  93.0k|        {
 7778|  93.0k|            arg_id = handler.on_arg_id();
 7779|  93.0k|        }
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4369|  76.3k|    {
 4370|  76.3k|        return sync(0);
 4371|  76.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6216|  5.08k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6216|  10.1k|    constexpr basic_scan_args() = default;
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2939|   102k|    {
 2940|   102k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   102k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2921|   102k|    {
 2922|   102k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   102k|    }
_ZN3scn2v46ranges6detail10decay_copyINS1_18default_sentinel_tEEEu7__decayIT_EOS5_:
 2107|   193k|{
 2108|   193k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   193k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
 4550|  46.0k|    {
 4551|  46.0k|        SCN_EXPECT(n >= 0);
  ------------------
  |  | 1104|  46.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  46.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4552|  46.0k|        m_position += n;
 4553|  46.0k|        return *this;
 4554|  46.0k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2939|  90.7k|    {
 2940|  90.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  90.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  90.7k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2921|  90.7k|    {
 2922|  90.7k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  90.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  90.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
 4550|  21.8k|    {
 4551|  21.8k|        SCN_EXPECT(n >= 0);
  ------------------
  |  | 1104|  21.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4552|  21.8k|        m_position += n;
 4553|  21.8k|        return *this;
 4554|  21.8k|    }

_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  46.5k|{
   44|  46.5k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  46.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  46.5k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  46.5k|{
   60|  46.5k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  46.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  46.5k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.69k|{
  171|  1.69k|    auto result = make_scan_result<Source, T>();
  172|  1.69k|    fill_scan_result(
  173|  1.69k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.69k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.69k|    return result;
  176|  1.69k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  5.08k|{
   72|  5.08k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|  5.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  5.08k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.69k|{
  171|  1.69k|    auto result = make_scan_result<Source, T>();
  172|  1.69k|    fill_scan_result(
  173|  1.69k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.69k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.69k|    return result;
  176|  1.69k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.69k|{
  171|  1.69k|    auto result = make_scan_result<Source, T>();
  172|  1.69k|    fill_scan_result(
  173|  1.69k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.69k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.69k|    return result;
  176|  1.69k|}
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  46.5k|{
   44|  46.5k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  46.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  46.5k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  46.5k|{
   60|  46.5k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  46.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  46.5k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.69k|{
  171|  1.69k|    auto result = make_scan_result<Source, T>();
  172|  1.69k|    fill_scan_result(
  173|  1.69k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.69k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.69k|    return result;
  176|  1.69k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  5.08k|{
   72|  5.08k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|  5.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  5.08k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.69k|{
  171|  1.69k|    auto result = make_scan_result<Source, T>();
  172|  1.69k|    fill_scan_result(
  173|  1.69k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.69k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.69k|    return result;
  176|  1.69k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.69k|{
  171|  1.69k|    auto result = make_scan_result<Source, T>();
  172|  1.69k|    fill_scan_result(
  173|  1.69k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.69k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.69k|    return result;
  176|  1.69k|}

_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  97.8k|{
  250|  97.8k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  97.8k|        .transform_error(impl::make_eof_scan_error);
  252|  97.8k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  93.0k|{
  250|  93.0k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  93.0k|        .transform_error(impl::make_eof_scan_error);
  252|  93.0k|}
_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   182k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   182k|{
  309|   182k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   182k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2935|  40.8k|{
 2936|  40.8k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2937|  40.8k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2943|  48.9k|{
 2944|  48.9k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2945|  48.9k|    return sync_after_vscan(source, n);
 2946|  48.9k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2953|  46.5k|{
 2954|  46.5k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2955|  46.5k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2961|  46.5k|{
 2962|  46.5k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2963|  46.5k|    return sync_after_vscan(source, n);
 2964|  46.5k|}
_ZN3scn2v46detail16chrono_scan_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4628|  59.8k|{
 4629|  59.8k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4629:9): [True: 32.6k, False: 27.2k]
  ------------------
 4630|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4631|  32.6k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4632|  32.6k|    }
 4633|       |
 4634|  27.2k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4635|  27.2k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4636|  27.2k|    auto begin = contiguous_ctx.begin();
 4637|  27.2k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3958|  27.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  27.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  27.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 11.8k, False: 15.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  11.8k|    }                                                  \
  |  |  |  | 3957|  27.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4638|  15.3k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4639|  27.2k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4628|  59.8k|{
 4629|  59.8k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4629:9): [True: 32.6k, False: 27.2k]
  ------------------
 4630|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4631|  32.6k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4632|  32.6k|    }
 4633|       |
 4634|  27.2k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4635|  27.2k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4636|  27.2k|    auto begin = contiguous_ctx.begin();
 4637|  27.2k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3958|  27.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  27.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  27.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 11.8k, False: 15.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  11.8k|    }                                                  \
  |  |  |  | 3957|  27.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4638|  15.3k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4639|  27.2k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4628|  59.8k|{
 4629|  59.8k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4629:9): [True: 32.6k, False: 27.2k]
  ------------------
 4630|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4631|  32.6k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4632|  32.6k|    }
 4633|       |
 4634|  27.2k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4635|  27.2k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4636|  27.2k|    auto begin = contiguous_ctx.begin();
 4637|  27.2k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3958|  27.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  27.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  27.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 11.8k, False: 15.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  11.8k|    }                                                  \
  |  |  |  | 3957|  27.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4638|  15.3k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4639|  27.2k|}
_ZN3scn2v46detail16chrono_scan_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4628|  62.0k|{
 4629|  62.0k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4629:9): [True: 31.0k, False: 31.0k]
  ------------------
 4630|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4631|  31.0k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4632|  31.0k|    }
 4633|       |
 4634|  31.0k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4635|  31.0k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4636|  31.0k|    auto begin = contiguous_ctx.begin();
 4637|  31.0k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3958|  31.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.7k, False: 7.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.7k|    }                                                  \
  |  |  |  | 3957|  31.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  7.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4638|  7.26k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4639|  31.0k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4628|  62.0k|{
 4629|  62.0k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4629:9): [True: 31.0k, False: 31.0k]
  ------------------
 4630|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4631|  31.0k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4632|  31.0k|    }
 4633|       |
 4634|  31.0k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4635|  31.0k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4636|  31.0k|    auto begin = contiguous_ctx.begin();
 4637|  31.0k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3958|  31.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.7k, False: 7.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.7k|    }                                                  \
  |  |  |  | 3957|  31.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  7.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4638|  7.26k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4639|  31.0k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4628|  62.0k|{
 4629|  62.0k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4629:9): [True: 31.0k, False: 31.0k]
  ------------------
 4630|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4631|  31.0k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4632|  31.0k|    }
 4633|       |
 4634|  31.0k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4635|  31.0k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4636|  31.0k|    auto begin = contiguous_ctx.begin();
 4637|  31.0k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3958|  31.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.7k, False: 7.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.7k|    }                                                  \
  |  |  |  | 3957|  31.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  7.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4638|  7.26k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4639|  31.0k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   179k|{
  215|   179k|    return find_classic_impl(
  216|   179k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   179k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   179k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|  15.2k|{
  329|  15.2k|    SCN_UNLIKELY_ATTR
  330|  15.2k|    return e;
  331|  15.2k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2904|  40.8k|{
 2905|  40.8k|    return vscan_internal(source, format, args);
 2906|  40.8k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2910|  48.9k|{
 2911|  48.9k|    auto n = vscan_internal(source, format, args);
 2912|  48.9k|    return sync_after_vscan(source, n);
 2913|  48.9k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2918|  46.5k|{
 2919|  46.5k|    return vscan_internal(source, format, args);
 2920|  46.5k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2924|  46.5k|{
 2925|  46.5k|    auto n = vscan_internal(source, format, args);
 2926|  46.5k|    return sync_after_vscan(source, n);
 2927|  46.5k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2990|  2.54k|{
 2991|  2.54k|    return vscan_value_internal(source, arg);
 2992|  2.54k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2995|  2.54k|{
 2996|  2.54k|    auto n = vscan_value_internal(source, arg);
 2997|  2.54k|    return sync_after_vscan(source, n);
 2998|  2.54k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3003|  5.08k|{
 3004|  5.08k|    return vscan_value_internal(source, arg);
 3005|  5.08k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3009|  5.08k|{
 3010|  5.08k|    auto n = vscan_value_internal(source, arg);
 3011|  5.08k|    return sync_after_vscan(source, n);
 3012|  5.08k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  86.6k|{
  118|  86.6k|    static_assert(sizeof(*source.data()) == 1);
  119|  86.6k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1104|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  86.6k|    uint64_t word{};
  121|  86.6k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  86.6k|    return has_byte_greater(word, 127) != 0;
  124|  86.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   179k|{
  131|   179k|    auto it = source.begin();
  132|       |
  133|   185k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 86.6k, False: 98.5k]
  ------------------
  134|  86.6k|        auto sv =
  135|  86.6k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  86.6k|                .substr(0, 8);
  137|       |
  138|  86.6k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 74.0k, False: 12.5k]
  ------------------
  139|  74.0k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  74.0k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  74.0k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 69.7k, False: 4.32k]
  ------------------
  142|  69.7k|                break;
  143|  69.7k|            }
  144|  4.32k|            continue;
  145|  74.0k|        }
  146|       |
  147|  18.7k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 17.2k, False: 1.41k]
  ------------------
  148|  17.2k|            auto tmp =
  149|  17.2k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  17.2k|            auto res = get_next_code_point(tmp);
  151|  17.2k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 11.1k, False: 6.15k]
  ------------------
  152|  11.1k|                return it;
  153|  11.1k|            }
  154|  6.15k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  6.15k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  6.15k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|  6.15k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  6.15k|        }
  158|  12.5k|    }
  159|       |
  160|   168k|    return detail::make_string_view_iterator(source, it);
  161|   179k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   161k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  17.2k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2801|  97.8k|{
 2802|  97.8k|    const auto argcount = args.size();
 2803|  97.8k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2803:9): [True: 0, False: 97.8k]
  |  Branch (2803:60): [True: 0, False: 0]
  ------------------
 2804|      0|        auto arg = args.get(0);
 2805|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2806|      0|    }
 2807|       |
 2808|  97.8k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2808:9): [True: 0, False: 97.8k]
  ------------------
 2809|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2810|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2811|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2812|      0|        return vscan_parse_format_string(format, handler);
 2813|      0|    }
 2814|       |
 2815|  97.8k|    SCN_UNLIKELY_ATTR
 2816|  97.8k|    {
 2817|  97.8k|        auto handler = format_handler<false, CharT>{
 2818|  97.8k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  97.8k|    static_cast<    \
  |  | 1109|  97.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  97.8k|    static_cast<    \
  |  | 1109|  97.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2819|  97.8k|        return vscan_parse_format_string(format, handler);
 2820|  97.8k|    }
 2821|  97.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2349|   179k|{
 2350|   179k|    if (format.size() != 2) {
  ------------------
  |  Branch (2350:9): [True: 179k, False: 0]
  ------------------
 2351|   179k|        return false;
 2352|   179k|    }
 2353|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2353:12): [True: 0, False: 0]
  |  Branch (2353:39): [True: 0, False: 0]
  ------------------
 2354|   179k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2382|  2.54k|{
 2383|  2.54k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  2.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.54k]
  |  |  ------------------
  ------------------
 2384|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2385|      0|                                             "Argument #0 not found");
 2386|      0|    }
 2387|       |
 2388|  2.54k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|  2.54k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 2.54k]
  |  |  ------------------
  ------------------
 2389|      0|        auto reader = impl::default_arg_reader<
 2390|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2391|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2392|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2393|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2394|      0|    }
 2395|       |
 2396|  2.54k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2397|  2.54k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|  2.54k|    static_cast<    \
  |  | 1109|  2.54k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2398|  2.54k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|  2.54k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  2.54k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  2.54k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  2.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.54k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.54k|    }                                                  \
  |  |  |  | 3957|  2.54k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2399|      0|    return it.position();
 2400|  2.54k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2625|  81.6k|        : format_handler_base{argcount},
 2626|  81.6k|          parse_ctx{source_tag<Source&&>, format},
 2627|  81.6k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  81.6k|    static_cast<    \
  |  | 1109|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  81.6k|    static_cast<    \
  |  | 1109|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|  81.6k|    {
 2629|  81.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2443|   365k|    format_handler_base(size_t argcount) : args_count(argcount)
 2444|   365k|    {
 2445|   365k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1039|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 2446|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2447|      0|        }
 2448|   365k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2576|  81.6k|        : contiguous_ctx(source, args, loc)
 2577|  81.6k|    {
 2578|  81.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|  81.6k|{
 2767|  81.6k|    const auto beg = handler.get_ctx().begin();
 2768|  81.6k|    detail::parse_format_string<false>(format, handler);
 2769|  81.6k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.6k, False: 46.0k]
  |  |  ------------------
  ------------------
 2770|  35.6k|        return unexpected(err.error());
 2771|  35.6k|    }
 2772|  46.0k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|  81.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2750|   255k|    {
 2751|   255k|        return ctx.get();
 2752|   255k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2581|   255k|    {
 2582|   255k|        return contiguous_ctx;
 2583|   255k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2632|   127k|    {
 2633|   127k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 127k]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|   127k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2492|   213k|    {
 2493|   213k|        error = unexpected(err);
 2494|   213k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2404|  81.6k|{
 2405|  81.6k|    auto arg = ctx.arg(id);
 2406|  81.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 81.6k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|  81.6k|    return arg;
 2410|  81.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2518|   365k|    {
 2519|   365k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 2520|      0|            on_error({scan_error::invalid_format_string,
 2521|      0|                      "Argument ID out-of-range"});
 2522|      0|            return;
 2523|      0|        }
 2524|       |
 2525|   365k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1039|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 2526|      0|            on_error({scan_error::invalid_format_string,
 2527|      0|                      "Argument with this ID has already been scanned"});
 2528|      0|        }
 2529|       |
 2530|   365k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|   365k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 365k, False: 0]
  |  |  ------------------
  ------------------
 2531|   365k|            visited_args_lower64 |= (1ull << id);
 2532|   365k|            return;
 2533|   365k|        }
 2534|       |
 2535|      0|        id -= 64;
 2536|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 2537|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2502|   365k|    {
 2503|   365k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 2504|      0|            on_error({scan_error::invalid_format_string,
 2505|      0|                      "Argument ID out-of-range"});
 2506|      0|            return false;
 2507|      0|        }
 2508|       |
 2509|   365k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|   365k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 365k, False: 0]
  |  |  ------------------
  ------------------
 2510|   365k|            return (visited_args_lower64 >> id) & 1ull;
 2511|   365k|        }
 2512|       |
 2513|      0|        id -= 64;
 2514|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2515|   365k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2672|  81.6k|    {
 2673|  81.6k|        return parse_ctx.next_arg_id();
 2674|  81.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2712|  81.6k|    {
 2713|  81.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|  81.6k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|  81.6k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 81.6k, False: 0]
  ------------------
 2717|  81.6k|            parse_ctx.advance_to(begin);
 2718|  81.6k|            on_visit_scan_arg(
 2719|  81.6k|                impl::custom_reader<detail::default_context<char_type>>{
 2720|  81.6k|                    parse_ctx, get_custom_ctx()},
 2721|  81.6k|                arg);
 2722|  81.6k|            return parse_ctx.begin();
 2723|  81.6k|        }
 2724|       |
 2725|      0|        auto specs = detail::format_specs{};
 2726|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|      0|            detail::get_arg_type(arg)};
 2729|       |
 2730|      0|        begin = detail::parse_format_specs(begin, end, handler);
 2731|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 0]
  |  Branch (2731:29): [True: 0, False: 0]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|      0|        parse_ctx.advance_to(begin);
 2741|       |
 2742|      0|        on_visit_scan_arg(
 2743|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|      0|                                           get_ctx().locale()},
 2745|      0|            arg);
 2746|      0|        return parse_ctx.begin();
 2747|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2683|  81.6k|    {
 2684|  81.6k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 81.6k]
  |  Branch (2684:13): [True: 0, False: 81.6k]
  |  Branch (2684:29): [True: 0, False: 81.6k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|  81.6k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|  81.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.6k, False: 46.0k]
  |  |  ------------------
  ------------------
 2691|  35.6k|            on_error(r.error());
 2692|  35.6k|        }
 2693|  46.0k|        else {
 2694|  46.0k|            get_ctx().advance_to(*r);
 2695|  46.0k|        }
 2696|  81.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE14get_custom_ctxEv:
 2754|  81.6k|    {
 2755|  81.6k|        return ctx.get_custom();
 2756|  81.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE10get_customEv:
 2585|  81.6k|    {
 2586|  81.6k|        if (!buffer) {
  ------------------
  |  Branch (2586:13): [True: 81.6k, False: 0]
  ------------------
 2587|  81.6k|            buffer.emplace(detail::make_string_view_from_pointers(
 2588|  81.6k|                ranges::data(contiguous_ctx.underlying_range()),
 2589|  81.6k|                ranges::data(contiguous_ctx.underlying_range()) +
 2590|  81.6k|                    ranges::size(contiguous_ctx.underlying_range())));
 2591|  81.6k|        }
 2592|  81.6k|        auto it = buffer->get().begin();
 2593|  81.6k|        it.batch_advance_to(contiguous_ctx.begin_position());
 2594|  81.6k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 2595|  81.6k|        return *custom_ctx;
 2596|  81.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2451|   365k|    {
 2452|   365k|        {
 2453|   365k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2453:45): [True: 0, False: 365k]
  ------------------
 2454|   365k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2454:35): [True: 0, False: 365k]
  ------------------
 2455|   365k|                                      ? std::numeric_limits<uint64_t>::max()
 2456|   365k|                                      : (1ull << args_count_lower64) - 1;
 2457|       |
 2458|   365k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2458:17): [True: 0, False: 365k]
  ------------------
 2459|      0|                return on_error({scan_error::invalid_format_string,
 2460|      0|                                 "Argument list not exhausted"});
 2461|      0|            }
 2462|   365k|        }
 2463|       |
 2464|   365k|        if (args_count < 64) {
  ------------------
  |  Branch (2464:13): [True: 365k, False: 0]
  ------------------
 2465|   365k|            return;
 2466|   365k|        }
 2467|       |
 2468|      0|        auto last_args_count = args_count - 64;
 2469|      0|        for (auto it = visited_args_upper.begin();
 2470|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2470:14): [True: 0, False: 0]
  ------------------
 2471|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2471:17): [True: 0, False: 0]
  ------------------
 2472|      0|                return on_error({scan_error::invalid_format_string,
 2473|      0|                                 "Argument list not exhausted"});
 2474|      0|            }
 2475|      0|            last_args_count -= 8;
 2476|      0|        }
 2477|       |
 2478|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2479|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2479:13): [True: 0, False: 0]
  ------------------
 2480|      0|            return on_error({scan_error::invalid_format_string,
 2481|      0|                             "Argument list not exhausted"});
 2482|      0|        }
 2483|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2497|  1.46M|    {
 2498|  1.46M|        return error;
 2499|  1.46M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2625|  97.8k|        : format_handler_base{argcount},
 2626|  97.8k|          parse_ctx{source_tag<Source&&>, format},
 2627|  97.8k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|  97.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  97.8k|    static_cast<    \
  |  | 1109|  97.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  97.8k|    static_cast<    \
  |  | 1109|  97.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|  97.8k|    {
 2629|  97.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2552|  97.8k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|  97.8k|    static_cast<    \
  |  | 1109|  97.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2553|  97.8k|    {
 2554|  97.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|  97.8k|{
 2767|  97.8k|    const auto beg = handler.get_ctx().begin();
 2768|  97.8k|    detail::parse_format_string<false>(format, handler);
 2769|  97.8k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|  97.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.6k, False: 62.2k]
  |  |  ------------------
  ------------------
 2770|  35.6k|        return unexpected(err.error());
 2771|  35.6k|    }
 2772|  62.2k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|  97.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2750|   320k|    {
 2751|   320k|        return ctx.get();
 2752|   320k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2557|   320k|    {
 2558|   320k|        return ctx;
 2559|   320k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2632|   160k|    {
 2633|   160k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 160k]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|   160k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2404|  97.8k|{
 2405|  97.8k|    auto arg = ctx.arg(id);
 2406|  97.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  97.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 97.8k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|  97.8k|    return arg;
 2410|  97.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2672|  97.8k|    {
 2673|  97.8k|        return parse_ctx.next_arg_id();
 2674|  97.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2712|  97.8k|    {
 2713|  97.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|  97.8k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|  97.8k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 97.8k, False: 0]
  ------------------
 2717|  97.8k|            parse_ctx.advance_to(begin);
 2718|  97.8k|            on_visit_scan_arg(
 2719|  97.8k|                impl::custom_reader<detail::default_context<char_type>>{
 2720|  97.8k|                    parse_ctx, get_custom_ctx()},
 2721|  97.8k|                arg);
 2722|  97.8k|            return parse_ctx.begin();
 2723|  97.8k|        }
 2724|       |
 2725|      0|        auto specs = detail::format_specs{};
 2726|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|      0|            detail::get_arg_type(arg)};
 2729|       |
 2730|      0|        begin = detail::parse_format_specs(begin, end, handler);
 2731|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 0]
  |  Branch (2731:29): [True: 0, False: 0]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|      0|        parse_ctx.advance_to(begin);
 2741|       |
 2742|      0|        on_visit_scan_arg(
 2743|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|      0|                                           get_ctx().locale()},
 2745|      0|            arg);
 2746|      0|        return parse_ctx.begin();
 2747|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2683|  97.8k|    {
 2684|  97.8k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 97.8k]
  |  Branch (2684:13): [True: 0, False: 97.8k]
  |  Branch (2684:29): [True: 0, False: 97.8k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|  97.8k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  97.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|  97.8k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  97.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.6k, False: 62.2k]
  |  |  ------------------
  ------------------
 2691|  35.6k|            on_error(r.error());
 2692|  35.6k|        }
 2693|  62.2k|        else {
 2694|  62.2k|            get_ctx().advance_to(*r);
 2695|  62.2k|        }
 2696|  97.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE14get_custom_ctxEv:
 2754|  97.8k|    {
 2755|  97.8k|        return ctx.get_custom();
 2756|  97.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE10get_customEv:
 2561|  97.8k|    {
 2562|  97.8k|        return ctx;
 2563|  97.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2781|  81.6k|{
 2782|  81.6k|    const auto argcount = args.size();
 2783|  81.6k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2783:9): [True: 0, False: 81.6k]
  |  Branch (2783:60): [True: 0, False: 0]
  ------------------
 2784|      0|        auto arg = args.get(0);
 2785|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2786|      0|    }
 2787|       |
 2788|  81.6k|    auto handler = format_handler<true, CharT>{
 2789|  81.6k|        ranges::subrange<const CharT*>{source.data(),
 2790|  81.6k|                                       source.data() + source.size()},
 2791|  81.6k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  81.6k|    static_cast<    \
  |  | 1109|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  81.6k|    static_cast<    \
  |  | 1109|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2792|  81.6k|    return vscan_parse_format_string(format, handler);
 2793|  81.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2362|  2.54k|{
 2363|  2.54k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  2.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.54k]
  |  |  ------------------
  ------------------
 2364|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2365|      0|                                             "Argument #0 not found");
 2366|      0|    }
 2367|       |
 2368|  2.54k|    auto reader =
 2369|  2.54k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2370|  2.54k|            ranges::subrange<const CharT*>{source.data(),
 2371|  2.54k|                                           source.data() + source.size()},
 2372|  2.54k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|  2.54k|    static_cast<    \
  |  | 1109|  2.54k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2373|  2.54k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|  2.54k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  2.54k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  2.54k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  2.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.54k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.54k|    }                                                  \
  |  |  |  | 3957|  2.54k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2374|      0|    return ranges::distance(source.data(), it);
 2375|  2.54k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2881|   100k|{
 2882|   100k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 62.2k, False: 38.1k]
  |  |  ------------------
  ------------------
 2883|  62.2k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 62.2k]
  |  |  ------------------
  ------------------
 2884|      0|            return detail::unexpected_scan_error(
 2885|      0|                scan_error::invalid_source_state,
 2886|      0|                "Failed to sync with underlying source");
 2887|      0|        }
 2888|  62.2k|    }
 2889|  38.1k|    else {
 2890|  38.1k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 38.1k]
  |  |  ------------------
  ------------------
 2891|      0|            return detail::unexpected_scan_error(
 2892|      0|                scan_error::invalid_source_state,
 2893|      0|                "Failed to sync with underlying source");
 2894|      0|        }
 2895|  38.1k|    }
 2896|   100k|    return result;
 2897|   100k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2781|  93.0k|{
 2782|  93.0k|    const auto argcount = args.size();
 2783|  93.0k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2783:9): [True: 0, False: 93.0k]
  |  Branch (2783:60): [True: 0, False: 0]
  ------------------
 2784|      0|        auto arg = args.get(0);
 2785|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2786|      0|    }
 2787|       |
 2788|  93.0k|    auto handler = format_handler<true, CharT>{
 2789|  93.0k|        ranges::subrange<const CharT*>{source.data(),
 2790|  93.0k|                                       source.data() + source.size()},
 2791|  93.0k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  93.0k|    static_cast<    \
  |  | 1109|  93.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  93.0k|    static_cast<    \
  |  | 1109|  93.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2792|  93.0k|    return vscan_parse_format_string(format, handler);
 2793|  93.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2349|   186k|{
 2350|   186k|    if (format.size() != 2) {
  ------------------
  |  Branch (2350:9): [True: 186k, False: 0]
  ------------------
 2351|   186k|        return false;
 2352|   186k|    }
 2353|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2353:12): [True: 0, False: 0]
  |  Branch (2353:39): [True: 0, False: 0]
  ------------------
 2354|   186k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2362|  5.08k|{
 2363|  5.08k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  5.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 5.08k]
  |  |  ------------------
  ------------------
 2364|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2365|      0|                                             "Argument #0 not found");
 2366|      0|    }
 2367|       |
 2368|  5.08k|    auto reader =
 2369|  5.08k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2370|  5.08k|            ranges::subrange<const CharT*>{source.data(),
 2371|  5.08k|                                           source.data() + source.size()},
 2372|  5.08k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|  5.08k|    static_cast<    \
  |  | 1109|  5.08k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2373|  5.08k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|  5.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  5.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  5.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  5.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.08k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.08k|    }                                                  \
  |  |  |  | 3957|  5.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2374|      0|    return ranges::distance(source.data(), it);
 2375|  5.08k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2625|  93.0k|        : format_handler_base{argcount},
 2626|  93.0k|          parse_ctx{source_tag<Source&&>, format},
 2627|  93.0k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  93.0k|    static_cast<    \
  |  | 1109|  93.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  93.0k|    static_cast<    \
  |  | 1109|  93.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|  93.0k|    {
 2629|  93.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2576|  93.0k|        : contiguous_ctx(source, args, loc)
 2577|  93.0k|    {
 2578|  93.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|  93.0k|{
 2767|  93.0k|    const auto beg = handler.get_ctx().begin();
 2768|  93.0k|    detail::parse_format_string<false>(format, handler);
 2769|  93.0k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 71.2k, False: 21.8k]
  |  |  ------------------
  ------------------
 2770|  71.2k|        return unexpected(err.error());
 2771|  71.2k|    }
 2772|  21.8k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|  93.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2750|   229k|    {
 2751|   229k|        return ctx.get();
 2752|   229k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2581|   229k|    {
 2582|   229k|        return contiguous_ctx;
 2583|   229k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2632|   114k|    {
 2633|   114k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 114k]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|   114k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2404|  93.0k|{
 2405|  93.0k|    auto arg = ctx.arg(id);
 2406|  93.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.0k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|  93.0k|    return arg;
 2410|  93.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2672|  93.0k|    {
 2673|  93.0k|        return parse_ctx.next_arg_id();
 2674|  93.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2712|  93.0k|    {
 2713|  93.0k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|  93.0k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|  93.0k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 93.0k, False: 0]
  ------------------
 2717|  93.0k|            parse_ctx.advance_to(begin);
 2718|  93.0k|            on_visit_scan_arg(
 2719|  93.0k|                impl::custom_reader<detail::default_context<char_type>>{
 2720|  93.0k|                    parse_ctx, get_custom_ctx()},
 2721|  93.0k|                arg);
 2722|  93.0k|            return parse_ctx.begin();
 2723|  93.0k|        }
 2724|       |
 2725|      0|        auto specs = detail::format_specs{};
 2726|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|      0|            detail::get_arg_type(arg)};
 2729|       |
 2730|      0|        begin = detail::parse_format_specs(begin, end, handler);
 2731|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 0]
  |  Branch (2731:29): [True: 0, False: 0]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|      0|        parse_ctx.advance_to(begin);
 2741|       |
 2742|      0|        on_visit_scan_arg(
 2743|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|      0|                                           get_ctx().locale()},
 2745|      0|            arg);
 2746|      0|        return parse_ctx.begin();
 2747|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2683|  93.0k|    {
 2684|  93.0k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 93.0k]
  |  Branch (2684:13): [True: 0, False: 93.0k]
  |  Branch (2684:29): [True: 0, False: 93.0k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|  93.0k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|  93.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 71.2k, False: 21.8k]
  |  |  ------------------
  ------------------
 2691|  71.2k|            on_error(r.error());
 2692|  71.2k|        }
 2693|  21.8k|        else {
 2694|  21.8k|            get_ctx().advance_to(*r);
 2695|  21.8k|        }
 2696|  93.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE14get_custom_ctxEv:
 2754|  93.0k|    {
 2755|  93.0k|        return ctx.get_custom();
 2756|  93.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE10get_customEv:
 2585|  93.0k|    {
 2586|  93.0k|        if (!buffer) {
  ------------------
  |  Branch (2586:13): [True: 93.0k, False: 0]
  ------------------
 2587|  93.0k|            buffer.emplace(detail::make_string_view_from_pointers(
 2588|  93.0k|                ranges::data(contiguous_ctx.underlying_range()),
 2589|  93.0k|                ranges::data(contiguous_ctx.underlying_range()) +
 2590|  93.0k|                    ranges::size(contiguous_ctx.underlying_range())));
 2591|  93.0k|        }
 2592|  93.0k|        auto it = buffer->get().begin();
 2593|  93.0k|        it.batch_advance_to(contiguous_ctx.begin_position());
 2594|  93.0k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 2595|  93.0k|        return *custom_ctx;
 2596|  93.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2801|  93.0k|{
 2802|  93.0k|    const auto argcount = args.size();
 2803|  93.0k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2803:9): [True: 0, False: 93.0k]
  |  Branch (2803:60): [True: 0, False: 0]
  ------------------
 2804|      0|        auto arg = args.get(0);
 2805|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2806|      0|    }
 2807|       |
 2808|  93.0k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2808:9): [True: 0, False: 93.0k]
  ------------------
 2809|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2810|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2811|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2812|      0|        return vscan_parse_format_string(format, handler);
 2813|      0|    }
 2814|       |
 2815|  93.0k|    SCN_UNLIKELY_ATTR
 2816|  93.0k|    {
 2817|  93.0k|        auto handler = format_handler<false, CharT>{
 2818|  93.0k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  93.0k|    static_cast<    \
  |  | 1109|  93.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  93.0k|    static_cast<    \
  |  | 1109|  93.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2819|  93.0k|        return vscan_parse_format_string(format, handler);
 2820|  93.0k|    }
 2821|  93.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2382|  5.08k|{
 2383|  5.08k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  5.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 5.08k]
  |  |  ------------------
  ------------------
 2384|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2385|      0|                                             "Argument #0 not found");
 2386|      0|    }
 2387|       |
 2388|  5.08k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|  5.08k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 5.08k]
  |  |  ------------------
  ------------------
 2389|      0|        auto reader = impl::default_arg_reader<
 2390|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2391|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2392|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2393|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2394|      0|    }
 2395|       |
 2396|  5.08k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2397|  5.08k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|  5.08k|    static_cast<    \
  |  | 1109|  5.08k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2398|  5.08k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|  5.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  5.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  5.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  5.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.08k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.08k|    }                                                  \
  |  |  |  | 3957|  5.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2399|      0|    return it.position();
 2400|  5.08k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2625|  93.0k|        : format_handler_base{argcount},
 2626|  93.0k|          parse_ctx{source_tag<Source&&>, format},
 2627|  93.0k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  93.0k|    static_cast<    \
  |  | 1109|  93.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  93.0k|    static_cast<    \
  |  | 1109|  93.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|  93.0k|    {
 2629|  93.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2552|  93.0k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|  93.0k|    static_cast<    \
  |  | 1109|  93.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2553|  93.0k|    {
 2554|  93.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|  93.0k|{
 2767|  93.0k|    const auto beg = handler.get_ctx().begin();
 2768|  93.0k|    detail::parse_format_string<false>(format, handler);
 2769|  93.0k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 71.2k, False: 21.8k]
  |  |  ------------------
  ------------------
 2770|  71.2k|        return unexpected(err.error());
 2771|  71.2k|    }
 2772|  21.8k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|  93.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2750|   229k|    {
 2751|   229k|        return ctx.get();
 2752|   229k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2557|   229k|    {
 2558|   229k|        return ctx;
 2559|   229k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2632|   114k|    {
 2633|   114k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 114k]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|   114k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2404|  93.0k|{
 2405|  93.0k|    auto arg = ctx.arg(id);
 2406|  93.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.0k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|  93.0k|    return arg;
 2410|  93.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2672|  93.0k|    {
 2673|  93.0k|        return parse_ctx.next_arg_id();
 2674|  93.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2712|  93.0k|    {
 2713|  93.0k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|  93.0k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|  93.0k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 93.0k, False: 0]
  ------------------
 2717|  93.0k|            parse_ctx.advance_to(begin);
 2718|  93.0k|            on_visit_scan_arg(
 2719|  93.0k|                impl::custom_reader<detail::default_context<char_type>>{
 2720|  93.0k|                    parse_ctx, get_custom_ctx()},
 2721|  93.0k|                arg);
 2722|  93.0k|            return parse_ctx.begin();
 2723|  93.0k|        }
 2724|       |
 2725|      0|        auto specs = detail::format_specs{};
 2726|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|      0|            detail::get_arg_type(arg)};
 2729|       |
 2730|      0|        begin = detail::parse_format_specs(begin, end, handler);
 2731|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 0]
  |  Branch (2731:29): [True: 0, False: 0]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|      0|        parse_ctx.advance_to(begin);
 2741|       |
 2742|      0|        on_visit_scan_arg(
 2743|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|      0|                                           get_ctx().locale()},
 2745|      0|            arg);
 2746|      0|        return parse_ctx.begin();
 2747|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2683|  93.0k|    {
 2684|  93.0k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 93.0k]
  |  Branch (2684:13): [True: 0, False: 93.0k]
  |  Branch (2684:29): [True: 0, False: 93.0k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|  93.0k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|  93.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 71.2k, False: 21.8k]
  |  |  ------------------
  ------------------
 2691|  71.2k|            on_error(r.error());
 2692|  71.2k|        }
 2693|  21.8k|        else {
 2694|  21.8k|            get_ctx().advance_to(*r);
 2695|  21.8k|        }
 2696|  93.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE14get_custom_ctxEv:
 2754|  93.0k|    {
 2755|  93.0k|        return ctx.get_custom();
 2756|  93.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE10get_customEv:
 2561|  93.0k|    {
 2562|  93.0k|        return ctx;
 2563|  93.0k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2881|  98.1k|{
 2882|  98.1k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|  98.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 21.8k, False: 76.3k]
  |  |  ------------------
  ------------------
 2883|  21.8k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 21.8k]
  |  |  ------------------
  ------------------
 2884|      0|            return detail::unexpected_scan_error(
 2885|      0|                scan_error::invalid_source_state,
 2886|      0|                "Failed to sync with underlying source");
 2887|      0|        }
 2888|  21.8k|    }
 2889|  76.3k|    else {
 2890|  76.3k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|  76.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 76.3k]
  |  |  ------------------
  ------------------
 2891|      0|            return detail::unexpected_scan_error(
 2892|      0|                scan_error::invalid_source_state,
 2893|      0|                "Failed to sync with underlying source");
 2894|      0|        }
 2895|  76.3k|    }
 2896|  98.1k|    return result;
 2897|  98.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2827|  2.54k|{
 2828|  2.54k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  2.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|  2.54k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2827|  2.54k|{
 2828|  2.54k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  2.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|  2.54k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2827|  5.08k|{
 2828|  5.08k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  5.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|  5.08k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2827|  5.08k|{
 2828|  5.08k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  5.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|  5.08k|}
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4609|  32.6k|{
 4610|  32.6k|    {
 4611|  32.6k|        SCN_TRY(it,
  ------------------
  |  | 3958|  32.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  32.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  32.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 480, False: 32.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    480|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    480|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    480|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    480|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    480|    }                                                  \
  |  |  |  | 3957|  32.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4612|  32.1k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4613|  32.1k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  32.1k|    static_cast<    \
  |  | 1109|  32.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4614|  32.1k|    }
 4615|       |
 4616|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4617|  32.1k|        ctx.range(), t, ctx.locale());
 4618|  32.1k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4619|  32.1k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.3k, False: 20.7k]
  |  |  ------------------
  ------------------
 4620|  11.3k|        return unexpected(e.error());
 4621|  11.3k|    }
 4622|  20.7k|    return r.get_iterator();
 4623|  32.1k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 3753|  32.1k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  32.1k|    static_cast<    \
  |  | 1109|  32.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3754|  32.1k|          m_begin(ranges::begin(m_range)),
 3755|  32.1k|          m_tm(t),
 3756|  32.1k|          m_loc(loc)
 3757|  32.1k|    {
 3758|  32.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 4404|  10.5k|    {
 4405|  10.5k|        set_error({scan_error::invalid_format_string, msg});
 4406|  10.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 4409|  45.1k|    {
 4410|  45.1k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4410:13): [True: 11.3k, False: 33.7k]
  ------------------
 4411|  11.3k|            m_error = unexpected(e);
 4412|  11.3k|        }
 4413|  45.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3761|  34.2k|    {
 3762|  57.6k|        while (beg != end) {
  ------------------
  |  Branch (3762:16): [True: 34.2k, False: 23.4k]
  ------------------
 3763|  34.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3763:17): [True: 228, False: 33.9k]
  ------------------
 3764|    228|                return set_error({scan_error::end_of_input, "EOF"});
 3765|    228|            }
 3766|  33.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3766:17): [True: 10.5k, False: 23.4k]
  ------------------
 3767|  10.5k|                return on_error("Invalid literal character");
 3768|  10.5k|            }
 3769|  23.4k|            ++beg;
 3770|  23.4k|            ++m_begin;
 3771|  23.4k|        }
 3772|  34.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3791|  3.59k|    {
 3792|  3.59k|#if !SCN_DISABLE_LOCALE
 3793|  3.59k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3793:13): [True: 0, False: 3.59k]
  |  Branch (3793:31): [True: 0, False: 0]
  ------------------
 3794|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3794:22): [True: 0, False: 0]
  ------------------
 3795|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3796|      0|            }
 3797|      0|            return;
 3798|      0|        }
 3799|  3.59k|#endif
 3800|       |
 3801|  3.59k|        int yr = read_classic_unsigned_integer(4, 4);
 3802|  3.59k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3803|  3.59k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3264|  3.59k|    {
 3265|  3.59k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  3.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.59k]
  |  |  ------------------
  ------------------
 3266|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3267|      0|                                "Invalid value for tm_year"});
 3268|      0|        }
 3269|  3.59k|        t.tm_year = y - 1900;
 3270|  3.59k|        st.set_full_year(h);
 3271|  3.59k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 4427|  58.5k|    {
 4428|  58.5k|        int digits_read = 0;
 4429|  58.5k|        int accumulator = 0;
 4430|   102k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4430:16): [True: 101k, False: 456]
  ------------------
 4431|   101k|            const auto ch = *m_begin;
 4432|   101k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4432:17): [True: 29.8k, False: 72.0k]
  |  Branch (4432:36): [True: 18.9k, False: 53.1k]
  ------------------
 4433|  48.8k|                break;
 4434|  48.8k|            }
 4435|  53.1k|            ++m_begin;
 4436|  53.1k|            ++digits_read;
 4437|  53.1k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4438|  53.1k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4438:17): [True: 9.28k, False: 43.8k]
  ------------------
 4439|  9.28k|                break;
 4440|  9.28k|            }
 4441|  53.1k|        }
 4442|  58.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4442:13): [True: 16.8k, False: 41.6k]
  ------------------
 4443|  16.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4444|  16.8k|                                 "Too few integer digits"});
 4445|  16.8k|            return -1;
 4446|  16.8k|        }
 4447|  41.6k|        return accumulator;
 4448|  58.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3805|  6.45k|    {
 3806|  6.45k|#if !SCN_DISABLE_LOCALE
 3807|  6.45k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3807:13): [True: 0, False: 6.45k]
  |  Branch (3807:31): [True: 0, False: 0]
  ------------------
 3808|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3808:22): [True: 0, False: 0]
  ------------------
 3809|      0|                setter::set_short_year(*this, m_tm, m_st,
 3810|      0|                                       (t->tm_year + 1900) % 100);
 3811|      0|            }
 3812|      0|            return;
 3813|      0|        }
 3814|  6.45k|#endif
 3815|       |
 3816|  6.45k|        int yr = read_classic_unsigned_integer(2, 2);
 3817|  6.45k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3818|  6.45k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3281|  6.45k|    {
 3282|  6.45k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.60k, False: 4.85k]
  |  |  |  Branch (1039:45): [True: 1.60k, False: 4.85k]
  |  |  |  Branch (1039:45): [True: 0, False: 4.85k]
  |  |  ------------------
  ------------------
 3283|  1.60k|            return h.set_error({scan_error::invalid_scanned_value,
 3284|  1.60k|                                "Invalid value for tm_year"});
 3285|  1.60k|        }
 3286|  4.85k|        st.short_year_value = y;
 3287|  4.85k|        st.set_short_year(h);
 3288|  4.85k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3848|  4.37k|    {
 3849|  4.37k|#if !SCN_DISABLE_FAST_FLOAT
 3850|  4.37k|        if (m_st.localized) {
  ------------------
  |  Branch (3850:13): [True: 0, False: 4.37k]
  ------------------
 3851|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3851:22): [True: 0, False: 0]
  ------------------
 3852|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3853|      0|            }
 3854|      0|            return;
 3855|      0|        }
 3856|  4.37k|#endif
 3857|       |
 3858|  4.37k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3859|  4.37k|            {"January", 1},
 3860|  4.37k|            {"February", 2},
 3861|  4.37k|            {"March", 3},
 3862|  4.37k|            {"April", 4},
 3863|  4.37k|            {"May", 5},
 3864|  4.37k|            {"June", 6},
 3865|  4.37k|            {"July", 7},
 3866|  4.37k|            {"August", 8},
 3867|  4.37k|            {"September", 9},
 3868|  4.37k|            {"October", 10},
 3869|  4.37k|            {"November", 11},
 3870|  4.37k|            {"December", 12},
 3871|  4.37k|        }};
 3872|  4.37k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3872:18): [True: 76, False: 4.29k]
  ------------------
 3873|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3874|     76|        }
 3875|  4.29k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3876|  4.29k|            {"Jan", 1},
 3877|  4.29k|            {"Feb", 2},
 3878|  4.29k|            {"Mar", 3},
 3879|  4.29k|            {"Apr", 4},
 3880|  4.29k|            {"Jun", 6},
 3881|  4.29k|            {"Jul", 7},
 3882|  4.29k|            {"Aug", 8},
 3883|  4.29k|            {"Sep", 9},
 3884|  4.29k|            {"Oct", 10},
 3885|  4.29k|            {"Nov", 11},
 3886|  4.29k|            {"Dec", 12},
 3887|  4.29k|        }};
 3888|  4.29k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 2.67k, False: 1.62k]
  ------------------
 3889|  2.67k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|  2.67k|        }
 3891|  1.62k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3892|  1.62k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3254|  11.2k|    {
 3255|  11.2k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.74k, False: 8.48k]
  |  |  |  Branch (1039:45): [True: 2.62k, False: 8.60k]
  |  |  |  Branch (1039:45): [True: 116, False: 8.48k]
  |  |  ------------------
  ------------------
 3256|  2.74k|            return h.set_error({scan_error::invalid_scanned_value,
 3257|  2.74k|                                "Invalid value for tm_mon"});
 3258|  2.74k|        }
 3259|  8.48k|        t.tm_mon = m - 1;
 3260|  8.48k|        st.set_mon(h);
 3261|  8.48k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  4.37k|    {
 4466|  4.37k|        auto start_it = m_begin;
 4467|  4.37k|        std::size_t options_available = N;
 4468|  4.37k|        std::size_t chars_consumed = 0;
 4469|  17.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 12.9k, False: 4.23k]
  ------------------
 4470|  17.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 12.8k, False: 76]
  ------------------
 4471|  12.8k|            std::size_t i = 0;
 4472|  12.8k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 64, False: 12.7k]
  ------------------
 4473|     64|                options_available = 0;
 4474|     64|                break;
 4475|     64|            }
 4476|  12.7k|            const auto ch = *m_begin;
 4477|  12.7k|            ++m_begin;
 4478|  79.4k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 66.6k, False: 12.7k]
  ------------------
 4479|  66.6k|                const auto cmp = static_cast<unsigned>(
 4480|  66.6k|                    ch ^ options[i].first[chars_consumed]);
 4481|  66.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 66.6k]
  ------------------
 4482|  66.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 55.0k, False: 11.5k]
  |  Branch (4482:34): [True: 52.2k, False: 2.83k]
  ------------------
 4483|  52.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  52.2k|                                options.end());
 4485|  52.2k|                    --options_available;
 4486|  52.2k|                    continue;
 4487|  52.2k|                }
 4488|  14.3k|                ++i;
 4489|  14.3k|            }
 4490|  12.7k|            ++chars_consumed;
 4491|  12.7k|        }
 4492|  4.37k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 4.29k, False: 76]
  ------------------
 4493|  4.29k|            m_begin = start_it;
 4494|  4.29k|            return std::nullopt;
 4495|  4.29k|        }
 4496|     76|        return options.front().second;
 4497|  4.37k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  4.29k|    {
 4466|  4.29k|        auto start_it = m_begin;
 4467|  4.29k|        std::size_t options_available = N;
 4468|  4.29k|        std::size_t chars_consumed = 0;
 4469|  14.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 12.6k, False: 1.56k]
  ------------------
 4470|  14.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 9.95k, False: 2.67k]
  ------------------
 4471|  9.95k|            std::size_t i = 0;
 4472|  9.95k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 56, False: 9.90k]
  ------------------
 4473|     56|                options_available = 0;
 4474|     56|                break;
 4475|     56|            }
 4476|  9.90k|            const auto ch = *m_begin;
 4477|  9.90k|            ++m_begin;
 4478|  62.7k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 52.8k, False: 9.90k]
  ------------------
 4479|  52.8k|                const auto cmp = static_cast<unsigned>(
 4480|  52.8k|                    ch ^ options[i].first[chars_consumed]);
 4481|  52.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 52.8k]
  ------------------
 4482|  52.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 47.2k, False: 5.64k]
  |  Branch (4482:34): [True: 44.4k, False: 2.75k]
  ------------------
 4483|  44.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  44.4k|                                options.end());
 4485|  44.4k|                    --options_available;
 4486|  44.4k|                    continue;
 4487|  44.4k|                }
 4488|  8.39k|                ++i;
 4489|  8.39k|            }
 4490|  9.90k|            ++chars_consumed;
 4491|  9.90k|        }
 4492|  4.29k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 1.62k, False: 2.67k]
  ------------------
 4493|  1.62k|            m_begin = start_it;
 4494|  1.62k|            return std::nullopt;
 4495|  1.62k|        }
 4496|  2.67k|        return options.front().second;
 4497|  4.29k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3894|  8.48k|    {
 3895|  8.48k|#if !SCN_DISABLE_LOCALE
 3896|  8.48k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3896:13): [True: 0, False: 8.48k]
  |  Branch (3896:31): [True: 0, False: 0]
  ------------------
 3897|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3897:22): [True: 0, False: 0]
  ------------------
 3898|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3899|      0|            }
 3900|      0|            return;
 3901|      0|        }
 3902|  8.48k|#endif
 3903|       |
 3904|  8.48k|        int mon = read_classic_unsigned_integer(1, 2);
 3905|  8.48k|        setter::set_mon(*this, m_tm, m_st, mon);
 3906|  8.48k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3926|  8.46k|    {
 3927|  8.46k|#if !SCN_DISABLE_LOCALE
 3928|  8.46k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3928:13): [True: 0, False: 8.46k]
  |  Branch (3928:31): [True: 0, False: 0]
  ------------------
 3929|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3929:22): [True: 0, False: 0]
  ------------------
 3930|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3931|      0|            }
 3932|      0|            return;
 3933|      0|        }
 3934|  8.46k|#endif
 3935|       |
 3936|  8.46k|        int mday = read_classic_unsigned_integer(1, 2);
 3937|  8.46k|        setter::set_mday(*this, m_tm, m_st, mday);
 3938|  8.46k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3244|  8.46k|    {
 3245|  8.46k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.21k, False: 5.25k]
  |  |  |  Branch (1039:45): [True: 3.13k, False: 5.33k]
  |  |  |  Branch (1039:45): [True: 80, False: 5.25k]
  |  |  ------------------
  ------------------
 3246|  3.21k|            return h.set_error({scan_error::invalid_scanned_value,
 3247|  3.21k|                                "Invalid value for tm_mday"});
 3248|  3.21k|        }
 3249|  5.25k|        t.tm_mday = d;
 3250|  5.25k|        st.set_mday(h);
 3251|  5.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3941|  3.42k|    {
 3942|  3.42k|#if !SCN_DISABLE_LOCALE
 3943|  3.42k|        if (m_st.localized) {
  ------------------
  |  Branch (3943:13): [True: 0, False: 3.42k]
  ------------------
 3944|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3944:22): [True: 0, False: 0]
  ------------------
 3945|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3946|      0|            }
 3947|      0|            return;
 3948|      0|        }
 3949|  3.42k|#endif
 3950|       |
 3951|  3.42k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3952|  3.42k|            {"Sunday", 0},
 3953|  3.42k|            {"Monday", 1},
 3954|  3.42k|            {"Tuesday", 2},
 3955|  3.42k|            {"Wednesday", 3},
 3956|  3.42k|            {"Thursday", 4},
 3957|  3.42k|            {"Friday", 5},
 3958|  3.42k|            {"Saturday", 6},
 3959|  3.42k|        }};
 3960|  3.42k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3960:18): [True: 0, False: 3.42k]
  ------------------
 3961|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3962|      0|        }
 3963|  3.42k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3964|  3.42k|            {"Sun", 0},
 3965|  3.42k|            {"Mon", 1},
 3966|  3.42k|            {"Tue", 2},
 3967|  3.42k|            {"Wed", 3},
 3968|  3.42k|            {"Thu", 4},
 3969|  3.42k|            {"Fri", 5},
 3970|  3.42k|            {"Sat", 6},
 3971|  3.42k|        }};
 3972|  3.42k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3972:18): [True: 1.78k, False: 1.64k]
  ------------------
 3973|  1.78k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3974|  1.78k|        }
 3975|  1.64k|        return set_error(
 3976|  1.64k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3977|  3.42k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3291|  1.78k|    {
 3292|  1.78k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1039|  3.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.78k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.78k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.78k]
  |  |  ------------------
  ------------------
 3293|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3294|      0|                                "Invalid value for tm_wday"});
 3295|      0|        }
 3296|  1.78k|        t.tm_wday = d;
 3297|  1.78k|        st.set_wday(h);
 3298|  1.78k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  6.85k|    {
 4466|  6.85k|        auto start_it = m_begin;
 4467|  6.85k|        std::size_t options_available = N;
 4468|  6.85k|        std::size_t chars_consumed = 0;
 4469|  23.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 18.1k, False: 5.01k]
  ------------------
 4470|  23.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 16.3k, False: 1.78k]
  ------------------
 4471|  16.3k|            std::size_t i = 0;
 4472|  16.3k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 54, False: 16.3k]
  ------------------
 4473|     54|                options_available = 0;
 4474|     54|                break;
 4475|     54|            }
 4476|  16.3k|            const auto ch = *m_begin;
 4477|  16.3k|            ++m_begin;
 4478|  73.8k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 57.4k, False: 16.3k]
  ------------------
 4479|  57.4k|                const auto cmp = static_cast<unsigned>(
 4480|  57.4k|                    ch ^ options[i].first[chars_consumed]);
 4481|  57.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 57.4k]
  ------------------
 4482|  57.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 46.1k, False: 11.2k]
  |  Branch (4482:34): [True: 46.1k, False: 76]
  ------------------
 4483|  46.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  46.1k|                                options.end());
 4485|  46.1k|                    --options_available;
 4486|  46.1k|                    continue;
 4487|  46.1k|                }
 4488|  11.3k|                ++i;
 4489|  11.3k|            }
 4490|  16.3k|            ++chars_consumed;
 4491|  16.3k|        }
 4492|  6.85k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 5.06k, False: 1.78k]
  ------------------
 4493|  5.06k|            m_begin = start_it;
 4494|  5.06k|            return std::nullopt;
 4495|  5.06k|        }
 4496|  1.78k|        return options.front().second;
 4497|  6.85k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 4015|  14.3k|    {
 4016|  14.3k|#if !SCN_DISABLE_LOCALE
 4017|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4017:13): [True: 0, False: 14.3k]
  |  Branch (4017:31): [True: 0, False: 0]
  ------------------
 4018|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4018:22): [True: 0, False: 0]
  ------------------
 4019|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4020|      0|            }
 4021|      0|            return;
 4022|      0|        }
 4023|  14.3k|#endif
 4024|       |
 4025|  14.3k|        int hr = read_classic_unsigned_integer(1, 2);
 4026|  14.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4027|  14.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3224|  14.3k|    {
 3225|  14.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.34k, False: 11.9k]
  |  |  |  Branch (1039:45): [True: 2.15k, False: 12.1k]
  |  |  |  Branch (1039:45): [True: 194, False: 11.9k]
  |  |  ------------------
  ------------------
 3226|  2.34k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3227|  2.34k|                                  "Invalid value for tm_hour"});
 3228|  2.34k|        }
 3229|  11.9k|        t.tm_hour = h;
 3230|  11.9k|        st.set_hour24(hdl);
 3231|  11.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 4043|  14.2k|    {
 4044|  14.2k|#if !SCN_DISABLE_LOCALE
 4045|  14.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4045:13): [True: 0, False: 14.2k]
  |  Branch (4045:31): [True: 0, False: 0]
  ------------------
 4046|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4046:22): [True: 0, False: 0]
  ------------------
 4047|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4048|      0|            }
 4049|      0|            return;
 4050|      0|        }
 4051|  14.2k|#endif
 4052|       |
 4053|  14.2k|        int min = read_classic_unsigned_integer(1, 2);
 4054|  14.2k|        setter::set_min(*this, m_tm, m_st, min);
 4055|  14.2k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3214|  14.2k|    {
 3215|  14.2k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.69k, False: 11.5k]
  |  |  |  Branch (1039:45): [True: 2.66k, False: 11.6k]
  |  |  |  Branch (1039:45): [True: 26, False: 11.5k]
  |  |  ------------------
  ------------------
 3216|  2.69k|            return h.set_error({scan_error::invalid_scanned_value,
 3217|  2.69k|                                "Invalid value for tm_min"});
 3218|  2.69k|        }
 3219|  11.5k|        t.tm_min = m;
 3220|  11.5k|        st.set_min(h);
 3221|  11.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 4057|  2.94k|    {
 4058|  2.94k|#if !SCN_DISABLE_LOCALE
 4059|  2.94k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4059:13): [True: 0, False: 2.94k]
  |  Branch (4059:31): [True: 0, False: 0]
  ------------------
 4060|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4060:22): [True: 0, False: 0]
  ------------------
 4061|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4062|      0|            }
 4063|      0|            return;
 4064|      0|        }
 4065|  2.94k|#endif
 4066|       |
 4067|  2.94k|        int sec = read_classic_unsigned_integer(1, 2);
 4068|  2.94k|        setter::set_sec(*this, m_tm, m_st, sec);
 4069|  2.94k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3204|  2.94k|    {
 3205|  2.94k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.59k, False: 1.34k]
  |  |  |  Branch (1039:45): [True: 1.59k, False: 1.34k]
  |  |  |  Branch (1039:45): [True: 4, False: 1.34k]
  |  |  ------------------
  ------------------
 3206|  1.59k|            return h.set_error({scan_error::invalid_scanned_value,
 3207|  1.59k|                                "Invalid value for tm_sec"});
 3208|  1.59k|        }
 3209|  1.34k|        t.tm_sec = s;
 3210|  1.34k|        st.set_sec(h);
 3211|  1.34k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 4299|  6.45k|    {
 4300|       |        // %m/%d/%y
 4301|  6.45k|        constexpr CharT slash = '/';
 4302|  6.45k|        on_dec_month();
 4303|  6.45k|        on_text(&slash, &slash + 1);
 4304|  6.45k|        on_day_of_month();
 4305|  6.45k|        on_text(&slash, &slash + 1);
 4306|  6.45k|        on_short_year();
 4307|  6.45k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 4309|  1.95k|    {
 4310|       |        // %Y-%m-%d
 4311|  1.95k|        constexpr CharT dash = '-';
 4312|  1.95k|        on_full_year();
 4313|  1.95k|        on_text(&dash, &dash + 1);
 4314|  1.95k|        on_dec_month();
 4315|  1.95k|        on_text(&dash, &dash + 1);
 4316|  1.95k|        on_day_of_month();
 4317|  1.95k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 4341|  11.3k|    {
 4342|       |        // %H:%M
 4343|  11.3k|        constexpr CharT colon = ':';
 4344|  11.3k|        on_24_hour();
 4345|  11.3k|        on_text(&colon, &colon + 1);
 4346|  11.3k|        on_minute();
 4347|  11.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 4349|  2.94k|    {
 4350|       |        // %H:%M:%S
 4351|  2.94k|        constexpr CharT colon = ':';
 4352|  2.94k|        on_24_hour();
 4353|  2.94k|        on_text(&colon, &colon + 1);
 4354|  2.94k|        on_minute();
 4355|  2.94k|        on_text(&colon, &colon + 1);
 4356|  2.94k|        on_second();
 4357|  2.94k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 4388|  20.7k|    {
 4389|  20.7k|        m_st.verify(*this);
 4390|  20.7k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4390:13): [True: 0, False: 20.7k]
  |  Branch (4390:31): [True: 0, False: 0]
  ------------------
 4391|      0|            setter::handle_am_pm(m_tm, m_st);
 4392|      0|        }
 4393|  20.7k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4393:13): [True: 20.4k, False: 312]
  |  Branch (4393:37): [True: 4.83k, False: 15.5k]
  |  Branch (4393:60): [True: 0, False: 15.5k]
  ------------------
 4394|  4.83k|            setter::handle_short_year_and_century(m_tm, m_st);
 4395|  4.83k|        }
 4396|  20.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 3342|  9.96k|    {
 3343|  9.96k|        st.handle_short_year_and_century(t.tm_year, 1900);
 3344|  9.96k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 4399|  64.4k|    {
 4400|  64.4k|        return m_error;
 4401|  64.4k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 4416|  20.7k|    {
 4417|  20.7k|        return m_begin;
 4418|  20.7k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4609|  27.2k|{
 4610|  27.2k|    {
 4611|  27.2k|        SCN_TRY(it,
  ------------------
  |  | 3958|  27.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  27.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  27.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 246, False: 26.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    246|    }                                                  \
  |  |  |  | 3957|  27.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4612|  26.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4613|  26.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  26.9k|    static_cast<    \
  |  | 1109|  26.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4614|  26.9k|    }
 4615|       |
 4616|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4617|  26.9k|        ctx.range(), t, ctx.locale());
 4618|  26.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4619|  26.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.6k, False: 15.3k]
  |  |  ------------------
  ------------------
 4620|  11.6k|        return unexpected(e.error());
 4621|  11.6k|    }
 4622|  15.3k|    return r.get_iterator();
 4623|  26.9k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  81.6k|{
  250|  81.6k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  81.6k|        .transform_error(impl::make_eof_scan_error);
  252|  81.6k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 3753|  26.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  26.9k|    static_cast<    \
  |  | 1109|  26.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3754|  26.9k|          m_begin(ranges::begin(m_range)),
 3755|  26.9k|          m_tm(t),
 3756|  26.9k|          m_loc(loc)
 3757|  26.9k|    {
 3758|  26.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 4404|  10.9k|    {
 4405|  10.9k|        set_error({scan_error::invalid_format_string, msg});
 4406|  10.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 4409|  46.9k|    {
 4410|  46.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4410:13): [True: 11.6k, False: 35.3k]
  ------------------
 4411|  11.6k|            m_error = unexpected(e);
 4412|  11.6k|        }
 4413|  46.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3761|  24.3k|    {
 3762|  37.6k|        while (beg != end) {
  ------------------
  |  Branch (3762:16): [True: 24.3k, False: 13.3k]
  ------------------
 3763|  24.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3763:17): [True: 168, False: 24.2k]
  ------------------
 3764|    168|                return set_error({scan_error::end_of_input, "EOF"});
 3765|    168|            }
 3766|  24.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3766:17): [True: 10.9k, False: 13.3k]
  ------------------
 3767|  10.9k|                return on_error("Invalid literal character");
 3768|  10.9k|            }
 3769|  13.3k|            ++beg;
 3770|  13.3k|            ++m_begin;
 3771|  13.3k|        }
 3772|  24.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3791|  3.65k|    {
 3792|  3.65k|#if !SCN_DISABLE_LOCALE
 3793|  3.65k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3793:13): [True: 0, False: 3.65k]
  |  Branch (3793:31): [True: 0, False: 0]
  ------------------
 3794|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3794:22): [True: 0, False: 0]
  ------------------
 3795|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3796|      0|            }
 3797|      0|            return;
 3798|      0|        }
 3799|  3.65k|#endif
 3800|       |
 3801|  3.65k|        int yr = read_classic_unsigned_integer(4, 4);
 3802|  3.65k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3803|  3.65k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3264|  3.65k|    {
 3265|  3.65k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.65k]
  |  |  ------------------
  ------------------
 3266|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3267|      0|                                "Invalid value for tm_year"});
 3268|      0|        }
 3269|  3.65k|        t.tm_year = y - 1900;
 3270|  3.65k|        st.set_full_year(h);
 3271|  3.65k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 4427|  43.5k|    {
 4428|  43.5k|        int digits_read = 0;
 4429|  43.5k|        int accumulator = 0;
 4430|  71.3k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4430:16): [True: 71.0k, False: 354]
  ------------------
 4431|  71.0k|            const auto ch = *m_begin;
 4432|  71.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4432:17): [True: 21.1k, False: 49.8k]
  |  Branch (4432:36): [True: 17.7k, False: 32.1k]
  ------------------
 4433|  38.9k|                break;
 4434|  38.9k|            }
 4435|  32.1k|            ++m_begin;
 4436|  32.1k|            ++digits_read;
 4437|  32.1k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4438|  32.1k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4438:17): [True: 4.31k, False: 27.8k]
  ------------------
 4439|  4.31k|                break;
 4440|  4.31k|            }
 4441|  32.1k|        }
 4442|  43.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4442:13): [True: 17.7k, False: 25.8k]
  ------------------
 4443|  17.7k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4444|  17.7k|                                 "Too few integer digits"});
 4445|  17.7k|            return -1;
 4446|  17.7k|        }
 4447|  25.8k|        return accumulator;
 4448|  43.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3805|  1.79k|    {
 3806|  1.79k|#if !SCN_DISABLE_LOCALE
 3807|  1.79k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3807:13): [True: 0, False: 1.79k]
  |  Branch (3807:31): [True: 0, False: 0]
  ------------------
 3808|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3808:22): [True: 0, False: 0]
  ------------------
 3809|      0|                setter::set_short_year(*this, m_tm, m_st,
 3810|      0|                                       (t->tm_year + 1900) % 100);
 3811|      0|            }
 3812|      0|            return;
 3813|      0|        }
 3814|  1.79k|#endif
 3815|       |
 3816|  1.79k|        int yr = read_classic_unsigned_integer(2, 2);
 3817|  1.79k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3818|  1.79k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3281|  1.79k|    {
 3282|  1.79k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.65k, False: 144]
  |  |  |  Branch (1039:45): [True: 1.65k, False: 144]
  |  |  |  Branch (1039:45): [True: 0, False: 144]
  |  |  ------------------
  ------------------
 3283|  1.65k|            return h.set_error({scan_error::invalid_scanned_value,
 3284|  1.65k|                                "Invalid value for tm_year"});
 3285|  1.65k|        }
 3286|    144|        st.short_year_value = y;
 3287|    144|        st.set_short_year(h);
 3288|    144|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3848|  4.39k|    {
 3849|  4.39k|#if !SCN_DISABLE_FAST_FLOAT
 3850|  4.39k|        if (m_st.localized) {
  ------------------
  |  Branch (3850:13): [True: 0, False: 4.39k]
  ------------------
 3851|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3851:22): [True: 0, False: 0]
  ------------------
 3852|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3853|      0|            }
 3854|      0|            return;
 3855|      0|        }
 3856|  4.39k|#endif
 3857|       |
 3858|  4.39k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3859|  4.39k|            {"January", 1},
 3860|  4.39k|            {"February", 2},
 3861|  4.39k|            {"March", 3},
 3862|  4.39k|            {"April", 4},
 3863|  4.39k|            {"May", 5},
 3864|  4.39k|            {"June", 6},
 3865|  4.39k|            {"July", 7},
 3866|  4.39k|            {"August", 8},
 3867|  4.39k|            {"September", 9},
 3868|  4.39k|            {"October", 10},
 3869|  4.39k|            {"November", 11},
 3870|  4.39k|            {"December", 12},
 3871|  4.39k|        }};
 3872|  4.39k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3872:18): [True: 76, False: 4.32k]
  ------------------
 3873|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3874|     76|        }
 3875|  4.32k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3876|  4.32k|            {"Jan", 1},
 3877|  4.32k|            {"Feb", 2},
 3878|  4.32k|            {"Mar", 3},
 3879|  4.32k|            {"Apr", 4},
 3880|  4.32k|            {"Jun", 6},
 3881|  4.32k|            {"Jul", 7},
 3882|  4.32k|            {"Aug", 8},
 3883|  4.32k|            {"Sep", 9},
 3884|  4.32k|            {"Oct", 10},
 3885|  4.32k|            {"Nov", 11},
 3886|  4.32k|            {"Dec", 12},
 3887|  4.32k|        }};
 3888|  4.32k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 2.66k, False: 1.65k]
  ------------------
 3889|  2.66k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|  2.66k|        }
 3891|  1.65k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3892|  1.65k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3254|  6.59k|    {
 3255|  6.59k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.86k, False: 3.72k]
  |  |  |  Branch (1039:45): [True: 2.76k, False: 3.82k]
  |  |  |  Branch (1039:45): [True: 96, False: 3.72k]
  |  |  ------------------
  ------------------
 3256|  2.86k|            return h.set_error({scan_error::invalid_scanned_value,
 3257|  2.86k|                                "Invalid value for tm_mon"});
 3258|  2.86k|        }
 3259|  3.72k|        t.tm_mon = m - 1;
 3260|  3.72k|        st.set_mon(h);
 3261|  3.72k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  4.39k|    {
 4466|  4.39k|        auto start_it = m_begin;
 4467|  4.39k|        std::size_t options_available = N;
 4468|  4.39k|        std::size_t chars_consumed = 0;
 4469|  17.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 12.9k, False: 4.26k]
  ------------------
 4470|  17.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 12.8k, False: 76]
  ------------------
 4471|  12.8k|            std::size_t i = 0;
 4472|  12.8k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 58, False: 12.7k]
  ------------------
 4473|     58|                options_available = 0;
 4474|     58|                break;
 4475|     58|            }
 4476|  12.7k|            const auto ch = *m_begin;
 4477|  12.7k|            ++m_begin;
 4478|  79.6k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 66.8k, False: 12.7k]
  ------------------
 4479|  66.8k|                const auto cmp = static_cast<unsigned>(
 4480|  66.8k|                    ch ^ options[i].first[chars_consumed]);
 4481|  66.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 66.8k]
  ------------------
 4482|  66.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 55.4k, False: 11.4k]
  |  Branch (4482:34): [True: 52.5k, False: 2.80k]
  ------------------
 4483|  52.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  52.5k|                                options.end());
 4485|  52.5k|                    --options_available;
 4486|  52.5k|                    continue;
 4487|  52.5k|                }
 4488|  14.2k|                ++i;
 4489|  14.2k|            }
 4490|  12.7k|            ++chars_consumed;
 4491|  12.7k|        }
 4492|  4.39k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 4.32k, False: 76]
  ------------------
 4493|  4.32k|            m_begin = start_it;
 4494|  4.32k|            return std::nullopt;
 4495|  4.32k|        }
 4496|     76|        return options.front().second;
 4497|  4.39k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  4.32k|    {
 4466|  4.32k|        auto start_it = m_begin;
 4467|  4.32k|        std::size_t options_available = N;
 4468|  4.32k|        std::size_t chars_consumed = 0;
 4469|  14.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 12.6k, False: 1.60k]
  ------------------
 4470|  14.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 9.95k, False: 2.66k]
  ------------------
 4471|  9.95k|            std::size_t i = 0;
 4472|  9.95k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 50, False: 9.90k]
  ------------------
 4473|     50|                options_available = 0;
 4474|     50|                break;
 4475|     50|            }
 4476|  9.90k|            const auto ch = *m_begin;
 4477|  9.90k|            ++m_begin;
 4478|  63.0k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 53.1k, False: 9.90k]
  ------------------
 4479|  53.1k|                const auto cmp = static_cast<unsigned>(
 4480|  53.1k|                    ch ^ options[i].first[chars_consumed]);
 4481|  53.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 53.1k]
  ------------------
 4482|  53.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 47.5k, False: 5.61k]
  |  Branch (4482:34): [True: 44.8k, False: 2.72k]
  ------------------
 4483|  44.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  44.8k|                                options.end());
 4485|  44.8k|                    --options_available;
 4486|  44.8k|                    continue;
 4487|  44.8k|                }
 4488|  8.34k|                ++i;
 4489|  8.34k|            }
 4490|  9.90k|            ++chars_consumed;
 4491|  9.90k|        }
 4492|  4.32k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 1.65k, False: 2.66k]
  ------------------
 4493|  1.65k|            m_begin = start_it;
 4494|  1.65k|            return std::nullopt;
 4495|  1.65k|        }
 4496|  2.66k|        return options.front().second;
 4497|  4.32k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3894|  3.84k|    {
 3895|  3.84k|#if !SCN_DISABLE_LOCALE
 3896|  3.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3896:13): [True: 0, False: 3.84k]
  |  Branch (3896:31): [True: 0, False: 0]
  ------------------
 3897|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3897:22): [True: 0, False: 0]
  ------------------
 3898|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3899|      0|            }
 3900|      0|            return;
 3901|      0|        }
 3902|  3.84k|#endif
 3903|       |
 3904|  3.84k|        int mon = read_classic_unsigned_integer(1, 2);
 3905|  3.84k|        setter::set_mon(*this, m_tm, m_st, mon);
 3906|  3.84k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3926|  3.83k|    {
 3927|  3.83k|#if !SCN_DISABLE_LOCALE
 3928|  3.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3928:13): [True: 0, False: 3.83k]
  |  Branch (3928:31): [True: 0, False: 0]
  ------------------
 3929|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3929:22): [True: 0, False: 0]
  ------------------
 3930|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3931|      0|            }
 3932|      0|            return;
 3933|      0|        }
 3934|  3.83k|#endif
 3935|       |
 3936|  3.83k|        int mday = read_classic_unsigned_integer(1, 2);
 3937|  3.83k|        setter::set_mday(*this, m_tm, m_st, mday);
 3938|  3.83k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3244|  3.83k|    {
 3245|  3.83k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  4.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.30k, False: 530]
  |  |  |  Branch (1039:45): [True: 3.22k, False: 602]
  |  |  |  Branch (1039:45): [True: 72, False: 530]
  |  |  ------------------
  ------------------
 3246|  3.30k|            return h.set_error({scan_error::invalid_scanned_value,
 3247|  3.30k|                                "Invalid value for tm_mday"});
 3248|  3.30k|        }
 3249|    530|        t.tm_mday = d;
 3250|    530|        st.set_mday(h);
 3251|    530|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3941|  3.38k|    {
 3942|  3.38k|#if !SCN_DISABLE_LOCALE
 3943|  3.38k|        if (m_st.localized) {
  ------------------
  |  Branch (3943:13): [True: 0, False: 3.38k]
  ------------------
 3944|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3944:22): [True: 0, False: 0]
  ------------------
 3945|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3946|      0|            }
 3947|      0|            return;
 3948|      0|        }
 3949|  3.38k|#endif
 3950|       |
 3951|  3.38k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3952|  3.38k|            {"Sunday", 0},
 3953|  3.38k|            {"Monday", 1},
 3954|  3.38k|            {"Tuesday", 2},
 3955|  3.38k|            {"Wednesday", 3},
 3956|  3.38k|            {"Thursday", 4},
 3957|  3.38k|            {"Friday", 5},
 3958|  3.38k|            {"Saturday", 6},
 3959|  3.38k|        }};
 3960|  3.38k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3960:18): [True: 0, False: 3.38k]
  ------------------
 3961|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3962|      0|        }
 3963|  3.38k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3964|  3.38k|            {"Sun", 0},
 3965|  3.38k|            {"Mon", 1},
 3966|  3.38k|            {"Tue", 2},
 3967|  3.38k|            {"Wed", 3},
 3968|  3.38k|            {"Thu", 4},
 3969|  3.38k|            {"Fri", 5},
 3970|  3.38k|            {"Sat", 6},
 3971|  3.38k|        }};
 3972|  3.38k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3972:18): [True: 1.71k, False: 1.67k]
  ------------------
 3973|  1.71k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3974|  1.71k|        }
 3975|  1.67k|        return set_error(
 3976|  1.67k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3977|  3.38k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3291|  1.71k|    {
 3292|  1.71k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1039|  3.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.71k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.71k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.71k]
  |  |  ------------------
  ------------------
 3293|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3294|      0|                                "Invalid value for tm_wday"});
 3295|      0|        }
 3296|  1.71k|        t.tm_wday = d;
 3297|  1.71k|        st.set_wday(h);
 3298|  1.71k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  6.76k|    {
 4466|  6.76k|        auto start_it = m_begin;
 4467|  6.76k|        std::size_t options_available = N;
 4468|  6.76k|        std::size_t chars_consumed = 0;
 4469|  22.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 17.5k, False: 5.01k]
  ------------------
 4470|  22.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 15.8k, False: 1.71k]
  ------------------
 4471|  15.8k|            std::size_t i = 0;
 4472|  15.8k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 38, False: 15.8k]
  ------------------
 4473|     38|                options_available = 0;
 4474|     38|                break;
 4475|     38|            }
 4476|  15.8k|            const auto ch = *m_begin;
 4477|  15.8k|            ++m_begin;
 4478|  72.2k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 56.4k, False: 15.8k]
  ------------------
 4479|  56.4k|                const auto cmp = static_cast<unsigned>(
 4480|  56.4k|                    ch ^ options[i].first[chars_consumed]);
 4481|  56.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 56.4k]
  ------------------
 4482|  56.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 45.6k, False: 10.7k]
  |  Branch (4482:34): [True: 45.5k, False: 48]
  ------------------
 4483|  45.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  45.5k|                                options.end());
 4485|  45.5k|                    --options_available;
 4486|  45.5k|                    continue;
 4487|  45.5k|                }
 4488|  10.8k|                ++i;
 4489|  10.8k|            }
 4490|  15.8k|            ++chars_consumed;
 4491|  15.8k|        }
 4492|  6.76k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 5.05k, False: 1.71k]
  ------------------
 4493|  5.05k|            m_begin = start_it;
 4494|  5.05k|            return std::nullopt;
 4495|  5.05k|        }
 4496|  1.71k|        return options.front().second;
 4497|  6.76k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 4015|  13.7k|    {
 4016|  13.7k|#if !SCN_DISABLE_LOCALE
 4017|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4017:13): [True: 0, False: 13.7k]
  |  Branch (4017:31): [True: 0, False: 0]
  ------------------
 4018|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4018:22): [True: 0, False: 0]
  ------------------
 4019|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4020|      0|            }
 4021|      0|            return;
 4022|      0|        }
 4023|  13.7k|#endif
 4024|       |
 4025|  13.7k|        int hr = read_classic_unsigned_integer(1, 2);
 4026|  13.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4027|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3224|  13.7k|    {
 3225|  13.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.63k, False: 11.1k]
  |  |  |  Branch (1039:45): [True: 2.46k, False: 11.3k]
  |  |  |  Branch (1039:45): [True: 172, False: 11.1k]
  |  |  ------------------
  ------------------
 3226|  2.63k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3227|  2.63k|                                  "Invalid value for tm_hour"});
 3228|  2.63k|        }
 3229|  11.1k|        t.tm_hour = h;
 3230|  11.1k|        st.set_hour24(hdl);
 3231|  11.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 4043|  13.7k|    {
 4044|  13.7k|#if !SCN_DISABLE_LOCALE
 4045|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4045:13): [True: 0, False: 13.7k]
  |  Branch (4045:31): [True: 0, False: 0]
  ------------------
 4046|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4046:22): [True: 0, False: 0]
  ------------------
 4047|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4048|      0|            }
 4049|      0|            return;
 4050|      0|        }
 4051|  13.7k|#endif
 4052|       |
 4053|  13.7k|        int min = read_classic_unsigned_integer(1, 2);
 4054|  13.7k|        setter::set_min(*this, m_tm, m_st, min);
 4055|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3214|  13.7k|    {
 3215|  13.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.80k, False: 10.9k]
  |  |  |  Branch (1039:45): [True: 2.78k, False: 10.9k]
  |  |  |  Branch (1039:45): [True: 18, False: 10.9k]
  |  |  ------------------
  ------------------
 3216|  2.80k|            return h.set_error({scan_error::invalid_scanned_value,
 3217|  2.80k|                                "Invalid value for tm_min"});
 3218|  2.80k|        }
 3219|  10.9k|        t.tm_min = m;
 3220|  10.9k|        st.set_min(h);
 3221|  10.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 4057|  2.92k|    {
 4058|  2.92k|#if !SCN_DISABLE_LOCALE
 4059|  2.92k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4059:13): [True: 0, False: 2.92k]
  |  Branch (4059:31): [True: 0, False: 0]
  ------------------
 4060|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4060:22): [True: 0, False: 0]
  ------------------
 4061|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4062|      0|            }
 4063|      0|            return;
 4064|      0|        }
 4065|  2.92k|#endif
 4066|       |
 4067|  2.92k|        int sec = read_classic_unsigned_integer(1, 2);
 4068|  2.92k|        setter::set_sec(*this, m_tm, m_st, sec);
 4069|  2.92k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3204|  2.92k|    {
 3205|  2.92k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.63k, False: 1.29k]
  |  |  |  Branch (1039:45): [True: 1.63k, False: 1.29k]
  |  |  |  Branch (1039:45): [True: 2, False: 1.29k]
  |  |  ------------------
  ------------------
 3206|  1.63k|            return h.set_error({scan_error::invalid_scanned_value,
 3207|  1.63k|                                "Invalid value for tm_sec"});
 3208|  1.63k|        }
 3209|  1.29k|        t.tm_sec = s;
 3210|  1.29k|        st.set_sec(h);
 3211|  1.29k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 4299|  1.79k|    {
 4300|       |        // %m/%d/%y
 4301|  1.79k|        constexpr CharT slash = '/';
 4302|  1.79k|        on_dec_month();
 4303|  1.79k|        on_text(&slash, &slash + 1);
 4304|  1.79k|        on_day_of_month();
 4305|  1.79k|        on_text(&slash, &slash + 1);
 4306|  1.79k|        on_short_year();
 4307|  1.79k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 4309|  1.98k|    {
 4310|       |        // %Y-%m-%d
 4311|  1.98k|        constexpr CharT dash = '-';
 4312|  1.98k|        on_full_year();
 4313|  1.98k|        on_text(&dash, &dash + 1);
 4314|  1.98k|        on_dec_month();
 4315|  1.98k|        on_text(&dash, &dash + 1);
 4316|  1.98k|        on_day_of_month();
 4317|  1.98k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 4341|  10.8k|    {
 4342|       |        // %H:%M
 4343|  10.8k|        constexpr CharT colon = ':';
 4344|  10.8k|        on_24_hour();
 4345|  10.8k|        on_text(&colon, &colon + 1);
 4346|  10.8k|        on_minute();
 4347|  10.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 4349|  2.92k|    {
 4350|       |        // %H:%M:%S
 4351|  2.92k|        constexpr CharT colon = ':';
 4352|  2.92k|        on_24_hour();
 4353|  2.92k|        on_text(&colon, &colon + 1);
 4354|  2.92k|        on_minute();
 4355|  2.92k|        on_text(&colon, &colon + 1);
 4356|  2.92k|        on_second();
 4357|  2.92k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 4388|  15.3k|    {
 4389|  15.3k|        m_st.verify(*this);
 4390|  15.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4390:13): [True: 0, False: 15.3k]
  |  Branch (4390:31): [True: 0, False: 0]
  ------------------
 4391|      0|            setter::handle_am_pm(m_tm, m_st);
 4392|      0|        }
 4393|  15.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4393:13): [True: 15.0k, False: 312]
  |  Branch (4393:37): [True: 132, False: 14.8k]
  |  Branch (4393:60): [True: 0, False: 14.8k]
  ------------------
 4394|    132|            setter::handle_short_year_and_century(m_tm, m_st);
 4395|    132|        }
 4396|  15.3k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 4399|  54.1k|    {
 4400|  54.1k|        return m_error;
 4401|  54.1k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 4416|  15.3k|    {
 4417|  15.3k|        return m_begin;
 4418|  15.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4609|  32.6k|{
 4610|  32.6k|    {
 4611|  32.6k|        SCN_TRY(it,
  ------------------
  |  | 3958|  32.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  32.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  32.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 480, False: 32.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    480|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    480|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    480|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    480|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    480|    }                                                  \
  |  |  |  | 3957|  32.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4612|  32.1k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4613|  32.1k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  32.1k|    static_cast<    \
  |  | 1109|  32.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4614|  32.1k|    }
 4615|       |
 4616|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4617|  32.1k|        ctx.range(), t, ctx.locale());
 4618|  32.1k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4619|  32.1k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.3k, False: 20.7k]
  |  |  ------------------
  ------------------
 4620|  11.3k|        return unexpected(e.error());
 4621|  11.3k|    }
 4622|  20.7k|    return r.get_iterator();
 4623|  32.1k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 3753|  32.1k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  32.1k|    static_cast<    \
  |  | 1109|  32.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3754|  32.1k|          m_begin(ranges::begin(m_range)),
 3755|  32.1k|          m_tm(t),
 3756|  32.1k|          m_loc(loc)
 3757|  32.1k|    {
 3758|  32.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 4404|  10.5k|    {
 4405|  10.5k|        set_error({scan_error::invalid_format_string, msg});
 4406|  10.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 4409|  45.1k|    {
 4410|  45.1k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4410:13): [True: 11.3k, False: 33.7k]
  ------------------
 4411|  11.3k|            m_error = unexpected(e);
 4412|  11.3k|        }
 4413|  45.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3761|  34.2k|    {
 3762|  57.6k|        while (beg != end) {
  ------------------
  |  Branch (3762:16): [True: 34.2k, False: 23.4k]
  ------------------
 3763|  34.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3763:17): [True: 228, False: 33.9k]
  ------------------
 3764|    228|                return set_error({scan_error::end_of_input, "EOF"});
 3765|    228|            }
 3766|  33.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3766:17): [True: 10.5k, False: 23.4k]
  ------------------
 3767|  10.5k|                return on_error("Invalid literal character");
 3768|  10.5k|            }
 3769|  23.4k|            ++beg;
 3770|  23.4k|            ++m_begin;
 3771|  23.4k|        }
 3772|  34.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3791|  3.59k|    {
 3792|  3.59k|#if !SCN_DISABLE_LOCALE
 3793|  3.59k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3793:13): [True: 0, False: 3.59k]
  |  Branch (3793:31): [True: 0, False: 0]
  ------------------
 3794|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3794:22): [True: 0, False: 0]
  ------------------
 3795|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3796|      0|            }
 3797|      0|            return;
 3798|      0|        }
 3799|  3.59k|#endif
 3800|       |
 3801|  3.59k|        int yr = read_classic_unsigned_integer(4, 4);
 3802|  3.59k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3803|  3.59k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3264|  3.59k|    {
 3265|  3.59k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  3.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.59k]
  |  |  ------------------
  ------------------
 3266|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3267|      0|                                "Invalid value for tm_year"});
 3268|      0|        }
 3269|  3.59k|        t.tm_year = y - 1900;
 3270|  3.59k|        st.set_full_year(h);
 3271|  3.59k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 4427|  58.5k|    {
 4428|  58.5k|        int digits_read = 0;
 4429|  58.5k|        int accumulator = 0;
 4430|   102k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4430:16): [True: 101k, False: 456]
  ------------------
 4431|   101k|            const auto ch = *m_begin;
 4432|   101k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4432:17): [True: 29.8k, False: 72.0k]
  |  Branch (4432:36): [True: 18.9k, False: 53.1k]
  ------------------
 4433|  48.8k|                break;
 4434|  48.8k|            }
 4435|  53.1k|            ++m_begin;
 4436|  53.1k|            ++digits_read;
 4437|  53.1k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4438|  53.1k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4438:17): [True: 9.28k, False: 43.8k]
  ------------------
 4439|  9.28k|                break;
 4440|  9.28k|            }
 4441|  53.1k|        }
 4442|  58.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4442:13): [True: 16.8k, False: 41.6k]
  ------------------
 4443|  16.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4444|  16.8k|                                 "Too few integer digits"});
 4445|  16.8k|            return -1;
 4446|  16.8k|        }
 4447|  41.6k|        return accumulator;
 4448|  58.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3805|  6.45k|    {
 3806|  6.45k|#if !SCN_DISABLE_LOCALE
 3807|  6.45k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3807:13): [True: 0, False: 6.45k]
  |  Branch (3807:31): [True: 0, False: 0]
  ------------------
 3808|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3808:22): [True: 0, False: 0]
  ------------------
 3809|      0|                setter::set_short_year(*this, m_tm, m_st,
 3810|      0|                                       (t->tm_year + 1900) % 100);
 3811|      0|            }
 3812|      0|            return;
 3813|      0|        }
 3814|  6.45k|#endif
 3815|       |
 3816|  6.45k|        int yr = read_classic_unsigned_integer(2, 2);
 3817|  6.45k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3818|  6.45k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3281|  6.45k|    {
 3282|  6.45k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.60k, False: 4.85k]
  |  |  |  Branch (1039:45): [True: 1.60k, False: 4.85k]
  |  |  |  Branch (1039:45): [True: 0, False: 4.85k]
  |  |  ------------------
  ------------------
 3283|  1.60k|            return h.set_error({scan_error::invalid_scanned_value,
 3284|  1.60k|                                "Invalid value for tm_year"});
 3285|  1.60k|        }
 3286|  4.85k|        st.short_year_value = y;
 3287|  4.85k|        st.set_short_year(h);
 3288|  4.85k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3848|  4.37k|    {
 3849|  4.37k|#if !SCN_DISABLE_FAST_FLOAT
 3850|  4.37k|        if (m_st.localized) {
  ------------------
  |  Branch (3850:13): [True: 0, False: 4.37k]
  ------------------
 3851|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3851:22): [True: 0, False: 0]
  ------------------
 3852|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3853|      0|            }
 3854|      0|            return;
 3855|      0|        }
 3856|  4.37k|#endif
 3857|       |
 3858|  4.37k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3859|  4.37k|            {"January", 1},
 3860|  4.37k|            {"February", 2},
 3861|  4.37k|            {"March", 3},
 3862|  4.37k|            {"April", 4},
 3863|  4.37k|            {"May", 5},
 3864|  4.37k|            {"June", 6},
 3865|  4.37k|            {"July", 7},
 3866|  4.37k|            {"August", 8},
 3867|  4.37k|            {"September", 9},
 3868|  4.37k|            {"October", 10},
 3869|  4.37k|            {"November", 11},
 3870|  4.37k|            {"December", 12},
 3871|  4.37k|        }};
 3872|  4.37k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3872:18): [True: 76, False: 4.29k]
  ------------------
 3873|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3874|     76|        }
 3875|  4.29k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3876|  4.29k|            {"Jan", 1},
 3877|  4.29k|            {"Feb", 2},
 3878|  4.29k|            {"Mar", 3},
 3879|  4.29k|            {"Apr", 4},
 3880|  4.29k|            {"Jun", 6},
 3881|  4.29k|            {"Jul", 7},
 3882|  4.29k|            {"Aug", 8},
 3883|  4.29k|            {"Sep", 9},
 3884|  4.29k|            {"Oct", 10},
 3885|  4.29k|            {"Nov", 11},
 3886|  4.29k|            {"Dec", 12},
 3887|  4.29k|        }};
 3888|  4.29k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 2.67k, False: 1.62k]
  ------------------
 3889|  2.67k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|  2.67k|        }
 3891|  1.62k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3892|  1.62k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3254|  11.2k|    {
 3255|  11.2k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.74k, False: 8.48k]
  |  |  |  Branch (1039:45): [True: 2.62k, False: 8.60k]
  |  |  |  Branch (1039:45): [True: 116, False: 8.48k]
  |  |  ------------------
  ------------------
 3256|  2.74k|            return h.set_error({scan_error::invalid_scanned_value,
 3257|  2.74k|                                "Invalid value for tm_mon"});
 3258|  2.74k|        }
 3259|  8.48k|        t.tm_mon = m - 1;
 3260|  8.48k|        st.set_mon(h);
 3261|  8.48k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  4.37k|    {
 4466|  4.37k|        auto start_it = m_begin;
 4467|  4.37k|        std::size_t options_available = N;
 4468|  4.37k|        std::size_t chars_consumed = 0;
 4469|  17.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 12.9k, False: 4.23k]
  ------------------
 4470|  17.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 12.8k, False: 76]
  ------------------
 4471|  12.8k|            std::size_t i = 0;
 4472|  12.8k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 64, False: 12.7k]
  ------------------
 4473|     64|                options_available = 0;
 4474|     64|                break;
 4475|     64|            }
 4476|  12.7k|            const auto ch = *m_begin;
 4477|  12.7k|            ++m_begin;
 4478|  79.4k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 66.6k, False: 12.7k]
  ------------------
 4479|  66.6k|                const auto cmp = static_cast<unsigned>(
 4480|  66.6k|                    ch ^ options[i].first[chars_consumed]);
 4481|  66.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 66.6k]
  ------------------
 4482|  66.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 55.0k, False: 11.5k]
  |  Branch (4482:34): [True: 52.2k, False: 2.83k]
  ------------------
 4483|  52.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  52.2k|                                options.end());
 4485|  52.2k|                    --options_available;
 4486|  52.2k|                    continue;
 4487|  52.2k|                }
 4488|  14.3k|                ++i;
 4489|  14.3k|            }
 4490|  12.7k|            ++chars_consumed;
 4491|  12.7k|        }
 4492|  4.37k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 4.29k, False: 76]
  ------------------
 4493|  4.29k|            m_begin = start_it;
 4494|  4.29k|            return std::nullopt;
 4495|  4.29k|        }
 4496|     76|        return options.front().second;
 4497|  4.37k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  4.29k|    {
 4466|  4.29k|        auto start_it = m_begin;
 4467|  4.29k|        std::size_t options_available = N;
 4468|  4.29k|        std::size_t chars_consumed = 0;
 4469|  14.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 12.6k, False: 1.56k]
  ------------------
 4470|  14.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 9.95k, False: 2.67k]
  ------------------
 4471|  9.95k|            std::size_t i = 0;
 4472|  9.95k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 56, False: 9.90k]
  ------------------
 4473|     56|                options_available = 0;
 4474|     56|                break;
 4475|     56|            }
 4476|  9.90k|            const auto ch = *m_begin;
 4477|  9.90k|            ++m_begin;
 4478|  62.7k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 52.8k, False: 9.90k]
  ------------------
 4479|  52.8k|                const auto cmp = static_cast<unsigned>(
 4480|  52.8k|                    ch ^ options[i].first[chars_consumed]);
 4481|  52.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 52.8k]
  ------------------
 4482|  52.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 47.2k, False: 5.64k]
  |  Branch (4482:34): [True: 44.4k, False: 2.75k]
  ------------------
 4483|  44.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  44.4k|                                options.end());
 4485|  44.4k|                    --options_available;
 4486|  44.4k|                    continue;
 4487|  44.4k|                }
 4488|  8.39k|                ++i;
 4489|  8.39k|            }
 4490|  9.90k|            ++chars_consumed;
 4491|  9.90k|        }
 4492|  4.29k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 1.62k, False: 2.67k]
  ------------------
 4493|  1.62k|            m_begin = start_it;
 4494|  1.62k|            return std::nullopt;
 4495|  1.62k|        }
 4496|  2.67k|        return options.front().second;
 4497|  4.29k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3894|  8.48k|    {
 3895|  8.48k|#if !SCN_DISABLE_LOCALE
 3896|  8.48k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3896:13): [True: 0, False: 8.48k]
  |  Branch (3896:31): [True: 0, False: 0]
  ------------------
 3897|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3897:22): [True: 0, False: 0]
  ------------------
 3898|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3899|      0|            }
 3900|      0|            return;
 3901|      0|        }
 3902|  8.48k|#endif
 3903|       |
 3904|  8.48k|        int mon = read_classic_unsigned_integer(1, 2);
 3905|  8.48k|        setter::set_mon(*this, m_tm, m_st, mon);
 3906|  8.48k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3926|  8.46k|    {
 3927|  8.46k|#if !SCN_DISABLE_LOCALE
 3928|  8.46k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3928:13): [True: 0, False: 8.46k]
  |  Branch (3928:31): [True: 0, False: 0]
  ------------------
 3929|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3929:22): [True: 0, False: 0]
  ------------------
 3930|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3931|      0|            }
 3932|      0|            return;
 3933|      0|        }
 3934|  8.46k|#endif
 3935|       |
 3936|  8.46k|        int mday = read_classic_unsigned_integer(1, 2);
 3937|  8.46k|        setter::set_mday(*this, m_tm, m_st, mday);
 3938|  8.46k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3244|  8.46k|    {
 3245|  8.46k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.21k, False: 5.25k]
  |  |  |  Branch (1039:45): [True: 3.13k, False: 5.33k]
  |  |  |  Branch (1039:45): [True: 80, False: 5.25k]
  |  |  ------------------
  ------------------
 3246|  3.21k|            return h.set_error({scan_error::invalid_scanned_value,
 3247|  3.21k|                                "Invalid value for tm_mday"});
 3248|  3.21k|        }
 3249|  5.25k|        t.tm_mday = d;
 3250|  5.25k|        st.set_mday(h);
 3251|  5.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3941|  3.42k|    {
 3942|  3.42k|#if !SCN_DISABLE_LOCALE
 3943|  3.42k|        if (m_st.localized) {
  ------------------
  |  Branch (3943:13): [True: 0, False: 3.42k]
  ------------------
 3944|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3944:22): [True: 0, False: 0]
  ------------------
 3945|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3946|      0|            }
 3947|      0|            return;
 3948|      0|        }
 3949|  3.42k|#endif
 3950|       |
 3951|  3.42k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3952|  3.42k|            {"Sunday", 0},
 3953|  3.42k|            {"Monday", 1},
 3954|  3.42k|            {"Tuesday", 2},
 3955|  3.42k|            {"Wednesday", 3},
 3956|  3.42k|            {"Thursday", 4},
 3957|  3.42k|            {"Friday", 5},
 3958|  3.42k|            {"Saturday", 6},
 3959|  3.42k|        }};
 3960|  3.42k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3960:18): [True: 0, False: 3.42k]
  ------------------
 3961|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3962|      0|        }
 3963|  3.42k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3964|  3.42k|            {"Sun", 0},
 3965|  3.42k|            {"Mon", 1},
 3966|  3.42k|            {"Tue", 2},
 3967|  3.42k|            {"Wed", 3},
 3968|  3.42k|            {"Thu", 4},
 3969|  3.42k|            {"Fri", 5},
 3970|  3.42k|            {"Sat", 6},
 3971|  3.42k|        }};
 3972|  3.42k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3972:18): [True: 1.78k, False: 1.64k]
  ------------------
 3973|  1.78k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3974|  1.78k|        }
 3975|  1.64k|        return set_error(
 3976|  1.64k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3977|  3.42k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3291|  1.78k|    {
 3292|  1.78k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1039|  3.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.78k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.78k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.78k]
  |  |  ------------------
  ------------------
 3293|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3294|      0|                                "Invalid value for tm_wday"});
 3295|      0|        }
 3296|  1.78k|        t.tm_wday = d;
 3297|  1.78k|        st.set_wday(h);
 3298|  1.78k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  6.85k|    {
 4466|  6.85k|        auto start_it = m_begin;
 4467|  6.85k|        std::size_t options_available = N;
 4468|  6.85k|        std::size_t chars_consumed = 0;
 4469|  23.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 18.1k, False: 5.01k]
  ------------------
 4470|  23.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 16.3k, False: 1.78k]
  ------------------
 4471|  16.3k|            std::size_t i = 0;
 4472|  16.3k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 54, False: 16.3k]
  ------------------
 4473|     54|                options_available = 0;
 4474|     54|                break;
 4475|     54|            }
 4476|  16.3k|            const auto ch = *m_begin;
 4477|  16.3k|            ++m_begin;
 4478|  73.8k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 57.4k, False: 16.3k]
  ------------------
 4479|  57.4k|                const auto cmp = static_cast<unsigned>(
 4480|  57.4k|                    ch ^ options[i].first[chars_consumed]);
 4481|  57.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 57.4k]
  ------------------
 4482|  57.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 46.1k, False: 11.2k]
  |  Branch (4482:34): [True: 46.1k, False: 76]
  ------------------
 4483|  46.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  46.1k|                                options.end());
 4485|  46.1k|                    --options_available;
 4486|  46.1k|                    continue;
 4487|  46.1k|                }
 4488|  11.3k|                ++i;
 4489|  11.3k|            }
 4490|  16.3k|            ++chars_consumed;
 4491|  16.3k|        }
 4492|  6.85k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 5.06k, False: 1.78k]
  ------------------
 4493|  5.06k|            m_begin = start_it;
 4494|  5.06k|            return std::nullopt;
 4495|  5.06k|        }
 4496|  1.78k|        return options.front().second;
 4497|  6.85k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 4015|  14.3k|    {
 4016|  14.3k|#if !SCN_DISABLE_LOCALE
 4017|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4017:13): [True: 0, False: 14.3k]
  |  Branch (4017:31): [True: 0, False: 0]
  ------------------
 4018|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4018:22): [True: 0, False: 0]
  ------------------
 4019|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4020|      0|            }
 4021|      0|            return;
 4022|      0|        }
 4023|  14.3k|#endif
 4024|       |
 4025|  14.3k|        int hr = read_classic_unsigned_integer(1, 2);
 4026|  14.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4027|  14.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3224|  14.3k|    {
 3225|  14.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.34k, False: 11.9k]
  |  |  |  Branch (1039:45): [True: 2.15k, False: 12.1k]
  |  |  |  Branch (1039:45): [True: 194, False: 11.9k]
  |  |  ------------------
  ------------------
 3226|  2.34k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3227|  2.34k|                                  "Invalid value for tm_hour"});
 3228|  2.34k|        }
 3229|  11.9k|        t.tm_hour = h;
 3230|  11.9k|        st.set_hour24(hdl);
 3231|  11.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 4043|  14.2k|    {
 4044|  14.2k|#if !SCN_DISABLE_LOCALE
 4045|  14.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4045:13): [True: 0, False: 14.2k]
  |  Branch (4045:31): [True: 0, False: 0]
  ------------------
 4046|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4046:22): [True: 0, False: 0]
  ------------------
 4047|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4048|      0|            }
 4049|      0|            return;
 4050|      0|        }
 4051|  14.2k|#endif
 4052|       |
 4053|  14.2k|        int min = read_classic_unsigned_integer(1, 2);
 4054|  14.2k|        setter::set_min(*this, m_tm, m_st, min);
 4055|  14.2k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3214|  14.2k|    {
 3215|  14.2k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.69k, False: 11.5k]
  |  |  |  Branch (1039:45): [True: 2.66k, False: 11.6k]
  |  |  |  Branch (1039:45): [True: 26, False: 11.5k]
  |  |  ------------------
  ------------------
 3216|  2.69k|            return h.set_error({scan_error::invalid_scanned_value,
 3217|  2.69k|                                "Invalid value for tm_min"});
 3218|  2.69k|        }
 3219|  11.5k|        t.tm_min = m;
 3220|  11.5k|        st.set_min(h);
 3221|  11.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 4057|  2.94k|    {
 4058|  2.94k|#if !SCN_DISABLE_LOCALE
 4059|  2.94k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4059:13): [True: 0, False: 2.94k]
  |  Branch (4059:31): [True: 0, False: 0]
  ------------------
 4060|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4060:22): [True: 0, False: 0]
  ------------------
 4061|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4062|      0|            }
 4063|      0|            return;
 4064|      0|        }
 4065|  2.94k|#endif
 4066|       |
 4067|  2.94k|        int sec = read_classic_unsigned_integer(1, 2);
 4068|  2.94k|        setter::set_sec(*this, m_tm, m_st, sec);
 4069|  2.94k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3204|  2.94k|    {
 3205|  2.94k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.59k, False: 1.34k]
  |  |  |  Branch (1039:45): [True: 1.59k, False: 1.34k]
  |  |  |  Branch (1039:45): [True: 4, False: 1.34k]
  |  |  ------------------
  ------------------
 3206|  1.59k|            return h.set_error({scan_error::invalid_scanned_value,
 3207|  1.59k|                                "Invalid value for tm_sec"});
 3208|  1.59k|        }
 3209|  1.34k|        t.tm_sec = s;
 3210|  1.34k|        st.set_sec(h);
 3211|  1.34k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 4299|  6.45k|    {
 4300|       |        // %m/%d/%y
 4301|  6.45k|        constexpr CharT slash = '/';
 4302|  6.45k|        on_dec_month();
 4303|  6.45k|        on_text(&slash, &slash + 1);
 4304|  6.45k|        on_day_of_month();
 4305|  6.45k|        on_text(&slash, &slash + 1);
 4306|  6.45k|        on_short_year();
 4307|  6.45k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 4309|  1.95k|    {
 4310|       |        // %Y-%m-%d
 4311|  1.95k|        constexpr CharT dash = '-';
 4312|  1.95k|        on_full_year();
 4313|  1.95k|        on_text(&dash, &dash + 1);
 4314|  1.95k|        on_dec_month();
 4315|  1.95k|        on_text(&dash, &dash + 1);
 4316|  1.95k|        on_day_of_month();
 4317|  1.95k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 4341|  11.3k|    {
 4342|       |        // %H:%M
 4343|  11.3k|        constexpr CharT colon = ':';
 4344|  11.3k|        on_24_hour();
 4345|  11.3k|        on_text(&colon, &colon + 1);
 4346|  11.3k|        on_minute();
 4347|  11.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 4349|  2.94k|    {
 4350|       |        // %H:%M:%S
 4351|  2.94k|        constexpr CharT colon = ':';
 4352|  2.94k|        on_24_hour();
 4353|  2.94k|        on_text(&colon, &colon + 1);
 4354|  2.94k|        on_minute();
 4355|  2.94k|        on_text(&colon, &colon + 1);
 4356|  2.94k|        on_second();
 4357|  2.94k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 4388|  20.7k|    {
 4389|  20.7k|        m_st.verify(*this);
 4390|  20.7k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4390:13): [True: 0, False: 20.7k]
  |  Branch (4390:31): [True: 0, False: 0]
  ------------------
 4391|      0|            setter::handle_am_pm(m_tm, m_st);
 4392|      0|        }
 4393|  20.7k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4393:13): [True: 20.4k, False: 312]
  |  Branch (4393:37): [True: 4.83k, False: 15.5k]
  |  Branch (4393:60): [True: 0, False: 15.5k]
  ------------------
 4394|  4.83k|            setter::handle_short_year_and_century(m_tm, m_st);
 4395|  4.83k|        }
 4396|  20.7k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 4399|  64.4k|    {
 4400|  64.4k|        return m_error;
 4401|  64.4k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 4416|  20.7k|    {
 4417|  20.7k|        return m_begin;
 4418|  20.7k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4609|  27.2k|{
 4610|  27.2k|    {
 4611|  27.2k|        SCN_TRY(it,
  ------------------
  |  | 3958|  27.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  27.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  27.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 246, False: 26.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    246|    }                                                  \
  |  |  |  | 3957|  27.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4612|  26.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4613|  26.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  26.9k|    static_cast<    \
  |  | 1109|  26.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4614|  26.9k|    }
 4615|       |
 4616|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4617|  26.9k|        ctx.range(), t, ctx.locale());
 4618|  26.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4619|  26.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.6k, False: 15.3k]
  |  |  ------------------
  ------------------
 4620|  11.6k|        return unexpected(e.error());
 4621|  11.6k|    }
 4622|  15.3k|    return r.get_iterator();
 4623|  26.9k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 3753|  26.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  26.9k|    static_cast<    \
  |  | 1109|  26.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3754|  26.9k|          m_begin(ranges::begin(m_range)),
 3755|  26.9k|          m_tm(t),
 3756|  26.9k|          m_loc(loc)
 3757|  26.9k|    {
 3758|  26.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 4404|  10.9k|    {
 4405|  10.9k|        set_error({scan_error::invalid_format_string, msg});
 4406|  10.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 4409|  46.9k|    {
 4410|  46.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4410:13): [True: 11.6k, False: 35.3k]
  ------------------
 4411|  11.6k|            m_error = unexpected(e);
 4412|  11.6k|        }
 4413|  46.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3761|  24.3k|    {
 3762|  37.6k|        while (beg != end) {
  ------------------
  |  Branch (3762:16): [True: 24.3k, False: 13.3k]
  ------------------
 3763|  24.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3763:17): [True: 168, False: 24.2k]
  ------------------
 3764|    168|                return set_error({scan_error::end_of_input, "EOF"});
 3765|    168|            }
 3766|  24.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3766:17): [True: 10.9k, False: 13.3k]
  ------------------
 3767|  10.9k|                return on_error("Invalid literal character");
 3768|  10.9k|            }
 3769|  13.3k|            ++beg;
 3770|  13.3k|            ++m_begin;
 3771|  13.3k|        }
 3772|  24.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3791|  3.65k|    {
 3792|  3.65k|#if !SCN_DISABLE_LOCALE
 3793|  3.65k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3793:13): [True: 0, False: 3.65k]
  |  Branch (3793:31): [True: 0, False: 0]
  ------------------
 3794|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3794:22): [True: 0, False: 0]
  ------------------
 3795|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3796|      0|            }
 3797|      0|            return;
 3798|      0|        }
 3799|  3.65k|#endif
 3800|       |
 3801|  3.65k|        int yr = read_classic_unsigned_integer(4, 4);
 3802|  3.65k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3803|  3.65k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3264|  3.65k|    {
 3265|  3.65k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.65k]
  |  |  ------------------
  ------------------
 3266|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3267|      0|                                "Invalid value for tm_year"});
 3268|      0|        }
 3269|  3.65k|        t.tm_year = y - 1900;
 3270|  3.65k|        st.set_full_year(h);
 3271|  3.65k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 4427|  43.5k|    {
 4428|  43.5k|        int digits_read = 0;
 4429|  43.5k|        int accumulator = 0;
 4430|  71.3k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4430:16): [True: 71.0k, False: 354]
  ------------------
 4431|  71.0k|            const auto ch = *m_begin;
 4432|  71.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4432:17): [True: 21.1k, False: 49.8k]
  |  Branch (4432:36): [True: 17.7k, False: 32.1k]
  ------------------
 4433|  38.9k|                break;
 4434|  38.9k|            }
 4435|  32.1k|            ++m_begin;
 4436|  32.1k|            ++digits_read;
 4437|  32.1k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4438|  32.1k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4438:17): [True: 4.31k, False: 27.8k]
  ------------------
 4439|  4.31k|                break;
 4440|  4.31k|            }
 4441|  32.1k|        }
 4442|  43.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4442:13): [True: 17.7k, False: 25.8k]
  ------------------
 4443|  17.7k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4444|  17.7k|                                 "Too few integer digits"});
 4445|  17.7k|            return -1;
 4446|  17.7k|        }
 4447|  25.8k|        return accumulator;
 4448|  43.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3805|  1.79k|    {
 3806|  1.79k|#if !SCN_DISABLE_LOCALE
 3807|  1.79k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3807:13): [True: 0, False: 1.79k]
  |  Branch (3807:31): [True: 0, False: 0]
  ------------------
 3808|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3808:22): [True: 0, False: 0]
  ------------------
 3809|      0|                setter::set_short_year(*this, m_tm, m_st,
 3810|      0|                                       (t->tm_year + 1900) % 100);
 3811|      0|            }
 3812|      0|            return;
 3813|      0|        }
 3814|  1.79k|#endif
 3815|       |
 3816|  1.79k|        int yr = read_classic_unsigned_integer(2, 2);
 3817|  1.79k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3818|  1.79k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3281|  1.79k|    {
 3282|  1.79k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.65k, False: 144]
  |  |  |  Branch (1039:45): [True: 1.65k, False: 144]
  |  |  |  Branch (1039:45): [True: 0, False: 144]
  |  |  ------------------
  ------------------
 3283|  1.65k|            return h.set_error({scan_error::invalid_scanned_value,
 3284|  1.65k|                                "Invalid value for tm_year"});
 3285|  1.65k|        }
 3286|    144|        st.short_year_value = y;
 3287|    144|        st.set_short_year(h);
 3288|    144|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3848|  4.39k|    {
 3849|  4.39k|#if !SCN_DISABLE_FAST_FLOAT
 3850|  4.39k|        if (m_st.localized) {
  ------------------
  |  Branch (3850:13): [True: 0, False: 4.39k]
  ------------------
 3851|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3851:22): [True: 0, False: 0]
  ------------------
 3852|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3853|      0|            }
 3854|      0|            return;
 3855|      0|        }
 3856|  4.39k|#endif
 3857|       |
 3858|  4.39k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3859|  4.39k|            {"January", 1},
 3860|  4.39k|            {"February", 2},
 3861|  4.39k|            {"March", 3},
 3862|  4.39k|            {"April", 4},
 3863|  4.39k|            {"May", 5},
 3864|  4.39k|            {"June", 6},
 3865|  4.39k|            {"July", 7},
 3866|  4.39k|            {"August", 8},
 3867|  4.39k|            {"September", 9},
 3868|  4.39k|            {"October", 10},
 3869|  4.39k|            {"November", 11},
 3870|  4.39k|            {"December", 12},
 3871|  4.39k|        }};
 3872|  4.39k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3872:18): [True: 76, False: 4.32k]
  ------------------
 3873|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3874|     76|        }
 3875|  4.32k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3876|  4.32k|            {"Jan", 1},
 3877|  4.32k|            {"Feb", 2},
 3878|  4.32k|            {"Mar", 3},
 3879|  4.32k|            {"Apr", 4},
 3880|  4.32k|            {"Jun", 6},
 3881|  4.32k|            {"Jul", 7},
 3882|  4.32k|            {"Aug", 8},
 3883|  4.32k|            {"Sep", 9},
 3884|  4.32k|            {"Oct", 10},
 3885|  4.32k|            {"Nov", 11},
 3886|  4.32k|            {"Dec", 12},
 3887|  4.32k|        }};
 3888|  4.32k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 2.66k, False: 1.65k]
  ------------------
 3889|  2.66k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|  2.66k|        }
 3891|  1.65k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3892|  1.65k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3254|  6.59k|    {
 3255|  6.59k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.86k, False: 3.72k]
  |  |  |  Branch (1039:45): [True: 2.76k, False: 3.82k]
  |  |  |  Branch (1039:45): [True: 96, False: 3.72k]
  |  |  ------------------
  ------------------
 3256|  2.86k|            return h.set_error({scan_error::invalid_scanned_value,
 3257|  2.86k|                                "Invalid value for tm_mon"});
 3258|  2.86k|        }
 3259|  3.72k|        t.tm_mon = m - 1;
 3260|  3.72k|        st.set_mon(h);
 3261|  3.72k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  4.39k|    {
 4466|  4.39k|        auto start_it = m_begin;
 4467|  4.39k|        std::size_t options_available = N;
 4468|  4.39k|        std::size_t chars_consumed = 0;
 4469|  17.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 12.9k, False: 4.26k]
  ------------------
 4470|  17.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 12.8k, False: 76]
  ------------------
 4471|  12.8k|            std::size_t i = 0;
 4472|  12.8k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 58, False: 12.7k]
  ------------------
 4473|     58|                options_available = 0;
 4474|     58|                break;
 4475|     58|            }
 4476|  12.7k|            const auto ch = *m_begin;
 4477|  12.7k|            ++m_begin;
 4478|  79.6k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 66.8k, False: 12.7k]
  ------------------
 4479|  66.8k|                const auto cmp = static_cast<unsigned>(
 4480|  66.8k|                    ch ^ options[i].first[chars_consumed]);
 4481|  66.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 66.8k]
  ------------------
 4482|  66.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 55.4k, False: 11.4k]
  |  Branch (4482:34): [True: 52.5k, False: 2.80k]
  ------------------
 4483|  52.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  52.5k|                                options.end());
 4485|  52.5k|                    --options_available;
 4486|  52.5k|                    continue;
 4487|  52.5k|                }
 4488|  14.2k|                ++i;
 4489|  14.2k|            }
 4490|  12.7k|            ++chars_consumed;
 4491|  12.7k|        }
 4492|  4.39k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 4.32k, False: 76]
  ------------------
 4493|  4.32k|            m_begin = start_it;
 4494|  4.32k|            return std::nullopt;
 4495|  4.32k|        }
 4496|     76|        return options.front().second;
 4497|  4.39k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  4.32k|    {
 4466|  4.32k|        auto start_it = m_begin;
 4467|  4.32k|        std::size_t options_available = N;
 4468|  4.32k|        std::size_t chars_consumed = 0;
 4469|  14.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 12.6k, False: 1.60k]
  ------------------
 4470|  14.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 9.95k, False: 2.66k]
  ------------------
 4471|  9.95k|            std::size_t i = 0;
 4472|  9.95k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 50, False: 9.90k]
  ------------------
 4473|     50|                options_available = 0;
 4474|     50|                break;
 4475|     50|            }
 4476|  9.90k|            const auto ch = *m_begin;
 4477|  9.90k|            ++m_begin;
 4478|  63.0k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 53.1k, False: 9.90k]
  ------------------
 4479|  53.1k|                const auto cmp = static_cast<unsigned>(
 4480|  53.1k|                    ch ^ options[i].first[chars_consumed]);
 4481|  53.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 53.1k]
  ------------------
 4482|  53.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 47.5k, False: 5.61k]
  |  Branch (4482:34): [True: 44.8k, False: 2.72k]
  ------------------
 4483|  44.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  44.8k|                                options.end());
 4485|  44.8k|                    --options_available;
 4486|  44.8k|                    continue;
 4487|  44.8k|                }
 4488|  8.34k|                ++i;
 4489|  8.34k|            }
 4490|  9.90k|            ++chars_consumed;
 4491|  9.90k|        }
 4492|  4.32k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 1.65k, False: 2.66k]
  ------------------
 4493|  1.65k|            m_begin = start_it;
 4494|  1.65k|            return std::nullopt;
 4495|  1.65k|        }
 4496|  2.66k|        return options.front().second;
 4497|  4.32k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3894|  3.84k|    {
 3895|  3.84k|#if !SCN_DISABLE_LOCALE
 3896|  3.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3896:13): [True: 0, False: 3.84k]
  |  Branch (3896:31): [True: 0, False: 0]
  ------------------
 3897|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3897:22): [True: 0, False: 0]
  ------------------
 3898|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3899|      0|            }
 3900|      0|            return;
 3901|      0|        }
 3902|  3.84k|#endif
 3903|       |
 3904|  3.84k|        int mon = read_classic_unsigned_integer(1, 2);
 3905|  3.84k|        setter::set_mon(*this, m_tm, m_st, mon);
 3906|  3.84k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3926|  3.83k|    {
 3927|  3.83k|#if !SCN_DISABLE_LOCALE
 3928|  3.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3928:13): [True: 0, False: 3.83k]
  |  Branch (3928:31): [True: 0, False: 0]
  ------------------
 3929|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3929:22): [True: 0, False: 0]
  ------------------
 3930|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3931|      0|            }
 3932|      0|            return;
 3933|      0|        }
 3934|  3.83k|#endif
 3935|       |
 3936|  3.83k|        int mday = read_classic_unsigned_integer(1, 2);
 3937|  3.83k|        setter::set_mday(*this, m_tm, m_st, mday);
 3938|  3.83k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3244|  3.83k|    {
 3245|  3.83k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  4.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.30k, False: 530]
  |  |  |  Branch (1039:45): [True: 3.22k, False: 602]
  |  |  |  Branch (1039:45): [True: 72, False: 530]
  |  |  ------------------
  ------------------
 3246|  3.30k|            return h.set_error({scan_error::invalid_scanned_value,
 3247|  3.30k|                                "Invalid value for tm_mday"});
 3248|  3.30k|        }
 3249|    530|        t.tm_mday = d;
 3250|    530|        st.set_mday(h);
 3251|    530|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3941|  3.38k|    {
 3942|  3.38k|#if !SCN_DISABLE_LOCALE
 3943|  3.38k|        if (m_st.localized) {
  ------------------
  |  Branch (3943:13): [True: 0, False: 3.38k]
  ------------------
 3944|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3944:22): [True: 0, False: 0]
  ------------------
 3945|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3946|      0|            }
 3947|      0|            return;
 3948|      0|        }
 3949|  3.38k|#endif
 3950|       |
 3951|  3.38k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3952|  3.38k|            {"Sunday", 0},
 3953|  3.38k|            {"Monday", 1},
 3954|  3.38k|            {"Tuesday", 2},
 3955|  3.38k|            {"Wednesday", 3},
 3956|  3.38k|            {"Thursday", 4},
 3957|  3.38k|            {"Friday", 5},
 3958|  3.38k|            {"Saturday", 6},
 3959|  3.38k|        }};
 3960|  3.38k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3960:18): [True: 0, False: 3.38k]
  ------------------
 3961|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3962|      0|        }
 3963|  3.38k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3964|  3.38k|            {"Sun", 0},
 3965|  3.38k|            {"Mon", 1},
 3966|  3.38k|            {"Tue", 2},
 3967|  3.38k|            {"Wed", 3},
 3968|  3.38k|            {"Thu", 4},
 3969|  3.38k|            {"Fri", 5},
 3970|  3.38k|            {"Sat", 6},
 3971|  3.38k|        }};
 3972|  3.38k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3972:18): [True: 1.71k, False: 1.67k]
  ------------------
 3973|  1.71k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3974|  1.71k|        }
 3975|  1.67k|        return set_error(
 3976|  1.67k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3977|  3.38k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3291|  1.71k|    {
 3292|  1.71k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1039|  3.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.71k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.71k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.71k]
  |  |  ------------------
  ------------------
 3293|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3294|      0|                                "Invalid value for tm_wday"});
 3295|      0|        }
 3296|  1.71k|        t.tm_wday = d;
 3297|  1.71k|        st.set_wday(h);
 3298|  1.71k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  6.76k|    {
 4466|  6.76k|        auto start_it = m_begin;
 4467|  6.76k|        std::size_t options_available = N;
 4468|  6.76k|        std::size_t chars_consumed = 0;
 4469|  22.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 17.5k, False: 5.01k]
  ------------------
 4470|  22.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 15.8k, False: 1.71k]
  ------------------
 4471|  15.8k|            std::size_t i = 0;
 4472|  15.8k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 38, False: 15.8k]
  ------------------
 4473|     38|                options_available = 0;
 4474|     38|                break;
 4475|     38|            }
 4476|  15.8k|            const auto ch = *m_begin;
 4477|  15.8k|            ++m_begin;
 4478|  72.2k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 56.4k, False: 15.8k]
  ------------------
 4479|  56.4k|                const auto cmp = static_cast<unsigned>(
 4480|  56.4k|                    ch ^ options[i].first[chars_consumed]);
 4481|  56.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 56.4k]
  ------------------
 4482|  56.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 45.6k, False: 10.7k]
  |  Branch (4482:34): [True: 45.5k, False: 48]
  ------------------
 4483|  45.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  45.5k|                                options.end());
 4485|  45.5k|                    --options_available;
 4486|  45.5k|                    continue;
 4487|  45.5k|                }
 4488|  10.8k|                ++i;
 4489|  10.8k|            }
 4490|  15.8k|            ++chars_consumed;
 4491|  15.8k|        }
 4492|  6.76k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 5.05k, False: 1.71k]
  ------------------
 4493|  5.05k|            m_begin = start_it;
 4494|  5.05k|            return std::nullopt;
 4495|  5.05k|        }
 4496|  1.71k|        return options.front().second;
 4497|  6.76k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 4015|  13.7k|    {
 4016|  13.7k|#if !SCN_DISABLE_LOCALE
 4017|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4017:13): [True: 0, False: 13.7k]
  |  Branch (4017:31): [True: 0, False: 0]
  ------------------
 4018|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4018:22): [True: 0, False: 0]
  ------------------
 4019|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4020|      0|            }
 4021|      0|            return;
 4022|      0|        }
 4023|  13.7k|#endif
 4024|       |
 4025|  13.7k|        int hr = read_classic_unsigned_integer(1, 2);
 4026|  13.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4027|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3224|  13.7k|    {
 3225|  13.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.63k, False: 11.1k]
  |  |  |  Branch (1039:45): [True: 2.46k, False: 11.3k]
  |  |  |  Branch (1039:45): [True: 172, False: 11.1k]
  |  |  ------------------
  ------------------
 3226|  2.63k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3227|  2.63k|                                  "Invalid value for tm_hour"});
 3228|  2.63k|        }
 3229|  11.1k|        t.tm_hour = h;
 3230|  11.1k|        st.set_hour24(hdl);
 3231|  11.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 4043|  13.7k|    {
 4044|  13.7k|#if !SCN_DISABLE_LOCALE
 4045|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4045:13): [True: 0, False: 13.7k]
  |  Branch (4045:31): [True: 0, False: 0]
  ------------------
 4046|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4046:22): [True: 0, False: 0]
  ------------------
 4047|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4048|      0|            }
 4049|      0|            return;
 4050|      0|        }
 4051|  13.7k|#endif
 4052|       |
 4053|  13.7k|        int min = read_classic_unsigned_integer(1, 2);
 4054|  13.7k|        setter::set_min(*this, m_tm, m_st, min);
 4055|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3214|  13.7k|    {
 3215|  13.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.80k, False: 10.9k]
  |  |  |  Branch (1039:45): [True: 2.78k, False: 10.9k]
  |  |  |  Branch (1039:45): [True: 18, False: 10.9k]
  |  |  ------------------
  ------------------
 3216|  2.80k|            return h.set_error({scan_error::invalid_scanned_value,
 3217|  2.80k|                                "Invalid value for tm_min"});
 3218|  2.80k|        }
 3219|  10.9k|        t.tm_min = m;
 3220|  10.9k|        st.set_min(h);
 3221|  10.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 4057|  2.92k|    {
 4058|  2.92k|#if !SCN_DISABLE_LOCALE
 4059|  2.92k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4059:13): [True: 0, False: 2.92k]
  |  Branch (4059:31): [True: 0, False: 0]
  ------------------
 4060|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4060:22): [True: 0, False: 0]
  ------------------
 4061|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4062|      0|            }
 4063|      0|            return;
 4064|      0|        }
 4065|  2.92k|#endif
 4066|       |
 4067|  2.92k|        int sec = read_classic_unsigned_integer(1, 2);
 4068|  2.92k|        setter::set_sec(*this, m_tm, m_st, sec);
 4069|  2.92k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3204|  2.92k|    {
 3205|  2.92k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.63k, False: 1.29k]
  |  |  |  Branch (1039:45): [True: 1.63k, False: 1.29k]
  |  |  |  Branch (1039:45): [True: 2, False: 1.29k]
  |  |  ------------------
  ------------------
 3206|  1.63k|            return h.set_error({scan_error::invalid_scanned_value,
 3207|  1.63k|                                "Invalid value for tm_sec"});
 3208|  1.63k|        }
 3209|  1.29k|        t.tm_sec = s;
 3210|  1.29k|        st.set_sec(h);
 3211|  1.29k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 4299|  1.79k|    {
 4300|       |        // %m/%d/%y
 4301|  1.79k|        constexpr CharT slash = '/';
 4302|  1.79k|        on_dec_month();
 4303|  1.79k|        on_text(&slash, &slash + 1);
 4304|  1.79k|        on_day_of_month();
 4305|  1.79k|        on_text(&slash, &slash + 1);
 4306|  1.79k|        on_short_year();
 4307|  1.79k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 4309|  1.98k|    {
 4310|       |        // %Y-%m-%d
 4311|  1.98k|        constexpr CharT dash = '-';
 4312|  1.98k|        on_full_year();
 4313|  1.98k|        on_text(&dash, &dash + 1);
 4314|  1.98k|        on_dec_month();
 4315|  1.98k|        on_text(&dash, &dash + 1);
 4316|  1.98k|        on_day_of_month();
 4317|  1.98k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 4341|  10.8k|    {
 4342|       |        // %H:%M
 4343|  10.8k|        constexpr CharT colon = ':';
 4344|  10.8k|        on_24_hour();
 4345|  10.8k|        on_text(&colon, &colon + 1);
 4346|  10.8k|        on_minute();
 4347|  10.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 4349|  2.92k|    {
 4350|       |        // %H:%M:%S
 4351|  2.92k|        constexpr CharT colon = ':';
 4352|  2.92k|        on_24_hour();
 4353|  2.92k|        on_text(&colon, &colon + 1);
 4354|  2.92k|        on_minute();
 4355|  2.92k|        on_text(&colon, &colon + 1);
 4356|  2.92k|        on_second();
 4357|  2.92k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 4388|  15.3k|    {
 4389|  15.3k|        m_st.verify(*this);
 4390|  15.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4390:13): [True: 0, False: 15.3k]
  |  Branch (4390:31): [True: 0, False: 0]
  ------------------
 4391|      0|            setter::handle_am_pm(m_tm, m_st);
 4392|      0|        }
 4393|  15.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4393:13): [True: 15.0k, False: 312]
  |  Branch (4393:37): [True: 132, False: 14.8k]
  |  Branch (4393:60): [True: 0, False: 14.8k]
  ------------------
 4394|    132|            setter::handle_short_year_and_century(m_tm, m_st);
 4395|    132|        }
 4396|  15.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 4399|  54.1k|    {
 4400|  54.1k|        return m_error;
 4401|  54.1k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 4416|  15.3k|    {
 4417|  15.3k|        return m_begin;
 4418|  15.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4609|  32.6k|{
 4610|  32.6k|    {
 4611|  32.6k|        SCN_TRY(it,
  ------------------
  |  | 3958|  32.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  32.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  32.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 480, False: 32.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    480|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    480|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    480|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    480|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    480|    }                                                  \
  |  |  |  | 3957|  32.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4612|  32.1k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4613|  32.1k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  32.1k|    static_cast<    \
  |  | 1109|  32.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4614|  32.1k|    }
 4615|       |
 4616|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4617|  32.1k|        ctx.range(), t, ctx.locale());
 4618|  32.1k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4619|  32.1k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.3k, False: 20.7k]
  |  |  ------------------
  ------------------
 4620|  11.3k|        return unexpected(e.error());
 4621|  11.3k|    }
 4622|  20.7k|    return r.get_iterator();
 4623|  32.1k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 3753|  32.1k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  32.1k|    static_cast<    \
  |  | 1109|  32.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3754|  32.1k|          m_begin(ranges::begin(m_range)),
 3755|  32.1k|          m_tm(t),
 3756|  32.1k|          m_loc(loc)
 3757|  32.1k|    {
 3758|  32.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 4404|  10.5k|    {
 4405|  10.5k|        set_error({scan_error::invalid_format_string, msg});
 4406|  10.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 4409|  43.5k|    {
 4410|  43.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4410:13): [True: 11.3k, False: 32.1k]
  ------------------
 4411|  11.3k|            m_error = unexpected(e);
 4412|  11.3k|        }
 4413|  43.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3761|  34.2k|    {
 3762|  57.6k|        while (beg != end) {
  ------------------
  |  Branch (3762:16): [True: 34.2k, False: 23.4k]
  ------------------
 3763|  34.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3763:17): [True: 228, False: 33.9k]
  ------------------
 3764|    228|                return set_error({scan_error::end_of_input, "EOF"});
 3765|    228|            }
 3766|  33.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3766:17): [True: 10.5k, False: 23.4k]
  ------------------
 3767|  10.5k|                return on_error("Invalid literal character");
 3768|  10.5k|            }
 3769|  23.4k|            ++beg;
 3770|  23.4k|            ++m_begin;
 3771|  23.4k|        }
 3772|  34.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3791|  3.59k|    {
 3792|  3.59k|#if !SCN_DISABLE_LOCALE
 3793|  3.59k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3793:13): [True: 0, False: 3.59k]
  |  Branch (3793:31): [True: 0, False: 0]
  ------------------
 3794|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3794:22): [True: 0, False: 0]
  ------------------
 3795|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3796|      0|            }
 3797|      0|            return;
 3798|      0|        }
 3799|  3.59k|#endif
 3800|       |
 3801|  3.59k|        int yr = read_classic_unsigned_integer(4, 4);
 3802|  3.59k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3803|  3.59k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3442|  3.59k|    {
 3443|  3.59k|        t.year = y;
 3444|  3.59k|        st.set_full_year(h);
 3445|  3.59k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 4427|  58.5k|    {
 4428|  58.5k|        int digits_read = 0;
 4429|  58.5k|        int accumulator = 0;
 4430|   102k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4430:16): [True: 101k, False: 456]
  ------------------
 4431|   101k|            const auto ch = *m_begin;
 4432|   101k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4432:17): [True: 29.8k, False: 72.0k]
  |  Branch (4432:36): [True: 18.9k, False: 53.1k]
  ------------------
 4433|  48.8k|                break;
 4434|  48.8k|            }
 4435|  53.1k|            ++m_begin;
 4436|  53.1k|            ++digits_read;
 4437|  53.1k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4438|  53.1k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4438:17): [True: 9.28k, False: 43.8k]
  ------------------
 4439|  9.28k|                break;
 4440|  9.28k|            }
 4441|  53.1k|        }
 4442|  58.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4442:13): [True: 16.8k, False: 41.6k]
  ------------------
 4443|  16.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4444|  16.8k|                                 "Too few integer digits"});
 4445|  16.8k|            return -1;
 4446|  16.8k|        }
 4447|  41.6k|        return accumulator;
 4448|  58.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3805|  6.45k|    {
 3806|  6.45k|#if !SCN_DISABLE_LOCALE
 3807|  6.45k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3807:13): [True: 0, False: 6.45k]
  |  Branch (3807:31): [True: 0, False: 0]
  ------------------
 3808|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3808:22): [True: 0, False: 0]
  ------------------
 3809|      0|                setter::set_short_year(*this, m_tm, m_st,
 3810|      0|                                       (t->tm_year + 1900) % 100);
 3811|      0|            }
 3812|      0|            return;
 3813|      0|        }
 3814|  6.45k|#endif
 3815|       |
 3816|  6.45k|        int yr = read_classic_unsigned_integer(2, 2);
 3817|  6.45k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3818|  6.45k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3465|  6.45k|    {
 3466|  6.45k|        if (!t.year) {
  ------------------
  |  Branch (3466:13): [True: 6.45k, False: 0]
  ------------------
 3467|  6.45k|            t.year = y;
 3468|  6.45k|        }
 3469|      0|        else {
 3470|      0|            t.year = *t.year + y;
 3471|      0|        }
 3472|  6.45k|        st.set_short_year(h);
 3473|  6.45k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3848|  4.37k|    {
 3849|  4.37k|#if !SCN_DISABLE_FAST_FLOAT
 3850|  4.37k|        if (m_st.localized) {
  ------------------
  |  Branch (3850:13): [True: 0, False: 4.37k]
  ------------------
 3851|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3851:22): [True: 0, False: 0]
  ------------------
 3852|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3853|      0|            }
 3854|      0|            return;
 3855|      0|        }
 3856|  4.37k|#endif
 3857|       |
 3858|  4.37k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3859|  4.37k|            {"January", 1},
 3860|  4.37k|            {"February", 2},
 3861|  4.37k|            {"March", 3},
 3862|  4.37k|            {"April", 4},
 3863|  4.37k|            {"May", 5},
 3864|  4.37k|            {"June", 6},
 3865|  4.37k|            {"July", 7},
 3866|  4.37k|            {"August", 8},
 3867|  4.37k|            {"September", 9},
 3868|  4.37k|            {"October", 10},
 3869|  4.37k|            {"November", 11},
 3870|  4.37k|            {"December", 12},
 3871|  4.37k|        }};
 3872|  4.37k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3872:18): [True: 76, False: 4.29k]
  ------------------
 3873|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3874|     76|        }
 3875|  4.29k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3876|  4.29k|            {"Jan", 1},
 3877|  4.29k|            {"Feb", 2},
 3878|  4.29k|            {"Mar", 3},
 3879|  4.29k|            {"Apr", 4},
 3880|  4.29k|            {"Jun", 6},
 3881|  4.29k|            {"Jul", 7},
 3882|  4.29k|            {"Aug", 8},
 3883|  4.29k|            {"Sep", 9},
 3884|  4.29k|            {"Oct", 10},
 3885|  4.29k|            {"Nov", 11},
 3886|  4.29k|            {"Dec", 12},
 3887|  4.29k|        }};
 3888|  4.29k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 2.67k, False: 1.62k]
  ------------------
 3889|  2.67k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|  2.67k|        }
 3891|  1.62k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3892|  1.62k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3429|  11.2k|    {
 3430|  11.2k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.74k, False: 8.48k]
  |  |  |  Branch (1039:45): [True: 2.62k, False: 8.60k]
  |  |  |  Branch (1039:45): [True: 116, False: 8.48k]
  |  |  ------------------
  ------------------
 3431|  2.74k|            return h.set_error(
 3432|  2.74k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 3433|  2.74k|        }
 3434|  8.48k|        t.mon = month{static_cast<unsigned>(m)};
 3435|  8.48k|        st.set_mon(h);
 3436|  8.48k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  4.37k|    {
 4466|  4.37k|        auto start_it = m_begin;
 4467|  4.37k|        std::size_t options_available = N;
 4468|  4.37k|        std::size_t chars_consumed = 0;
 4469|  17.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 12.9k, False: 4.23k]
  ------------------
 4470|  17.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 12.8k, False: 76]
  ------------------
 4471|  12.8k|            std::size_t i = 0;
 4472|  12.8k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 64, False: 12.7k]
  ------------------
 4473|     64|                options_available = 0;
 4474|     64|                break;
 4475|     64|            }
 4476|  12.7k|            const auto ch = *m_begin;
 4477|  12.7k|            ++m_begin;
 4478|  79.4k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 66.6k, False: 12.7k]
  ------------------
 4479|  66.6k|                const auto cmp = static_cast<unsigned>(
 4480|  66.6k|                    ch ^ options[i].first[chars_consumed]);
 4481|  66.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 66.6k]
  ------------------
 4482|  66.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 55.0k, False: 11.5k]
  |  Branch (4482:34): [True: 52.2k, False: 2.83k]
  ------------------
 4483|  52.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  52.2k|                                options.end());
 4485|  52.2k|                    --options_available;
 4486|  52.2k|                    continue;
 4487|  52.2k|                }
 4488|  14.3k|                ++i;
 4489|  14.3k|            }
 4490|  12.7k|            ++chars_consumed;
 4491|  12.7k|        }
 4492|  4.37k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 4.29k, False: 76]
  ------------------
 4493|  4.29k|            m_begin = start_it;
 4494|  4.29k|            return std::nullopt;
 4495|  4.29k|        }
 4496|     76|        return options.front().second;
 4497|  4.37k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  4.29k|    {
 4466|  4.29k|        auto start_it = m_begin;
 4467|  4.29k|        std::size_t options_available = N;
 4468|  4.29k|        std::size_t chars_consumed = 0;
 4469|  14.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 12.6k, False: 1.56k]
  ------------------
 4470|  14.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 9.95k, False: 2.67k]
  ------------------
 4471|  9.95k|            std::size_t i = 0;
 4472|  9.95k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 56, False: 9.90k]
  ------------------
 4473|     56|                options_available = 0;
 4474|     56|                break;
 4475|     56|            }
 4476|  9.90k|            const auto ch = *m_begin;
 4477|  9.90k|            ++m_begin;
 4478|  62.7k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 52.8k, False: 9.90k]
  ------------------
 4479|  52.8k|                const auto cmp = static_cast<unsigned>(
 4480|  52.8k|                    ch ^ options[i].first[chars_consumed]);
 4481|  52.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 52.8k]
  ------------------
 4482|  52.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 47.2k, False: 5.64k]
  |  Branch (4482:34): [True: 44.4k, False: 2.75k]
  ------------------
 4483|  44.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  44.4k|                                options.end());
 4485|  44.4k|                    --options_available;
 4486|  44.4k|                    continue;
 4487|  44.4k|                }
 4488|  8.39k|                ++i;
 4489|  8.39k|            }
 4490|  9.90k|            ++chars_consumed;
 4491|  9.90k|        }
 4492|  4.29k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 1.62k, False: 2.67k]
  ------------------
 4493|  1.62k|            m_begin = start_it;
 4494|  1.62k|            return std::nullopt;
 4495|  1.62k|        }
 4496|  2.67k|        return options.front().second;
 4497|  4.29k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3894|  8.48k|    {
 3895|  8.48k|#if !SCN_DISABLE_LOCALE
 3896|  8.48k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3896:13): [True: 0, False: 8.48k]
  |  Branch (3896:31): [True: 0, False: 0]
  ------------------
 3897|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3897:22): [True: 0, False: 0]
  ------------------
 3898|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3899|      0|            }
 3900|      0|            return;
 3901|      0|        }
 3902|  8.48k|#endif
 3903|       |
 3904|  8.48k|        int mon = read_classic_unsigned_integer(1, 2);
 3905|  8.48k|        setter::set_mon(*this, m_tm, m_st, mon);
 3906|  8.48k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3926|  8.46k|    {
 3927|  8.46k|#if !SCN_DISABLE_LOCALE
 3928|  8.46k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3928:13): [True: 0, False: 8.46k]
  |  Branch (3928:31): [True: 0, False: 0]
  ------------------
 3929|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3929:22): [True: 0, False: 0]
  ------------------
 3930|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3931|      0|            }
 3932|      0|            return;
 3933|      0|        }
 3934|  8.46k|#endif
 3935|       |
 3936|  8.46k|        int mday = read_classic_unsigned_integer(1, 2);
 3937|  8.46k|        setter::set_mday(*this, m_tm, m_st, mday);
 3938|  8.46k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3416|  8.46k|    {
 3417|  8.46k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.21k, False: 5.25k]
  |  |  |  Branch (1039:45): [True: 3.13k, False: 5.33k]
  |  |  |  Branch (1039:45): [True: 80, False: 5.25k]
  |  |  ------------------
  ------------------
 3418|  3.21k|            return h.set_error(
 3419|  3.21k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 3420|  3.21k|        }
 3421|  5.25k|        t.mday = d;
 3422|  5.25k|        st.set_mday(h);
 3423|  5.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3941|  3.42k|    {
 3942|  3.42k|#if !SCN_DISABLE_LOCALE
 3943|  3.42k|        if (m_st.localized) {
  ------------------
  |  Branch (3943:13): [True: 0, False: 3.42k]
  ------------------
 3944|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3944:22): [True: 0, False: 0]
  ------------------
 3945|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3946|      0|            }
 3947|      0|            return;
 3948|      0|        }
 3949|  3.42k|#endif
 3950|       |
 3951|  3.42k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3952|  3.42k|            {"Sunday", 0},
 3953|  3.42k|            {"Monday", 1},
 3954|  3.42k|            {"Tuesday", 2},
 3955|  3.42k|            {"Wednesday", 3},
 3956|  3.42k|            {"Thursday", 4},
 3957|  3.42k|            {"Friday", 5},
 3958|  3.42k|            {"Saturday", 6},
 3959|  3.42k|        }};
 3960|  3.42k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3960:18): [True: 0, False: 3.42k]
  ------------------
 3961|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3962|      0|        }
 3963|  3.42k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3964|  3.42k|            {"Sun", 0},
 3965|  3.42k|            {"Mon", 1},
 3966|  3.42k|            {"Tue", 2},
 3967|  3.42k|            {"Wed", 3},
 3968|  3.42k|            {"Thu", 4},
 3969|  3.42k|            {"Fri", 5},
 3970|  3.42k|            {"Sat", 6},
 3971|  3.42k|        }};
 3972|  3.42k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3972:18): [True: 1.78k, False: 1.64k]
  ------------------
 3973|  1.78k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3974|  1.78k|        }
 3975|  1.64k|        return set_error(
 3976|  1.64k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3977|  3.42k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3479|  1.78k|    {
 3480|  1.78k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1039|  3.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.78k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.78k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.78k]
  |  |  ------------------
  ------------------
 3481|      0|            return h.set_error(
 3482|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 3483|      0|        }
 3484|  1.78k|        t.wday = weekday{static_cast<unsigned>(d)};
 3485|  1.78k|        st.set_wday(h);
 3486|  1.78k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  6.85k|    {
 4466|  6.85k|        auto start_it = m_begin;
 4467|  6.85k|        std::size_t options_available = N;
 4468|  6.85k|        std::size_t chars_consumed = 0;
 4469|  23.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 18.1k, False: 5.01k]
  ------------------
 4470|  23.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 16.3k, False: 1.78k]
  ------------------
 4471|  16.3k|            std::size_t i = 0;
 4472|  16.3k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 54, False: 16.3k]
  ------------------
 4473|     54|                options_available = 0;
 4474|     54|                break;
 4475|     54|            }
 4476|  16.3k|            const auto ch = *m_begin;
 4477|  16.3k|            ++m_begin;
 4478|  73.8k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 57.4k, False: 16.3k]
  ------------------
 4479|  57.4k|                const auto cmp = static_cast<unsigned>(
 4480|  57.4k|                    ch ^ options[i].first[chars_consumed]);
 4481|  57.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 57.4k]
  ------------------
 4482|  57.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 46.1k, False: 11.2k]
  |  Branch (4482:34): [True: 46.1k, False: 76]
  ------------------
 4483|  46.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  46.1k|                                options.end());
 4485|  46.1k|                    --options_available;
 4486|  46.1k|                    continue;
 4487|  46.1k|                }
 4488|  11.3k|                ++i;
 4489|  11.3k|            }
 4490|  16.3k|            ++chars_consumed;
 4491|  16.3k|        }
 4492|  6.85k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 5.06k, False: 1.78k]
  ------------------
 4493|  5.06k|            m_begin = start_it;
 4494|  5.06k|            return std::nullopt;
 4495|  5.06k|        }
 4496|  1.78k|        return options.front().second;
 4497|  6.85k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 4015|  14.3k|    {
 4016|  14.3k|#if !SCN_DISABLE_LOCALE
 4017|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4017:13): [True: 0, False: 14.3k]
  |  Branch (4017:31): [True: 0, False: 0]
  ------------------
 4018|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4018:22): [True: 0, False: 0]
  ------------------
 4019|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4020|      0|            }
 4021|      0|            return;
 4022|      0|        }
 4023|  14.3k|#endif
 4024|       |
 4025|  14.3k|        int hr = read_classic_unsigned_integer(1, 2);
 4026|  14.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4027|  14.3k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3390|  14.3k|    {
 3391|  14.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.34k, False: 11.9k]
  |  |  |  Branch (1039:45): [True: 2.15k, False: 12.1k]
  |  |  |  Branch (1039:45): [True: 194, False: 11.9k]
  |  |  ------------------
  ------------------
 3392|  2.34k|            return hdl.set_error(
 3393|  2.34k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 3394|  2.34k|        }
 3395|  11.9k|        t.hour = h;
 3396|  11.9k|        st.set_hour24(hdl);
 3397|  11.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 4043|  14.2k|    {
 4044|  14.2k|#if !SCN_DISABLE_LOCALE
 4045|  14.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4045:13): [True: 0, False: 14.2k]
  |  Branch (4045:31): [True: 0, False: 0]
  ------------------
 4046|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4046:22): [True: 0, False: 0]
  ------------------
 4047|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4048|      0|            }
 4049|      0|            return;
 4050|      0|        }
 4051|  14.2k|#endif
 4052|       |
 4053|  14.2k|        int min = read_classic_unsigned_integer(1, 2);
 4054|  14.2k|        setter::set_min(*this, m_tm, m_st, min);
 4055|  14.2k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3377|  14.2k|    {
 3378|  14.2k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.69k, False: 11.5k]
  |  |  |  Branch (1039:45): [True: 2.66k, False: 11.6k]
  |  |  |  Branch (1039:45): [True: 26, False: 11.5k]
  |  |  ------------------
  ------------------
 3379|  2.69k|            return h.set_error({scan_error::invalid_scanned_value,
 3380|  2.69k|                                "Invalid value for minutes"});
 3381|  2.69k|        }
 3382|  11.5k|        t.min = m;
 3383|  11.5k|        st.set_min(h);
 3384|  11.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 4057|  2.94k|    {
 4058|  2.94k|#if !SCN_DISABLE_LOCALE
 4059|  2.94k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4059:13): [True: 0, False: 2.94k]
  |  Branch (4059:31): [True: 0, False: 0]
  ------------------
 4060|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4060:22): [True: 0, False: 0]
  ------------------
 4061|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4062|      0|            }
 4063|      0|            return;
 4064|      0|        }
 4065|  2.94k|#endif
 4066|       |
 4067|  2.94k|        int sec = read_classic_unsigned_integer(1, 2);
 4068|  2.94k|        setter::set_sec(*this, m_tm, m_st, sec);
 4069|  2.94k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3364|  2.94k|    {
 3365|  2.94k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.59k, False: 1.34k]
  |  |  |  Branch (1039:45): [True: 1.59k, False: 1.34k]
  |  |  |  Branch (1039:45): [True: 4, False: 1.34k]
  |  |  ------------------
  ------------------
 3366|  1.59k|            return h.set_error({scan_error::invalid_scanned_value,
 3367|  1.59k|                                "Invalid value for seconds"});
 3368|  1.59k|        }
 3369|  1.34k|        t.sec = s;
 3370|  1.34k|        st.set_sec(h);
 3371|  1.34k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 4299|  6.45k|    {
 4300|       |        // %m/%d/%y
 4301|  6.45k|        constexpr CharT slash = '/';
 4302|  6.45k|        on_dec_month();
 4303|  6.45k|        on_text(&slash, &slash + 1);
 4304|  6.45k|        on_day_of_month();
 4305|  6.45k|        on_text(&slash, &slash + 1);
 4306|  6.45k|        on_short_year();
 4307|  6.45k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 4309|  1.95k|    {
 4310|       |        // %Y-%m-%d
 4311|  1.95k|        constexpr CharT dash = '-';
 4312|  1.95k|        on_full_year();
 4313|  1.95k|        on_text(&dash, &dash + 1);
 4314|  1.95k|        on_dec_month();
 4315|  1.95k|        on_text(&dash, &dash + 1);
 4316|  1.95k|        on_day_of_month();
 4317|  1.95k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 4341|  11.3k|    {
 4342|       |        // %H:%M
 4343|  11.3k|        constexpr CharT colon = ':';
 4344|  11.3k|        on_24_hour();
 4345|  11.3k|        on_text(&colon, &colon + 1);
 4346|  11.3k|        on_minute();
 4347|  11.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 4349|  2.94k|    {
 4350|       |        // %H:%M:%S
 4351|  2.94k|        constexpr CharT colon = ':';
 4352|  2.94k|        on_24_hour();
 4353|  2.94k|        on_text(&colon, &colon + 1);
 4354|  2.94k|        on_minute();
 4355|  2.94k|        on_text(&colon, &colon + 1);
 4356|  2.94k|        on_second();
 4357|  2.94k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 4388|  20.7k|    {
 4389|  20.7k|        m_st.verify(*this);
 4390|  20.7k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4390:13): [True: 0, False: 20.7k]
  |  Branch (4390:31): [True: 0, False: 0]
  ------------------
 4391|      0|            setter::handle_am_pm(m_tm, m_st);
 4392|      0|        }
 4393|  20.7k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4393:13): [True: 20.4k, False: 312]
  |  Branch (4393:37): [True: 4.83k, False: 15.5k]
  |  Branch (4393:60): [True: 0, False: 15.5k]
  ------------------
 4394|  4.83k|            setter::handle_short_year_and_century(m_tm, m_st);
 4395|  4.83k|        }
 4396|  20.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 3529|  4.98k|    {
 3530|  4.98k|        assert(t.year);
 3531|  4.98k|        st.handle_short_year_and_century(*t.year, 0);
 3532|  4.98k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 4399|  64.4k|    {
 4400|  64.4k|        return m_error;
 4401|  64.4k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 4416|  20.7k|    {
 4417|  20.7k|        return m_begin;
 4418|  20.7k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4609|  27.2k|{
 4610|  27.2k|    {
 4611|  27.2k|        SCN_TRY(it,
  ------------------
  |  | 3958|  27.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  27.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  27.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 246, False: 26.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    246|    }                                                  \
  |  |  |  | 3957|  27.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4612|  26.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4613|  26.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  26.9k|    static_cast<    \
  |  | 1109|  26.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4614|  26.9k|    }
 4615|       |
 4616|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4617|  26.9k|        ctx.range(), t, ctx.locale());
 4618|  26.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4619|  26.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.6k, False: 15.3k]
  |  |  ------------------
  ------------------
 4620|  11.6k|        return unexpected(e.error());
 4621|  11.6k|    }
 4622|  15.3k|    return r.get_iterator();
 4623|  26.9k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 3753|  26.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  26.9k|    static_cast<    \
  |  | 1109|  26.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3754|  26.9k|          m_begin(ranges::begin(m_range)),
 3755|  26.9k|          m_tm(t),
 3756|  26.9k|          m_loc(loc)
 3757|  26.9k|    {
 3758|  26.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 4404|  10.9k|    {
 4405|  10.9k|        set_error({scan_error::invalid_format_string, msg});
 4406|  10.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 4409|  45.3k|    {
 4410|  45.3k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4410:13): [True: 11.6k, False: 33.7k]
  ------------------
 4411|  11.6k|            m_error = unexpected(e);
 4412|  11.6k|        }
 4413|  45.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3761|  24.3k|    {
 3762|  37.6k|        while (beg != end) {
  ------------------
  |  Branch (3762:16): [True: 24.3k, False: 13.3k]
  ------------------
 3763|  24.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3763:17): [True: 168, False: 24.2k]
  ------------------
 3764|    168|                return set_error({scan_error::end_of_input, "EOF"});
 3765|    168|            }
 3766|  24.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3766:17): [True: 10.9k, False: 13.3k]
  ------------------
 3767|  10.9k|                return on_error("Invalid literal character");
 3768|  10.9k|            }
 3769|  13.3k|            ++beg;
 3770|  13.3k|            ++m_begin;
 3771|  13.3k|        }
 3772|  24.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3791|  3.65k|    {
 3792|  3.65k|#if !SCN_DISABLE_LOCALE
 3793|  3.65k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3793:13): [True: 0, False: 3.65k]
  |  Branch (3793:31): [True: 0, False: 0]
  ------------------
 3794|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3794:22): [True: 0, False: 0]
  ------------------
 3795|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3796|      0|            }
 3797|      0|            return;
 3798|      0|        }
 3799|  3.65k|#endif
 3800|       |
 3801|  3.65k|        int yr = read_classic_unsigned_integer(4, 4);
 3802|  3.65k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3803|  3.65k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3442|  3.65k|    {
 3443|  3.65k|        t.year = y;
 3444|  3.65k|        st.set_full_year(h);
 3445|  3.65k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 4427|  43.5k|    {
 4428|  43.5k|        int digits_read = 0;
 4429|  43.5k|        int accumulator = 0;
 4430|  71.3k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4430:16): [True: 71.0k, False: 354]
  ------------------
 4431|  71.0k|            const auto ch = *m_begin;
 4432|  71.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4432:17): [True: 21.1k, False: 49.8k]
  |  Branch (4432:36): [True: 17.7k, False: 32.1k]
  ------------------
 4433|  38.9k|                break;
 4434|  38.9k|            }
 4435|  32.1k|            ++m_begin;
 4436|  32.1k|            ++digits_read;
 4437|  32.1k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4438|  32.1k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4438:17): [True: 4.31k, False: 27.8k]
  ------------------
 4439|  4.31k|                break;
 4440|  4.31k|            }
 4441|  32.1k|        }
 4442|  43.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4442:13): [True: 17.7k, False: 25.8k]
  ------------------
 4443|  17.7k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4444|  17.7k|                                 "Too few integer digits"});
 4445|  17.7k|            return -1;
 4446|  17.7k|        }
 4447|  25.8k|        return accumulator;
 4448|  43.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3805|  1.79k|    {
 3806|  1.79k|#if !SCN_DISABLE_LOCALE
 3807|  1.79k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3807:13): [True: 0, False: 1.79k]
  |  Branch (3807:31): [True: 0, False: 0]
  ------------------
 3808|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3808:22): [True: 0, False: 0]
  ------------------
 3809|      0|                setter::set_short_year(*this, m_tm, m_st,
 3810|      0|                                       (t->tm_year + 1900) % 100);
 3811|      0|            }
 3812|      0|            return;
 3813|      0|        }
 3814|  1.79k|#endif
 3815|       |
 3816|  1.79k|        int yr = read_classic_unsigned_integer(2, 2);
 3817|  1.79k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3818|  1.79k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3465|  1.79k|    {
 3466|  1.79k|        if (!t.year) {
  ------------------
  |  Branch (3466:13): [True: 1.79k, False: 0]
  ------------------
 3467|  1.79k|            t.year = y;
 3468|  1.79k|        }
 3469|      0|        else {
 3470|      0|            t.year = *t.year + y;
 3471|      0|        }
 3472|  1.79k|        st.set_short_year(h);
 3473|  1.79k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3848|  4.39k|    {
 3849|  4.39k|#if !SCN_DISABLE_FAST_FLOAT
 3850|  4.39k|        if (m_st.localized) {
  ------------------
  |  Branch (3850:13): [True: 0, False: 4.39k]
  ------------------
 3851|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3851:22): [True: 0, False: 0]
  ------------------
 3852|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3853|      0|            }
 3854|      0|            return;
 3855|      0|        }
 3856|  4.39k|#endif
 3857|       |
 3858|  4.39k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3859|  4.39k|            {"January", 1},
 3860|  4.39k|            {"February", 2},
 3861|  4.39k|            {"March", 3},
 3862|  4.39k|            {"April", 4},
 3863|  4.39k|            {"May", 5},
 3864|  4.39k|            {"June", 6},
 3865|  4.39k|            {"July", 7},
 3866|  4.39k|            {"August", 8},
 3867|  4.39k|            {"September", 9},
 3868|  4.39k|            {"October", 10},
 3869|  4.39k|            {"November", 11},
 3870|  4.39k|            {"December", 12},
 3871|  4.39k|        }};
 3872|  4.39k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3872:18): [True: 76, False: 4.32k]
  ------------------
 3873|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3874|     76|        }
 3875|  4.32k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3876|  4.32k|            {"Jan", 1},
 3877|  4.32k|            {"Feb", 2},
 3878|  4.32k|            {"Mar", 3},
 3879|  4.32k|            {"Apr", 4},
 3880|  4.32k|            {"Jun", 6},
 3881|  4.32k|            {"Jul", 7},
 3882|  4.32k|            {"Aug", 8},
 3883|  4.32k|            {"Sep", 9},
 3884|  4.32k|            {"Oct", 10},
 3885|  4.32k|            {"Nov", 11},
 3886|  4.32k|            {"Dec", 12},
 3887|  4.32k|        }};
 3888|  4.32k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 2.66k, False: 1.65k]
  ------------------
 3889|  2.66k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|  2.66k|        }
 3891|  1.65k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3892|  1.65k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3429|  6.59k|    {
 3430|  6.59k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.86k, False: 3.72k]
  |  |  |  Branch (1039:45): [True: 2.76k, False: 3.82k]
  |  |  |  Branch (1039:45): [True: 96, False: 3.72k]
  |  |  ------------------
  ------------------
 3431|  2.86k|            return h.set_error(
 3432|  2.86k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 3433|  2.86k|        }
 3434|  3.72k|        t.mon = month{static_cast<unsigned>(m)};
 3435|  3.72k|        st.set_mon(h);
 3436|  3.72k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  4.39k|    {
 4466|  4.39k|        auto start_it = m_begin;
 4467|  4.39k|        std::size_t options_available = N;
 4468|  4.39k|        std::size_t chars_consumed = 0;
 4469|  17.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 12.9k, False: 4.26k]
  ------------------
 4470|  17.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 12.8k, False: 76]
  ------------------
 4471|  12.8k|            std::size_t i = 0;
 4472|  12.8k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 58, False: 12.7k]
  ------------------
 4473|     58|                options_available = 0;
 4474|     58|                break;
 4475|     58|            }
 4476|  12.7k|            const auto ch = *m_begin;
 4477|  12.7k|            ++m_begin;
 4478|  79.6k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 66.8k, False: 12.7k]
  ------------------
 4479|  66.8k|                const auto cmp = static_cast<unsigned>(
 4480|  66.8k|                    ch ^ options[i].first[chars_consumed]);
 4481|  66.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 66.8k]
  ------------------
 4482|  66.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 55.4k, False: 11.4k]
  |  Branch (4482:34): [True: 52.5k, False: 2.80k]
  ------------------
 4483|  52.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  52.5k|                                options.end());
 4485|  52.5k|                    --options_available;
 4486|  52.5k|                    continue;
 4487|  52.5k|                }
 4488|  14.2k|                ++i;
 4489|  14.2k|            }
 4490|  12.7k|            ++chars_consumed;
 4491|  12.7k|        }
 4492|  4.39k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 4.32k, False: 76]
  ------------------
 4493|  4.32k|            m_begin = start_it;
 4494|  4.32k|            return std::nullopt;
 4495|  4.32k|        }
 4496|     76|        return options.front().second;
 4497|  4.39k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  4.32k|    {
 4466|  4.32k|        auto start_it = m_begin;
 4467|  4.32k|        std::size_t options_available = N;
 4468|  4.32k|        std::size_t chars_consumed = 0;
 4469|  14.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 12.6k, False: 1.60k]
  ------------------
 4470|  14.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 9.95k, False: 2.66k]
  ------------------
 4471|  9.95k|            std::size_t i = 0;
 4472|  9.95k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 50, False: 9.90k]
  ------------------
 4473|     50|                options_available = 0;
 4474|     50|                break;
 4475|     50|            }
 4476|  9.90k|            const auto ch = *m_begin;
 4477|  9.90k|            ++m_begin;
 4478|  63.0k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 53.1k, False: 9.90k]
  ------------------
 4479|  53.1k|                const auto cmp = static_cast<unsigned>(
 4480|  53.1k|                    ch ^ options[i].first[chars_consumed]);
 4481|  53.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 53.1k]
  ------------------
 4482|  53.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 47.5k, False: 5.61k]
  |  Branch (4482:34): [True: 44.8k, False: 2.72k]
  ------------------
 4483|  44.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  44.8k|                                options.end());
 4485|  44.8k|                    --options_available;
 4486|  44.8k|                    continue;
 4487|  44.8k|                }
 4488|  8.34k|                ++i;
 4489|  8.34k|            }
 4490|  9.90k|            ++chars_consumed;
 4491|  9.90k|        }
 4492|  4.32k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 1.65k, False: 2.66k]
  ------------------
 4493|  1.65k|            m_begin = start_it;
 4494|  1.65k|            return std::nullopt;
 4495|  1.65k|        }
 4496|  2.66k|        return options.front().second;
 4497|  4.32k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3894|  3.84k|    {
 3895|  3.84k|#if !SCN_DISABLE_LOCALE
 3896|  3.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3896:13): [True: 0, False: 3.84k]
  |  Branch (3896:31): [True: 0, False: 0]
  ------------------
 3897|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3897:22): [True: 0, False: 0]
  ------------------
 3898|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3899|      0|            }
 3900|      0|            return;
 3901|      0|        }
 3902|  3.84k|#endif
 3903|       |
 3904|  3.84k|        int mon = read_classic_unsigned_integer(1, 2);
 3905|  3.84k|        setter::set_mon(*this, m_tm, m_st, mon);
 3906|  3.84k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3926|  3.83k|    {
 3927|  3.83k|#if !SCN_DISABLE_LOCALE
 3928|  3.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3928:13): [True: 0, False: 3.83k]
  |  Branch (3928:31): [True: 0, False: 0]
  ------------------
 3929|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3929:22): [True: 0, False: 0]
  ------------------
 3930|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3931|      0|            }
 3932|      0|            return;
 3933|      0|        }
 3934|  3.83k|#endif
 3935|       |
 3936|  3.83k|        int mday = read_classic_unsigned_integer(1, 2);
 3937|  3.83k|        setter::set_mday(*this, m_tm, m_st, mday);
 3938|  3.83k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3416|  3.83k|    {
 3417|  3.83k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  4.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.30k, False: 530]
  |  |  |  Branch (1039:45): [True: 3.22k, False: 602]
  |  |  |  Branch (1039:45): [True: 72, False: 530]
  |  |  ------------------
  ------------------
 3418|  3.30k|            return h.set_error(
 3419|  3.30k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 3420|  3.30k|        }
 3421|    530|        t.mday = d;
 3422|    530|        st.set_mday(h);
 3423|    530|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3941|  3.38k|    {
 3942|  3.38k|#if !SCN_DISABLE_LOCALE
 3943|  3.38k|        if (m_st.localized) {
  ------------------
  |  Branch (3943:13): [True: 0, False: 3.38k]
  ------------------
 3944|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3944:22): [True: 0, False: 0]
  ------------------
 3945|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3946|      0|            }
 3947|      0|            return;
 3948|      0|        }
 3949|  3.38k|#endif
 3950|       |
 3951|  3.38k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3952|  3.38k|            {"Sunday", 0},
 3953|  3.38k|            {"Monday", 1},
 3954|  3.38k|            {"Tuesday", 2},
 3955|  3.38k|            {"Wednesday", 3},
 3956|  3.38k|            {"Thursday", 4},
 3957|  3.38k|            {"Friday", 5},
 3958|  3.38k|            {"Saturday", 6},
 3959|  3.38k|        }};
 3960|  3.38k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3960:18): [True: 0, False: 3.38k]
  ------------------
 3961|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3962|      0|        }
 3963|  3.38k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3964|  3.38k|            {"Sun", 0},
 3965|  3.38k|            {"Mon", 1},
 3966|  3.38k|            {"Tue", 2},
 3967|  3.38k|            {"Wed", 3},
 3968|  3.38k|            {"Thu", 4},
 3969|  3.38k|            {"Fri", 5},
 3970|  3.38k|            {"Sat", 6},
 3971|  3.38k|        }};
 3972|  3.38k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3972:18): [True: 1.71k, False: 1.67k]
  ------------------
 3973|  1.71k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3974|  1.71k|        }
 3975|  1.67k|        return set_error(
 3976|  1.67k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3977|  3.38k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3479|  1.71k|    {
 3480|  1.71k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1039|  3.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.71k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.71k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.71k]
  |  |  ------------------
  ------------------
 3481|      0|            return h.set_error(
 3482|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 3483|      0|        }
 3484|  1.71k|        t.wday = weekday{static_cast<unsigned>(d)};
 3485|  1.71k|        st.set_wday(h);
 3486|  1.71k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  6.76k|    {
 4466|  6.76k|        auto start_it = m_begin;
 4467|  6.76k|        std::size_t options_available = N;
 4468|  6.76k|        std::size_t chars_consumed = 0;
 4469|  22.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 17.5k, False: 5.01k]
  ------------------
 4470|  22.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 15.8k, False: 1.71k]
  ------------------
 4471|  15.8k|            std::size_t i = 0;
 4472|  15.8k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 38, False: 15.8k]
  ------------------
 4473|     38|                options_available = 0;
 4474|     38|                break;
 4475|     38|            }
 4476|  15.8k|            const auto ch = *m_begin;
 4477|  15.8k|            ++m_begin;
 4478|  72.2k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 56.4k, False: 15.8k]
  ------------------
 4479|  56.4k|                const auto cmp = static_cast<unsigned>(
 4480|  56.4k|                    ch ^ options[i].first[chars_consumed]);
 4481|  56.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 56.4k]
  ------------------
 4482|  56.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 45.6k, False: 10.7k]
  |  Branch (4482:34): [True: 45.5k, False: 48]
  ------------------
 4483|  45.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  45.5k|                                options.end());
 4485|  45.5k|                    --options_available;
 4486|  45.5k|                    continue;
 4487|  45.5k|                }
 4488|  10.8k|                ++i;
 4489|  10.8k|            }
 4490|  15.8k|            ++chars_consumed;
 4491|  15.8k|        }
 4492|  6.76k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 5.05k, False: 1.71k]
  ------------------
 4493|  5.05k|            m_begin = start_it;
 4494|  5.05k|            return std::nullopt;
 4495|  5.05k|        }
 4496|  1.71k|        return options.front().second;
 4497|  6.76k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 4015|  13.7k|    {
 4016|  13.7k|#if !SCN_DISABLE_LOCALE
 4017|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4017:13): [True: 0, False: 13.7k]
  |  Branch (4017:31): [True: 0, False: 0]
  ------------------
 4018|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4018:22): [True: 0, False: 0]
  ------------------
 4019|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4020|      0|            }
 4021|      0|            return;
 4022|      0|        }
 4023|  13.7k|#endif
 4024|       |
 4025|  13.7k|        int hr = read_classic_unsigned_integer(1, 2);
 4026|  13.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4027|  13.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3390|  13.7k|    {
 3391|  13.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.63k, False: 11.1k]
  |  |  |  Branch (1039:45): [True: 2.46k, False: 11.3k]
  |  |  |  Branch (1039:45): [True: 172, False: 11.1k]
  |  |  ------------------
  ------------------
 3392|  2.63k|            return hdl.set_error(
 3393|  2.63k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 3394|  2.63k|        }
 3395|  11.1k|        t.hour = h;
 3396|  11.1k|        st.set_hour24(hdl);
 3397|  11.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 4043|  13.7k|    {
 4044|  13.7k|#if !SCN_DISABLE_LOCALE
 4045|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4045:13): [True: 0, False: 13.7k]
  |  Branch (4045:31): [True: 0, False: 0]
  ------------------
 4046|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4046:22): [True: 0, False: 0]
  ------------------
 4047|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4048|      0|            }
 4049|      0|            return;
 4050|      0|        }
 4051|  13.7k|#endif
 4052|       |
 4053|  13.7k|        int min = read_classic_unsigned_integer(1, 2);
 4054|  13.7k|        setter::set_min(*this, m_tm, m_st, min);
 4055|  13.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3377|  13.7k|    {
 3378|  13.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.80k, False: 10.9k]
  |  |  |  Branch (1039:45): [True: 2.78k, False: 10.9k]
  |  |  |  Branch (1039:45): [True: 18, False: 10.9k]
  |  |  ------------------
  ------------------
 3379|  2.80k|            return h.set_error({scan_error::invalid_scanned_value,
 3380|  2.80k|                                "Invalid value for minutes"});
 3381|  2.80k|        }
 3382|  10.9k|        t.min = m;
 3383|  10.9k|        st.set_min(h);
 3384|  10.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 4057|  2.92k|    {
 4058|  2.92k|#if !SCN_DISABLE_LOCALE
 4059|  2.92k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4059:13): [True: 0, False: 2.92k]
  |  Branch (4059:31): [True: 0, False: 0]
  ------------------
 4060|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4060:22): [True: 0, False: 0]
  ------------------
 4061|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4062|      0|            }
 4063|      0|            return;
 4064|      0|        }
 4065|  2.92k|#endif
 4066|       |
 4067|  2.92k|        int sec = read_classic_unsigned_integer(1, 2);
 4068|  2.92k|        setter::set_sec(*this, m_tm, m_st, sec);
 4069|  2.92k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3364|  2.92k|    {
 3365|  2.92k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.63k, False: 1.29k]
  |  |  |  Branch (1039:45): [True: 1.63k, False: 1.29k]
  |  |  |  Branch (1039:45): [True: 2, False: 1.29k]
  |  |  ------------------
  ------------------
 3366|  1.63k|            return h.set_error({scan_error::invalid_scanned_value,
 3367|  1.63k|                                "Invalid value for seconds"});
 3368|  1.63k|        }
 3369|  1.29k|        t.sec = s;
 3370|  1.29k|        st.set_sec(h);
 3371|  1.29k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 4299|  1.79k|    {
 4300|       |        // %m/%d/%y
 4301|  1.79k|        constexpr CharT slash = '/';
 4302|  1.79k|        on_dec_month();
 4303|  1.79k|        on_text(&slash, &slash + 1);
 4304|  1.79k|        on_day_of_month();
 4305|  1.79k|        on_text(&slash, &slash + 1);
 4306|  1.79k|        on_short_year();
 4307|  1.79k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 4309|  1.98k|    {
 4310|       |        // %Y-%m-%d
 4311|  1.98k|        constexpr CharT dash = '-';
 4312|  1.98k|        on_full_year();
 4313|  1.98k|        on_text(&dash, &dash + 1);
 4314|  1.98k|        on_dec_month();
 4315|  1.98k|        on_text(&dash, &dash + 1);
 4316|  1.98k|        on_day_of_month();
 4317|  1.98k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 4341|  10.8k|    {
 4342|       |        // %H:%M
 4343|  10.8k|        constexpr CharT colon = ':';
 4344|  10.8k|        on_24_hour();
 4345|  10.8k|        on_text(&colon, &colon + 1);
 4346|  10.8k|        on_minute();
 4347|  10.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 4349|  2.92k|    {
 4350|       |        // %H:%M:%S
 4351|  2.92k|        constexpr CharT colon = ':';
 4352|  2.92k|        on_24_hour();
 4353|  2.92k|        on_text(&colon, &colon + 1);
 4354|  2.92k|        on_minute();
 4355|  2.92k|        on_text(&colon, &colon + 1);
 4356|  2.92k|        on_second();
 4357|  2.92k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 4388|  15.3k|    {
 4389|  15.3k|        m_st.verify(*this);
 4390|  15.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4390:13): [True: 0, False: 15.3k]
  |  Branch (4390:31): [True: 0, False: 0]
  ------------------
 4391|      0|            setter::handle_am_pm(m_tm, m_st);
 4392|      0|        }
 4393|  15.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4393:13): [True: 15.0k, False: 312]
  |  Branch (4393:37): [True: 132, False: 14.8k]
  |  Branch (4393:60): [True: 0, False: 14.8k]
  ------------------
 4394|    132|            setter::handle_short_year_and_century(m_tm, m_st);
 4395|    132|        }
 4396|  15.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 4399|  54.1k|    {
 4400|  54.1k|        return m_error;
 4401|  54.1k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 4416|  15.3k|    {
 4417|  15.3k|        return m_begin;
 4418|  15.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4609|  31.0k|{
 4610|  31.0k|    {
 4611|  31.0k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 348, False: 30.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    348|    }                                                  \
  |  |  |  | 3957|  31.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4612|  30.6k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4613|  30.6k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.6k|    static_cast<    \
  |  | 1109|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4614|  30.6k|    }
 4615|       |
 4616|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4617|  30.6k|        ctx.range(), t, ctx.locale());
 4618|  30.6k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4619|  30.6k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.3k, False: 7.26k]
  |  |  ------------------
  ------------------
 4620|  23.3k|        return unexpected(e.error());
 4621|  23.3k|    }
 4622|  7.26k|    return r.get_iterator();
 4623|  30.6k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 3753|  30.6k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.6k|    static_cast<    \
  |  | 1109|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3754|  30.6k|          m_begin(ranges::begin(m_range)),
 3755|  30.6k|          m_tm(t),
 3756|  30.6k|          m_loc(loc)
 3757|  30.6k|    {
 3758|  30.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 4404|  22.8k|    {
 4405|  22.8k|        set_error({scan_error::invalid_format_string, msg});
 4406|  22.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 4409|   100k|    {
 4410|   100k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4410:13): [True: 23.3k, False: 77.4k]
  ------------------
 4411|  23.3k|            m_error = unexpected(e);
 4412|  23.3k|        }
 4413|   100k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3761|  30.2k|    {
 3762|  37.4k|        while (beg != end) {
  ------------------
  |  Branch (3762:16): [True: 30.2k, False: 7.25k]
  ------------------
 3763|  30.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3763:17): [True: 118, False: 30.1k]
  ------------------
 3764|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3765|    118|            }
 3766|  30.1k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3766:17): [True: 22.8k, False: 7.25k]
  ------------------
 3767|  22.8k|                return on_error("Invalid literal character");
 3768|  22.8k|            }
 3769|  7.25k|            ++beg;
 3770|  7.25k|            ++m_begin;
 3771|  7.25k|        }
 3772|  30.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3791|  6.71k|    {
 3792|  6.71k|#if !SCN_DISABLE_LOCALE
 3793|  6.71k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3793:13): [True: 0, False: 6.71k]
  |  Branch (3793:31): [True: 0, False: 0]
  ------------------
 3794|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3794:22): [True: 0, False: 0]
  ------------------
 3795|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3796|      0|            }
 3797|      0|            return;
 3798|      0|        }
 3799|  6.71k|#endif
 3800|       |
 3801|  6.71k|        int yr = read_classic_unsigned_integer(4, 4);
 3802|  6.71k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3803|  6.71k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3264|  6.71k|    {
 3265|  6.71k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  6.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6.71k]
  |  |  ------------------
  ------------------
 3266|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3267|      0|                                "Invalid value for tm_year"});
 3268|      0|        }
 3269|  6.71k|        t.tm_year = y - 1900;
 3270|  6.71k|        st.set_full_year(h);
 3271|  6.71k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 4427|  53.4k|    {
 4428|  53.4k|        int digits_read = 0;
 4429|  53.4k|        int accumulator = 0;
 4430|  68.9k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4430:16): [True: 68.6k, False: 260]
  ------------------
 4431|  68.6k|            const auto ch = *m_begin;
 4432|  68.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4432:17): [True: 29.9k, False: 38.7k]
  |  Branch (4432:36): [True: 20.8k, False: 17.8k]
  ------------------
 4433|  50.7k|                break;
 4434|  50.7k|            }
 4435|  17.8k|            ++m_begin;
 4436|  17.8k|            ++digits_read;
 4437|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4438|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4438:17): [True: 2.43k, False: 15.4k]
  ------------------
 4439|  2.43k|                break;
 4440|  2.43k|            }
 4441|  17.8k|        }
 4442|  53.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4442:13): [True: 38.8k, False: 14.6k]
  ------------------
 4443|  38.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4444|  38.8k|                                 "Too few integer digits"});
 4445|  38.8k|            return -1;
 4446|  38.8k|        }
 4447|  14.6k|        return accumulator;
 4448|  53.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3805|  3.35k|    {
 3806|  3.35k|#if !SCN_DISABLE_LOCALE
 3807|  3.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3807:13): [True: 0, False: 3.35k]
  |  Branch (3807:31): [True: 0, False: 0]
  ------------------
 3808|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3808:22): [True: 0, False: 0]
  ------------------
 3809|      0|                setter::set_short_year(*this, m_tm, m_st,
 3810|      0|                                       (t->tm_year + 1900) % 100);
 3811|      0|            }
 3812|      0|            return;
 3813|      0|        }
 3814|  3.35k|#endif
 3815|       |
 3816|  3.35k|        int yr = read_classic_unsigned_integer(2, 2);
 3817|  3.35k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3818|  3.35k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3281|  3.35k|    {
 3282|  3.35k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  3.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.34k, False: 18]
  |  |  |  Branch (1039:45): [True: 3.34k, False: 18]
  |  |  |  Branch (1039:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 3283|  3.34k|            return h.set_error({scan_error::invalid_scanned_value,
 3284|  3.34k|                                "Invalid value for tm_year"});
 3285|  3.34k|        }
 3286|     18|        st.short_year_value = y;
 3287|     18|        st.set_short_year(h);
 3288|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3848|  4.06k|    {
 3849|  4.06k|#if !SCN_DISABLE_FAST_FLOAT
 3850|  4.06k|        if (m_st.localized) {
  ------------------
  |  Branch (3850:13): [True: 0, False: 4.06k]
  ------------------
 3851|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3851:22): [True: 0, False: 0]
  ------------------
 3852|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3853|      0|            }
 3854|      0|            return;
 3855|      0|        }
 3856|  4.06k|#endif
 3857|       |
 3858|  4.06k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3859|  4.06k|            {"January", 1},
 3860|  4.06k|            {"February", 2},
 3861|  4.06k|            {"March", 3},
 3862|  4.06k|            {"April", 4},
 3863|  4.06k|            {"May", 5},
 3864|  4.06k|            {"June", 6},
 3865|  4.06k|            {"July", 7},
 3866|  4.06k|            {"August", 8},
 3867|  4.06k|            {"September", 9},
 3868|  4.06k|            {"October", 10},
 3869|  4.06k|            {"November", 11},
 3870|  4.06k|            {"December", 12},
 3871|  4.06k|        }};
 3872|  4.06k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3872:18): [True: 22, False: 4.04k]
  ------------------
 3873|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3874|     22|        }
 3875|  4.04k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3876|  4.04k|            {"Jan", 1},
 3877|  4.04k|            {"Feb", 2},
 3878|  4.04k|            {"Mar", 3},
 3879|  4.04k|            {"Apr", 4},
 3880|  4.04k|            {"Jun", 6},
 3881|  4.04k|            {"Jul", 7},
 3882|  4.04k|            {"Aug", 8},
 3883|  4.04k|            {"Sep", 9},
 3884|  4.04k|            {"Oct", 10},
 3885|  4.04k|            {"Nov", 11},
 3886|  4.04k|            {"Dec", 12},
 3887|  4.04k|        }};
 3888|  4.04k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 706, False: 3.33k]
  ------------------
 3889|    706|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|    706|        }
 3891|  3.33k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3892|  3.33k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3254|  7.48k|    {
 3255|  7.48k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  8.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.40k, False: 1.07k]
  |  |  |  Branch (1039:45): [True: 6.35k, False: 1.12k]
  |  |  |  Branch (1039:45): [True: 50, False: 1.07k]
  |  |  ------------------
  ------------------
 3256|  6.40k|            return h.set_error({scan_error::invalid_scanned_value,
 3257|  6.40k|                                "Invalid value for tm_mon"});
 3258|  6.40k|        }
 3259|  1.07k|        t.tm_mon = m - 1;
 3260|  1.07k|        st.set_mon(h);
 3261|  1.07k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  4.06k|    {
 4466|  4.06k|        auto start_it = m_begin;
 4467|  4.06k|        std::size_t options_available = N;
 4468|  4.06k|        std::size_t chars_consumed = 0;
 4469|  10.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.33k, False: 3.99k]
  ------------------
 4470|  10.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 6.31k, False: 22]
  ------------------
 4471|  6.31k|            std::size_t i = 0;
 4472|  6.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 42, False: 6.27k]
  ------------------
 4473|     42|                options_available = 0;
 4474|     42|                break;
 4475|     42|            }
 4476|  6.27k|            const auto ch = *m_begin;
 4477|  6.27k|            ++m_begin;
 4478|  58.7k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 52.4k, False: 6.27k]
  ------------------
 4479|  52.4k|                const auto cmp = static_cast<unsigned>(
 4480|  52.4k|                    ch ^ options[i].first[chars_consumed]);
 4481|  52.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 52.4k]
  ------------------
 4482|  52.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 49.5k, False: 2.95k]
  |  Branch (4482:34): [True: 48.6k, False: 840]
  ------------------
 4483|  48.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  48.6k|                                options.end());
 4485|  48.6k|                    --options_available;
 4486|  48.6k|                    continue;
 4487|  48.6k|                }
 4488|  3.79k|                ++i;
 4489|  3.79k|            }
 4490|  6.27k|            ++chars_consumed;
 4491|  6.27k|        }
 4492|  4.06k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 4.04k, False: 22]
  ------------------
 4493|  4.04k|            m_begin = start_it;
 4494|  4.04k|            return std::nullopt;
 4495|  4.04k|        }
 4496|     22|        return options.front().second;
 4497|  4.06k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  4.04k|    {
 4466|  4.04k|        auto start_it = m_begin;
 4467|  4.04k|        std::size_t options_available = N;
 4468|  4.04k|        std::size_t chars_consumed = 0;
 4469|  9.55k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.24k, False: 3.30k]
  ------------------
 4470|  9.55k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 5.54k, False: 706]
  ------------------
 4471|  5.54k|            std::size_t i = 0;
 4472|  5.54k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 30, False: 5.51k]
  ------------------
 4473|     30|                options_available = 0;
 4474|     30|                break;
 4475|     30|            }
 4476|  5.51k|            const auto ch = *m_begin;
 4477|  5.51k|            ++m_begin;
 4478|  51.4k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 45.9k, False: 5.51k]
  ------------------
 4479|  45.9k|                const auto cmp = static_cast<unsigned>(
 4480|  45.9k|                    ch ^ options[i].first[chars_consumed]);
 4481|  45.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 45.9k]
  ------------------
 4482|  45.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 44.4k, False: 1.45k]
  |  Branch (4482:34): [True: 43.6k, False: 788]
  ------------------
 4483|  43.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  43.6k|                                options.end());
 4485|  43.6k|                    --options_available;
 4486|  43.6k|                    continue;
 4487|  43.6k|                }
 4488|  2.24k|                ++i;
 4489|  2.24k|            }
 4490|  5.51k|            ++chars_consumed;
 4491|  5.51k|        }
 4492|  4.04k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 3.33k, False: 706]
  ------------------
 4493|  3.33k|            m_begin = start_it;
 4494|  3.33k|            return std::nullopt;
 4495|  3.33k|        }
 4496|    706|        return options.front().second;
 4497|  4.04k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3894|  6.75k|    {
 3895|  6.75k|#if !SCN_DISABLE_LOCALE
 3896|  6.75k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3896:13): [True: 0, False: 6.75k]
  |  Branch (3896:31): [True: 0, False: 0]
  ------------------
 3897|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3897:22): [True: 0, False: 0]
  ------------------
 3898|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3899|      0|            }
 3900|      0|            return;
 3901|      0|        }
 3902|  6.75k|#endif
 3903|       |
 3904|  6.75k|        int mon = read_classic_unsigned_integer(1, 2);
 3905|  6.75k|        setter::set_mon(*this, m_tm, m_st, mon);
 3906|  6.75k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3926|  6.73k|    {
 3927|  6.73k|#if !SCN_DISABLE_LOCALE
 3928|  6.73k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3928:13): [True: 0, False: 6.73k]
  |  Branch (3928:31): [True: 0, False: 0]
  ------------------
 3929|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3929:22): [True: 0, False: 0]
  ------------------
 3930|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3931|      0|            }
 3932|      0|            return;
 3933|      0|        }
 3934|  6.73k|#endif
 3935|       |
 3936|  6.73k|        int mday = read_classic_unsigned_integer(1, 2);
 3937|  6.73k|        setter::set_mday(*this, m_tm, m_st, mday);
 3938|  6.73k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3244|  6.73k|    {
 3245|  6.73k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  6.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.66k, False: 74]
  |  |  |  Branch (1039:45): [True: 6.65k, False: 82]
  |  |  |  Branch (1039:45): [True: 8, False: 74]
  |  |  ------------------
  ------------------
 3246|  6.66k|            return h.set_error({scan_error::invalid_scanned_value,
 3247|  6.66k|                                "Invalid value for tm_mday"});
 3248|  6.66k|        }
 3249|     74|        t.tm_mday = d;
 3250|     74|        st.set_mday(h);
 3251|     74|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3941|  3.35k|    {
 3942|  3.35k|#if !SCN_DISABLE_LOCALE
 3943|  3.35k|        if (m_st.localized) {
  ------------------
  |  Branch (3943:13): [True: 0, False: 3.35k]
  ------------------
 3944|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3944:22): [True: 0, False: 0]
  ------------------
 3945|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3946|      0|            }
 3947|      0|            return;
 3948|      0|        }
 3949|  3.35k|#endif
 3950|       |
 3951|  3.35k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3952|  3.35k|            {"Sunday", 0},
 3953|  3.35k|            {"Monday", 1},
 3954|  3.35k|            {"Tuesday", 2},
 3955|  3.35k|            {"Wednesday", 3},
 3956|  3.35k|            {"Thursday", 4},
 3957|  3.35k|            {"Friday", 5},
 3958|  3.35k|            {"Saturday", 6},
 3959|  3.35k|        }};
 3960|  3.35k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3960:18): [True: 0, False: 3.35k]
  ------------------
 3961|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3962|      0|        }
 3963|  3.35k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3964|  3.35k|            {"Sun", 0},
 3965|  3.35k|            {"Mon", 1},
 3966|  3.35k|            {"Tue", 2},
 3967|  3.35k|            {"Wed", 3},
 3968|  3.35k|            {"Thu", 4},
 3969|  3.35k|            {"Fri", 5},
 3970|  3.35k|            {"Sat", 6},
 3971|  3.35k|        }};
 3972|  3.35k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3972:18): [True: 0, False: 3.35k]
  ------------------
 3973|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3974|      0|        }
 3975|  3.35k|        return set_error(
 3976|  3.35k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3977|  3.35k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  6.70k|    {
 4466|  6.70k|        auto start_it = m_begin;
 4467|  6.70k|        std::size_t options_available = N;
 4468|  6.70k|        std::size_t chars_consumed = 0;
 4469|  13.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.89k, False: 6.68k]
  ------------------
 4470|  13.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 6.89k, False: 0]
  ------------------
 4471|  6.89k|            std::size_t i = 0;
 4472|  6.89k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 20, False: 6.87k]
  ------------------
 4473|     20|                options_available = 0;
 4474|     20|                break;
 4475|     20|            }
 4476|  6.87k|            const auto ch = *m_begin;
 4477|  6.87k|            ++m_begin;
 4478|  53.9k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 47.1k, False: 6.87k]
  ------------------
 4479|  47.1k|                const auto cmp = static_cast<unsigned>(
 4480|  47.1k|                    ch ^ options[i].first[chars_consumed]);
 4481|  47.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 47.1k]
  ------------------
 4482|  47.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 46.9k, False: 200]
  |  Branch (4482:34): [True: 46.8k, False: 16]
  ------------------
 4483|  46.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  46.8k|                                options.end());
 4485|  46.8k|                    --options_available;
 4486|  46.8k|                    continue;
 4487|  46.8k|                }
 4488|    216|                ++i;
 4489|    216|            }
 4490|  6.87k|            ++chars_consumed;
 4491|  6.87k|        }
 4492|  6.70k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 6.70k, False: 0]
  ------------------
 4493|  6.70k|            m_begin = start_it;
 4494|  6.70k|            return std::nullopt;
 4495|  6.70k|        }
 4496|      0|        return options.front().second;
 4497|  6.70k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 4015|  13.1k|    {
 4016|  13.1k|#if !SCN_DISABLE_LOCALE
 4017|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4017:13): [True: 0, False: 13.1k]
  |  Branch (4017:31): [True: 0, False: 0]
  ------------------
 4018|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4018:22): [True: 0, False: 0]
  ------------------
 4019|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4020|      0|            }
 4021|      0|            return;
 4022|      0|        }
 4023|  13.1k|#endif
 4024|       |
 4025|  13.1k|        int hr = read_classic_unsigned_integer(1, 2);
 4026|  13.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4027|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3224|  13.1k|    {
 3225|  13.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.28k, False: 6.90k]
  |  |  |  Branch (1039:45): [True: 6.21k, False: 6.97k]
  |  |  |  Branch (1039:45): [True: 70, False: 6.90k]
  |  |  ------------------
  ------------------
 3226|  6.28k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3227|  6.28k|                                  "Invalid value for tm_hour"});
 3228|  6.28k|        }
 3229|  6.90k|        t.tm_hour = h;
 3230|  6.90k|        st.set_hour24(hdl);
 3231|  6.90k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 4043|  13.1k|    {
 4044|  13.1k|#if !SCN_DISABLE_LOCALE
 4045|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4045:13): [True: 0, False: 13.1k]
  |  Branch (4045:31): [True: 0, False: 0]
  ------------------
 4046|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4046:22): [True: 0, False: 0]
  ------------------
 4047|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4048|      0|            }
 4049|      0|            return;
 4050|      0|        }
 4051|  13.1k|#endif
 4052|       |
 4053|  13.1k|        int min = read_classic_unsigned_integer(1, 2);
 4054|  13.1k|        setter::set_min(*this, m_tm, m_st, min);
 4055|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3214|  13.1k|    {
 3215|  13.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.30k, False: 6.87k]
  |  |  |  Branch (1039:45): [True: 6.29k, False: 6.88k]
  |  |  |  Branch (1039:45): [True: 14, False: 6.87k]
  |  |  ------------------
  ------------------
 3216|  6.30k|            return h.set_error({scan_error::invalid_scanned_value,
 3217|  6.30k|                                "Invalid value for tm_min"});
 3218|  6.30k|        }
 3219|  6.87k|        t.tm_min = m;
 3220|  6.87k|        st.set_min(h);
 3221|  6.87k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 4057|  3.55k|    {
 4058|  3.55k|#if !SCN_DISABLE_LOCALE
 4059|  3.55k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4059:13): [True: 0, False: 3.55k]
  |  Branch (4059:31): [True: 0, False: 0]
  ------------------
 4060|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4060:22): [True: 0, False: 0]
  ------------------
 4061|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4062|      0|            }
 4063|      0|            return;
 4064|      0|        }
 4065|  3.55k|#endif
 4066|       |
 4067|  3.55k|        int sec = read_classic_unsigned_integer(1, 2);
 4068|  3.55k|        setter::set_sec(*this, m_tm, m_st, sec);
 4069|  3.55k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3204|  3.55k|    {
 3205|  3.55k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  3.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.32k, False: 230]
  |  |  |  Branch (1039:45): [True: 3.32k, False: 232]
  |  |  |  Branch (1039:45): [True: 2, False: 230]
  |  |  ------------------
  ------------------
 3206|  3.32k|            return h.set_error({scan_error::invalid_scanned_value,
 3207|  3.32k|                                "Invalid value for tm_sec"});
 3208|  3.32k|        }
 3209|    230|        t.tm_sec = s;
 3210|    230|        st.set_sec(h);
 3211|    230|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 4299|  3.35k|    {
 4300|       |        // %m/%d/%y
 4301|  3.35k|        constexpr CharT slash = '/';
 4302|  3.35k|        on_dec_month();
 4303|  3.35k|        on_text(&slash, &slash + 1);
 4304|  3.35k|        on_day_of_month();
 4305|  3.35k|        on_text(&slash, &slash + 1);
 4306|  3.35k|        on_short_year();
 4307|  3.35k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 4309|  3.36k|    {
 4310|       |        // %Y-%m-%d
 4311|  3.36k|        constexpr CharT dash = '-';
 4312|  3.36k|        on_full_year();
 4313|  3.36k|        on_text(&dash, &dash + 1);
 4314|  3.36k|        on_dec_month();
 4315|  3.36k|        on_text(&dash, &dash + 1);
 4316|  3.36k|        on_day_of_month();
 4317|  3.36k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 4341|  9.62k|    {
 4342|       |        // %H:%M
 4343|  9.62k|        constexpr CharT colon = ':';
 4344|  9.62k|        on_24_hour();
 4345|  9.62k|        on_text(&colon, &colon + 1);
 4346|  9.62k|        on_minute();
 4347|  9.62k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 4349|  3.55k|    {
 4350|       |        // %H:%M:%S
 4351|  3.55k|        constexpr CharT colon = ':';
 4352|  3.55k|        on_24_hour();
 4353|  3.55k|        on_text(&colon, &colon + 1);
 4354|  3.55k|        on_minute();
 4355|  3.55k|        on_text(&colon, &colon + 1);
 4356|  3.55k|        on_second();
 4357|  3.55k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 4388|  7.26k|    {
 4389|  7.26k|        m_st.verify(*this);
 4390|  7.26k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4390:13): [True: 0, False: 7.26k]
  |  Branch (4390:31): [True: 0, False: 0]
  ------------------
 4391|      0|            setter::handle_am_pm(m_tm, m_st);
 4392|      0|        }
 4393|  7.26k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4393:13): [True: 7.25k, False: 10]
  |  Branch (4393:37): [True: 10, False: 7.24k]
  |  Branch (4393:60): [True: 0, False: 7.24k]
  ------------------
 4394|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 4395|     10|        }
 4396|  7.26k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 4399|  61.3k|    {
 4400|  61.3k|        return m_error;
 4401|  61.3k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 4416|  7.26k|    {
 4417|  7.26k|        return m_begin;
 4418|  7.26k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4609|  31.0k|{
 4610|  31.0k|    {
 4611|  31.0k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 348, False: 30.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    348|    }                                                  \
  |  |  |  | 3957|  31.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4612|  30.6k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4613|  30.6k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.6k|    static_cast<    \
  |  | 1109|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4614|  30.6k|    }
 4615|       |
 4616|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4617|  30.6k|        ctx.range(), t, ctx.locale());
 4618|  30.6k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4619|  30.6k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.3k, False: 7.26k]
  |  |  ------------------
  ------------------
 4620|  23.3k|        return unexpected(e.error());
 4621|  23.3k|    }
 4622|  7.26k|    return r.get_iterator();
 4623|  30.6k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  93.0k|{
  250|  93.0k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  93.0k|        .transform_error(impl::make_eof_scan_error);
  252|  93.0k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 3753|  30.6k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.6k|    static_cast<    \
  |  | 1109|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3754|  30.6k|          m_begin(ranges::begin(m_range)),
 3755|  30.6k|          m_tm(t),
 3756|  30.6k|          m_loc(loc)
 3757|  30.6k|    {
 3758|  30.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 4404|  22.8k|    {
 4405|  22.8k|        set_error({scan_error::invalid_format_string, msg});
 4406|  22.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 4409|   100k|    {
 4410|   100k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4410:13): [True: 23.3k, False: 77.4k]
  ------------------
 4411|  23.3k|            m_error = unexpected(e);
 4412|  23.3k|        }
 4413|   100k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3761|  30.2k|    {
 3762|  37.4k|        while (beg != end) {
  ------------------
  |  Branch (3762:16): [True: 30.2k, False: 7.25k]
  ------------------
 3763|  30.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3763:17): [True: 118, False: 30.1k]
  ------------------
 3764|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3765|    118|            }
 3766|  30.1k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3766:17): [True: 22.8k, False: 7.25k]
  ------------------
 3767|  22.8k|                return on_error("Invalid literal character");
 3768|  22.8k|            }
 3769|  7.25k|            ++beg;
 3770|  7.25k|            ++m_begin;
 3771|  7.25k|        }
 3772|  30.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3791|  6.71k|    {
 3792|  6.71k|#if !SCN_DISABLE_LOCALE
 3793|  6.71k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3793:13): [True: 0, False: 6.71k]
  |  Branch (3793:31): [True: 0, False: 0]
  ------------------
 3794|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3794:22): [True: 0, False: 0]
  ------------------
 3795|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3796|      0|            }
 3797|      0|            return;
 3798|      0|        }
 3799|  6.71k|#endif
 3800|       |
 3801|  6.71k|        int yr = read_classic_unsigned_integer(4, 4);
 3802|  6.71k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3803|  6.71k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3264|  6.71k|    {
 3265|  6.71k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  6.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6.71k]
  |  |  ------------------
  ------------------
 3266|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3267|      0|                                "Invalid value for tm_year"});
 3268|      0|        }
 3269|  6.71k|        t.tm_year = y - 1900;
 3270|  6.71k|        st.set_full_year(h);
 3271|  6.71k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 4427|  53.4k|    {
 4428|  53.4k|        int digits_read = 0;
 4429|  53.4k|        int accumulator = 0;
 4430|  68.9k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4430:16): [True: 68.6k, False: 260]
  ------------------
 4431|  68.6k|            const auto ch = *m_begin;
 4432|  68.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4432:17): [True: 29.9k, False: 38.7k]
  |  Branch (4432:36): [True: 20.8k, False: 17.8k]
  ------------------
 4433|  50.7k|                break;
 4434|  50.7k|            }
 4435|  17.8k|            ++m_begin;
 4436|  17.8k|            ++digits_read;
 4437|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4438|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4438:17): [True: 2.43k, False: 15.4k]
  ------------------
 4439|  2.43k|                break;
 4440|  2.43k|            }
 4441|  17.8k|        }
 4442|  53.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4442:13): [True: 38.8k, False: 14.6k]
  ------------------
 4443|  38.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4444|  38.8k|                                 "Too few integer digits"});
 4445|  38.8k|            return -1;
 4446|  38.8k|        }
 4447|  14.6k|        return accumulator;
 4448|  53.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3805|  3.35k|    {
 3806|  3.35k|#if !SCN_DISABLE_LOCALE
 3807|  3.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3807:13): [True: 0, False: 3.35k]
  |  Branch (3807:31): [True: 0, False: 0]
  ------------------
 3808|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3808:22): [True: 0, False: 0]
  ------------------
 3809|      0|                setter::set_short_year(*this, m_tm, m_st,
 3810|      0|                                       (t->tm_year + 1900) % 100);
 3811|      0|            }
 3812|      0|            return;
 3813|      0|        }
 3814|  3.35k|#endif
 3815|       |
 3816|  3.35k|        int yr = read_classic_unsigned_integer(2, 2);
 3817|  3.35k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3818|  3.35k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3281|  3.35k|    {
 3282|  3.35k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  3.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.34k, False: 18]
  |  |  |  Branch (1039:45): [True: 3.34k, False: 18]
  |  |  |  Branch (1039:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 3283|  3.34k|            return h.set_error({scan_error::invalid_scanned_value,
 3284|  3.34k|                                "Invalid value for tm_year"});
 3285|  3.34k|        }
 3286|     18|        st.short_year_value = y;
 3287|     18|        st.set_short_year(h);
 3288|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3848|  4.06k|    {
 3849|  4.06k|#if !SCN_DISABLE_FAST_FLOAT
 3850|  4.06k|        if (m_st.localized) {
  ------------------
  |  Branch (3850:13): [True: 0, False: 4.06k]
  ------------------
 3851|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3851:22): [True: 0, False: 0]
  ------------------
 3852|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3853|      0|            }
 3854|      0|            return;
 3855|      0|        }
 3856|  4.06k|#endif
 3857|       |
 3858|  4.06k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3859|  4.06k|            {"January", 1},
 3860|  4.06k|            {"February", 2},
 3861|  4.06k|            {"March", 3},
 3862|  4.06k|            {"April", 4},
 3863|  4.06k|            {"May", 5},
 3864|  4.06k|            {"June", 6},
 3865|  4.06k|            {"July", 7},
 3866|  4.06k|            {"August", 8},
 3867|  4.06k|            {"September", 9},
 3868|  4.06k|            {"October", 10},
 3869|  4.06k|            {"November", 11},
 3870|  4.06k|            {"December", 12},
 3871|  4.06k|        }};
 3872|  4.06k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3872:18): [True: 22, False: 4.04k]
  ------------------
 3873|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3874|     22|        }
 3875|  4.04k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3876|  4.04k|            {"Jan", 1},
 3877|  4.04k|            {"Feb", 2},
 3878|  4.04k|            {"Mar", 3},
 3879|  4.04k|            {"Apr", 4},
 3880|  4.04k|            {"Jun", 6},
 3881|  4.04k|            {"Jul", 7},
 3882|  4.04k|            {"Aug", 8},
 3883|  4.04k|            {"Sep", 9},
 3884|  4.04k|            {"Oct", 10},
 3885|  4.04k|            {"Nov", 11},
 3886|  4.04k|            {"Dec", 12},
 3887|  4.04k|        }};
 3888|  4.04k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 706, False: 3.33k]
  ------------------
 3889|    706|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|    706|        }
 3891|  3.33k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3892|  3.33k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3254|  7.48k|    {
 3255|  7.48k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  8.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.40k, False: 1.07k]
  |  |  |  Branch (1039:45): [True: 6.35k, False: 1.12k]
  |  |  |  Branch (1039:45): [True: 50, False: 1.07k]
  |  |  ------------------
  ------------------
 3256|  6.40k|            return h.set_error({scan_error::invalid_scanned_value,
 3257|  6.40k|                                "Invalid value for tm_mon"});
 3258|  6.40k|        }
 3259|  1.07k|        t.tm_mon = m - 1;
 3260|  1.07k|        st.set_mon(h);
 3261|  1.07k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  4.06k|    {
 4466|  4.06k|        auto start_it = m_begin;
 4467|  4.06k|        std::size_t options_available = N;
 4468|  4.06k|        std::size_t chars_consumed = 0;
 4469|  10.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.33k, False: 3.99k]
  ------------------
 4470|  10.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 6.31k, False: 22]
  ------------------
 4471|  6.31k|            std::size_t i = 0;
 4472|  6.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 42, False: 6.27k]
  ------------------
 4473|     42|                options_available = 0;
 4474|     42|                break;
 4475|     42|            }
 4476|  6.27k|            const auto ch = *m_begin;
 4477|  6.27k|            ++m_begin;
 4478|  58.7k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 52.4k, False: 6.27k]
  ------------------
 4479|  52.4k|                const auto cmp = static_cast<unsigned>(
 4480|  52.4k|                    ch ^ options[i].first[chars_consumed]);
 4481|  52.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 52.4k]
  ------------------
 4482|  52.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 49.5k, False: 2.95k]
  |  Branch (4482:34): [True: 48.6k, False: 840]
  ------------------
 4483|  48.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  48.6k|                                options.end());
 4485|  48.6k|                    --options_available;
 4486|  48.6k|                    continue;
 4487|  48.6k|                }
 4488|  3.79k|                ++i;
 4489|  3.79k|            }
 4490|  6.27k|            ++chars_consumed;
 4491|  6.27k|        }
 4492|  4.06k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 4.04k, False: 22]
  ------------------
 4493|  4.04k|            m_begin = start_it;
 4494|  4.04k|            return std::nullopt;
 4495|  4.04k|        }
 4496|     22|        return options.front().second;
 4497|  4.06k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  4.04k|    {
 4466|  4.04k|        auto start_it = m_begin;
 4467|  4.04k|        std::size_t options_available = N;
 4468|  4.04k|        std::size_t chars_consumed = 0;
 4469|  9.55k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.24k, False: 3.30k]
  ------------------
 4470|  9.55k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 5.54k, False: 706]
  ------------------
 4471|  5.54k|            std::size_t i = 0;
 4472|  5.54k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 30, False: 5.51k]
  ------------------
 4473|     30|                options_available = 0;
 4474|     30|                break;
 4475|     30|            }
 4476|  5.51k|            const auto ch = *m_begin;
 4477|  5.51k|            ++m_begin;
 4478|  51.4k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 45.9k, False: 5.51k]
  ------------------
 4479|  45.9k|                const auto cmp = static_cast<unsigned>(
 4480|  45.9k|                    ch ^ options[i].first[chars_consumed]);
 4481|  45.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 45.9k]
  ------------------
 4482|  45.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 44.4k, False: 1.45k]
  |  Branch (4482:34): [True: 43.6k, False: 788]
  ------------------
 4483|  43.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  43.6k|                                options.end());
 4485|  43.6k|                    --options_available;
 4486|  43.6k|                    continue;
 4487|  43.6k|                }
 4488|  2.24k|                ++i;
 4489|  2.24k|            }
 4490|  5.51k|            ++chars_consumed;
 4491|  5.51k|        }
 4492|  4.04k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 3.33k, False: 706]
  ------------------
 4493|  3.33k|            m_begin = start_it;
 4494|  3.33k|            return std::nullopt;
 4495|  3.33k|        }
 4496|    706|        return options.front().second;
 4497|  4.04k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3894|  6.75k|    {
 3895|  6.75k|#if !SCN_DISABLE_LOCALE
 3896|  6.75k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3896:13): [True: 0, False: 6.75k]
  |  Branch (3896:31): [True: 0, False: 0]
  ------------------
 3897|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3897:22): [True: 0, False: 0]
  ------------------
 3898|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3899|      0|            }
 3900|      0|            return;
 3901|      0|        }
 3902|  6.75k|#endif
 3903|       |
 3904|  6.75k|        int mon = read_classic_unsigned_integer(1, 2);
 3905|  6.75k|        setter::set_mon(*this, m_tm, m_st, mon);
 3906|  6.75k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3926|  6.73k|    {
 3927|  6.73k|#if !SCN_DISABLE_LOCALE
 3928|  6.73k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3928:13): [True: 0, False: 6.73k]
  |  Branch (3928:31): [True: 0, False: 0]
  ------------------
 3929|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3929:22): [True: 0, False: 0]
  ------------------
 3930|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3931|      0|            }
 3932|      0|            return;
 3933|      0|        }
 3934|  6.73k|#endif
 3935|       |
 3936|  6.73k|        int mday = read_classic_unsigned_integer(1, 2);
 3937|  6.73k|        setter::set_mday(*this, m_tm, m_st, mday);
 3938|  6.73k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3244|  6.73k|    {
 3245|  6.73k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  6.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.66k, False: 74]
  |  |  |  Branch (1039:45): [True: 6.65k, False: 82]
  |  |  |  Branch (1039:45): [True: 8, False: 74]
  |  |  ------------------
  ------------------
 3246|  6.66k|            return h.set_error({scan_error::invalid_scanned_value,
 3247|  6.66k|                                "Invalid value for tm_mday"});
 3248|  6.66k|        }
 3249|     74|        t.tm_mday = d;
 3250|     74|        st.set_mday(h);
 3251|     74|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3941|  3.35k|    {
 3942|  3.35k|#if !SCN_DISABLE_LOCALE
 3943|  3.35k|        if (m_st.localized) {
  ------------------
  |  Branch (3943:13): [True: 0, False: 3.35k]
  ------------------
 3944|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3944:22): [True: 0, False: 0]
  ------------------
 3945|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3946|      0|            }
 3947|      0|            return;
 3948|      0|        }
 3949|  3.35k|#endif
 3950|       |
 3951|  3.35k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3952|  3.35k|            {"Sunday", 0},
 3953|  3.35k|            {"Monday", 1},
 3954|  3.35k|            {"Tuesday", 2},
 3955|  3.35k|            {"Wednesday", 3},
 3956|  3.35k|            {"Thursday", 4},
 3957|  3.35k|            {"Friday", 5},
 3958|  3.35k|            {"Saturday", 6},
 3959|  3.35k|        }};
 3960|  3.35k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3960:18): [True: 0, False: 3.35k]
  ------------------
 3961|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3962|      0|        }
 3963|  3.35k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3964|  3.35k|            {"Sun", 0},
 3965|  3.35k|            {"Mon", 1},
 3966|  3.35k|            {"Tue", 2},
 3967|  3.35k|            {"Wed", 3},
 3968|  3.35k|            {"Thu", 4},
 3969|  3.35k|            {"Fri", 5},
 3970|  3.35k|            {"Sat", 6},
 3971|  3.35k|        }};
 3972|  3.35k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3972:18): [True: 0, False: 3.35k]
  ------------------
 3973|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3974|      0|        }
 3975|  3.35k|        return set_error(
 3976|  3.35k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3977|  3.35k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  6.70k|    {
 4466|  6.70k|        auto start_it = m_begin;
 4467|  6.70k|        std::size_t options_available = N;
 4468|  6.70k|        std::size_t chars_consumed = 0;
 4469|  13.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.89k, False: 6.68k]
  ------------------
 4470|  13.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 6.89k, False: 0]
  ------------------
 4471|  6.89k|            std::size_t i = 0;
 4472|  6.89k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 20, False: 6.87k]
  ------------------
 4473|     20|                options_available = 0;
 4474|     20|                break;
 4475|     20|            }
 4476|  6.87k|            const auto ch = *m_begin;
 4477|  6.87k|            ++m_begin;
 4478|  53.9k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 47.1k, False: 6.87k]
  ------------------
 4479|  47.1k|                const auto cmp = static_cast<unsigned>(
 4480|  47.1k|                    ch ^ options[i].first[chars_consumed]);
 4481|  47.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 47.1k]
  ------------------
 4482|  47.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 46.9k, False: 200]
  |  Branch (4482:34): [True: 46.8k, False: 16]
  ------------------
 4483|  46.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  46.8k|                                options.end());
 4485|  46.8k|                    --options_available;
 4486|  46.8k|                    continue;
 4487|  46.8k|                }
 4488|    216|                ++i;
 4489|    216|            }
 4490|  6.87k|            ++chars_consumed;
 4491|  6.87k|        }
 4492|  6.70k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 6.70k, False: 0]
  ------------------
 4493|  6.70k|            m_begin = start_it;
 4494|  6.70k|            return std::nullopt;
 4495|  6.70k|        }
 4496|      0|        return options.front().second;
 4497|  6.70k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 4015|  13.1k|    {
 4016|  13.1k|#if !SCN_DISABLE_LOCALE
 4017|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4017:13): [True: 0, False: 13.1k]
  |  Branch (4017:31): [True: 0, False: 0]
  ------------------
 4018|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4018:22): [True: 0, False: 0]
  ------------------
 4019|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4020|      0|            }
 4021|      0|            return;
 4022|      0|        }
 4023|  13.1k|#endif
 4024|       |
 4025|  13.1k|        int hr = read_classic_unsigned_integer(1, 2);
 4026|  13.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4027|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3224|  13.1k|    {
 3225|  13.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.28k, False: 6.90k]
  |  |  |  Branch (1039:45): [True: 6.21k, False: 6.97k]
  |  |  |  Branch (1039:45): [True: 70, False: 6.90k]
  |  |  ------------------
  ------------------
 3226|  6.28k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3227|  6.28k|                                  "Invalid value for tm_hour"});
 3228|  6.28k|        }
 3229|  6.90k|        t.tm_hour = h;
 3230|  6.90k|        st.set_hour24(hdl);
 3231|  6.90k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 4043|  13.1k|    {
 4044|  13.1k|#if !SCN_DISABLE_LOCALE
 4045|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4045:13): [True: 0, False: 13.1k]
  |  Branch (4045:31): [True: 0, False: 0]
  ------------------
 4046|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4046:22): [True: 0, False: 0]
  ------------------
 4047|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4048|      0|            }
 4049|      0|            return;
 4050|      0|        }
 4051|  13.1k|#endif
 4052|       |
 4053|  13.1k|        int min = read_classic_unsigned_integer(1, 2);
 4054|  13.1k|        setter::set_min(*this, m_tm, m_st, min);
 4055|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3214|  13.1k|    {
 3215|  13.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.30k, False: 6.87k]
  |  |  |  Branch (1039:45): [True: 6.29k, False: 6.88k]
  |  |  |  Branch (1039:45): [True: 14, False: 6.87k]
  |  |  ------------------
  ------------------
 3216|  6.30k|            return h.set_error({scan_error::invalid_scanned_value,
 3217|  6.30k|                                "Invalid value for tm_min"});
 3218|  6.30k|        }
 3219|  6.87k|        t.tm_min = m;
 3220|  6.87k|        st.set_min(h);
 3221|  6.87k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 4057|  3.55k|    {
 4058|  3.55k|#if !SCN_DISABLE_LOCALE
 4059|  3.55k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4059:13): [True: 0, False: 3.55k]
  |  Branch (4059:31): [True: 0, False: 0]
  ------------------
 4060|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4060:22): [True: 0, False: 0]
  ------------------
 4061|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4062|      0|            }
 4063|      0|            return;
 4064|      0|        }
 4065|  3.55k|#endif
 4066|       |
 4067|  3.55k|        int sec = read_classic_unsigned_integer(1, 2);
 4068|  3.55k|        setter::set_sec(*this, m_tm, m_st, sec);
 4069|  3.55k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3204|  3.55k|    {
 3205|  3.55k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  3.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.32k, False: 230]
  |  |  |  Branch (1039:45): [True: 3.32k, False: 232]
  |  |  |  Branch (1039:45): [True: 2, False: 230]
  |  |  ------------------
  ------------------
 3206|  3.32k|            return h.set_error({scan_error::invalid_scanned_value,
 3207|  3.32k|                                "Invalid value for tm_sec"});
 3208|  3.32k|        }
 3209|    230|        t.tm_sec = s;
 3210|    230|        st.set_sec(h);
 3211|    230|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 4299|  3.35k|    {
 4300|       |        // %m/%d/%y
 4301|  3.35k|        constexpr CharT slash = '/';
 4302|  3.35k|        on_dec_month();
 4303|  3.35k|        on_text(&slash, &slash + 1);
 4304|  3.35k|        on_day_of_month();
 4305|  3.35k|        on_text(&slash, &slash + 1);
 4306|  3.35k|        on_short_year();
 4307|  3.35k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 4309|  3.36k|    {
 4310|       |        // %Y-%m-%d
 4311|  3.36k|        constexpr CharT dash = '-';
 4312|  3.36k|        on_full_year();
 4313|  3.36k|        on_text(&dash, &dash + 1);
 4314|  3.36k|        on_dec_month();
 4315|  3.36k|        on_text(&dash, &dash + 1);
 4316|  3.36k|        on_day_of_month();
 4317|  3.36k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 4341|  9.62k|    {
 4342|       |        // %H:%M
 4343|  9.62k|        constexpr CharT colon = ':';
 4344|  9.62k|        on_24_hour();
 4345|  9.62k|        on_text(&colon, &colon + 1);
 4346|  9.62k|        on_minute();
 4347|  9.62k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 4349|  3.55k|    {
 4350|       |        // %H:%M:%S
 4351|  3.55k|        constexpr CharT colon = ':';
 4352|  3.55k|        on_24_hour();
 4353|  3.55k|        on_text(&colon, &colon + 1);
 4354|  3.55k|        on_minute();
 4355|  3.55k|        on_text(&colon, &colon + 1);
 4356|  3.55k|        on_second();
 4357|  3.55k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 4388|  7.26k|    {
 4389|  7.26k|        m_st.verify(*this);
 4390|  7.26k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4390:13): [True: 0, False: 7.26k]
  |  Branch (4390:31): [True: 0, False: 0]
  ------------------
 4391|      0|            setter::handle_am_pm(m_tm, m_st);
 4392|      0|        }
 4393|  7.26k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4393:13): [True: 7.25k, False: 10]
  |  Branch (4393:37): [True: 10, False: 7.24k]
  |  Branch (4393:60): [True: 0, False: 7.24k]
  ------------------
 4394|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 4395|     10|        }
 4396|  7.26k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 4399|  61.3k|    {
 4400|  61.3k|        return m_error;
 4401|  61.3k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 4416|  7.26k|    {
 4417|  7.26k|        return m_begin;
 4418|  7.26k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4609|  31.0k|{
 4610|  31.0k|    {
 4611|  31.0k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 348, False: 30.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    348|    }                                                  \
  |  |  |  | 3957|  31.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4612|  30.6k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4613|  30.6k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.6k|    static_cast<    \
  |  | 1109|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4614|  30.6k|    }
 4615|       |
 4616|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4617|  30.6k|        ctx.range(), t, ctx.locale());
 4618|  30.6k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4619|  30.6k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.3k, False: 7.26k]
  |  |  ------------------
  ------------------
 4620|  23.3k|        return unexpected(e.error());
 4621|  23.3k|    }
 4622|  7.26k|    return r.get_iterator();
 4623|  30.6k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 3753|  30.6k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.6k|    static_cast<    \
  |  | 1109|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3754|  30.6k|          m_begin(ranges::begin(m_range)),
 3755|  30.6k|          m_tm(t),
 3756|  30.6k|          m_loc(loc)
 3757|  30.6k|    {
 3758|  30.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 4404|  22.8k|    {
 4405|  22.8k|        set_error({scan_error::invalid_format_string, msg});
 4406|  22.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 4409|   100k|    {
 4410|   100k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4410:13): [True: 23.3k, False: 77.4k]
  ------------------
 4411|  23.3k|            m_error = unexpected(e);
 4412|  23.3k|        }
 4413|   100k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3761|  30.2k|    {
 3762|  37.4k|        while (beg != end) {
  ------------------
  |  Branch (3762:16): [True: 30.2k, False: 7.25k]
  ------------------
 3763|  30.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3763:17): [True: 118, False: 30.1k]
  ------------------
 3764|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3765|    118|            }
 3766|  30.1k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3766:17): [True: 22.8k, False: 7.25k]
  ------------------
 3767|  22.8k|                return on_error("Invalid literal character");
 3768|  22.8k|            }
 3769|  7.25k|            ++beg;
 3770|  7.25k|            ++m_begin;
 3771|  7.25k|        }
 3772|  30.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3791|  6.71k|    {
 3792|  6.71k|#if !SCN_DISABLE_LOCALE
 3793|  6.71k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3793:13): [True: 0, False: 6.71k]
  |  Branch (3793:31): [True: 0, False: 0]
  ------------------
 3794|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3794:22): [True: 0, False: 0]
  ------------------
 3795|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3796|      0|            }
 3797|      0|            return;
 3798|      0|        }
 3799|  6.71k|#endif
 3800|       |
 3801|  6.71k|        int yr = read_classic_unsigned_integer(4, 4);
 3802|  6.71k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3803|  6.71k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3264|  6.71k|    {
 3265|  6.71k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  6.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6.71k]
  |  |  ------------------
  ------------------
 3266|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3267|      0|                                "Invalid value for tm_year"});
 3268|      0|        }
 3269|  6.71k|        t.tm_year = y - 1900;
 3270|  6.71k|        st.set_full_year(h);
 3271|  6.71k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 4427|  53.4k|    {
 4428|  53.4k|        int digits_read = 0;
 4429|  53.4k|        int accumulator = 0;
 4430|  68.9k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4430:16): [True: 68.6k, False: 260]
  ------------------
 4431|  68.6k|            const auto ch = *m_begin;
 4432|  68.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4432:17): [True: 29.9k, False: 38.7k]
  |  Branch (4432:36): [True: 20.8k, False: 17.8k]
  ------------------
 4433|  50.7k|                break;
 4434|  50.7k|            }
 4435|  17.8k|            ++m_begin;
 4436|  17.8k|            ++digits_read;
 4437|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4438|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4438:17): [True: 2.43k, False: 15.4k]
  ------------------
 4439|  2.43k|                break;
 4440|  2.43k|            }
 4441|  17.8k|        }
 4442|  53.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4442:13): [True: 38.8k, False: 14.6k]
  ------------------
 4443|  38.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4444|  38.8k|                                 "Too few integer digits"});
 4445|  38.8k|            return -1;
 4446|  38.8k|        }
 4447|  14.6k|        return accumulator;
 4448|  53.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3805|  3.35k|    {
 3806|  3.35k|#if !SCN_DISABLE_LOCALE
 3807|  3.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3807:13): [True: 0, False: 3.35k]
  |  Branch (3807:31): [True: 0, False: 0]
  ------------------
 3808|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3808:22): [True: 0, False: 0]
  ------------------
 3809|      0|                setter::set_short_year(*this, m_tm, m_st,
 3810|      0|                                       (t->tm_year + 1900) % 100);
 3811|      0|            }
 3812|      0|            return;
 3813|      0|        }
 3814|  3.35k|#endif
 3815|       |
 3816|  3.35k|        int yr = read_classic_unsigned_integer(2, 2);
 3817|  3.35k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3818|  3.35k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3281|  3.35k|    {
 3282|  3.35k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  3.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.34k, False: 18]
  |  |  |  Branch (1039:45): [True: 3.34k, False: 18]
  |  |  |  Branch (1039:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 3283|  3.34k|            return h.set_error({scan_error::invalid_scanned_value,
 3284|  3.34k|                                "Invalid value for tm_year"});
 3285|  3.34k|        }
 3286|     18|        st.short_year_value = y;
 3287|     18|        st.set_short_year(h);
 3288|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3848|  4.06k|    {
 3849|  4.06k|#if !SCN_DISABLE_FAST_FLOAT
 3850|  4.06k|        if (m_st.localized) {
  ------------------
  |  Branch (3850:13): [True: 0, False: 4.06k]
  ------------------
 3851|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3851:22): [True: 0, False: 0]
  ------------------
 3852|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3853|      0|            }
 3854|      0|            return;
 3855|      0|        }
 3856|  4.06k|#endif
 3857|       |
 3858|  4.06k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3859|  4.06k|            {"January", 1},
 3860|  4.06k|            {"February", 2},
 3861|  4.06k|            {"March", 3},
 3862|  4.06k|            {"April", 4},
 3863|  4.06k|            {"May", 5},
 3864|  4.06k|            {"June", 6},
 3865|  4.06k|            {"July", 7},
 3866|  4.06k|            {"August", 8},
 3867|  4.06k|            {"September", 9},
 3868|  4.06k|            {"October", 10},
 3869|  4.06k|            {"November", 11},
 3870|  4.06k|            {"December", 12},
 3871|  4.06k|        }};
 3872|  4.06k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3872:18): [True: 22, False: 4.04k]
  ------------------
 3873|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3874|     22|        }
 3875|  4.04k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3876|  4.04k|            {"Jan", 1},
 3877|  4.04k|            {"Feb", 2},
 3878|  4.04k|            {"Mar", 3},
 3879|  4.04k|            {"Apr", 4},
 3880|  4.04k|            {"Jun", 6},
 3881|  4.04k|            {"Jul", 7},
 3882|  4.04k|            {"Aug", 8},
 3883|  4.04k|            {"Sep", 9},
 3884|  4.04k|            {"Oct", 10},
 3885|  4.04k|            {"Nov", 11},
 3886|  4.04k|            {"Dec", 12},
 3887|  4.04k|        }};
 3888|  4.04k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 706, False: 3.33k]
  ------------------
 3889|    706|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|    706|        }
 3891|  3.33k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3892|  3.33k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3254|  7.48k|    {
 3255|  7.48k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  8.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.40k, False: 1.07k]
  |  |  |  Branch (1039:45): [True: 6.35k, False: 1.12k]
  |  |  |  Branch (1039:45): [True: 50, False: 1.07k]
  |  |  ------------------
  ------------------
 3256|  6.40k|            return h.set_error({scan_error::invalid_scanned_value,
 3257|  6.40k|                                "Invalid value for tm_mon"});
 3258|  6.40k|        }
 3259|  1.07k|        t.tm_mon = m - 1;
 3260|  1.07k|        st.set_mon(h);
 3261|  1.07k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  4.06k|    {
 4466|  4.06k|        auto start_it = m_begin;
 4467|  4.06k|        std::size_t options_available = N;
 4468|  4.06k|        std::size_t chars_consumed = 0;
 4469|  10.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.33k, False: 3.99k]
  ------------------
 4470|  10.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 6.31k, False: 22]
  ------------------
 4471|  6.31k|            std::size_t i = 0;
 4472|  6.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 42, False: 6.27k]
  ------------------
 4473|     42|                options_available = 0;
 4474|     42|                break;
 4475|     42|            }
 4476|  6.27k|            const auto ch = *m_begin;
 4477|  6.27k|            ++m_begin;
 4478|  58.7k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 52.4k, False: 6.27k]
  ------------------
 4479|  52.4k|                const auto cmp = static_cast<unsigned>(
 4480|  52.4k|                    ch ^ options[i].first[chars_consumed]);
 4481|  52.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 52.4k]
  ------------------
 4482|  52.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 49.5k, False: 2.95k]
  |  Branch (4482:34): [True: 48.6k, False: 840]
  ------------------
 4483|  48.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  48.6k|                                options.end());
 4485|  48.6k|                    --options_available;
 4486|  48.6k|                    continue;
 4487|  48.6k|                }
 4488|  3.79k|                ++i;
 4489|  3.79k|            }
 4490|  6.27k|            ++chars_consumed;
 4491|  6.27k|        }
 4492|  4.06k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 4.04k, False: 22]
  ------------------
 4493|  4.04k|            m_begin = start_it;
 4494|  4.04k|            return std::nullopt;
 4495|  4.04k|        }
 4496|     22|        return options.front().second;
 4497|  4.06k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  4.04k|    {
 4466|  4.04k|        auto start_it = m_begin;
 4467|  4.04k|        std::size_t options_available = N;
 4468|  4.04k|        std::size_t chars_consumed = 0;
 4469|  9.55k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.24k, False: 3.30k]
  ------------------
 4470|  9.55k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 5.54k, False: 706]
  ------------------
 4471|  5.54k|            std::size_t i = 0;
 4472|  5.54k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 30, False: 5.51k]
  ------------------
 4473|     30|                options_available = 0;
 4474|     30|                break;
 4475|     30|            }
 4476|  5.51k|            const auto ch = *m_begin;
 4477|  5.51k|            ++m_begin;
 4478|  51.4k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 45.9k, False: 5.51k]
  ------------------
 4479|  45.9k|                const auto cmp = static_cast<unsigned>(
 4480|  45.9k|                    ch ^ options[i].first[chars_consumed]);
 4481|  45.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 45.9k]
  ------------------
 4482|  45.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 44.4k, False: 1.45k]
  |  Branch (4482:34): [True: 43.6k, False: 788]
  ------------------
 4483|  43.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  43.6k|                                options.end());
 4485|  43.6k|                    --options_available;
 4486|  43.6k|                    continue;
 4487|  43.6k|                }
 4488|  2.24k|                ++i;
 4489|  2.24k|            }
 4490|  5.51k|            ++chars_consumed;
 4491|  5.51k|        }
 4492|  4.04k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 3.33k, False: 706]
  ------------------
 4493|  3.33k|            m_begin = start_it;
 4494|  3.33k|            return std::nullopt;
 4495|  3.33k|        }
 4496|    706|        return options.front().second;
 4497|  4.04k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3894|  6.75k|    {
 3895|  6.75k|#if !SCN_DISABLE_LOCALE
 3896|  6.75k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3896:13): [True: 0, False: 6.75k]
  |  Branch (3896:31): [True: 0, False: 0]
  ------------------
 3897|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3897:22): [True: 0, False: 0]
  ------------------
 3898|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3899|      0|            }
 3900|      0|            return;
 3901|      0|        }
 3902|  6.75k|#endif
 3903|       |
 3904|  6.75k|        int mon = read_classic_unsigned_integer(1, 2);
 3905|  6.75k|        setter::set_mon(*this, m_tm, m_st, mon);
 3906|  6.75k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3926|  6.73k|    {
 3927|  6.73k|#if !SCN_DISABLE_LOCALE
 3928|  6.73k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3928:13): [True: 0, False: 6.73k]
  |  Branch (3928:31): [True: 0, False: 0]
  ------------------
 3929|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3929:22): [True: 0, False: 0]
  ------------------
 3930|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3931|      0|            }
 3932|      0|            return;
 3933|      0|        }
 3934|  6.73k|#endif
 3935|       |
 3936|  6.73k|        int mday = read_classic_unsigned_integer(1, 2);
 3937|  6.73k|        setter::set_mday(*this, m_tm, m_st, mday);
 3938|  6.73k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3244|  6.73k|    {
 3245|  6.73k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  6.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.66k, False: 74]
  |  |  |  Branch (1039:45): [True: 6.65k, False: 82]
  |  |  |  Branch (1039:45): [True: 8, False: 74]
  |  |  ------------------
  ------------------
 3246|  6.66k|            return h.set_error({scan_error::invalid_scanned_value,
 3247|  6.66k|                                "Invalid value for tm_mday"});
 3248|  6.66k|        }
 3249|     74|        t.tm_mday = d;
 3250|     74|        st.set_mday(h);
 3251|     74|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3941|  3.35k|    {
 3942|  3.35k|#if !SCN_DISABLE_LOCALE
 3943|  3.35k|        if (m_st.localized) {
  ------------------
  |  Branch (3943:13): [True: 0, False: 3.35k]
  ------------------
 3944|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3944:22): [True: 0, False: 0]
  ------------------
 3945|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3946|      0|            }
 3947|      0|            return;
 3948|      0|        }
 3949|  3.35k|#endif
 3950|       |
 3951|  3.35k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3952|  3.35k|            {"Sunday", 0},
 3953|  3.35k|            {"Monday", 1},
 3954|  3.35k|            {"Tuesday", 2},
 3955|  3.35k|            {"Wednesday", 3},
 3956|  3.35k|            {"Thursday", 4},
 3957|  3.35k|            {"Friday", 5},
 3958|  3.35k|            {"Saturday", 6},
 3959|  3.35k|        }};
 3960|  3.35k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3960:18): [True: 0, False: 3.35k]
  ------------------
 3961|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3962|      0|        }
 3963|  3.35k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3964|  3.35k|            {"Sun", 0},
 3965|  3.35k|            {"Mon", 1},
 3966|  3.35k|            {"Tue", 2},
 3967|  3.35k|            {"Wed", 3},
 3968|  3.35k|            {"Thu", 4},
 3969|  3.35k|            {"Fri", 5},
 3970|  3.35k|            {"Sat", 6},
 3971|  3.35k|        }};
 3972|  3.35k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3972:18): [True: 0, False: 3.35k]
  ------------------
 3973|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3974|      0|        }
 3975|  3.35k|        return set_error(
 3976|  3.35k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3977|  3.35k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  6.70k|    {
 4466|  6.70k|        auto start_it = m_begin;
 4467|  6.70k|        std::size_t options_available = N;
 4468|  6.70k|        std::size_t chars_consumed = 0;
 4469|  13.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.89k, False: 6.68k]
  ------------------
 4470|  13.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 6.89k, False: 0]
  ------------------
 4471|  6.89k|            std::size_t i = 0;
 4472|  6.89k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 20, False: 6.87k]
  ------------------
 4473|     20|                options_available = 0;
 4474|     20|                break;
 4475|     20|            }
 4476|  6.87k|            const auto ch = *m_begin;
 4477|  6.87k|            ++m_begin;
 4478|  53.9k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 47.1k, False: 6.87k]
  ------------------
 4479|  47.1k|                const auto cmp = static_cast<unsigned>(
 4480|  47.1k|                    ch ^ options[i].first[chars_consumed]);
 4481|  47.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 47.1k]
  ------------------
 4482|  47.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 46.9k, False: 200]
  |  Branch (4482:34): [True: 46.8k, False: 16]
  ------------------
 4483|  46.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  46.8k|                                options.end());
 4485|  46.8k|                    --options_available;
 4486|  46.8k|                    continue;
 4487|  46.8k|                }
 4488|    216|                ++i;
 4489|    216|            }
 4490|  6.87k|            ++chars_consumed;
 4491|  6.87k|        }
 4492|  6.70k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 6.70k, False: 0]
  ------------------
 4493|  6.70k|            m_begin = start_it;
 4494|  6.70k|            return std::nullopt;
 4495|  6.70k|        }
 4496|      0|        return options.front().second;
 4497|  6.70k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 4015|  13.1k|    {
 4016|  13.1k|#if !SCN_DISABLE_LOCALE
 4017|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4017:13): [True: 0, False: 13.1k]
  |  Branch (4017:31): [True: 0, False: 0]
  ------------------
 4018|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4018:22): [True: 0, False: 0]
  ------------------
 4019|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4020|      0|            }
 4021|      0|            return;
 4022|      0|        }
 4023|  13.1k|#endif
 4024|       |
 4025|  13.1k|        int hr = read_classic_unsigned_integer(1, 2);
 4026|  13.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4027|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3224|  13.1k|    {
 3225|  13.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.28k, False: 6.90k]
  |  |  |  Branch (1039:45): [True: 6.21k, False: 6.97k]
  |  |  |  Branch (1039:45): [True: 70, False: 6.90k]
  |  |  ------------------
  ------------------
 3226|  6.28k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3227|  6.28k|                                  "Invalid value for tm_hour"});
 3228|  6.28k|        }
 3229|  6.90k|        t.tm_hour = h;
 3230|  6.90k|        st.set_hour24(hdl);
 3231|  6.90k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 4043|  13.1k|    {
 4044|  13.1k|#if !SCN_DISABLE_LOCALE
 4045|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4045:13): [True: 0, False: 13.1k]
  |  Branch (4045:31): [True: 0, False: 0]
  ------------------
 4046|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4046:22): [True: 0, False: 0]
  ------------------
 4047|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4048|      0|            }
 4049|      0|            return;
 4050|      0|        }
 4051|  13.1k|#endif
 4052|       |
 4053|  13.1k|        int min = read_classic_unsigned_integer(1, 2);
 4054|  13.1k|        setter::set_min(*this, m_tm, m_st, min);
 4055|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3214|  13.1k|    {
 3215|  13.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.30k, False: 6.87k]
  |  |  |  Branch (1039:45): [True: 6.29k, False: 6.88k]
  |  |  |  Branch (1039:45): [True: 14, False: 6.87k]
  |  |  ------------------
  ------------------
 3216|  6.30k|            return h.set_error({scan_error::invalid_scanned_value,
 3217|  6.30k|                                "Invalid value for tm_min"});
 3218|  6.30k|        }
 3219|  6.87k|        t.tm_min = m;
 3220|  6.87k|        st.set_min(h);
 3221|  6.87k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 4057|  3.55k|    {
 4058|  3.55k|#if !SCN_DISABLE_LOCALE
 4059|  3.55k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4059:13): [True: 0, False: 3.55k]
  |  Branch (4059:31): [True: 0, False: 0]
  ------------------
 4060|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4060:22): [True: 0, False: 0]
  ------------------
 4061|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4062|      0|            }
 4063|      0|            return;
 4064|      0|        }
 4065|  3.55k|#endif
 4066|       |
 4067|  3.55k|        int sec = read_classic_unsigned_integer(1, 2);
 4068|  3.55k|        setter::set_sec(*this, m_tm, m_st, sec);
 4069|  3.55k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3204|  3.55k|    {
 3205|  3.55k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  3.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.32k, False: 230]
  |  |  |  Branch (1039:45): [True: 3.32k, False: 232]
  |  |  |  Branch (1039:45): [True: 2, False: 230]
  |  |  ------------------
  ------------------
 3206|  3.32k|            return h.set_error({scan_error::invalid_scanned_value,
 3207|  3.32k|                                "Invalid value for tm_sec"});
 3208|  3.32k|        }
 3209|    230|        t.tm_sec = s;
 3210|    230|        st.set_sec(h);
 3211|    230|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 4299|  3.35k|    {
 4300|       |        // %m/%d/%y
 4301|  3.35k|        constexpr CharT slash = '/';
 4302|  3.35k|        on_dec_month();
 4303|  3.35k|        on_text(&slash, &slash + 1);
 4304|  3.35k|        on_day_of_month();
 4305|  3.35k|        on_text(&slash, &slash + 1);
 4306|  3.35k|        on_short_year();
 4307|  3.35k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 4309|  3.36k|    {
 4310|       |        // %Y-%m-%d
 4311|  3.36k|        constexpr CharT dash = '-';
 4312|  3.36k|        on_full_year();
 4313|  3.36k|        on_text(&dash, &dash + 1);
 4314|  3.36k|        on_dec_month();
 4315|  3.36k|        on_text(&dash, &dash + 1);
 4316|  3.36k|        on_day_of_month();
 4317|  3.36k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 4341|  9.62k|    {
 4342|       |        // %H:%M
 4343|  9.62k|        constexpr CharT colon = ':';
 4344|  9.62k|        on_24_hour();
 4345|  9.62k|        on_text(&colon, &colon + 1);
 4346|  9.62k|        on_minute();
 4347|  9.62k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 4349|  3.55k|    {
 4350|       |        // %H:%M:%S
 4351|  3.55k|        constexpr CharT colon = ':';
 4352|  3.55k|        on_24_hour();
 4353|  3.55k|        on_text(&colon, &colon + 1);
 4354|  3.55k|        on_minute();
 4355|  3.55k|        on_text(&colon, &colon + 1);
 4356|  3.55k|        on_second();
 4357|  3.55k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 4388|  7.26k|    {
 4389|  7.26k|        m_st.verify(*this);
 4390|  7.26k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4390:13): [True: 0, False: 7.26k]
  |  Branch (4390:31): [True: 0, False: 0]
  ------------------
 4391|      0|            setter::handle_am_pm(m_tm, m_st);
 4392|      0|        }
 4393|  7.26k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4393:13): [True: 7.25k, False: 10]
  |  Branch (4393:37): [True: 10, False: 7.24k]
  |  Branch (4393:60): [True: 0, False: 7.24k]
  ------------------
 4394|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 4395|     10|        }
 4396|  7.26k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 4399|  61.3k|    {
 4400|  61.3k|        return m_error;
 4401|  61.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 4416|  7.26k|    {
 4417|  7.26k|        return m_begin;
 4418|  7.26k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4609|  31.0k|{
 4610|  31.0k|    {
 4611|  31.0k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 348, False: 30.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    348|    }                                                  \
  |  |  |  | 3957|  31.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4612|  30.6k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4613|  30.6k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.6k|    static_cast<    \
  |  | 1109|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4614|  30.6k|    }
 4615|       |
 4616|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4617|  30.6k|        ctx.range(), t, ctx.locale());
 4618|  30.6k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4619|  30.6k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.3k, False: 7.26k]
  |  |  ------------------
  ------------------
 4620|  23.3k|        return unexpected(e.error());
 4621|  23.3k|    }
 4622|  7.26k|    return r.get_iterator();
 4623|  30.6k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 3753|  30.6k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.6k|    static_cast<    \
  |  | 1109|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3754|  30.6k|          m_begin(ranges::begin(m_range)),
 3755|  30.6k|          m_tm(t),
 3756|  30.6k|          m_loc(loc)
 3757|  30.6k|    {
 3758|  30.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 4404|  22.8k|    {
 4405|  22.8k|        set_error({scan_error::invalid_format_string, msg});
 4406|  22.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 4409|   100k|    {
 4410|   100k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4410:13): [True: 23.3k, False: 77.4k]
  ------------------
 4411|  23.3k|            m_error = unexpected(e);
 4412|  23.3k|        }
 4413|   100k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3761|  30.2k|    {
 3762|  37.4k|        while (beg != end) {
  ------------------
  |  Branch (3762:16): [True: 30.2k, False: 7.25k]
  ------------------
 3763|  30.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3763:17): [True: 118, False: 30.1k]
  ------------------
 3764|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3765|    118|            }
 3766|  30.1k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3766:17): [True: 22.8k, False: 7.25k]
  ------------------
 3767|  22.8k|                return on_error("Invalid literal character");
 3768|  22.8k|            }
 3769|  7.25k|            ++beg;
 3770|  7.25k|            ++m_begin;
 3771|  7.25k|        }
 3772|  30.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3791|  6.71k|    {
 3792|  6.71k|#if !SCN_DISABLE_LOCALE
 3793|  6.71k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3793:13): [True: 0, False: 6.71k]
  |  Branch (3793:31): [True: 0, False: 0]
  ------------------
 3794|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3794:22): [True: 0, False: 0]
  ------------------
 3795|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3796|      0|            }
 3797|      0|            return;
 3798|      0|        }
 3799|  6.71k|#endif
 3800|       |
 3801|  6.71k|        int yr = read_classic_unsigned_integer(4, 4);
 3802|  6.71k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3803|  6.71k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3264|  6.71k|    {
 3265|  6.71k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  6.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6.71k]
  |  |  ------------------
  ------------------
 3266|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3267|      0|                                "Invalid value for tm_year"});
 3268|      0|        }
 3269|  6.71k|        t.tm_year = y - 1900;
 3270|  6.71k|        st.set_full_year(h);
 3271|  6.71k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 4427|  53.4k|    {
 4428|  53.4k|        int digits_read = 0;
 4429|  53.4k|        int accumulator = 0;
 4430|  68.9k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4430:16): [True: 68.6k, False: 260]
  ------------------
 4431|  68.6k|            const auto ch = *m_begin;
 4432|  68.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4432:17): [True: 29.9k, False: 38.7k]
  |  Branch (4432:36): [True: 20.8k, False: 17.8k]
  ------------------
 4433|  50.7k|                break;
 4434|  50.7k|            }
 4435|  17.8k|            ++m_begin;
 4436|  17.8k|            ++digits_read;
 4437|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4438|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4438:17): [True: 2.43k, False: 15.4k]
  ------------------
 4439|  2.43k|                break;
 4440|  2.43k|            }
 4441|  17.8k|        }
 4442|  53.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4442:13): [True: 38.8k, False: 14.6k]
  ------------------
 4443|  38.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4444|  38.8k|                                 "Too few integer digits"});
 4445|  38.8k|            return -1;
 4446|  38.8k|        }
 4447|  14.6k|        return accumulator;
 4448|  53.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3805|  3.35k|    {
 3806|  3.35k|#if !SCN_DISABLE_LOCALE
 3807|  3.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3807:13): [True: 0, False: 3.35k]
  |  Branch (3807:31): [True: 0, False: 0]
  ------------------
 3808|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3808:22): [True: 0, False: 0]
  ------------------
 3809|      0|                setter::set_short_year(*this, m_tm, m_st,
 3810|      0|                                       (t->tm_year + 1900) % 100);
 3811|      0|            }
 3812|      0|            return;
 3813|      0|        }
 3814|  3.35k|#endif
 3815|       |
 3816|  3.35k|        int yr = read_classic_unsigned_integer(2, 2);
 3817|  3.35k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3818|  3.35k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3281|  3.35k|    {
 3282|  3.35k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  3.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.34k, False: 18]
  |  |  |  Branch (1039:45): [True: 3.34k, False: 18]
  |  |  |  Branch (1039:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 3283|  3.34k|            return h.set_error({scan_error::invalid_scanned_value,
 3284|  3.34k|                                "Invalid value for tm_year"});
 3285|  3.34k|        }
 3286|     18|        st.short_year_value = y;
 3287|     18|        st.set_short_year(h);
 3288|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3848|  4.06k|    {
 3849|  4.06k|#if !SCN_DISABLE_FAST_FLOAT
 3850|  4.06k|        if (m_st.localized) {
  ------------------
  |  Branch (3850:13): [True: 0, False: 4.06k]
  ------------------
 3851|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3851:22): [True: 0, False: 0]
  ------------------
 3852|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3853|      0|            }
 3854|      0|            return;
 3855|      0|        }
 3856|  4.06k|#endif
 3857|       |
 3858|  4.06k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3859|  4.06k|            {"January", 1},
 3860|  4.06k|            {"February", 2},
 3861|  4.06k|            {"March", 3},
 3862|  4.06k|            {"April", 4},
 3863|  4.06k|            {"May", 5},
 3864|  4.06k|            {"June", 6},
 3865|  4.06k|            {"July", 7},
 3866|  4.06k|            {"August", 8},
 3867|  4.06k|            {"September", 9},
 3868|  4.06k|            {"October", 10},
 3869|  4.06k|            {"November", 11},
 3870|  4.06k|            {"December", 12},
 3871|  4.06k|        }};
 3872|  4.06k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3872:18): [True: 22, False: 4.04k]
  ------------------
 3873|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3874|     22|        }
 3875|  4.04k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3876|  4.04k|            {"Jan", 1},
 3877|  4.04k|            {"Feb", 2},
 3878|  4.04k|            {"Mar", 3},
 3879|  4.04k|            {"Apr", 4},
 3880|  4.04k|            {"Jun", 6},
 3881|  4.04k|            {"Jul", 7},
 3882|  4.04k|            {"Aug", 8},
 3883|  4.04k|            {"Sep", 9},
 3884|  4.04k|            {"Oct", 10},
 3885|  4.04k|            {"Nov", 11},
 3886|  4.04k|            {"Dec", 12},
 3887|  4.04k|        }};
 3888|  4.04k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 706, False: 3.33k]
  ------------------
 3889|    706|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|    706|        }
 3891|  3.33k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3892|  3.33k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3254|  7.48k|    {
 3255|  7.48k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  8.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.40k, False: 1.07k]
  |  |  |  Branch (1039:45): [True: 6.35k, False: 1.12k]
  |  |  |  Branch (1039:45): [True: 50, False: 1.07k]
  |  |  ------------------
  ------------------
 3256|  6.40k|            return h.set_error({scan_error::invalid_scanned_value,
 3257|  6.40k|                                "Invalid value for tm_mon"});
 3258|  6.40k|        }
 3259|  1.07k|        t.tm_mon = m - 1;
 3260|  1.07k|        st.set_mon(h);
 3261|  1.07k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  4.06k|    {
 4466|  4.06k|        auto start_it = m_begin;
 4467|  4.06k|        std::size_t options_available = N;
 4468|  4.06k|        std::size_t chars_consumed = 0;
 4469|  10.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.33k, False: 3.99k]
  ------------------
 4470|  10.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 6.31k, False: 22]
  ------------------
 4471|  6.31k|            std::size_t i = 0;
 4472|  6.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 42, False: 6.27k]
  ------------------
 4473|     42|                options_available = 0;
 4474|     42|                break;
 4475|     42|            }
 4476|  6.27k|            const auto ch = *m_begin;
 4477|  6.27k|            ++m_begin;
 4478|  58.7k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 52.4k, False: 6.27k]
  ------------------
 4479|  52.4k|                const auto cmp = static_cast<unsigned>(
 4480|  52.4k|                    ch ^ options[i].first[chars_consumed]);
 4481|  52.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 52.4k]
  ------------------
 4482|  52.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 49.5k, False: 2.95k]
  |  Branch (4482:34): [True: 48.6k, False: 840]
  ------------------
 4483|  48.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  48.6k|                                options.end());
 4485|  48.6k|                    --options_available;
 4486|  48.6k|                    continue;
 4487|  48.6k|                }
 4488|  3.79k|                ++i;
 4489|  3.79k|            }
 4490|  6.27k|            ++chars_consumed;
 4491|  6.27k|        }
 4492|  4.06k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 4.04k, False: 22]
  ------------------
 4493|  4.04k|            m_begin = start_it;
 4494|  4.04k|            return std::nullopt;
 4495|  4.04k|        }
 4496|     22|        return options.front().second;
 4497|  4.06k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  4.04k|    {
 4466|  4.04k|        auto start_it = m_begin;
 4467|  4.04k|        std::size_t options_available = N;
 4468|  4.04k|        std::size_t chars_consumed = 0;
 4469|  9.55k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.24k, False: 3.30k]
  ------------------
 4470|  9.55k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 5.54k, False: 706]
  ------------------
 4471|  5.54k|            std::size_t i = 0;
 4472|  5.54k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 30, False: 5.51k]
  ------------------
 4473|     30|                options_available = 0;
 4474|     30|                break;
 4475|     30|            }
 4476|  5.51k|            const auto ch = *m_begin;
 4477|  5.51k|            ++m_begin;
 4478|  51.4k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 45.9k, False: 5.51k]
  ------------------
 4479|  45.9k|                const auto cmp = static_cast<unsigned>(
 4480|  45.9k|                    ch ^ options[i].first[chars_consumed]);
 4481|  45.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 45.9k]
  ------------------
 4482|  45.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 44.4k, False: 1.45k]
  |  Branch (4482:34): [True: 43.6k, False: 788]
  ------------------
 4483|  43.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  43.6k|                                options.end());
 4485|  43.6k|                    --options_available;
 4486|  43.6k|                    continue;
 4487|  43.6k|                }
 4488|  2.24k|                ++i;
 4489|  2.24k|            }
 4490|  5.51k|            ++chars_consumed;
 4491|  5.51k|        }
 4492|  4.04k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 3.33k, False: 706]
  ------------------
 4493|  3.33k|            m_begin = start_it;
 4494|  3.33k|            return std::nullopt;
 4495|  3.33k|        }
 4496|    706|        return options.front().second;
 4497|  4.04k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3894|  6.75k|    {
 3895|  6.75k|#if !SCN_DISABLE_LOCALE
 3896|  6.75k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3896:13): [True: 0, False: 6.75k]
  |  Branch (3896:31): [True: 0, False: 0]
  ------------------
 3897|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3897:22): [True: 0, False: 0]
  ------------------
 3898|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3899|      0|            }
 3900|      0|            return;
 3901|      0|        }
 3902|  6.75k|#endif
 3903|       |
 3904|  6.75k|        int mon = read_classic_unsigned_integer(1, 2);
 3905|  6.75k|        setter::set_mon(*this, m_tm, m_st, mon);
 3906|  6.75k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3926|  6.73k|    {
 3927|  6.73k|#if !SCN_DISABLE_LOCALE
 3928|  6.73k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3928:13): [True: 0, False: 6.73k]
  |  Branch (3928:31): [True: 0, False: 0]
  ------------------
 3929|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3929:22): [True: 0, False: 0]
  ------------------
 3930|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3931|      0|            }
 3932|      0|            return;
 3933|      0|        }
 3934|  6.73k|#endif
 3935|       |
 3936|  6.73k|        int mday = read_classic_unsigned_integer(1, 2);
 3937|  6.73k|        setter::set_mday(*this, m_tm, m_st, mday);
 3938|  6.73k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3244|  6.73k|    {
 3245|  6.73k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  6.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.66k, False: 74]
  |  |  |  Branch (1039:45): [True: 6.65k, False: 82]
  |  |  |  Branch (1039:45): [True: 8, False: 74]
  |  |  ------------------
  ------------------
 3246|  6.66k|            return h.set_error({scan_error::invalid_scanned_value,
 3247|  6.66k|                                "Invalid value for tm_mday"});
 3248|  6.66k|        }
 3249|     74|        t.tm_mday = d;
 3250|     74|        st.set_mday(h);
 3251|     74|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3941|  3.35k|    {
 3942|  3.35k|#if !SCN_DISABLE_LOCALE
 3943|  3.35k|        if (m_st.localized) {
  ------------------
  |  Branch (3943:13): [True: 0, False: 3.35k]
  ------------------
 3944|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3944:22): [True: 0, False: 0]
  ------------------
 3945|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3946|      0|            }
 3947|      0|            return;
 3948|      0|        }
 3949|  3.35k|#endif
 3950|       |
 3951|  3.35k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3952|  3.35k|            {"Sunday", 0},
 3953|  3.35k|            {"Monday", 1},
 3954|  3.35k|            {"Tuesday", 2},
 3955|  3.35k|            {"Wednesday", 3},
 3956|  3.35k|            {"Thursday", 4},
 3957|  3.35k|            {"Friday", 5},
 3958|  3.35k|            {"Saturday", 6},
 3959|  3.35k|        }};
 3960|  3.35k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3960:18): [True: 0, False: 3.35k]
  ------------------
 3961|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3962|      0|        }
 3963|  3.35k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3964|  3.35k|            {"Sun", 0},
 3965|  3.35k|            {"Mon", 1},
 3966|  3.35k|            {"Tue", 2},
 3967|  3.35k|            {"Wed", 3},
 3968|  3.35k|            {"Thu", 4},
 3969|  3.35k|            {"Fri", 5},
 3970|  3.35k|            {"Sat", 6},
 3971|  3.35k|        }};
 3972|  3.35k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3972:18): [True: 0, False: 3.35k]
  ------------------
 3973|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3974|      0|        }
 3975|  3.35k|        return set_error(
 3976|  3.35k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3977|  3.35k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  6.70k|    {
 4466|  6.70k|        auto start_it = m_begin;
 4467|  6.70k|        std::size_t options_available = N;
 4468|  6.70k|        std::size_t chars_consumed = 0;
 4469|  13.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.89k, False: 6.68k]
  ------------------
 4470|  13.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 6.89k, False: 0]
  ------------------
 4471|  6.89k|            std::size_t i = 0;
 4472|  6.89k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 20, False: 6.87k]
  ------------------
 4473|     20|                options_available = 0;
 4474|     20|                break;
 4475|     20|            }
 4476|  6.87k|            const auto ch = *m_begin;
 4477|  6.87k|            ++m_begin;
 4478|  53.9k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 47.1k, False: 6.87k]
  ------------------
 4479|  47.1k|                const auto cmp = static_cast<unsigned>(
 4480|  47.1k|                    ch ^ options[i].first[chars_consumed]);
 4481|  47.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 47.1k]
  ------------------
 4482|  47.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 46.9k, False: 200]
  |  Branch (4482:34): [True: 46.8k, False: 16]
  ------------------
 4483|  46.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  46.8k|                                options.end());
 4485|  46.8k|                    --options_available;
 4486|  46.8k|                    continue;
 4487|  46.8k|                }
 4488|    216|                ++i;
 4489|    216|            }
 4490|  6.87k|            ++chars_consumed;
 4491|  6.87k|        }
 4492|  6.70k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 6.70k, False: 0]
  ------------------
 4493|  6.70k|            m_begin = start_it;
 4494|  6.70k|            return std::nullopt;
 4495|  6.70k|        }
 4496|      0|        return options.front().second;
 4497|  6.70k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 4015|  13.1k|    {
 4016|  13.1k|#if !SCN_DISABLE_LOCALE
 4017|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4017:13): [True: 0, False: 13.1k]
  |  Branch (4017:31): [True: 0, False: 0]
  ------------------
 4018|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4018:22): [True: 0, False: 0]
  ------------------
 4019|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4020|      0|            }
 4021|      0|            return;
 4022|      0|        }
 4023|  13.1k|#endif
 4024|       |
 4025|  13.1k|        int hr = read_classic_unsigned_integer(1, 2);
 4026|  13.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4027|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3224|  13.1k|    {
 3225|  13.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.28k, False: 6.90k]
  |  |  |  Branch (1039:45): [True: 6.21k, False: 6.97k]
  |  |  |  Branch (1039:45): [True: 70, False: 6.90k]
  |  |  ------------------
  ------------------
 3226|  6.28k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3227|  6.28k|                                  "Invalid value for tm_hour"});
 3228|  6.28k|        }
 3229|  6.90k|        t.tm_hour = h;
 3230|  6.90k|        st.set_hour24(hdl);
 3231|  6.90k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 4043|  13.1k|    {
 4044|  13.1k|#if !SCN_DISABLE_LOCALE
 4045|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4045:13): [True: 0, False: 13.1k]
  |  Branch (4045:31): [True: 0, False: 0]
  ------------------
 4046|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4046:22): [True: 0, False: 0]
  ------------------
 4047|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4048|      0|            }
 4049|      0|            return;
 4050|      0|        }
 4051|  13.1k|#endif
 4052|       |
 4053|  13.1k|        int min = read_classic_unsigned_integer(1, 2);
 4054|  13.1k|        setter::set_min(*this, m_tm, m_st, min);
 4055|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3214|  13.1k|    {
 3215|  13.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.30k, False: 6.87k]
  |  |  |  Branch (1039:45): [True: 6.29k, False: 6.88k]
  |  |  |  Branch (1039:45): [True: 14, False: 6.87k]
  |  |  ------------------
  ------------------
 3216|  6.30k|            return h.set_error({scan_error::invalid_scanned_value,
 3217|  6.30k|                                "Invalid value for tm_min"});
 3218|  6.30k|        }
 3219|  6.87k|        t.tm_min = m;
 3220|  6.87k|        st.set_min(h);
 3221|  6.87k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 4057|  3.55k|    {
 4058|  3.55k|#if !SCN_DISABLE_LOCALE
 4059|  3.55k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4059:13): [True: 0, False: 3.55k]
  |  Branch (4059:31): [True: 0, False: 0]
  ------------------
 4060|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4060:22): [True: 0, False: 0]
  ------------------
 4061|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4062|      0|            }
 4063|      0|            return;
 4064|      0|        }
 4065|  3.55k|#endif
 4066|       |
 4067|  3.55k|        int sec = read_classic_unsigned_integer(1, 2);
 4068|  3.55k|        setter::set_sec(*this, m_tm, m_st, sec);
 4069|  3.55k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3204|  3.55k|    {
 3205|  3.55k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  3.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.32k, False: 230]
  |  |  |  Branch (1039:45): [True: 3.32k, False: 232]
  |  |  |  Branch (1039:45): [True: 2, False: 230]
  |  |  ------------------
  ------------------
 3206|  3.32k|            return h.set_error({scan_error::invalid_scanned_value,
 3207|  3.32k|                                "Invalid value for tm_sec"});
 3208|  3.32k|        }
 3209|    230|        t.tm_sec = s;
 3210|    230|        st.set_sec(h);
 3211|    230|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 4299|  3.35k|    {
 4300|       |        // %m/%d/%y
 4301|  3.35k|        constexpr CharT slash = '/';
 4302|  3.35k|        on_dec_month();
 4303|  3.35k|        on_text(&slash, &slash + 1);
 4304|  3.35k|        on_day_of_month();
 4305|  3.35k|        on_text(&slash, &slash + 1);
 4306|  3.35k|        on_short_year();
 4307|  3.35k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 4309|  3.36k|    {
 4310|       |        // %Y-%m-%d
 4311|  3.36k|        constexpr CharT dash = '-';
 4312|  3.36k|        on_full_year();
 4313|  3.36k|        on_text(&dash, &dash + 1);
 4314|  3.36k|        on_dec_month();
 4315|  3.36k|        on_text(&dash, &dash + 1);
 4316|  3.36k|        on_day_of_month();
 4317|  3.36k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 4341|  9.62k|    {
 4342|       |        // %H:%M
 4343|  9.62k|        constexpr CharT colon = ':';
 4344|  9.62k|        on_24_hour();
 4345|  9.62k|        on_text(&colon, &colon + 1);
 4346|  9.62k|        on_minute();
 4347|  9.62k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 4349|  3.55k|    {
 4350|       |        // %H:%M:%S
 4351|  3.55k|        constexpr CharT colon = ':';
 4352|  3.55k|        on_24_hour();
 4353|  3.55k|        on_text(&colon, &colon + 1);
 4354|  3.55k|        on_minute();
 4355|  3.55k|        on_text(&colon, &colon + 1);
 4356|  3.55k|        on_second();
 4357|  3.55k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 4388|  7.26k|    {
 4389|  7.26k|        m_st.verify(*this);
 4390|  7.26k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4390:13): [True: 0, False: 7.26k]
  |  Branch (4390:31): [True: 0, False: 0]
  ------------------
 4391|      0|            setter::handle_am_pm(m_tm, m_st);
 4392|      0|        }
 4393|  7.26k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4393:13): [True: 7.25k, False: 10]
  |  Branch (4393:37): [True: 10, False: 7.24k]
  |  Branch (4393:60): [True: 0, False: 7.24k]
  ------------------
 4394|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 4395|     10|        }
 4396|  7.26k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 4399|  61.3k|    {
 4400|  61.3k|        return m_error;
 4401|  61.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 4416|  7.26k|    {
 4417|  7.26k|        return m_begin;
 4418|  7.26k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4609|  31.0k|{
 4610|  31.0k|    {
 4611|  31.0k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 348, False: 30.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    348|    }                                                  \
  |  |  |  | 3957|  31.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4612|  30.6k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4613|  30.6k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.6k|    static_cast<    \
  |  | 1109|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4614|  30.6k|    }
 4615|       |
 4616|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4617|  30.6k|        ctx.range(), t, ctx.locale());
 4618|  30.6k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4619|  30.6k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.3k, False: 7.26k]
  |  |  ------------------
  ------------------
 4620|  23.3k|        return unexpected(e.error());
 4621|  23.3k|    }
 4622|  7.26k|    return r.get_iterator();
 4623|  30.6k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 3753|  30.6k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.6k|    static_cast<    \
  |  | 1109|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3754|  30.6k|          m_begin(ranges::begin(m_range)),
 3755|  30.6k|          m_tm(t),
 3756|  30.6k|          m_loc(loc)
 3757|  30.6k|    {
 3758|  30.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 4404|  22.8k|    {
 4405|  22.8k|        set_error({scan_error::invalid_format_string, msg});
 4406|  22.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 4409|  97.4k|    {
 4410|  97.4k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4410:13): [True: 23.3k, False: 74.0k]
  ------------------
 4411|  23.3k|            m_error = unexpected(e);
 4412|  23.3k|        }
 4413|  97.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3761|  30.2k|    {
 3762|  37.4k|        while (beg != end) {
  ------------------
  |  Branch (3762:16): [True: 30.2k, False: 7.25k]
  ------------------
 3763|  30.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3763:17): [True: 118, False: 30.1k]
  ------------------
 3764|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3765|    118|            }
 3766|  30.1k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3766:17): [True: 22.8k, False: 7.25k]
  ------------------
 3767|  22.8k|                return on_error("Invalid literal character");
 3768|  22.8k|            }
 3769|  7.25k|            ++beg;
 3770|  7.25k|            ++m_begin;
 3771|  7.25k|        }
 3772|  30.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3791|  6.71k|    {
 3792|  6.71k|#if !SCN_DISABLE_LOCALE
 3793|  6.71k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3793:13): [True: 0, False: 6.71k]
  |  Branch (3793:31): [True: 0, False: 0]
  ------------------
 3794|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3794:22): [True: 0, False: 0]
  ------------------
 3795|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3796|      0|            }
 3797|      0|            return;
 3798|      0|        }
 3799|  6.71k|#endif
 3800|       |
 3801|  6.71k|        int yr = read_classic_unsigned_integer(4, 4);
 3802|  6.71k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3803|  6.71k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3442|  6.71k|    {
 3443|  6.71k|        t.year = y;
 3444|  6.71k|        st.set_full_year(h);
 3445|  6.71k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 4427|  53.4k|    {
 4428|  53.4k|        int digits_read = 0;
 4429|  53.4k|        int accumulator = 0;
 4430|  68.9k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4430:16): [True: 68.6k, False: 260]
  ------------------
 4431|  68.6k|            const auto ch = *m_begin;
 4432|  68.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4432:17): [True: 29.9k, False: 38.7k]
  |  Branch (4432:36): [True: 20.8k, False: 17.8k]
  ------------------
 4433|  50.7k|                break;
 4434|  50.7k|            }
 4435|  17.8k|            ++m_begin;
 4436|  17.8k|            ++digits_read;
 4437|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4438|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4438:17): [True: 2.43k, False: 15.4k]
  ------------------
 4439|  2.43k|                break;
 4440|  2.43k|            }
 4441|  17.8k|        }
 4442|  53.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4442:13): [True: 38.8k, False: 14.6k]
  ------------------
 4443|  38.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4444|  38.8k|                                 "Too few integer digits"});
 4445|  38.8k|            return -1;
 4446|  38.8k|        }
 4447|  14.6k|        return accumulator;
 4448|  53.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3805|  3.35k|    {
 3806|  3.35k|#if !SCN_DISABLE_LOCALE
 3807|  3.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3807:13): [True: 0, False: 3.35k]
  |  Branch (3807:31): [True: 0, False: 0]
  ------------------
 3808|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3808:22): [True: 0, False: 0]
  ------------------
 3809|      0|                setter::set_short_year(*this, m_tm, m_st,
 3810|      0|                                       (t->tm_year + 1900) % 100);
 3811|      0|            }
 3812|      0|            return;
 3813|      0|        }
 3814|  3.35k|#endif
 3815|       |
 3816|  3.35k|        int yr = read_classic_unsigned_integer(2, 2);
 3817|  3.35k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3818|  3.35k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3465|  3.35k|    {
 3466|  3.35k|        if (!t.year) {
  ------------------
  |  Branch (3466:13): [True: 3.35k, False: 0]
  ------------------
 3467|  3.35k|            t.year = y;
 3468|  3.35k|        }
 3469|      0|        else {
 3470|      0|            t.year = *t.year + y;
 3471|      0|        }
 3472|  3.35k|        st.set_short_year(h);
 3473|  3.35k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3848|  4.06k|    {
 3849|  4.06k|#if !SCN_DISABLE_FAST_FLOAT
 3850|  4.06k|        if (m_st.localized) {
  ------------------
  |  Branch (3850:13): [True: 0, False: 4.06k]
  ------------------
 3851|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3851:22): [True: 0, False: 0]
  ------------------
 3852|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3853|      0|            }
 3854|      0|            return;
 3855|      0|        }
 3856|  4.06k|#endif
 3857|       |
 3858|  4.06k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3859|  4.06k|            {"January", 1},
 3860|  4.06k|            {"February", 2},
 3861|  4.06k|            {"March", 3},
 3862|  4.06k|            {"April", 4},
 3863|  4.06k|            {"May", 5},
 3864|  4.06k|            {"June", 6},
 3865|  4.06k|            {"July", 7},
 3866|  4.06k|            {"August", 8},
 3867|  4.06k|            {"September", 9},
 3868|  4.06k|            {"October", 10},
 3869|  4.06k|            {"November", 11},
 3870|  4.06k|            {"December", 12},
 3871|  4.06k|        }};
 3872|  4.06k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3872:18): [True: 22, False: 4.04k]
  ------------------
 3873|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3874|     22|        }
 3875|  4.04k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3876|  4.04k|            {"Jan", 1},
 3877|  4.04k|            {"Feb", 2},
 3878|  4.04k|            {"Mar", 3},
 3879|  4.04k|            {"Apr", 4},
 3880|  4.04k|            {"Jun", 6},
 3881|  4.04k|            {"Jul", 7},
 3882|  4.04k|            {"Aug", 8},
 3883|  4.04k|            {"Sep", 9},
 3884|  4.04k|            {"Oct", 10},
 3885|  4.04k|            {"Nov", 11},
 3886|  4.04k|            {"Dec", 12},
 3887|  4.04k|        }};
 3888|  4.04k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 706, False: 3.33k]
  ------------------
 3889|    706|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|    706|        }
 3891|  3.33k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3892|  3.33k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3429|  7.48k|    {
 3430|  7.48k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  8.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.40k, False: 1.07k]
  |  |  |  Branch (1039:45): [True: 6.35k, False: 1.12k]
  |  |  |  Branch (1039:45): [True: 50, False: 1.07k]
  |  |  ------------------
  ------------------
 3431|  6.40k|            return h.set_error(
 3432|  6.40k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 3433|  6.40k|        }
 3434|  1.07k|        t.mon = month{static_cast<unsigned>(m)};
 3435|  1.07k|        st.set_mon(h);
 3436|  1.07k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  4.06k|    {
 4466|  4.06k|        auto start_it = m_begin;
 4467|  4.06k|        std::size_t options_available = N;
 4468|  4.06k|        std::size_t chars_consumed = 0;
 4469|  10.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.33k, False: 3.99k]
  ------------------
 4470|  10.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 6.31k, False: 22]
  ------------------
 4471|  6.31k|            std::size_t i = 0;
 4472|  6.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 42, False: 6.27k]
  ------------------
 4473|     42|                options_available = 0;
 4474|     42|                break;
 4475|     42|            }
 4476|  6.27k|            const auto ch = *m_begin;
 4477|  6.27k|            ++m_begin;
 4478|  58.7k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 52.4k, False: 6.27k]
  ------------------
 4479|  52.4k|                const auto cmp = static_cast<unsigned>(
 4480|  52.4k|                    ch ^ options[i].first[chars_consumed]);
 4481|  52.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 52.4k]
  ------------------
 4482|  52.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 49.5k, False: 2.95k]
  |  Branch (4482:34): [True: 48.6k, False: 840]
  ------------------
 4483|  48.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  48.6k|                                options.end());
 4485|  48.6k|                    --options_available;
 4486|  48.6k|                    continue;
 4487|  48.6k|                }
 4488|  3.79k|                ++i;
 4489|  3.79k|            }
 4490|  6.27k|            ++chars_consumed;
 4491|  6.27k|        }
 4492|  4.06k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 4.04k, False: 22]
  ------------------
 4493|  4.04k|            m_begin = start_it;
 4494|  4.04k|            return std::nullopt;
 4495|  4.04k|        }
 4496|     22|        return options.front().second;
 4497|  4.06k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  4.04k|    {
 4466|  4.04k|        auto start_it = m_begin;
 4467|  4.04k|        std::size_t options_available = N;
 4468|  4.04k|        std::size_t chars_consumed = 0;
 4469|  9.55k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.24k, False: 3.30k]
  ------------------
 4470|  9.55k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 5.54k, False: 706]
  ------------------
 4471|  5.54k|            std::size_t i = 0;
 4472|  5.54k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 30, False: 5.51k]
  ------------------
 4473|     30|                options_available = 0;
 4474|     30|                break;
 4475|     30|            }
 4476|  5.51k|            const auto ch = *m_begin;
 4477|  5.51k|            ++m_begin;
 4478|  51.4k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 45.9k, False: 5.51k]
  ------------------
 4479|  45.9k|                const auto cmp = static_cast<unsigned>(
 4480|  45.9k|                    ch ^ options[i].first[chars_consumed]);
 4481|  45.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 45.9k]
  ------------------
 4482|  45.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 44.4k, False: 1.45k]
  |  Branch (4482:34): [True: 43.6k, False: 788]
  ------------------
 4483|  43.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  43.6k|                                options.end());
 4485|  43.6k|                    --options_available;
 4486|  43.6k|                    continue;
 4487|  43.6k|                }
 4488|  2.24k|                ++i;
 4489|  2.24k|            }
 4490|  5.51k|            ++chars_consumed;
 4491|  5.51k|        }
 4492|  4.04k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 3.33k, False: 706]
  ------------------
 4493|  3.33k|            m_begin = start_it;
 4494|  3.33k|            return std::nullopt;
 4495|  3.33k|        }
 4496|    706|        return options.front().second;
 4497|  4.04k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3894|  6.75k|    {
 3895|  6.75k|#if !SCN_DISABLE_LOCALE
 3896|  6.75k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3896:13): [True: 0, False: 6.75k]
  |  Branch (3896:31): [True: 0, False: 0]
  ------------------
 3897|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3897:22): [True: 0, False: 0]
  ------------------
 3898|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3899|      0|            }
 3900|      0|            return;
 3901|      0|        }
 3902|  6.75k|#endif
 3903|       |
 3904|  6.75k|        int mon = read_classic_unsigned_integer(1, 2);
 3905|  6.75k|        setter::set_mon(*this, m_tm, m_st, mon);
 3906|  6.75k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3926|  6.73k|    {
 3927|  6.73k|#if !SCN_DISABLE_LOCALE
 3928|  6.73k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3928:13): [True: 0, False: 6.73k]
  |  Branch (3928:31): [True: 0, False: 0]
  ------------------
 3929|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3929:22): [True: 0, False: 0]
  ------------------
 3930|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3931|      0|            }
 3932|      0|            return;
 3933|      0|        }
 3934|  6.73k|#endif
 3935|       |
 3936|  6.73k|        int mday = read_classic_unsigned_integer(1, 2);
 3937|  6.73k|        setter::set_mday(*this, m_tm, m_st, mday);
 3938|  6.73k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3416|  6.73k|    {
 3417|  6.73k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  6.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.66k, False: 74]
  |  |  |  Branch (1039:45): [True: 6.65k, False: 82]
  |  |  |  Branch (1039:45): [True: 8, False: 74]
  |  |  ------------------
  ------------------
 3418|  6.66k|            return h.set_error(
 3419|  6.66k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 3420|  6.66k|        }
 3421|     74|        t.mday = d;
 3422|     74|        st.set_mday(h);
 3423|     74|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3941|  3.35k|    {
 3942|  3.35k|#if !SCN_DISABLE_LOCALE
 3943|  3.35k|        if (m_st.localized) {
  ------------------
  |  Branch (3943:13): [True: 0, False: 3.35k]
  ------------------
 3944|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3944:22): [True: 0, False: 0]
  ------------------
 3945|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3946|      0|            }
 3947|      0|            return;
 3948|      0|        }
 3949|  3.35k|#endif
 3950|       |
 3951|  3.35k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3952|  3.35k|            {"Sunday", 0},
 3953|  3.35k|            {"Monday", 1},
 3954|  3.35k|            {"Tuesday", 2},
 3955|  3.35k|            {"Wednesday", 3},
 3956|  3.35k|            {"Thursday", 4},
 3957|  3.35k|            {"Friday", 5},
 3958|  3.35k|            {"Saturday", 6},
 3959|  3.35k|        }};
 3960|  3.35k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3960:18): [True: 0, False: 3.35k]
  ------------------
 3961|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3962|      0|        }
 3963|  3.35k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3964|  3.35k|            {"Sun", 0},
 3965|  3.35k|            {"Mon", 1},
 3966|  3.35k|            {"Tue", 2},
 3967|  3.35k|            {"Wed", 3},
 3968|  3.35k|            {"Thu", 4},
 3969|  3.35k|            {"Fri", 5},
 3970|  3.35k|            {"Sat", 6},
 3971|  3.35k|        }};
 3972|  3.35k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3972:18): [True: 0, False: 3.35k]
  ------------------
 3973|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3974|      0|        }
 3975|  3.35k|        return set_error(
 3976|  3.35k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3977|  3.35k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4465|  6.70k|    {
 4466|  6.70k|        auto start_it = m_begin;
 4467|  6.70k|        std::size_t options_available = N;
 4468|  6.70k|        std::size_t chars_consumed = 0;
 4469|  13.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.89k, False: 6.68k]
  ------------------
 4470|  13.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 6.89k, False: 0]
  ------------------
 4471|  6.89k|            std::size_t i = 0;
 4472|  6.89k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 20, False: 6.87k]
  ------------------
 4473|     20|                options_available = 0;
 4474|     20|                break;
 4475|     20|            }
 4476|  6.87k|            const auto ch = *m_begin;
 4477|  6.87k|            ++m_begin;
 4478|  53.9k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 47.1k, False: 6.87k]
  ------------------
 4479|  47.1k|                const auto cmp = static_cast<unsigned>(
 4480|  47.1k|                    ch ^ options[i].first[chars_consumed]);
 4481|  47.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 47.1k]
  ------------------
 4482|  47.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 46.9k, False: 200]
  |  Branch (4482:34): [True: 46.8k, False: 16]
  ------------------
 4483|  46.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  46.8k|                                options.end());
 4485|  46.8k|                    --options_available;
 4486|  46.8k|                    continue;
 4487|  46.8k|                }
 4488|    216|                ++i;
 4489|    216|            }
 4490|  6.87k|            ++chars_consumed;
 4491|  6.87k|        }
 4492|  6.70k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 6.70k, False: 0]
  ------------------
 4493|  6.70k|            m_begin = start_it;
 4494|  6.70k|            return std::nullopt;
 4495|  6.70k|        }
 4496|      0|        return options.front().second;
 4497|  6.70k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 4015|  13.1k|    {
 4016|  13.1k|#if !SCN_DISABLE_LOCALE
 4017|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4017:13): [True: 0, False: 13.1k]
  |  Branch (4017:31): [True: 0, False: 0]
  ------------------
 4018|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4018:22): [True: 0, False: 0]
  ------------------
 4019|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4020|      0|            }
 4021|      0|            return;
 4022|      0|        }
 4023|  13.1k|#endif
 4024|       |
 4025|  13.1k|        int hr = read_classic_unsigned_integer(1, 2);
 4026|  13.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4027|  13.1k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3390|  13.1k|    {
 3391|  13.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.28k, False: 6.90k]
  |  |  |  Branch (1039:45): [True: 6.21k, False: 6.97k]
  |  |  |  Branch (1039:45): [True: 70, False: 6.90k]
  |  |  ------------------
  ------------------
 3392|  6.28k|            return hdl.set_error(
 3393|  6.28k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 3394|  6.28k|        }
 3395|  6.90k|        t.hour = h;
 3396|  6.90k|        st.set_hour24(hdl);
 3397|  6.90k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 4043|  13.1k|    {
 4044|  13.1k|#if !SCN_DISABLE_LOCALE
 4045|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4045:13): [True: 0, False: 13.1k]
  |  Branch (4045:31): [True: 0, False: 0]
  ------------------
 4046|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4046:22): [True: 0, False: 0]
  ------------------
 4047|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4048|      0|            }
 4049|      0|            return;
 4050|      0|        }
 4051|  13.1k|#endif
 4052|       |
 4053|  13.1k|        int min = read_classic_unsigned_integer(1, 2);
 4054|  13.1k|        setter::set_min(*this, m_tm, m_st, min);
 4055|  13.1k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3377|  13.1k|    {
 3378|  13.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.30k, False: 6.87k]
  |  |  |  Branch (1039:45): [True: 6.29k, False: 6.88k]
  |  |  |  Branch (1039:45): [True: 14, False: 6.87k]
  |  |  ------------------
  ------------------
 3379|  6.30k|            return h.set_error({scan_error::invalid_scanned_value,
 3380|  6.30k|                                "Invalid value for minutes"});
 3381|  6.30k|        }
 3382|  6.87k|        t.min = m;
 3383|  6.87k|        st.set_min(h);
 3384|  6.87k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 4057|  3.55k|    {
 4058|  3.55k|#if !SCN_DISABLE_LOCALE
 4059|  3.55k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4059:13): [True: 0, False: 3.55k]
  |  Branch (4059:31): [True: 0, False: 0]
  ------------------
 4060|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4060:22): [True: 0, False: 0]
  ------------------
 4061|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4062|      0|            }
 4063|      0|            return;
 4064|      0|        }
 4065|  3.55k|#endif
 4066|       |
 4067|  3.55k|        int sec = read_classic_unsigned_integer(1, 2);
 4068|  3.55k|        setter::set_sec(*this, m_tm, m_st, sec);
 4069|  3.55k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3364|  3.55k|    {
 3365|  3.55k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  3.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.32k, False: 230]
  |  |  |  Branch (1039:45): [True: 3.32k, False: 232]
  |  |  |  Branch (1039:45): [True: 2, False: 230]
  |  |  ------------------
  ------------------
 3366|  3.32k|            return h.set_error({scan_error::invalid_scanned_value,
 3367|  3.32k|                                "Invalid value for seconds"});
 3368|  3.32k|        }
 3369|    230|        t.sec = s;
 3370|    230|        st.set_sec(h);
 3371|    230|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 4299|  3.35k|    {
 4300|       |        // %m/%d/%y
 4301|  3.35k|        constexpr CharT slash = '/';
 4302|  3.35k|        on_dec_month();
 4303|  3.35k|        on_text(&slash, &slash + 1);
 4304|  3.35k|        on_day_of_month();
 4305|  3.35k|        on_text(&slash, &slash + 1);
 4306|  3.35k|        on_short_year();
 4307|  3.35k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 4309|  3.36k|    {
 4310|       |        // %Y-%m-%d
 4311|  3.36k|        constexpr CharT dash = '-';
 4312|  3.36k|        on_full_year();
 4313|  3.36k|        on_text(&dash, &dash + 1);
 4314|  3.36k|        on_dec_month();
 4315|  3.36k|        on_text(&dash, &dash + 1);
 4316|  3.36k|        on_day_of_month();
 4317|  3.36k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 4341|  9.62k|    {
 4342|       |        // %H:%M
 4343|  9.62k|        constexpr CharT colon = ':';
 4344|  9.62k|        on_24_hour();
 4345|  9.62k|        on_text(&colon, &colon + 1);
 4346|  9.62k|        on_minute();
 4347|  9.62k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 4349|  3.55k|    {
 4350|       |        // %H:%M:%S
 4351|  3.55k|        constexpr CharT colon = ':';
 4352|  3.55k|        on_24_hour();
 4353|  3.55k|        on_text(&colon, &colon + 1);
 4354|  3.55k|        on_minute();
 4355|  3.55k|        on_text(&colon, &colon + 1);
 4356|  3.55k|        on_second();
 4357|  3.55k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 4388|  7.26k|    {
 4389|  7.26k|        m_st.verify(*this);
 4390|  7.26k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4390:13): [True: 0, False: 7.26k]
  |  Branch (4390:31): [True: 0, False: 0]
  ------------------
 4391|      0|            setter::handle_am_pm(m_tm, m_st);
 4392|      0|        }
 4393|  7.26k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4393:13): [True: 7.25k, False: 10]
  |  Branch (4393:37): [True: 10, False: 7.24k]
  |  Branch (4393:60): [True: 0, False: 7.24k]
  ------------------
 4394|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 4395|     10|        }
 4396|  7.26k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 4399|  61.3k|    {
 4400|  61.3k|        return m_error;
 4401|  61.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 4416|  7.26k|    {
 4417|  7.26k|        return m_begin;
 4418|  7.26k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4609|  31.0k|{
 4610|  31.0k|    {
 4611|  31.0k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 348, False: 30.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    348|    }                                                  \
  |  |  |  | 3957|  31.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4612|  30.6k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4613|  30.6k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.6k|    static_cast<    \
  |  | 1109|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4614|  30.6k|    }
 4615|       |
 4616|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4617|  30.6k|        ctx.range(), t, ctx.locale());
 4618|  30.6k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4619|  30.6k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.3k, False: 7.26k]
  |  |  ------------------
  ------------------
 4620|  23.3k|        return unexpected(e.error());
 4621|  23.3k|    }
 4622|  7.26k|    return r.get_iterator();
 4623|  30.6k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 3753|  30.6k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.6k|    static_cast<    \
  |  | 1109|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3754|  30.6k|          m_begin(ranges::begin(m_range)),
 3755|  30.6k|          m_tm(t),
 3756|  30.6k|          m_loc(loc)
 3757|  30.6k|    {
 3758|  30.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 4404|  22.8k|    {
 4405|  22.8k|        set_error({scan_error::invalid_format_string, msg});
 4406|  22.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 4409|  97.4k|    {
 4410|  97.4k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4410:13): [True: 23.3k, False: 74.0k]
  ------------------
 4411|  23.3k|            m_error = unexpected(e);
 4412|  23.3k|        }
 4413|  97.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3761|  30.2k|    {
 3762|  37.4k|        while (beg != end) {
  ------------------
  |  Branch (3762:16): [True: 30.2k, False: 7.25k]
  ------------------
 3763|  30.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3763:17): [True: 118, False: 30.1k]
  ------------------
 3764|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3765|    118|            }
 3766|  30.1k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3766:17): [True: 22.8k, False: 7.25k]
  ------------------
 3767|  22.8k|                return on_error("Invalid literal character");
 3768|  22.8k|            }
 3769|  7.25k|            ++beg;
 3770|  7.25k|            ++m_begin;
 3771|  7.25k|        }
 3772|  30.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3791|  6.71k|    {
 3792|  6.71k|#if !SCN_DISABLE_LOCALE
 3793|  6.71k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3793:13): [True: 0, False: 6.71k]
  |  Branch (3793:31): [True: 0, False: 0]
  ------------------
 3794|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3794:22): [True: 0, False: 0]
  ------------------
 3795|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3796|      0|            }
 3797|      0|            return;
 3798|      0|        }
 3799|  6.71k|#endif
 3800|       |
 3801|  6.71k|        int yr = read_classic_unsigned_integer(4, 4);
 3802|  6.71k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3803|  6.71k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3442|  6.71k|    {
 3443|  6.71k|        t.year = y;
 3444|  6.71k|        st.set_full_year(h);
 3445|  6.71k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 4427|  53.4k|    {
 4428|  53.4k|        int digits_read = 0;
 4429|  53.4k|        int accumulator = 0;
 4430|  68.9k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4430:16): [True: 68.6k, False: 260]
  ------------------
 4431|  68.6k|            const auto ch = *m_begin;
 4432|  68.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4432:17): [True: 29.9k, False: 38.7k]
  |  Branch (4432:36): [True: 20.8k, False: 17.8k]
  ------------------
 4433|  50.7k|                break;
 4434|  50.7k|            }
 4435|  17.8k|            ++m_begin;
 4436|  17.8k|            ++digits_read;
 4437|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4438|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4438:17): [True: 2.43k, False: 15.4k]
  ------------------
 4439|  2.43k|                break;
 4440|  2.43k|            }
 4441|  17.8k|        }
 4442|  53.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4442:13): [True: 38.8k, False: 14.6k]
  ------------------
 4443|  38.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4444|  38.8k|                                 "Too few integer digits"});
 4445|  38.8k|            return -1;
 4446|  38.8k|        }
 4447|  14.6k|        return accumulator;
 4448|  53.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3805|  3.35k|    {
 3806|  3.35k|#if !SCN_DISABLE_LOCALE
 3807|  3.35k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3807:13): [True: 0, False: 3.35k]
  |  Branch (3807:31): [True: 0, False: 0]
  ------------------
 3808|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3808:22): [True: 0, False: 0]
  ------------------
 3809|      0|                setter::set_short_year(*this, m_tm, m_st,
 3810|      0|                                       (t->tm_year + 1900) % 100);
 3811|      0|            }
 3812|      0|            return;
 3813|      0|        }
 3814|  3.35k|#endif
 3815|       |
 3816|  3.35k|        int yr = read_classic_unsigned_integer(2, 2);
 3817|  3.35k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3818|  3.35k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3465|  3.35k|    {
 3466|  3.35k|        if (!t.year) {
  ------------------
  |  Branch (3466:13): [True: 3.35k, False: 0]
  ------------------
 3467|  3.35k|            t.year = y;
 3468|  3.35k|        }
 3469|      0|        else {
 3470|      0|            t.year = *t.year + y;
 3471|      0|        }
 3472|  3.35k|        st.set_short_year(h);
 3473|  3.35k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3848|  4.06k|    {
 3849|  4.06k|#if !SCN_DISABLE_FAST_FLOAT
 3850|  4.06k|        if (m_st.localized) {
  ------------------
  |  Branch (3850:13): [True: 0, False: 4.06k]
  ------------------
 3851|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3851:22): [True: 0, False: 0]
  ------------------
 3852|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3853|      0|            }
 3854|      0|            return;
 3855|      0|        }
 3856|  4.06k|#endif
 3857|       |
 3858|  4.06k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3859|  4.06k|            {"January", 1},
 3860|  4.06k|            {"February", 2},
 3861|  4.06k|            {"March", 3},
 3862|  4.06k|            {"April", 4},
 3863|  4.06k|            {"May", 5},
 3864|  4.06k|            {"June", 6},
 3865|  4.06k|            {"July", 7},
 3866|  4.06k|            {"August", 8},
 3867|  4.06k|            {"September", 9},
 3868|  4.06k|            {"October", 10},
 3869|  4.06k|            {"November", 11},
 3870|  4.06k|            {"December", 12},
 3871|  4.06k|        }};
 3872|  4.06k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3872:18): [True: 22, False: 4.04k]
  ------------------
 3873|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3874|     22|        }
 3875|  4.04k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3876|  4.04k|            {"Jan", 1},
 3877|  4.04k|            {"Feb", 2},
 3878|  4.04k|            {"Mar", 3},
 3879|  4.04k|            {"Apr", 4},
 3880|  4.04k|            {"Jun", 6},
 3881|  4.04k|            {"Jul", 7},
 3882|  4.04k|            {"Aug", 8},
 3883|  4.04k|            {"Sep", 9},
 3884|  4.04k|            {"Oct", 10},
 3885|  4.04k|            {"Nov", 11},
 3886|  4.04k|            {"Dec", 12},
 3887|  4.04k|        }};
 3888|  4.04k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 706, False: 3.33k]
  ------------------
 3889|    706|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|    706|        }
 3891|  3.33k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3892|  3.33k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3429|  7.48k|    {
 3430|  7.48k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  8.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.40k, False: 1.07k]
  |  |  |  Branch (1039:45): [True: 6.35k, False: 1.12k]
  |  |  |  Branch (1039:45): [True: 50, False: 1.07k]
  |  |  ------------------
  ------------------
 3431|  6.40k|            return h.set_error(
 3432|  6.40k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 3433|  6.40k|        }
 3434|  1.07k|        t.mon = month{static_cast<unsigned>(m)};
 3435|  1.07k|        st.set_mon(h);
 3436|  1.07k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  4.06k|    {
 4466|  4.06k|        auto start_it = m_begin;
 4467|  4.06k|        std::size_t options_available = N;
 4468|  4.06k|        std::size_t chars_consumed = 0;
 4469|  10.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.33k, False: 3.99k]
  ------------------
 4470|  10.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 6.31k, False: 22]
  ------------------
 4471|  6.31k|            std::size_t i = 0;
 4472|  6.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 42, False: 6.27k]
  ------------------
 4473|     42|                options_available = 0;
 4474|     42|                break;
 4475|     42|            }
 4476|  6.27k|            const auto ch = *m_begin;
 4477|  6.27k|            ++m_begin;
 4478|  58.7k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 52.4k, False: 6.27k]
  ------------------
 4479|  52.4k|                const auto cmp = static_cast<unsigned>(
 4480|  52.4k|                    ch ^ options[i].first[chars_consumed]);
 4481|  52.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 52.4k]
  ------------------
 4482|  52.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 49.5k, False: 2.95k]
  |  Branch (4482:34): [True: 48.6k, False: 840]
  ------------------
 4483|  48.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  48.6k|                                options.end());
 4485|  48.6k|                    --options_available;
 4486|  48.6k|                    continue;
 4487|  48.6k|                }
 4488|  3.79k|                ++i;
 4489|  3.79k|            }
 4490|  6.27k|            ++chars_consumed;
 4491|  6.27k|        }
 4492|  4.06k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 4.04k, False: 22]
  ------------------
 4493|  4.04k|            m_begin = start_it;
 4494|  4.04k|            return std::nullopt;
 4495|  4.04k|        }
 4496|     22|        return options.front().second;
 4497|  4.06k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  4.04k|    {
 4466|  4.04k|        auto start_it = m_begin;
 4467|  4.04k|        std::size_t options_available = N;
 4468|  4.04k|        std::size_t chars_consumed = 0;
 4469|  9.55k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.24k, False: 3.30k]
  ------------------
 4470|  9.55k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 5.54k, False: 706]
  ------------------
 4471|  5.54k|            std::size_t i = 0;
 4472|  5.54k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 30, False: 5.51k]
  ------------------
 4473|     30|                options_available = 0;
 4474|     30|                break;
 4475|     30|            }
 4476|  5.51k|            const auto ch = *m_begin;
 4477|  5.51k|            ++m_begin;
 4478|  51.4k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 45.9k, False: 5.51k]
  ------------------
 4479|  45.9k|                const auto cmp = static_cast<unsigned>(
 4480|  45.9k|                    ch ^ options[i].first[chars_consumed]);
 4481|  45.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 45.9k]
  ------------------
 4482|  45.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 44.4k, False: 1.45k]
  |  Branch (4482:34): [True: 43.6k, False: 788]
  ------------------
 4483|  43.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  43.6k|                                options.end());
 4485|  43.6k|                    --options_available;
 4486|  43.6k|                    continue;
 4487|  43.6k|                }
 4488|  2.24k|                ++i;
 4489|  2.24k|            }
 4490|  5.51k|            ++chars_consumed;
 4491|  5.51k|        }
 4492|  4.04k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 3.33k, False: 706]
  ------------------
 4493|  3.33k|            m_begin = start_it;
 4494|  3.33k|            return std::nullopt;
 4495|  3.33k|        }
 4496|    706|        return options.front().second;
 4497|  4.04k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3894|  6.75k|    {
 3895|  6.75k|#if !SCN_DISABLE_LOCALE
 3896|  6.75k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3896:13): [True: 0, False: 6.75k]
  |  Branch (3896:31): [True: 0, False: 0]
  ------------------
 3897|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3897:22): [True: 0, False: 0]
  ------------------
 3898|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3899|      0|            }
 3900|      0|            return;
 3901|      0|        }
 3902|  6.75k|#endif
 3903|       |
 3904|  6.75k|        int mon = read_classic_unsigned_integer(1, 2);
 3905|  6.75k|        setter::set_mon(*this, m_tm, m_st, mon);
 3906|  6.75k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3926|  6.73k|    {
 3927|  6.73k|#if !SCN_DISABLE_LOCALE
 3928|  6.73k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3928:13): [True: 0, False: 6.73k]
  |  Branch (3928:31): [True: 0, False: 0]
  ------------------
 3929|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3929:22): [True: 0, False: 0]
  ------------------
 3930|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3931|      0|            }
 3932|      0|            return;
 3933|      0|        }
 3934|  6.73k|#endif
 3935|       |
 3936|  6.73k|        int mday = read_classic_unsigned_integer(1, 2);
 3937|  6.73k|        setter::set_mday(*this, m_tm, m_st, mday);
 3938|  6.73k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3416|  6.73k|    {
 3417|  6.73k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  6.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.66k, False: 74]
  |  |  |  Branch (1039:45): [True: 6.65k, False: 82]
  |  |  |  Branch (1039:45): [True: 8, False: 74]
  |  |  ------------------
  ------------------
 3418|  6.66k|            return h.set_error(
 3419|  6.66k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 3420|  6.66k|        }
 3421|     74|        t.mday = d;
 3422|     74|        st.set_mday(h);
 3423|     74|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3941|  3.35k|    {
 3942|  3.35k|#if !SCN_DISABLE_LOCALE
 3943|  3.35k|        if (m_st.localized) {
  ------------------
  |  Branch (3943:13): [True: 0, False: 3.35k]
  ------------------
 3944|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3944:22): [True: 0, False: 0]
  ------------------
 3945|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3946|      0|            }
 3947|      0|            return;
 3948|      0|        }
 3949|  3.35k|#endif
 3950|       |
 3951|  3.35k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3952|  3.35k|            {"Sunday", 0},
 3953|  3.35k|            {"Monday", 1},
 3954|  3.35k|            {"Tuesday", 2},
 3955|  3.35k|            {"Wednesday", 3},
 3956|  3.35k|            {"Thursday", 4},
 3957|  3.35k|            {"Friday", 5},
 3958|  3.35k|            {"Saturday", 6},
 3959|  3.35k|        }};
 3960|  3.35k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3960:18): [True: 0, False: 3.35k]
  ------------------
 3961|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3962|      0|        }
 3963|  3.35k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3964|  3.35k|            {"Sun", 0},
 3965|  3.35k|            {"Mon", 1},
 3966|  3.35k|            {"Tue", 2},
 3967|  3.35k|            {"Wed", 3},
 3968|  3.35k|            {"Thu", 4},
 3969|  3.35k|            {"Fri", 5},
 3970|  3.35k|            {"Sat", 6},
 3971|  3.35k|        }};
 3972|  3.35k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3972:18): [True: 0, False: 3.35k]
  ------------------
 3973|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3974|      0|        }
 3975|  3.35k|        return set_error(
 3976|  3.35k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3977|  3.35k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4465|  6.70k|    {
 4466|  6.70k|        auto start_it = m_begin;
 4467|  6.70k|        std::size_t options_available = N;
 4468|  6.70k|        std::size_t chars_consumed = 0;
 4469|  13.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4469:16): [True: 6.89k, False: 6.68k]
  ------------------
 4470|  13.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4470:16): [True: 6.89k, False: 0]
  ------------------
 4471|  6.89k|            std::size_t i = 0;
 4472|  6.89k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4472:17): [True: 20, False: 6.87k]
  ------------------
 4473|     20|                options_available = 0;
 4474|     20|                break;
 4475|     20|            }
 4476|  6.87k|            const auto ch = *m_begin;
 4477|  6.87k|            ++m_begin;
 4478|  53.9k|            while (i < options_available) {
  ------------------
  |  Branch (4478:20): [True: 47.1k, False: 6.87k]
  ------------------
 4479|  47.1k|                const auto cmp = static_cast<unsigned>(
 4480|  47.1k|                    ch ^ options[i].first[chars_consumed]);
 4481|  47.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4481:21): [True: 0, False: 47.1k]
  ------------------
 4482|  47.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4482:22): [True: 46.9k, False: 200]
  |  Branch (4482:34): [True: 46.8k, False: 16]
  ------------------
 4483|  46.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4484|  46.8k|                                options.end());
 4485|  46.8k|                    --options_available;
 4486|  46.8k|                    continue;
 4487|  46.8k|                }
 4488|    216|                ++i;
 4489|    216|            }
 4490|  6.87k|            ++chars_consumed;
 4491|  6.87k|        }
 4492|  6.70k|        if (options_available != 1) {
  ------------------
  |  Branch (4492:13): [True: 6.70k, False: 0]
  ------------------
 4493|  6.70k|            m_begin = start_it;
 4494|  6.70k|            return std::nullopt;
 4495|  6.70k|        }
 4496|      0|        return options.front().second;
 4497|  6.70k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 4015|  13.1k|    {
 4016|  13.1k|#if !SCN_DISABLE_LOCALE
 4017|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4017:13): [True: 0, False: 13.1k]
  |  Branch (4017:31): [True: 0, False: 0]
  ------------------
 4018|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4018:22): [True: 0, False: 0]
  ------------------
 4019|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4020|      0|            }
 4021|      0|            return;
 4022|      0|        }
 4023|  13.1k|#endif
 4024|       |
 4025|  13.1k|        int hr = read_classic_unsigned_integer(1, 2);
 4026|  13.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4027|  13.1k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3390|  13.1k|    {
 3391|  13.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.28k, False: 6.90k]
  |  |  |  Branch (1039:45): [True: 6.21k, False: 6.97k]
  |  |  |  Branch (1039:45): [True: 70, False: 6.90k]
  |  |  ------------------
  ------------------
 3392|  6.28k|            return hdl.set_error(
 3393|  6.28k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 3394|  6.28k|        }
 3395|  6.90k|        t.hour = h;
 3396|  6.90k|        st.set_hour24(hdl);
 3397|  6.90k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 4043|  13.1k|    {
 4044|  13.1k|#if !SCN_DISABLE_LOCALE
 4045|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4045:13): [True: 0, False: 13.1k]
  |  Branch (4045:31): [True: 0, False: 0]
  ------------------
 4046|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4046:22): [True: 0, False: 0]
  ------------------
 4047|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4048|      0|            }
 4049|      0|            return;
 4050|      0|        }
 4051|  13.1k|#endif
 4052|       |
 4053|  13.1k|        int min = read_classic_unsigned_integer(1, 2);
 4054|  13.1k|        setter::set_min(*this, m_tm, m_st, min);
 4055|  13.1k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3377|  13.1k|    {
 3378|  13.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.30k, False: 6.87k]
  |  |  |  Branch (1039:45): [True: 6.29k, False: 6.88k]
  |  |  |  Branch (1039:45): [True: 14, False: 6.87k]
  |  |  ------------------
  ------------------
 3379|  6.30k|            return h.set_error({scan_error::invalid_scanned_value,
 3380|  6.30k|                                "Invalid value for minutes"});
 3381|  6.30k|        }
 3382|  6.87k|        t.min = m;
 3383|  6.87k|        st.set_min(h);
 3384|  6.87k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 4057|  3.55k|    {
 4058|  3.55k|#if !SCN_DISABLE_LOCALE
 4059|  3.55k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4059:13): [True: 0, False: 3.55k]
  |  Branch (4059:31): [True: 0, False: 0]
  ------------------
 4060|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4060:22): [True: 0, False: 0]
  ------------------
 4061|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4062|      0|            }
 4063|      0|            return;
 4064|      0|        }
 4065|  3.55k|#endif
 4066|       |
 4067|  3.55k|        int sec = read_classic_unsigned_integer(1, 2);
 4068|  3.55k|        setter::set_sec(*this, m_tm, m_st, sec);
 4069|  3.55k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3364|  3.55k|    {
 3365|  3.55k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  3.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.32k, False: 230]
  |  |  |  Branch (1039:45): [True: 3.32k, False: 232]
  |  |  |  Branch (1039:45): [True: 2, False: 230]
  |  |  ------------------
  ------------------
 3366|  3.32k|            return h.set_error({scan_error::invalid_scanned_value,
 3367|  3.32k|                                "Invalid value for seconds"});
 3368|  3.32k|        }
 3369|    230|        t.sec = s;
 3370|    230|        st.set_sec(h);
 3371|    230|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 4299|  3.35k|    {
 4300|       |        // %m/%d/%y
 4301|  3.35k|        constexpr CharT slash = '/';
 4302|  3.35k|        on_dec_month();
 4303|  3.35k|        on_text(&slash, &slash + 1);
 4304|  3.35k|        on_day_of_month();
 4305|  3.35k|        on_text(&slash, &slash + 1);
 4306|  3.35k|        on_short_year();
 4307|  3.35k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 4309|  3.36k|    {
 4310|       |        // %Y-%m-%d
 4311|  3.36k|        constexpr CharT dash = '-';
 4312|  3.36k|        on_full_year();
 4313|  3.36k|        on_text(&dash, &dash + 1);
 4314|  3.36k|        on_dec_month();
 4315|  3.36k|        on_text(&dash, &dash + 1);
 4316|  3.36k|        on_day_of_month();
 4317|  3.36k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 4341|  9.62k|    {
 4342|       |        // %H:%M
 4343|  9.62k|        constexpr CharT colon = ':';
 4344|  9.62k|        on_24_hour();
 4345|  9.62k|        on_text(&colon, &colon + 1);
 4346|  9.62k|        on_minute();
 4347|  9.62k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 4349|  3.55k|    {
 4350|       |        // %H:%M:%S
 4351|  3.55k|        constexpr CharT colon = ':';
 4352|  3.55k|        on_24_hour();
 4353|  3.55k|        on_text(&colon, &colon + 1);
 4354|  3.55k|        on_minute();
 4355|  3.55k|        on_text(&colon, &colon + 1);
 4356|  3.55k|        on_second();
 4357|  3.55k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 4388|  7.26k|    {
 4389|  7.26k|        m_st.verify(*this);
 4390|  7.26k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4390:13): [True: 0, False: 7.26k]
  |  Branch (4390:31): [True: 0, False: 0]
  ------------------
 4391|      0|            setter::handle_am_pm(m_tm, m_st);
 4392|      0|        }
 4393|  7.26k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4393:13): [True: 7.25k, False: 10]
  |  Branch (4393:37): [True: 10, False: 7.24k]
  |  Branch (4393:60): [True: 0, False: 7.24k]
  ------------------
 4394|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 4395|     10|        }
 4396|  7.26k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 4399|  61.3k|    {
 4400|  61.3k|        return m_error;
 4401|  61.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 4416|  7.26k|    {
 4417|  7.26k|        return m_begin;
 4418|  7.26k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    848|{
 1462|    848|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    848|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    848|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    848|            return transcode_to_string_impl_to32(src, dest);
 1473|    848|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    848|    SCN_EXPECT(false);
  ------------------
  |  | 1104|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    848|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    848|{
 1355|    848|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    848|    auto it = src.begin();
 1358|   214k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 213k, False: 848]
  ------------------
 1359|   213k|        auto res = get_next_code_point(
 1360|   213k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   213k|                                                                 src.end()));
 1362|   213k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1039|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.82k, False: 206k]
  |  |  ------------------
  ------------------
 1363|  6.82k|            dest.push_back(DestCharT{0xfffd});
 1364|  6.82k|        }
 1365|   206k|        else {
 1366|   206k|            dest.push_back(res.value);
 1367|   206k|        }
 1368|   213k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   213k|    }
 1370|    848|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   230k|{
 1279|   230k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   230k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   230k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.4k, False: 220k]
  |  |  ------------------
  ------------------
 1283|  10.4k|        return {get_start_for_next_code_point(input),
 1284|  10.4k|                detail::invalid_code_point};
 1285|  10.4k|    }
 1286|   220k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1039|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 320, False: 219k]
  |  |  ------------------
  ------------------
 1287|    320|        return {input.end(), detail::invalid_code_point};
 1288|    320|    }
 1289|       |
 1290|   219k|    return {input.begin() + len,
 1291|   219k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   220k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  10.4k|{
 1265|  10.4k|    auto it = input.begin();
 1266|   145k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 145k, False: 580]
  ------------------
 1267|   145k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 9.88k, False: 135k]
  ------------------
 1268|  9.88k|            break;
 1269|  9.88k|        }
 1270|   145k|    }
 1271|  10.4k|    return it;
 1272|  10.4k|}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   161k|{
  458|   161k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   161k|        static_cast<unsigned char>(ch))];
  460|   161k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  86.6k|{
  539|  86.6k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  86.6k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|   365k|{
  784|   365k|    return e != eof_error::good;
  785|   365k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  4.26k|{
  798|  4.26k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|  4.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  4.26k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  4.26k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  81.6k|    {
  304|  81.6k|        ranges::advance(x, n);
  305|  81.6k|        return x;
  306|  81.6k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  81.6k|    {
  268|  81.6k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  81.6k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  81.6k|    {
  151|  81.6k|        i += n;
  152|  81.6k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   215k|    {
  108|   215k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   215k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   215k|    {
   87|   215k|        return s - i;
   88|   215k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   114k|    {
  108|   114k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   114k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   114k|    {
   87|   114k|        return s - i;
   88|   114k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2INSt3__117basic_string_viewIcNSB_11char_traitsIcEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSO_10locale_refE:
 3017|  81.6k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|  81.6k|    static_cast<    \
  |  | 1109|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|  81.6k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|  81.6k|          m_current(m_range.begin())
 3020|  81.6k|    {
 3021|  81.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3024|   453k|    {
 3025|   453k|        return m_current;
 3026|   453k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2INSt3__117basic_string_viewIwNSB_11char_traitsIwEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSO_10locale_refE:
 3017|  93.0k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|  93.0k|    static_cast<    \
  |  | 1109|  93.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|  93.0k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|  93.0k|          m_current(m_range.begin())
 3020|  93.0k|    {
 3021|  93.0k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3024|   485k|    {
 3025|   485k|        return m_current;
 3026|   485k|    }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  1.09M|    {
  763|  1.09M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.09M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   283k|        : m_fptr([](storage fn,
  743|   283k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   283k|              cvref<T> obj = *get<T>(fn);
  745|   283k|              if constexpr (std::is_void_v<R>) {
  746|   283k|                  obj(static_cast<decltype(args)>(args)...);
  747|   283k|              }
  748|   283k|              else {
  749|   283k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   283k|              }
  751|   283k|          }),
  752|   283k|          m_storage(std::addressof(f))
  753|   283k|    {
  754|   283k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   547k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   547k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   547k|              else {
  749|   547k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   547k|              }
  751|   547k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   547k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   547k|        else if constexpr (std::is_object_v<T>) {
  688|   547k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   547k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   283k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   283k|        {
  662|   283k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  62.2k|    {
  108|  62.2k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  62.2k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  62.2k|    {
   94|  62.2k|        iter_difference_t<I> counter{0};
   95|   573k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 511k, False: 62.2k]
  ------------------
   96|   511k|            ++i;
   97|   511k|            ++counter;
   98|   511k|        }
   99|  62.2k|        return counter;
  100|  62.2k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  97.8k|{
  951|  97.8k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  97.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.44k, False: 96.3k]
  |  |  ------------------
  ------------------
  952|  1.44k|        return eof_error::eof;
  953|  1.44k|    }
  954|  96.3k|    return eof_error::good;
  955|  97.8k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   320k|{
  945|   320k|    return is_range_eof(r.begin(), r.end());
  946|   320k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   320k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   320k|    {
  938|   320k|        return begin == end;
  939|   320k|    }
  940|   320k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  81.6k|{
  951|  81.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 738, False: 80.8k]
  |  |  ------------------
  ------------------
  952|    738|        return eof_error::eof;
  953|    738|    }
  954|  80.8k|    return eof_error::good;
  955|  81.6k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  81.6k|{
  945|  81.6k|    return is_range_eof(r.begin(), r.end());
  946|  81.6k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  81.6k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  81.6k|    {
  938|  81.6k|        return begin == end;
  939|  81.6k|    }
  940|  81.6k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|   163k|    {
 1602|   163k|        return sv;
 1603|   163k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|  81.6k|{
 3098|  81.6k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 81.6k, False: 0]
  ------------------
 3099|  81.6k|        auto it = read_while_classic_space(range);
 3100|  81.6k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  81.6k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 738, False: 80.8k]
  |  |  ------------------
  ------------------
 3102|    738|            return unexpected(e);
 3103|    738|        }
 3104|       |
 3105|  80.8k|        return it;
 3106|  81.6k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  81.6k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|  81.6k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|  81.6k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|  81.6k|        auto buf = make_contiguous_buffer(range);
 2253|  81.6k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|  81.6k|        return ranges::next(range.begin(),
 2255|  81.6k|                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|       |    else {
 2258|       |        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|       |            return detail::is_cp_space(cp);
 2271|       |        });
 2272|       |    }
 2273|  81.6k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  81.6k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  81.6k|                  ranges::sized_range<Range>) {
 1785|  81.6k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  81.6k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  81.6k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  81.6k|    {
 1589|  81.6k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  97.8k|    {
  268|  97.8k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  97.8k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  97.8k|    {
  181|  97.8k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 0, False: 97.8k]
  ------------------
  182|      0|            ++i;
  183|      0|        }
  184|  97.8k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  97.8k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  97.8k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  97.8k|        else {
 1055|  97.8k|            return r.begin().contiguous_segment();
 1056|  97.8k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  97.8k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|  97.8k|{
 2193|  97.8k|    auto it = range.begin();
 2194|   224k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 222k, False: 1.44k]
  ------------------
 2195|   222k|        const auto val =
 2196|   222k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   222k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   222k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 202k, False: 19.8k]
  |  |  ------------------
  ------------------
 2198|   202k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   202k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   202k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 96.3k, False: 106k]
  ------------------
 2201|  96.3k|                return it;
 2202|  96.3k|            }
 2203|   202k|        }
 2204|   126k|        it = val.iterator;
 2205|   126k|    }
 2206|       |
 2207|  1.44k|    return it;
 2208|  97.8k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   222k|{
 1998|   222k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   222k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   222k|    auto it = range.begin();
 2002|   222k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   222k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 19.8k, False: 202k]
  |  |  ------------------
  ------------------
 2005|  19.8k|        ++it;
 2006|  19.8k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  19.8k|        return {it, {}};
 2008|  19.8k|    }
 2009|       |
 2010|   202k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 197k, False: 5.19k]
  ------------------
 2011|   197k|        ++it;
 2012|   197k|        return {it, string_type(1, *range.begin())};
 2013|   197k|    }
 2014|       |
 2015|  5.19k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  5.19k|    return {it, string_type{range.begin(), it}};
 2017|   202k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  19.8k|{
 1265|  19.8k|    auto it = input.begin();
 1266|   257k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 256k, False: 546]
  ------------------
 1267|   256k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 19.2k, False: 237k]
  ------------------
 1268|  19.2k|            break;
 1269|  19.2k|        }
 1270|   256k|    }
 1271|  19.8k|    return it;
 1272|  19.8k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  5.19k|    {
  283|  5.19k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  5.19k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  5.19k|    {
  252|  5.19k|        constexpr iter_difference_t<I> zero{0};
  253|  5.19k|        iter_difference_t<I> counter{0};
  254|       |
  255|  16.4k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 11.6k, False: 4.86k]
  |  Branch (255:30): [True: 11.2k, False: 324]
  ------------------
  256|  11.2k|            ++i;
  257|  11.2k|            ++counter;
  258|  11.2k|        }
  259|       |
  260|  5.19k|        return counter;
  261|  5.19k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   222k|    {
 1989|   222k|        return !codepoint.empty();
 1990|   222k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|  97.8k|{
 2214|  97.8k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  97.8k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|  97.8k|{
 3098|  97.8k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 97.8k, False: 0]
  ------------------
 3099|  97.8k|        auto it = read_while_classic_space(range);
 3100|  97.8k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  97.8k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  97.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.44k, False: 96.3k]
  |  |  ------------------
  ------------------
 3102|  1.44k|            return unexpected(e);
 3103|  1.44k|        }
 3104|       |
 3105|  96.3k|        return it;
 3106|  97.8k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  97.8k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|  97.8k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  97.8k|    else {
 2258|  97.8k|        auto it = range.begin();
 2259|       |
 2260|  97.8k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|  97.8k|            auto seg = get_contiguous_beginning(range);
 2262|  97.8k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|  97.8k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2263:17): [True: 0, False: 97.8k]
  ------------------
 2264|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|      0|            }
 2266|  97.8k|            ranges::advance(it, seg.size());
 2267|  97.8k|        }
 2268|       |
 2269|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  97.8k|            return detail::is_cp_space(cp);
 2271|  97.8k|        });
 2272|  97.8k|    }
 2273|  97.8k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  97.8k|        : m_fptr([](storage fn,
  743|  97.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  97.8k|              cvref<T> obj = *get<T>(fn);
  745|  97.8k|              if constexpr (std::is_void_v<R>) {
  746|  97.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  97.8k|              }
  748|  97.8k|              else {
  749|  97.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  97.8k|              }
  751|  97.8k|          }),
  752|  97.8k|          m_storage(std::addressof(f))
  753|  97.8k|    {
  754|  97.8k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   202k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   202k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   202k|              else {
  749|   202k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   202k|              }
  751|   202k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   202k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   202k|        else if constexpr (std::is_object_v<T>) {
  688|   202k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   202k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|   202k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   202k|            return detail::is_cp_space(cp);
 2271|   202k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  97.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  97.8k|        {
  662|  97.8k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  21.8k|    {
  108|  21.8k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  21.8k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  21.8k|    {
   94|  21.8k|        iter_difference_t<I> counter{0};
   95|   150k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 129k, False: 21.8k]
  ------------------
   96|   129k|            ++i;
   97|   129k|            ++counter;
   98|   129k|        }
   99|  21.8k|        return counter;
  100|  21.8k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  93.0k|{
  951|  93.0k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.04k, False: 91.9k]
  |  |  ------------------
  ------------------
  952|  1.04k|        return eof_error::eof;
  953|  1.04k|    }
  954|  91.9k|    return eof_error::good;
  955|  93.0k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   265k|{
  945|   265k|    return is_range_eof(r.begin(), r.end());
  946|   265k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   265k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   265k|    {
  938|   265k|        return begin == end;
  939|   265k|    }
  940|   265k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   172k|{
 1998|   172k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   172k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   172k|    auto it = range.begin();
 2002|   172k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   172k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 172k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   172k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 172k, False: 0]
  ------------------
 2011|   172k|        ++it;
 2012|   172k|        return {it, string_type(1, *range.begin())};
 2013|   172k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   172k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   265k|{
  945|   265k|    return is_range_eof(r.begin(), r.end());
  946|   265k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   265k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   265k|    {
  938|   265k|        return begin == end;
  939|   265k|    }
  940|   265k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   172k|    {
 1989|   172k|        return !codepoint.empty();
 1990|   172k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  93.0k|{
  951|  93.0k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.04k, False: 91.9k]
  |  |  ------------------
  ------------------
  952|  1.04k|        return eof_error::eof;
  953|  1.04k|    }
  954|  91.9k|    return eof_error::good;
  955|  93.0k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|  93.0k|{
 3098|  93.0k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 93.0k, False: 0]
  ------------------
 3099|  93.0k|        auto it = read_while_classic_space(range);
 3100|  93.0k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  93.0k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.04k, False: 91.9k]
  |  |  ------------------
  ------------------
 3102|  1.04k|            return unexpected(e);
 3103|  1.04k|        }
 3104|       |
 3105|  91.9k|        return it;
 3106|  93.0k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  93.0k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|  93.0k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  93.0k|    else {
 2258|  93.0k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|  93.0k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  93.0k|            return detail::is_cp_space(cp);
 2271|  93.0k|        });
 2272|  93.0k|    }
 2273|  93.0k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2213|  93.0k|{
 2214|  93.0k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  93.0k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2192|  93.0k|{
 2193|  93.0k|    auto it = range.begin();
 2194|   173k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 172k, False: 1.04k]
  ------------------
 2195|   172k|        const auto val =
 2196|   172k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   172k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   172k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 172k, False: 0]
  |  |  ------------------
  ------------------
 2198|   172k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   172k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   172k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 91.9k, False: 80.0k]
  ------------------
 2201|  91.9k|                return it;
 2202|  91.9k|            }
 2203|   172k|        }
 2204|  80.0k|        it = val.iterator;
 2205|  80.0k|    }
 2206|       |
 2207|  1.04k|    return it;
 2208|  93.0k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  93.0k|        : m_fptr([](storage fn,
  743|  93.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.0k|              cvref<T> obj = *get<T>(fn);
  745|  93.0k|              if constexpr (std::is_void_v<R>) {
  746|  93.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.0k|              }
  748|  93.0k|              else {
  749|  93.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.0k|              }
  751|  93.0k|          }),
  752|  93.0k|          m_storage(std::addressof(f))
  753|  93.0k|    {
  754|  93.0k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   172k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   172k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   172k|              else {
  749|   172k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   172k|              }
  751|   172k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   172k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   172k|        else if constexpr (std::is_object_v<T>) {
  688|   172k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   172k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2269|   172k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   172k|            return detail::is_cp_space(cp);
 2271|   172k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  93.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.0k|        {
  662|  93.0k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|  93.0k|{
 2193|  93.0k|    auto it = range.begin();
 2194|   173k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 172k, False: 1.04k]
  ------------------
 2195|   172k|        const auto val =
 2196|   172k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   172k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   172k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 172k, False: 0]
  |  |  ------------------
  ------------------
 2198|   172k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   172k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   172k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 91.9k, False: 80.0k]
  ------------------
 2201|  91.9k|                return it;
 2202|  91.9k|            }
 2203|   172k|        }
 2204|  80.0k|        it = val.iterator;
 2205|  80.0k|    }
 2206|       |
 2207|  1.04k|    return it;
 2208|  93.0k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   172k|{
 1998|   172k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   172k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   172k|    auto it = range.begin();
 2002|   172k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   172k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 172k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   172k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 172k, False: 0]
  ------------------
 2011|   172k|        ++it;
 2012|   172k|        return {it, string_type(1, *range.begin())};
 2013|   172k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   172k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   172k|    {
 1989|   172k|        return !codepoint.empty();
 1990|   172k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|  93.0k|{
 2214|  93.0k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  93.0k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|  93.0k|{
 3098|  93.0k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 93.0k, False: 0]
  ------------------
 3099|  93.0k|        auto it = read_while_classic_space(range);
 3100|  93.0k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  93.0k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.04k, False: 91.9k]
  |  |  ------------------
  ------------------
 3102|  1.04k|            return unexpected(e);
 3103|  1.04k|        }
 3104|       |
 3105|  91.9k|        return it;
 3106|  93.0k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  93.0k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|  93.0k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  93.0k|    else {
 2258|  93.0k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|  93.0k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  93.0k|            return detail::is_cp_space(cp);
 2271|  93.0k|        });
 2272|  93.0k|    }
 2273|  93.0k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  93.0k|        : m_fptr([](storage fn,
  743|  93.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.0k|              cvref<T> obj = *get<T>(fn);
  745|  93.0k|              if constexpr (std::is_void_v<R>) {
  746|  93.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.0k|              }
  748|  93.0k|              else {
  749|  93.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.0k|              }
  751|  93.0k|          }),
  752|  93.0k|          m_storage(std::addressof(f))
  753|  93.0k|    {
  754|  93.0k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   172k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   172k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   172k|              else {
  749|   172k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   172k|              }
  751|   172k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   172k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   172k|        else if constexpr (std::is_object_v<T>) {
  688|   172k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   172k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|   172k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   172k|            return detail::is_cp_space(cp);
 2271|   172k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  93.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.0k|        {
  662|  93.0k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEcEEE6handleE:
 6004|  2.54k|    {
 6005|  2.54k|        if constexpr (!detail::is_type_disabled<void>) {
 6006|  2.54k|            basic_scan_parse_context<char_type> parse_ctx{
 6007|  2.54k|                source_tag<range_type>, {}};
 6008|  2.54k|            auto ctx = make_custom_ctx();
 6009|  2.54k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3948|  2.54k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  2.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.54k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.54k|    }
  ------------------
 6010|       |
 6011|       |            if constexpr (std::is_same_v<
 6012|       |                              context_type,
 6013|      0|                              basic_contiguous_scan_context<char_type>>) {
 6014|      0|                return range.begin() + ctx.begin().position();
 6015|       |            }
 6016|       |            else {
 6017|       |                return ctx.begin();
 6018|       |            }
 6019|       |        }
 6020|       |        else {
 6021|       |            SCN_EXPECT(false);
 6022|       |            SCN_UNREACHABLE;
 6023|       |        }
 6024|  2.54k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE15make_custom_ctxEv:
 5986|  2.54k|    {
 5987|       |        if constexpr (std::is_same_v<
 5988|       |                          context_type,
 5989|  2.54k|                          basic_contiguous_scan_context<char_type>>) {
 5990|  2.54k|            auto it =
 5991|  2.54k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5992|  2.54k|                    std::basic_string_view<char_type>(range.data(),
 5993|  2.54k|                                                      range.size()),
 5994|  2.54k|                    0};
 5995|  2.54k|            return {it, args, loc};
 5996|       |        }
 5997|       |        else {
 5998|       |            return {range.begin(), args, loc};
 5999|       |        }
 6000|  2.54k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 6004|  2.54k|    {
 6005|  2.54k|        if constexpr (!detail::is_type_disabled<void>) {
 6006|  2.54k|            basic_scan_parse_context<char_type> parse_ctx{
 6007|  2.54k|                source_tag<range_type>, {}};
 6008|  2.54k|            auto ctx = make_custom_ctx();
 6009|  2.54k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3948|  2.54k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  2.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.54k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.54k|    }
  ------------------
 6010|       |
 6011|       |            if constexpr (std::is_same_v<
 6012|       |                              context_type,
 6013|       |                              basic_contiguous_scan_context<char_type>>) {
 6014|       |                return range.begin() + ctx.begin().position();
 6015|       |            }
 6016|      0|            else {
 6017|      0|                return ctx.begin();
 6018|      0|            }
 6019|       |        }
 6020|       |        else {
 6021|       |            SCN_EXPECT(false);
 6022|       |            SCN_UNREACHABLE;
 6023|       |        }
 6024|  2.54k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15make_custom_ctxEv:
 5986|  2.54k|    {
 5987|       |        if constexpr (std::is_same_v<
 5988|       |                          context_type,
 5989|       |                          basic_contiguous_scan_context<char_type>>) {
 5990|       |            auto it =
 5991|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5992|       |                    std::basic_string_view<char_type>(range.data(),
 5993|       |                                                      range.size()),
 5994|       |                    0};
 5995|       |            return {it, args, loc};
 5996|       |        }
 5997|  2.54k|        else {
 5998|  2.54k|            return {range.begin(), args, loc};
 5999|  2.54k|        }
 6000|  2.54k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3017|  81.6k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|  81.6k|    static_cast<    \
  |  | 1109|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|  81.6k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|  81.6k|          m_current(m_range.begin())
 3020|  81.6k|    {
 3021|  81.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3029|   243k|    {
 3030|   243k|        return m_range.end();
 3031|   243k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3044|  80.8k|    {
 3045|  80.8k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|  80.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  80.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|  80.8k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|  80.8k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 80.8k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|  80.8k|        }
 3051|  80.8k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|  80.8k|    static_cast<    \
  |  | 1109|  80.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|  80.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3034|   162k|    {
 3035|   162k|        return ranges::subrange{begin(), end()};
 3036|   162k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 6336|   179k|    {
 6337|   179k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3948|   179k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 71.2k, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  71.2k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  71.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  71.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  71.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  71.2k|    }
  ------------------
 6338|   108k|        return {ctx.begin()};
 6339|   179k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toERKNS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 3055|  46.0k|    {
 3056|  46.0k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  | 1104|  46.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  46.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3057|  46.0k|        m_current = m_range.begin() + it.position();
 3058|  46.0k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE16underlying_rangeEv:
 3039|   244k|    {
 3040|   244k|        return m_range;
 3041|   244k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE14begin_positionEv:
 3061|  81.6k|    {
 3062|  81.6k|        return ranges::distance(m_range.begin(), begin());
 3063|  81.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEwEEE6handleE:
 6004|  5.08k|    {
 6005|  5.08k|        if constexpr (!detail::is_type_disabled<void>) {
 6006|  5.08k|            basic_scan_parse_context<char_type> parse_ctx{
 6007|  5.08k|                source_tag<range_type>, {}};
 6008|  5.08k|            auto ctx = make_custom_ctx();
 6009|  5.08k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3948|  5.08k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  5.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 5.08k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  5.08k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  5.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  5.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  5.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  5.08k|    }
  ------------------
 6010|       |
 6011|       |            if constexpr (std::is_same_v<
 6012|       |                              context_type,
 6013|      0|                              basic_contiguous_scan_context<char_type>>) {
 6014|      0|                return range.begin() + ctx.begin().position();
 6015|       |            }
 6016|       |            else {
 6017|       |                return ctx.begin();
 6018|       |            }
 6019|       |        }
 6020|       |        else {
 6021|       |            SCN_EXPECT(false);
 6022|       |            SCN_UNREACHABLE;
 6023|       |        }
 6024|  5.08k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE15make_custom_ctxEv:
 5986|  5.08k|    {
 5987|       |        if constexpr (std::is_same_v<
 5988|       |                          context_type,
 5989|  5.08k|                          basic_contiguous_scan_context<char_type>>) {
 5990|  5.08k|            auto it =
 5991|  5.08k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5992|  5.08k|                    std::basic_string_view<char_type>(range.data(),
 5993|  5.08k|                                                      range.size()),
 5994|  5.08k|                    0};
 5995|  5.08k|            return {it, args, loc};
 5996|       |        }
 5997|       |        else {
 5998|       |            return {range.begin(), args, loc};
 5999|       |        }
 6000|  5.08k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3017|  93.0k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|  93.0k|    static_cast<    \
  |  | 1109|  93.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|  93.0k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|  93.0k|          m_current(m_range.begin())
 3020|  93.0k|    {
 3021|  93.0k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3029|   277k|    {
 3030|   277k|        return m_range.end();
 3031|   277k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3044|  91.9k|    {
 3045|  91.9k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|  91.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  91.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|  91.9k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|  91.9k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 91.9k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|  91.9k|        }
 3051|  91.9k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|  91.9k|    static_cast<    \
  |  | 1109|  91.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|  91.9k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3034|   185k|    {
 3035|   185k|        return ranges::subrange{begin(), end()};
 3036|   185k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 6336|   186k|    {
 6337|   186k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3948|   186k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 142k, False: 43.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|   142k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|   142k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|   142k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|   142k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|   142k|    }
  ------------------
 6338|  43.6k|        return {ctx.begin()};
 6339|   186k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toERKNS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 3055|  21.8k|    {
 3056|  21.8k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  | 1104|  21.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3057|  21.8k|        m_current = m_range.begin() + it.position();
 3058|  21.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE16underlying_rangeEv:
 3039|   279k|    {
 3040|   279k|        return m_range;
 3041|   279k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE14begin_positionEv:
 3061|  93.0k|    {
 3062|  93.0k|        return ranges::distance(m_range.begin(), begin());
 3063|  93.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 6004|  5.08k|    {
 6005|  5.08k|        if constexpr (!detail::is_type_disabled<void>) {
 6006|  5.08k|            basic_scan_parse_context<char_type> parse_ctx{
 6007|  5.08k|                source_tag<range_type>, {}};
 6008|  5.08k|            auto ctx = make_custom_ctx();
 6009|  5.08k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3948|  5.08k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  5.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 5.08k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  5.08k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  5.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  5.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  5.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  5.08k|    }
  ------------------
 6010|       |
 6011|       |            if constexpr (std::is_same_v<
 6012|       |                              context_type,
 6013|       |                              basic_contiguous_scan_context<char_type>>) {
 6014|       |                return range.begin() + ctx.begin().position();
 6015|       |            }
 6016|      0|            else {
 6017|      0|                return ctx.begin();
 6018|      0|            }
 6019|       |        }
 6020|       |        else {
 6021|       |            SCN_EXPECT(false);
 6022|       |            SCN_UNREACHABLE;
 6023|       |        }
 6024|  5.08k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15make_custom_ctxEv:
 5986|  5.08k|    {
 5987|       |        if constexpr (std::is_same_v<
 5988|       |                          context_type,
 5989|       |                          basic_contiguous_scan_context<char_type>>) {
 5990|       |            auto it =
 5991|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5992|       |                    std::basic_string_view<char_type>(range.data(),
 5993|       |                                                      range.size()),
 5994|       |                    0};
 5995|       |            return {it, args, loc};
 5996|       |        }
 5997|  5.08k|        else {
 5998|  5.08k|            return {range.begin(), args, loc};
 5999|  5.08k|        }
 6000|  5.08k|    }

LLVMFuzzerTestOneInput:
   58|    848|{
   59|    848|    scn::fuzz::run(data, size);
   60|    848|    return 0;
   61|    848|}
chrono_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   34|    848|{
   35|    848|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (35:9): [True: 0, False: 848]
  |  Branch (35:35): [True: 0, False: 848]
  ------------------
   36|      0|        return;
   37|      0|    }
   38|       |
   39|    848|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   40|       |
   41|    848|    const auto& f =
   42|    848|        get_format_strings<char>("{:%T}", "{:%R}", "{:%D}", "{:%F}",
   43|    848|                                 "{:%Y-%m-%dT%H:%M:%S%z}", "{:%a}", "{:%b}");
   44|    848|    do_basic_run(sv, f);
   45|       |
   46|    848|    const auto& wf = get_format_strings<wchar_t>(
   47|    848|        L"{:%T}", L"{:%R}", L"{:%D}", L"{:%F}", L"{:%Y-%m-%dT%H:%M:%S%z}",
   48|    848|        L"{:%a}", L"{:%b}");
   49|    848|    do_basic_run(wsv_reinterpret, wf);
   50|    848|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (50:9): [True: 848, False: 0]
  ------------------
   51|    848|        do_basic_run(wsv_transcode, wf);
   52|    848|    }
   53|    848|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|    848|{
   27|    848|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    848|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    848|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    848|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|    848|{
   27|    848|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    848|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    848|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    848|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|  1.69k|{
   27|  1.69k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.69k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.69k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.69k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|  1.69k|{
   27|  1.69k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.69k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.69k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.69k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    848|{
   53|    848|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1104|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    848|    string_buffer.resize(size);
   57|    848|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    848|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    848|    const auto wsv_reinterpret_size =
   62|    848|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 74, False: 774]
  ------------------
   63|    848|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    848|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    848|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    848|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    848|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    848|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    848|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    848|{
  123|    848|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    848|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    848|    buf.resize(sizeof...(Args));
  126|    848|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    848|    return buf;
  128|    848|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    848|{
  109|    848|    if constexpr (std::is_same_v<CharT, char>) {
  110|    848|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    848|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    848|{
  186|    848|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    848|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    848|                                   format_strings);
  189|    848|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|    848|{
  134|       |    // Regular scan
  135|  5.93k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.93k, False: 848]
  ------------------
  136|  5.93k|        auto it = scn::ranges::begin(source);
  137|  13.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.6k|            auto result = scn::scan<T>(
  140|  13.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.6k|                scn::runtime_format(f));
  142|  13.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.93k, False: 7.66k]
  ------------------
  143|  5.93k|                break;
  144|  5.93k|            }
  145|  7.66k|            it = result->begin();
  146|  7.66k|        }
  147|  5.93k|    }
  148|       |
  149|       |    // scan localized
  150|  5.93k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.93k, False: 848]
  ------------------
  151|  5.93k|        auto it = scn::ranges::begin(source);
  152|  13.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.6k|            auto result = scn::scan<T>(
  155|  13.6k|                global_locale,
  156|  13.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.6k|                scn::runtime_format(f));
  158|  13.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.93k, False: 7.66k]
  ------------------
  159|  5.93k|                break;
  160|  5.93k|            }
  161|  7.66k|            it = result->begin();
  162|  7.66k|        }
  163|  5.93k|    }
  164|       |
  165|       |    // scan_value
  166|    848|    {
  167|    848|        auto it = scn::ranges::begin(source);
  168|    848|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    848|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    848|            auto result = scn::scan_value<T>(
  171|    848|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    848|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 848, False: 0]
  ------------------
  173|    848|                break;
  174|    848|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    848|    }
  178|    848|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    848|{
  134|       |    // Regular scan
  135|  5.93k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.93k, False: 848]
  ------------------
  136|  5.93k|        auto it = scn::ranges::begin(source);
  137|  13.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.6k|            auto result = scn::scan<T>(
  140|  13.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.6k|                scn::runtime_format(f));
  142|  13.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.93k, False: 7.66k]
  ------------------
  143|  5.93k|                break;
  144|  5.93k|            }
  145|  7.66k|            it = result->begin();
  146|  7.66k|        }
  147|  5.93k|    }
  148|       |
  149|       |    // scan localized
  150|  5.93k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.93k, False: 848]
  ------------------
  151|  5.93k|        auto it = scn::ranges::begin(source);
  152|  13.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.6k|            auto result = scn::scan<T>(
  155|  13.6k|                global_locale,
  156|  13.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.6k|                scn::runtime_format(f));
  158|  13.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.93k, False: 7.66k]
  ------------------
  159|  5.93k|                break;
  160|  5.93k|            }
  161|  7.66k|            it = result->begin();
  162|  7.66k|        }
  163|  5.93k|    }
  164|       |
  165|       |    // scan_value
  166|    848|    {
  167|    848|        auto it = scn::ranges::begin(source);
  168|    848|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    848|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    848|            auto result = scn::scan_value<T>(
  171|    848|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    848|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 848, False: 0]
  ------------------
  173|    848|                break;
  174|    848|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    848|    }
  178|    848|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    848|{
  134|       |    // Regular scan
  135|  5.93k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.93k, False: 848]
  ------------------
  136|  5.93k|        auto it = scn::ranges::begin(source);
  137|  13.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.6k|            auto result = scn::scan<T>(
  140|  13.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.6k|                scn::runtime_format(f));
  142|  13.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.93k, False: 7.66k]
  ------------------
  143|  5.93k|                break;
  144|  5.93k|            }
  145|  7.66k|            it = result->begin();
  146|  7.66k|        }
  147|  5.93k|    }
  148|       |
  149|       |    // scan localized
  150|  5.93k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.93k, False: 848]
  ------------------
  151|  5.93k|        auto it = scn::ranges::begin(source);
  152|  13.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.6k|            auto result = scn::scan<T>(
  155|  13.6k|                global_locale,
  156|  13.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.6k|                scn::runtime_format(f));
  158|  13.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.93k, False: 7.66k]
  ------------------
  159|  5.93k|                break;
  160|  5.93k|            }
  161|  7.66k|            it = result->begin();
  162|  7.66k|        }
  163|  5.93k|    }
  164|       |
  165|       |    // scan_value
  166|    848|    {
  167|    848|        auto it = scn::ranges::begin(source);
  168|    848|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    848|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    848|            auto result = scn::scan_value<T>(
  171|    848|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    848|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 848, False: 0]
  ------------------
  173|    848|                break;
  174|    848|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    848|    }
  178|    848|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmKNSt3__15dequeIcNS3_9allocatorIcEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|    848|{
  134|       |    // Regular scan
  135|  5.93k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.93k, False: 848]
  ------------------
  136|  5.93k|        auto it = scn::ranges::begin(source);
  137|  16.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.3k|            auto result = scn::scan<T>(
  140|  16.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.3k|                scn::runtime_format(f));
  142|  16.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.93k, False: 10.3k]
  ------------------
  143|  5.93k|                break;
  144|  5.93k|            }
  145|  10.3k|            it = result->begin();
  146|  10.3k|        }
  147|  5.93k|    }
  148|       |
  149|       |    // scan localized
  150|  5.93k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.93k, False: 848]
  ------------------
  151|  5.93k|        auto it = scn::ranges::begin(source);
  152|  16.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.3k|            auto result = scn::scan<T>(
  155|  16.3k|                global_locale,
  156|  16.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.3k|                scn::runtime_format(f));
  158|  16.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.93k, False: 10.3k]
  ------------------
  159|  5.93k|                break;
  160|  5.93k|            }
  161|  10.3k|            it = result->begin();
  162|  10.3k|        }
  163|  5.93k|    }
  164|       |
  165|       |    // scan_value
  166|    848|    {
  167|    848|        auto it = scn::ranges::begin(source);
  168|    848|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    848|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    848|            auto result = scn::scan_value<T>(
  171|    848|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    848|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 848, False: 0]
  ------------------
  173|    848|                break;
  174|    848|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    848|    }
  178|    848|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    848|{
  134|       |    // Regular scan
  135|  5.93k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.93k, False: 848]
  ------------------
  136|  5.93k|        auto it = scn::ranges::begin(source);
  137|  16.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.3k|            auto result = scn::scan<T>(
  140|  16.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.3k|                scn::runtime_format(f));
  142|  16.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.93k, False: 10.3k]
  ------------------
  143|  5.93k|                break;
  144|  5.93k|            }
  145|  10.3k|            it = result->begin();
  146|  10.3k|        }
  147|  5.93k|    }
  148|       |
  149|       |    // scan localized
  150|  5.93k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.93k, False: 848]
  ------------------
  151|  5.93k|        auto it = scn::ranges::begin(source);
  152|  16.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.3k|            auto result = scn::scan<T>(
  155|  16.3k|                global_locale,
  156|  16.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.3k|                scn::runtime_format(f));
  158|  16.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.93k, False: 10.3k]
  ------------------
  159|  5.93k|                break;
  160|  5.93k|            }
  161|  10.3k|            it = result->begin();
  162|  10.3k|        }
  163|  5.93k|    }
  164|       |
  165|       |    // scan_value
  166|    848|    {
  167|    848|        auto it = scn::ranges::begin(source);
  168|    848|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    848|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    848|            auto result = scn::scan_value<T>(
  171|    848|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    848|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 848, False: 0]
  ------------------
  173|    848|                break;
  174|    848|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    848|    }
  178|    848|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    848|{
  134|       |    // Regular scan
  135|  5.93k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.93k, False: 848]
  ------------------
  136|  5.93k|        auto it = scn::ranges::begin(source);
  137|  16.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.3k|            auto result = scn::scan<T>(
  140|  16.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.3k|                scn::runtime_format(f));
  142|  16.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.93k, False: 10.3k]
  ------------------
  143|  5.93k|                break;
  144|  5.93k|            }
  145|  10.3k|            it = result->begin();
  146|  10.3k|        }
  147|  5.93k|    }
  148|       |
  149|       |    // scan localized
  150|  5.93k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.93k, False: 848]
  ------------------
  151|  5.93k|        auto it = scn::ranges::begin(source);
  152|  16.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.3k|            auto result = scn::scan<T>(
  155|  16.3k|                global_locale,
  156|  16.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.3k|                scn::runtime_format(f));
  158|  16.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.93k, False: 10.3k]
  ------------------
  159|  5.93k|                break;
  160|  5.93k|            }
  161|  10.3k|            it = result->begin();
  162|  10.3k|        }
  163|  5.93k|    }
  164|       |
  165|       |    // scan_value
  166|    848|    {
  167|    848|        auto it = scn::ranges::begin(source);
  168|    848|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    848|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    848|            auto result = scn::scan_value<T>(
  171|    848|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    848|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 848, False: 0]
  ------------------
  173|    848|                break;
  174|    848|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    848|    }
  178|    848|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    848|{
   91|    848|    using char_type = ranges::range_value_t<Source>;
   92|    848|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    848|    deque.clear();
   94|    848|    std::copy(ranges::begin(source), ranges::end(source),
   95|    848|              std::back_inserter(deque));
   96|    848|    return deque;
   97|    848|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    848|{
   80|    848|    if constexpr (std::is_same_v<CharT, char>) {
   81|    848|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    848|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    848|{
  123|    848|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    848|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    848|    buf.resize(sizeof...(Args));
  126|    848|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    848|    return buf;
  128|    848|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    848|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    848|    else {
  113|    848|        return wformat_string_view_buffer;
  114|    848|    }
  115|    848|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.69k|{
  186|  1.69k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.69k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.69k|                                   format_strings);
  189|  1.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|  1.69k|{
  134|       |    // Regular scan
  135|  11.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.8k, False: 1.69k]
  ------------------
  136|  11.8k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.8k, False: 3.63k]
  ------------------
  143|  11.8k|                break;
  144|  11.8k|            }
  145|  3.63k|            it = result->begin();
  146|  3.63k|        }
  147|  11.8k|    }
  148|       |
  149|       |    // scan localized
  150|  11.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.8k, False: 1.69k]
  ------------------
  151|  11.8k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.8k, False: 3.63k]
  ------------------
  159|  11.8k|                break;
  160|  11.8k|            }
  161|  3.63k|            it = result->begin();
  162|  3.63k|        }
  163|  11.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.69k|    {
  167|  1.69k|        auto it = scn::ranges::begin(source);
  168|  1.69k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.69k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.69k|            auto result = scn::scan_value<T>(
  171|  1.69k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.69k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.69k, False: 0]
  ------------------
  173|  1.69k|                break;
  174|  1.69k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.69k|    }
  178|  1.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.69k|{
  134|       |    // Regular scan
  135|  11.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.8k, False: 1.69k]
  ------------------
  136|  11.8k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.8k, False: 3.63k]
  ------------------
  143|  11.8k|                break;
  144|  11.8k|            }
  145|  3.63k|            it = result->begin();
  146|  3.63k|        }
  147|  11.8k|    }
  148|       |
  149|       |    // scan localized
  150|  11.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.8k, False: 1.69k]
  ------------------
  151|  11.8k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.8k, False: 3.63k]
  ------------------
  159|  11.8k|                break;
  160|  11.8k|            }
  161|  3.63k|            it = result->begin();
  162|  3.63k|        }
  163|  11.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.69k|    {
  167|  1.69k|        auto it = scn::ranges::begin(source);
  168|  1.69k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.69k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.69k|            auto result = scn::scan_value<T>(
  171|  1.69k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.69k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.69k, False: 0]
  ------------------
  173|  1.69k|                break;
  174|  1.69k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.69k|    }
  178|  1.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.69k|{
  134|       |    // Regular scan
  135|  11.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.8k, False: 1.69k]
  ------------------
  136|  11.8k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.8k, False: 3.63k]
  ------------------
  143|  11.8k|                break;
  144|  11.8k|            }
  145|  3.63k|            it = result->begin();
  146|  3.63k|        }
  147|  11.8k|    }
  148|       |
  149|       |    // scan localized
  150|  11.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.8k, False: 1.69k]
  ------------------
  151|  11.8k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.8k, False: 3.63k]
  ------------------
  159|  11.8k|                break;
  160|  11.8k|            }
  161|  3.63k|            it = result->begin();
  162|  3.63k|        }
  163|  11.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.69k|    {
  167|  1.69k|        auto it = scn::ranges::begin(source);
  168|  1.69k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.69k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.69k|            auto result = scn::scan_value<T>(
  171|  1.69k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.69k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.69k, False: 0]
  ------------------
  173|  1.69k|                break;
  174|  1.69k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.69k|    }
  178|  1.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmKNSt3__15dequeIwNS3_9allocatorIwEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|  1.69k|{
  134|       |    // Regular scan
  135|  11.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.8k, False: 1.69k]
  ------------------
  136|  11.8k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.8k, False: 3.63k]
  ------------------
  143|  11.8k|                break;
  144|  11.8k|            }
  145|  3.63k|            it = result->begin();
  146|  3.63k|        }
  147|  11.8k|    }
  148|       |
  149|       |    // scan localized
  150|  11.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.8k, False: 1.69k]
  ------------------
  151|  11.8k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.8k, False: 3.63k]
  ------------------
  159|  11.8k|                break;
  160|  11.8k|            }
  161|  3.63k|            it = result->begin();
  162|  3.63k|        }
  163|  11.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.69k|    {
  167|  1.69k|        auto it = scn::ranges::begin(source);
  168|  1.69k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.69k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.69k|            auto result = scn::scan_value<T>(
  171|  1.69k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.69k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.69k, False: 0]
  ------------------
  173|  1.69k|                break;
  174|  1.69k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.69k|    }
  178|  1.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.69k|{
  134|       |    // Regular scan
  135|  11.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.8k, False: 1.69k]
  ------------------
  136|  11.8k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.8k, False: 3.63k]
  ------------------
  143|  11.8k|                break;
  144|  11.8k|            }
  145|  3.63k|            it = result->begin();
  146|  3.63k|        }
  147|  11.8k|    }
  148|       |
  149|       |    // scan localized
  150|  11.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.8k, False: 1.69k]
  ------------------
  151|  11.8k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.8k, False: 3.63k]
  ------------------
  159|  11.8k|                break;
  160|  11.8k|            }
  161|  3.63k|            it = result->begin();
  162|  3.63k|        }
  163|  11.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.69k|    {
  167|  1.69k|        auto it = scn::ranges::begin(source);
  168|  1.69k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.69k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.69k|            auto result = scn::scan_value<T>(
  171|  1.69k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.69k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.69k, False: 0]
  ------------------
  173|  1.69k|                break;
  174|  1.69k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.69k|    }
  178|  1.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.69k|{
  134|       |    // Regular scan
  135|  11.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.8k, False: 1.69k]
  ------------------
  136|  11.8k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.8k, False: 3.63k]
  ------------------
  143|  11.8k|                break;
  144|  11.8k|            }
  145|  3.63k|            it = result->begin();
  146|  3.63k|        }
  147|  11.8k|    }
  148|       |
  149|       |    // scan localized
  150|  11.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.8k, False: 1.69k]
  ------------------
  151|  11.8k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.8k, False: 3.63k]
  ------------------
  159|  11.8k|                break;
  160|  11.8k|            }
  161|  3.63k|            it = result->begin();
  162|  3.63k|        }
  163|  11.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.69k|    {
  167|  1.69k|        auto it = scn::ranges::begin(source);
  168|  1.69k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.69k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.69k|            auto result = scn::scan_value<T>(
  171|  1.69k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.69k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.69k, False: 0]
  ------------------
  173|  1.69k|                break;
  174|  1.69k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.69k|    }
  178|  1.69k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.69k|{
   91|  1.69k|    using char_type = ranges::range_value_t<Source>;
   92|  1.69k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.69k|    deque.clear();
   94|  1.69k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.69k|              std::back_inserter(deque));
   96|  1.69k|    return deque;
   97|  1.69k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.69k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.69k|    else {
   84|  1.69k|        return wnoncontiguous_buffer;
   85|  1.69k|    }
   86|  1.69k|}

