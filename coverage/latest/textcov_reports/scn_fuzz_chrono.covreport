_ZN3scn2v46detail23chrono_datetime_scannerIc2tmE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  60.8k|    {
 1523|  60.8k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  60.8k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  60.8k|{
 1494|  60.8k|    auto it = pctx.begin();
 1495|  60.8k|    auto end = pctx.end();
 1496|  60.8k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.72k, False: 59.1k]
  |  Branch (1496:22): [True: 0, False: 59.1k]
  ------------------
 1497|  1.72k|        pctx.on_error(
 1498|  1.72k|            "Format string without specifiers is not valid for this type");
 1499|  1.72k|        return it;
 1500|  1.72k|    }
 1501|       |
 1502|  59.1k|    auto checker = detail::tm_format_checker<T>{};
 1503|  59.1k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  59.1k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 59.1k, False: 0]
  ------------------
 1505|  59.1k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  59.1k|    }
 1507|  59.1k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 59.1k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  59.1k|    return end;
 1512|  59.1k|}
_ZN3scn2v46detail12setter_stateC2Ev:
  742|   732k|        : localized(0),
  743|   732k|          subsec_set(0),
  744|   732k|          sec_set(0),
  745|   732k|          min_set(0),
  746|   732k|          hour24_set(0),
  747|   732k|          hour12_set(0),
  748|   732k|          mday_set(0),
  749|   732k|          mon_set(0),
  750|   732k|          full_year_set(0),
  751|   732k|          century_set(0),
  752|   732k|          short_year_set(0),
  753|   732k|          wday_set(0),
  754|   732k|          yday_set(0),
  755|   732k|          tzoff_set(0),
  756|   732k|          tzname_set(0),
  757|   732k|          am_pm_set(0),
  758|   732k|          epoch_ticks_set(0),
  759|   732k|          duration_ticks_set(0),
  760|   732k|          duration_suffix_set(0),
  761|   732k|          is_pm(0)
  762|   732k|    {
  763|   732k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  59.1k|{
  377|  59.1k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 59.1k]
  |  Branch (377:25): [True: 0, False: 59.1k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  59.1k|    auto p = begin;
  383|  59.1k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 59.1k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  59.1k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 59.1k]
  |  Branch (392:21): [True: 0, False: 59.1k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   156k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 156k, False: 0]
  ------------------
  399|   156k|        auto ch = *p;
  400|   156k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 59.1k, False: 96.9k]
  ------------------
  401|  59.1k|            break;
  402|  59.1k|        }
  403|  96.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 17.2k, False: 79.7k]
  ------------------
  404|  17.2k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 17.2k]
  |  Branch (404:32): [True: 17.2k, False: 0]
  |  Branch (404:46): [True: 0, False: 17.2k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  17.2k|            const auto cp_len =
  412|  17.2k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  17.2k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 17.2k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  17.2k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 17.2k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  17.2k|            ++p;
  439|  17.2k|            continue;
  440|  17.2k|        }
  441|  79.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 17.2k, False: 62.5k]
  ------------------
  442|  17.2k|            handler.on_text(begin, p);
  443|  17.2k|        }
  444|  79.7k|        ++p;  // Consume '%'
  445|  79.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 79.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  79.7k|        ch = *p;
  451|  79.7k|        ++p;
  452|       |
  453|  79.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 79.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 79.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 79.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.44k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.44k, False: 76.3k]
  ------------------
  463|  3.44k|                handler.on_full_year();
  464|  3.44k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 79.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 79.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 79.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 79.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  9.44k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 9.44k, False: 70.3k]
  ------------------
  479|  9.44k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 79.7k]
  ------------------
  480|  9.44k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 79.7k]
  ------------------
  481|  9.44k|                handler.on_month_name();
  482|  9.44k|                break;
  483|  3.44k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.44k, False: 76.3k]
  ------------------
  484|  3.44k|                handler.on_dec_month();
  485|  3.44k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 79.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 79.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 79.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 79.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.44k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.44k, False: 76.3k]
  ------------------
  502|  3.44k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 79.7k]
  ------------------
  503|  3.44k|                handler.on_day_of_month();
  504|  3.44k|                break;
  505|       |            // Day of week
  506|  6.60k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.60k, False: 73.1k]
  ------------------
  507|  6.60k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 79.7k]
  ------------------
  508|  6.60k|                handler.on_weekday_name();
  509|  6.60k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 79.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 79.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.44k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.44k, False: 76.3k]
  ------------------
  518|  3.44k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 79.7k]
  ------------------
  519|  3.44k|                handler.on_24_hour();
  520|  3.44k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 79.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 79.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.44k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.44k, False: 76.3k]
  ------------------
  527|  3.44k|                handler.on_minute();
  528|  3.44k|                break;
  529|       |            // Second
  530|  3.44k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.44k, False: 76.3k]
  ------------------
  531|  3.44k|                handler.on_second();
  532|  3.44k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 79.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.44k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.44k, False: 76.3k]
  ------------------
  563|  3.44k|                handler.on_tz_offset();
  564|  3.44k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 79.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 79.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 79.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 79.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.19k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.19k, False: 71.5k]
  ------------------
  579|  8.19k|                handler.on_us_date();
  580|  8.19k|                break;
  581|  4.06k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.06k, False: 75.6k]
  ------------------
  582|  4.06k|                handler.on_iso_date();
  583|  4.06k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 79.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  21.8k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 21.8k, False: 57.9k]
  ------------------
  588|  21.8k|                handler.on_24_hour_time();
  589|  21.8k|                break;
  590|  5.52k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.52k, False: 74.2k]
  ------------------
  591|  5.52k|                handler.on_iso_time();
  592|  5.52k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 79.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 79.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 79.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 79.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 79.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 79.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 79.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 79.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  79.7k|        }
  704|  79.7k|        begin = p;
  705|       |
  706|  79.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 79.7k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  79.7k|    }
  710|  59.1k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 59.1k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  59.1k|    handler.verify();
  714|  59.1k|    return p;
  715|  59.1k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIcEEvPKT_S8_:
 1176|  17.2k|    {
 1177|  17.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_full_yearENS1_14numeric_systemE:
 1188|  21.2k|    {
 1189|  21.2k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  21.2k|        st.set_full_year(*this);
 1193|  21.2k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  21.2k|    {                                                                \
  769|  21.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  21.2k|        field##_set = 1;                                             \
  774|  21.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_short_yearENS1_14numeric_systemE:
 1195|  15.0k|    {
 1196|  15.0k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  15.0k|        st.set_short_year(*this);
 1200|  15.0k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  15.0k|    {                                                                \
  769|  15.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.0k|        field##_set = 1;                                             \
  774|  15.0k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_month_nameEv:
 1231|  17.7k|    {
 1232|  17.7k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  17.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_dec_monthENS1_14numeric_systemE:
 1237|  36.3k|    {
 1238|  36.3k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  36.3k|        st.set_mon(*this);
 1242|  36.3k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  36.3k|    {                                                                \
  769|  36.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  36.3k|        field##_set = 1;                                             \
  774|  36.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_day_of_monthENS1_14numeric_systemE:
 1265|  36.3k|    {
 1266|  36.3k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  36.3k|        st.set_mday(*this);
 1270|  36.3k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  36.3k|    {                                                                \
  769|  36.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  36.3k|        field##_set = 1;                                             \
  774|  36.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_weekday_nameEv:
 1273|  13.4k|    {
 1274|  13.4k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  13.4k|        st.set_wday(*this);
 1278|  13.4k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  13.4k|    {                                                                \
  769|  13.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.4k|        field##_set = 1;                                             \
  774|  13.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_24_hourENS1_14numeric_systemE:
 1295|  65.5k|    {
 1296|  65.5k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  65.5k|        st.set_hour24(*this);
 1300|  65.5k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  65.5k|    {                                                                \
  769|  65.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.5k|        field##_set = 1;                                             \
  774|  65.5k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_minuteENS1_14numeric_systemE:
 1309|  65.5k|    {
 1310|  65.5k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  65.5k|        st.set_min(*this);
 1314|  65.5k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  65.5k|    {                                                                \
  769|  65.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.5k|        field##_set = 1;                                             \
  774|  65.5k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_secondENS1_14numeric_systemE:
 1316|  23.1k|    {
 1317|  23.1k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  23.1k|        st.set_sec(*this);
 1321|  23.1k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  23.1k|    {                                                                \
  769|  23.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  23.1k|        field##_set = 1;                                             \
  774|  23.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_tz_offsetENS1_14numeric_systemE:
 1335|  10.3k|    {
 1336|  10.3k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  10.3k|        st.set_tzoff(*this);
 1340|  10.3k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  10.3k|    {                                                                \
  769|  10.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.3k|        field##_set = 1;                                             \
  774|  10.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_us_dateEv:
 1368|  15.0k|    {
 1369|  15.0k|        on_dec_month();
 1370|  15.0k|        on_day_of_month();
 1371|  15.0k|        on_short_year();
 1372|  15.0k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_dateEv:
 1374|  10.9k|    {
 1375|  10.9k|        on_full_year();
 1376|  10.9k|        on_dec_month();
 1377|  10.9k|        on_day_of_month();
 1378|  10.9k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_24_hour_timeEv:
 1386|  42.3k|    {
 1387|  42.3k|        on_24_hour();
 1388|  42.3k|        on_minute();
 1389|  42.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_timeEv:
 1391|  12.8k|    {
 1392|  12.8k|        on_24_hour();
 1393|  12.8k|        on_minute();
 1394|  12.8k|        on_second();
 1395|  12.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE6verifyEv:
 1418|   122k|    {
 1419|   122k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   122k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   122k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   122k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   122k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   122k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   122k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   122k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   122k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   122k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   122k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   122k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   122k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   122k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   122k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   122k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   122k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   122k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   122k|        st.verify(*this);
 1463|   122k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerI2tmEEEEvRT_:
  799|   122k|    {
  800|   122k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 65.5k, False: 57.3k]
  |  Branch (800:27): [True: 0, False: 65.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   122k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 122k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   122k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 21.2k, False: 101k]
  |  Branch (818:31): [True: 0, False: 21.2k]
  |  Branch (818:46): [True: 0, False: 21.2k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   122k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 10.3k, False: 112k]
  |  Branch (824:26): [True: 0, False: 10.3k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   122k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 13.4k, False: 109k]
  |  Branch (829:26): [True: 36.3k, False: 72.9k]
  |  Branch (829:38): [True: 0, False: 72.9k]
  ------------------
  830|   122k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 49.8k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   122k|    }
_ZNK3scn2v46detail17tm_format_checkerI2tmE9get_errorEv:
 1466|   307k|    {
 1467|   307k|        return err;
 1468|   307k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIc2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  59.1k|    {
 1530|  59.1k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  59.1k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  60.8k|    {
 1523|  60.8k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  60.8k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  60.8k|{
 1494|  60.8k|    auto it = pctx.begin();
 1495|  60.8k|    auto end = pctx.end();
 1496|  60.8k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.72k, False: 59.1k]
  |  Branch (1496:22): [True: 0, False: 59.1k]
  ------------------
 1497|  1.72k|        pctx.on_error(
 1498|  1.72k|            "Format string without specifiers is not valid for this type");
 1499|  1.72k|        return it;
 1500|  1.72k|    }
 1501|       |
 1502|  59.1k|    auto checker = detail::tm_format_checker<T>{};
 1503|  59.1k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  59.1k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 59.1k, False: 0]
  ------------------
 1505|  59.1k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  59.1k|    }
 1507|  59.1k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 59.1k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  59.1k|    return end;
 1512|  59.1k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  59.1k|{
  377|  59.1k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 59.1k]
  |  Branch (377:25): [True: 0, False: 59.1k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  59.1k|    auto p = begin;
  383|  59.1k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 59.1k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  59.1k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 59.1k]
  |  Branch (392:21): [True: 0, False: 59.1k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   156k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 156k, False: 0]
  ------------------
  399|   156k|        auto ch = *p;
  400|   156k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 59.1k, False: 96.9k]
  ------------------
  401|  59.1k|            break;
  402|  59.1k|        }
  403|  96.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 17.2k, False: 79.7k]
  ------------------
  404|  17.2k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 17.2k]
  |  Branch (404:32): [True: 17.2k, False: 0]
  |  Branch (404:46): [True: 0, False: 17.2k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  17.2k|            const auto cp_len =
  412|  17.2k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  17.2k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 17.2k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  17.2k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 17.2k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  17.2k|            ++p;
  439|  17.2k|            continue;
  440|  17.2k|        }
  441|  79.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 17.2k, False: 62.5k]
  ------------------
  442|  17.2k|            handler.on_text(begin, p);
  443|  17.2k|        }
  444|  79.7k|        ++p;  // Consume '%'
  445|  79.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 79.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  79.7k|        ch = *p;
  451|  79.7k|        ++p;
  452|       |
  453|  79.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 79.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 79.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 79.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.44k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.44k, False: 76.3k]
  ------------------
  463|  3.44k|                handler.on_full_year();
  464|  3.44k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 79.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 79.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 79.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 79.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  9.44k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 9.44k, False: 70.3k]
  ------------------
  479|  9.44k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 79.7k]
  ------------------
  480|  9.44k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 79.7k]
  ------------------
  481|  9.44k|                handler.on_month_name();
  482|  9.44k|                break;
  483|  3.44k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.44k, False: 76.3k]
  ------------------
  484|  3.44k|                handler.on_dec_month();
  485|  3.44k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 79.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 79.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 79.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 79.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.44k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.44k, False: 76.3k]
  ------------------
  502|  3.44k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 79.7k]
  ------------------
  503|  3.44k|                handler.on_day_of_month();
  504|  3.44k|                break;
  505|       |            // Day of week
  506|  6.60k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.60k, False: 73.1k]
  ------------------
  507|  6.60k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 79.7k]
  ------------------
  508|  6.60k|                handler.on_weekday_name();
  509|  6.60k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 79.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 79.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.44k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.44k, False: 76.3k]
  ------------------
  518|  3.44k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 79.7k]
  ------------------
  519|  3.44k|                handler.on_24_hour();
  520|  3.44k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 79.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 79.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.44k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.44k, False: 76.3k]
  ------------------
  527|  3.44k|                handler.on_minute();
  528|  3.44k|                break;
  529|       |            // Second
  530|  3.44k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.44k, False: 76.3k]
  ------------------
  531|  3.44k|                handler.on_second();
  532|  3.44k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 79.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.44k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.44k, False: 76.3k]
  ------------------
  563|  3.44k|                handler.on_tz_offset();
  564|  3.44k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 79.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 79.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 79.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 79.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.19k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.19k, False: 71.5k]
  ------------------
  579|  8.19k|                handler.on_us_date();
  580|  8.19k|                break;
  581|  4.06k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.06k, False: 75.6k]
  ------------------
  582|  4.06k|                handler.on_iso_date();
  583|  4.06k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 79.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  21.8k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 21.8k, False: 57.9k]
  ------------------
  588|  21.8k|                handler.on_24_hour_time();
  589|  21.8k|                break;
  590|  5.52k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.52k, False: 74.2k]
  ------------------
  591|  5.52k|                handler.on_iso_time();
  592|  5.52k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 79.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 79.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 79.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 79.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 79.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 79.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 79.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 79.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  79.7k|        }
  704|  79.7k|        begin = p;
  705|       |
  706|  79.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 79.7k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  79.7k|    }
  710|  59.1k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 59.1k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  59.1k|    handler.verify();
  714|  59.1k|    return p;
  715|  59.1k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIcEEvPKT_S8_:
 1176|  17.2k|    {
 1177|  17.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_full_yearENS1_14numeric_systemE:
 1188|  21.2k|    {
 1189|  21.2k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  21.2k|        st.set_full_year(*this);
 1193|  21.2k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  21.2k|    {                                                                \
  769|  21.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  21.2k|        field##_set = 1;                                             \
  774|  21.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_short_yearENS1_14numeric_systemE:
 1195|  15.0k|    {
 1196|  15.0k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  15.0k|        st.set_short_year(*this);
 1200|  15.0k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  15.0k|    {                                                                \
  769|  15.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.0k|        field##_set = 1;                                             \
  774|  15.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_month_nameEv:
 1231|  17.7k|    {
 1232|  17.7k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  17.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_dec_monthENS1_14numeric_systemE:
 1237|  36.3k|    {
 1238|  36.3k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  36.3k|        st.set_mon(*this);
 1242|  36.3k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  36.3k|    {                                                                \
  769|  36.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  36.3k|        field##_set = 1;                                             \
  774|  36.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  36.3k|    {
 1266|  36.3k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  36.3k|        st.set_mday(*this);
 1270|  36.3k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  36.3k|    {                                                                \
  769|  36.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  36.3k|        field##_set = 1;                                             \
  774|  36.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_weekday_nameEv:
 1273|  13.4k|    {
 1274|  13.4k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  13.4k|        st.set_wday(*this);
 1278|  13.4k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  13.4k|    {                                                                \
  769|  13.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.4k|        field##_set = 1;                                             \
  774|  13.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_24_hourENS1_14numeric_systemE:
 1295|  65.5k|    {
 1296|  65.5k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  65.5k|        st.set_hour24(*this);
 1300|  65.5k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  65.5k|    {                                                                \
  769|  65.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.5k|        field##_set = 1;                                             \
  774|  65.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_minuteENS1_14numeric_systemE:
 1309|  65.5k|    {
 1310|  65.5k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  65.5k|        st.set_min(*this);
 1314|  65.5k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  65.5k|    {                                                                \
  769|  65.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.5k|        field##_set = 1;                                             \
  774|  65.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_secondENS1_14numeric_systemE:
 1316|  23.1k|    {
 1317|  23.1k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  23.1k|        st.set_sec(*this);
 1321|  23.1k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  23.1k|    {                                                                \
  769|  23.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  23.1k|        field##_set = 1;                                             \
  774|  23.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  10.3k|    {
 1336|  10.3k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  10.3k|        st.set_tzoff(*this);
 1340|  10.3k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  10.3k|    {                                                                \
  769|  10.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.3k|        field##_set = 1;                                             \
  774|  10.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_us_dateEv:
 1368|  15.0k|    {
 1369|  15.0k|        on_dec_month();
 1370|  15.0k|        on_day_of_month();
 1371|  15.0k|        on_short_year();
 1372|  15.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_dateEv:
 1374|  10.9k|    {
 1375|  10.9k|        on_full_year();
 1376|  10.9k|        on_dec_month();
 1377|  10.9k|        on_day_of_month();
 1378|  10.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_24_hour_timeEv:
 1386|  42.3k|    {
 1387|  42.3k|        on_24_hour();
 1388|  42.3k|        on_minute();
 1389|  42.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_timeEv:
 1391|  12.8k|    {
 1392|  12.8k|        on_24_hour();
 1393|  12.8k|        on_minute();
 1394|  12.8k|        on_second();
 1395|  12.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE6verifyEv:
 1418|   122k|    {
 1419|   122k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   122k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   122k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   122k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   122k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   122k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   122k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   122k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   122k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   122k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   122k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   122k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   122k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   122k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   122k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   122k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   122k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   122k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   122k|        st.verify(*this);
 1463|   122k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  799|   122k|    {
  800|   122k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 65.5k, False: 57.3k]
  |  Branch (800:27): [True: 0, False: 65.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   122k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 122k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   122k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 21.2k, False: 101k]
  |  Branch (818:31): [True: 0, False: 21.2k]
  |  Branch (818:46): [True: 0, False: 21.2k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   122k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 10.3k, False: 112k]
  |  Branch (824:26): [True: 0, False: 10.3k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   122k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 13.4k, False: 109k]
  |  Branch (829:26): [True: 36.3k, False: 72.9k]
  |  Branch (829:38): [True: 0, False: 72.9k]
  ------------------
  830|   122k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 49.8k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   122k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9get_errorEv:
 1466|   307k|    {
 1467|   307k|        return err;
 1468|   307k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  59.1k|    {
 1530|  59.1k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  59.1k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  60.8k|    {
 1523|  60.8k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  60.8k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  60.8k|{
 1494|  60.8k|    auto it = pctx.begin();
 1495|  60.8k|    auto end = pctx.end();
 1496|  60.8k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.72k, False: 59.1k]
  |  Branch (1496:22): [True: 0, False: 59.1k]
  ------------------
 1497|  1.72k|        pctx.on_error(
 1498|  1.72k|            "Format string without specifiers is not valid for this type");
 1499|  1.72k|        return it;
 1500|  1.72k|    }
 1501|       |
 1502|  59.1k|    auto checker = detail::tm_format_checker<T>{};
 1503|  59.1k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  59.1k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 59.1k, False: 0]
  ------------------
 1505|  59.1k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  59.1k|    }
 1507|  59.1k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 59.1k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  59.1k|    return end;
 1512|  59.1k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  59.1k|{
  377|  59.1k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 59.1k]
  |  Branch (377:25): [True: 0, False: 59.1k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  59.1k|    auto p = begin;
  383|  59.1k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 59.1k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  59.1k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 59.1k]
  |  Branch (392:21): [True: 0, False: 59.1k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   156k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 156k, False: 0]
  ------------------
  399|   156k|        auto ch = *p;
  400|   156k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 59.1k, False: 96.9k]
  ------------------
  401|  59.1k|            break;
  402|  59.1k|        }
  403|  96.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 17.2k, False: 79.7k]
  ------------------
  404|  17.2k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 17.2k]
  |  Branch (404:32): [True: 17.2k, False: 0]
  |  Branch (404:46): [True: 0, False: 17.2k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  17.2k|            const auto cp_len =
  412|  17.2k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  17.2k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 17.2k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  17.2k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 17.2k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  17.2k|            ++p;
  439|  17.2k|            continue;
  440|  17.2k|        }
  441|  79.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 17.2k, False: 62.5k]
  ------------------
  442|  17.2k|            handler.on_text(begin, p);
  443|  17.2k|        }
  444|  79.7k|        ++p;  // Consume '%'
  445|  79.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 79.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  79.7k|        ch = *p;
  451|  79.7k|        ++p;
  452|       |
  453|  79.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 79.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 79.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 79.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.44k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.44k, False: 76.3k]
  ------------------
  463|  3.44k|                handler.on_full_year();
  464|  3.44k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 79.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 79.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 79.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 79.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  9.44k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 9.44k, False: 70.3k]
  ------------------
  479|  9.44k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 79.7k]
  ------------------
  480|  9.44k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 79.7k]
  ------------------
  481|  9.44k|                handler.on_month_name();
  482|  9.44k|                break;
  483|  3.44k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.44k, False: 76.3k]
  ------------------
  484|  3.44k|                handler.on_dec_month();
  485|  3.44k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 79.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 79.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 79.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 79.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.44k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.44k, False: 76.3k]
  ------------------
  502|  3.44k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 79.7k]
  ------------------
  503|  3.44k|                handler.on_day_of_month();
  504|  3.44k|                break;
  505|       |            // Day of week
  506|  6.60k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.60k, False: 73.1k]
  ------------------
  507|  6.60k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 79.7k]
  ------------------
  508|  6.60k|                handler.on_weekday_name();
  509|  6.60k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 79.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 79.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.44k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.44k, False: 76.3k]
  ------------------
  518|  3.44k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 79.7k]
  ------------------
  519|  3.44k|                handler.on_24_hour();
  520|  3.44k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 79.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 79.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.44k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.44k, False: 76.3k]
  ------------------
  527|  3.44k|                handler.on_minute();
  528|  3.44k|                break;
  529|       |            // Second
  530|  3.44k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.44k, False: 76.3k]
  ------------------
  531|  3.44k|                handler.on_second();
  532|  3.44k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 79.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.44k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.44k, False: 76.3k]
  ------------------
  563|  3.44k|                handler.on_tz_offset();
  564|  3.44k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 79.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 79.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 79.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 79.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.19k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.19k, False: 71.5k]
  ------------------
  579|  8.19k|                handler.on_us_date();
  580|  8.19k|                break;
  581|  4.06k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.06k, False: 75.6k]
  ------------------
  582|  4.06k|                handler.on_iso_date();
  583|  4.06k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 79.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  21.8k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 21.8k, False: 57.9k]
  ------------------
  588|  21.8k|                handler.on_24_hour_time();
  589|  21.8k|                break;
  590|  5.52k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.52k, False: 74.2k]
  ------------------
  591|  5.52k|                handler.on_iso_time();
  592|  5.52k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 79.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 79.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 79.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 79.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 79.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 79.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 79.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 79.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  79.7k|        }
  704|  79.7k|        begin = p;
  705|       |
  706|  79.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 79.7k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  79.7k|    }
  710|  59.1k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 59.1k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  59.1k|    handler.verify();
  714|  59.1k|    return p;
  715|  59.1k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIcEEvPKT_S8_:
 1176|  17.2k|    {
 1177|  17.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_full_yearENS1_14numeric_systemE:
 1188|  21.2k|    {
 1189|  21.2k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  21.2k|        st.set_full_year(*this);
 1193|  21.2k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  21.2k|    {                                                                \
  769|  21.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  21.2k|        field##_set = 1;                                             \
  774|  21.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_short_yearENS1_14numeric_systemE:
 1195|  15.0k|    {
 1196|  15.0k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  15.0k|        st.set_short_year(*this);
 1200|  15.0k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  15.0k|    {                                                                \
  769|  15.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.0k|        field##_set = 1;                                             \
  774|  15.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_month_nameEv:
 1231|  17.7k|    {
 1232|  17.7k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  17.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_dec_monthENS1_14numeric_systemE:
 1237|  36.3k|    {
 1238|  36.3k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  36.3k|        st.set_mon(*this);
 1242|  36.3k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  36.3k|    {                                                                \
  769|  36.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  36.3k|        field##_set = 1;                                             \
  774|  36.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  36.3k|    {
 1266|  36.3k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  36.3k|        st.set_mday(*this);
 1270|  36.3k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  36.3k|    {                                                                \
  769|  36.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  36.3k|        field##_set = 1;                                             \
  774|  36.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_weekday_nameEv:
 1273|  13.4k|    {
 1274|  13.4k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  13.4k|        st.set_wday(*this);
 1278|  13.4k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  13.4k|    {                                                                \
  769|  13.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.4k|        field##_set = 1;                                             \
  774|  13.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_24_hourENS1_14numeric_systemE:
 1295|  65.5k|    {
 1296|  65.5k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  65.5k|        st.set_hour24(*this);
 1300|  65.5k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  65.5k|    {                                                                \
  769|  65.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.5k|        field##_set = 1;                                             \
  774|  65.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_minuteENS1_14numeric_systemE:
 1309|  65.5k|    {
 1310|  65.5k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  65.5k|        st.set_min(*this);
 1314|  65.5k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  65.5k|    {                                                                \
  769|  65.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.5k|        field##_set = 1;                                             \
  774|  65.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_secondENS1_14numeric_systemE:
 1316|  23.1k|    {
 1317|  23.1k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  23.1k|        st.set_sec(*this);
 1321|  23.1k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  23.1k|    {                                                                \
  769|  23.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  23.1k|        field##_set = 1;                                             \
  774|  23.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  10.3k|    {
 1336|  10.3k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  10.3k|        st.set_tzoff(*this);
 1340|  10.3k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  10.3k|    {                                                                \
  769|  10.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.3k|        field##_set = 1;                                             \
  774|  10.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_us_dateEv:
 1368|  15.0k|    {
 1369|  15.0k|        on_dec_month();
 1370|  15.0k|        on_day_of_month();
 1371|  15.0k|        on_short_year();
 1372|  15.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_dateEv:
 1374|  10.9k|    {
 1375|  10.9k|        on_full_year();
 1376|  10.9k|        on_dec_month();
 1377|  10.9k|        on_day_of_month();
 1378|  10.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_24_hour_timeEv:
 1386|  42.3k|    {
 1387|  42.3k|        on_24_hour();
 1388|  42.3k|        on_minute();
 1389|  42.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_timeEv:
 1391|  12.8k|    {
 1392|  12.8k|        on_24_hour();
 1393|  12.8k|        on_minute();
 1394|  12.8k|        on_second();
 1395|  12.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE6verifyEv:
 1418|   122k|    {
 1419|   122k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   122k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   122k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   122k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   122k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   122k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   122k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   122k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   122k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   122k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   122k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   122k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   122k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   122k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   122k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   122k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   122k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   122k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   122k|        st.verify(*this);
 1463|   122k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  799|   122k|    {
  800|   122k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 65.5k, False: 57.3k]
  |  Branch (800:27): [True: 0, False: 65.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   122k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 122k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   122k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 21.2k, False: 101k]
  |  Branch (818:31): [True: 0, False: 21.2k]
  |  Branch (818:46): [True: 0, False: 21.2k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   122k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 10.3k, False: 112k]
  |  Branch (824:26): [True: 0, False: 10.3k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   122k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 13.4k, False: 109k]
  |  Branch (829:26): [True: 36.3k, False: 72.9k]
  |  Branch (829:38): [True: 0, False: 72.9k]
  ------------------
  830|   122k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 49.8k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   122k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9get_errorEv:
 1466|   307k|    {
 1467|   307k|        return err;
 1468|   307k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  59.1k|    {
 1530|  59.1k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  59.1k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIw2tmE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  67.1k|    {
 1523|  67.1k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  67.1k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  67.1k|{
 1494|  67.1k|    auto it = pctx.begin();
 1495|  67.1k|    auto end = pctx.end();
 1496|  67.1k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.44k, False: 63.7k]
  |  Branch (1496:22): [True: 0, False: 63.7k]
  ------------------
 1497|  3.44k|        pctx.on_error(
 1498|  3.44k|            "Format string without specifiers is not valid for this type");
 1499|  3.44k|        return it;
 1500|  3.44k|    }
 1501|       |
 1502|  63.7k|    auto checker = detail::tm_format_checker<T>{};
 1503|  63.7k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  63.7k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 63.7k, False: 0]
  ------------------
 1505|  63.7k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  63.7k|    }
 1507|  63.7k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 63.7k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  63.7k|    return end;
 1512|  63.7k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  63.7k|{
  377|  63.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 63.7k]
  |  Branch (377:25): [True: 0, False: 63.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  63.7k|    auto p = begin;
  383|  63.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 63.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  63.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 63.7k]
  |  Branch (392:21): [True: 0, False: 63.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   203k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 203k, False: 0]
  ------------------
  399|   203k|        auto ch = *p;
  400|   203k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 63.7k, False: 139k]
  ------------------
  401|  63.7k|            break;
  402|  63.7k|        }
  403|   139k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 34.4k, False: 104k]
  ------------------
  404|  34.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 34.4k]
  |  Branch (404:32): [True: 34.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 34.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  34.4k|            const auto cp_len =
  412|  34.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  34.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 34.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  34.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 34.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  34.4k|            ++p;
  439|  34.4k|            continue;
  440|  34.4k|        }
  441|   104k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 34.4k, False: 70.5k]
  ------------------
  442|  34.4k|            handler.on_text(begin, p);
  443|  34.4k|        }
  444|   104k|        ++p;  // Consume '%'
  445|   104k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 104k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   104k|        ch = *p;
  451|   104k|        ++p;
  452|       |
  453|   104k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 104k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 104k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 104k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.88k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.88k, False: 98.1k]
  ------------------
  463|  6.88k|                handler.on_full_year();
  464|  6.88k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 104k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 104k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 104k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 104k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.33k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.33k, False: 96.6k]
  ------------------
  479|  8.33k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 104k]
  ------------------
  480|  8.33k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 104k]
  ------------------
  481|  8.33k|                handler.on_month_name();
  482|  8.33k|                break;
  483|  6.88k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.88k, False: 98.1k]
  ------------------
  484|  6.88k|                handler.on_dec_month();
  485|  6.88k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 104k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 104k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 104k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 104k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.88k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.88k, False: 98.1k]
  ------------------
  502|  6.88k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 104k]
  ------------------
  503|  6.88k|                handler.on_day_of_month();
  504|  6.88k|                break;
  505|       |            // Day of week
  506|  6.88k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.88k, False: 98.1k]
  ------------------
  507|  6.88k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 104k]
  ------------------
  508|  6.88k|                handler.on_weekday_name();
  509|  6.88k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 104k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 104k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.88k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.88k, False: 98.1k]
  ------------------
  518|  6.88k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 104k]
  ------------------
  519|  6.88k|                handler.on_24_hour();
  520|  6.88k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 104k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 104k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.88k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.88k, False: 98.1k]
  ------------------
  527|  6.88k|                handler.on_minute();
  528|  6.88k|                break;
  529|       |            // Second
  530|  6.88k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.88k, False: 98.1k]
  ------------------
  531|  6.88k|                handler.on_second();
  532|  6.88k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 104k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.88k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.88k, False: 98.1k]
  ------------------
  563|  6.88k|                handler.on_tz_offset();
  564|  6.88k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 104k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 104k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 104k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 104k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.90k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.90k, False: 98.0k]
  ------------------
  579|  6.90k|                handler.on_us_date();
  580|  6.90k|                break;
  581|  6.90k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.90k, False: 98.0k]
  ------------------
  582|  6.90k|                handler.on_iso_date();
  583|  6.90k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 104k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  20.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 20.5k, False: 84.4k]
  ------------------
  588|  20.5k|                handler.on_24_hour_time();
  589|  20.5k|                break;
  590|  7.27k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.27k, False: 97.7k]
  ------------------
  591|  7.27k|                handler.on_iso_time();
  592|  7.27k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 104k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 104k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 104k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 104k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 104k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 104k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 104k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 104k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   104k|        }
  704|   104k|        begin = p;
  705|       |
  706|   104k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 104k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   104k|    }
  710|  63.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 63.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  63.7k|    handler.verify();
  714|  63.7k|    return p;
  715|  63.7k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIwEEvPKT_S8_:
 1176|  34.4k|    {
 1177|  34.4k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIw2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  63.7k|    {
 1530|  63.7k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  63.7k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  67.1k|    {
 1523|  67.1k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  67.1k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  67.1k|{
 1494|  67.1k|    auto it = pctx.begin();
 1495|  67.1k|    auto end = pctx.end();
 1496|  67.1k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.44k, False: 63.7k]
  |  Branch (1496:22): [True: 0, False: 63.7k]
  ------------------
 1497|  3.44k|        pctx.on_error(
 1498|  3.44k|            "Format string without specifiers is not valid for this type");
 1499|  3.44k|        return it;
 1500|  3.44k|    }
 1501|       |
 1502|  63.7k|    auto checker = detail::tm_format_checker<T>{};
 1503|  63.7k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  63.7k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 63.7k, False: 0]
  ------------------
 1505|  63.7k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  63.7k|    }
 1507|  63.7k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 63.7k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  63.7k|    return end;
 1512|  63.7k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  63.7k|{
  377|  63.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 63.7k]
  |  Branch (377:25): [True: 0, False: 63.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  63.7k|    auto p = begin;
  383|  63.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 63.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  63.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 63.7k]
  |  Branch (392:21): [True: 0, False: 63.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   203k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 203k, False: 0]
  ------------------
  399|   203k|        auto ch = *p;
  400|   203k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 63.7k, False: 139k]
  ------------------
  401|  63.7k|            break;
  402|  63.7k|        }
  403|   139k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 34.4k, False: 104k]
  ------------------
  404|  34.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 34.4k]
  |  Branch (404:32): [True: 34.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 34.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  34.4k|            const auto cp_len =
  412|  34.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  34.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 34.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  34.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 34.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  34.4k|            ++p;
  439|  34.4k|            continue;
  440|  34.4k|        }
  441|   104k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 34.4k, False: 70.5k]
  ------------------
  442|  34.4k|            handler.on_text(begin, p);
  443|  34.4k|        }
  444|   104k|        ++p;  // Consume '%'
  445|   104k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 104k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   104k|        ch = *p;
  451|   104k|        ++p;
  452|       |
  453|   104k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 104k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 104k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 104k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.88k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.88k, False: 98.1k]
  ------------------
  463|  6.88k|                handler.on_full_year();
  464|  6.88k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 104k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 104k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 104k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 104k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.33k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.33k, False: 96.6k]
  ------------------
  479|  8.33k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 104k]
  ------------------
  480|  8.33k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 104k]
  ------------------
  481|  8.33k|                handler.on_month_name();
  482|  8.33k|                break;
  483|  6.88k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.88k, False: 98.1k]
  ------------------
  484|  6.88k|                handler.on_dec_month();
  485|  6.88k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 104k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 104k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 104k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 104k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.88k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.88k, False: 98.1k]
  ------------------
  502|  6.88k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 104k]
  ------------------
  503|  6.88k|                handler.on_day_of_month();
  504|  6.88k|                break;
  505|       |            // Day of week
  506|  6.88k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.88k, False: 98.1k]
  ------------------
  507|  6.88k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 104k]
  ------------------
  508|  6.88k|                handler.on_weekday_name();
  509|  6.88k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 104k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 104k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.88k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.88k, False: 98.1k]
  ------------------
  518|  6.88k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 104k]
  ------------------
  519|  6.88k|                handler.on_24_hour();
  520|  6.88k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 104k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 104k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.88k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.88k, False: 98.1k]
  ------------------
  527|  6.88k|                handler.on_minute();
  528|  6.88k|                break;
  529|       |            // Second
  530|  6.88k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.88k, False: 98.1k]
  ------------------
  531|  6.88k|                handler.on_second();
  532|  6.88k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 104k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.88k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.88k, False: 98.1k]
  ------------------
  563|  6.88k|                handler.on_tz_offset();
  564|  6.88k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 104k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 104k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 104k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 104k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.90k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.90k, False: 98.0k]
  ------------------
  579|  6.90k|                handler.on_us_date();
  580|  6.90k|                break;
  581|  6.90k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.90k, False: 98.0k]
  ------------------
  582|  6.90k|                handler.on_iso_date();
  583|  6.90k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 104k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  20.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 20.5k, False: 84.4k]
  ------------------
  588|  20.5k|                handler.on_24_hour_time();
  589|  20.5k|                break;
  590|  7.27k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.27k, False: 97.7k]
  ------------------
  591|  7.27k|                handler.on_iso_time();
  592|  7.27k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 104k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 104k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 104k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 104k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 104k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 104k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 104k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 104k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   104k|        }
  704|   104k|        begin = p;
  705|       |
  706|   104k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 104k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   104k|    }
  710|  63.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 63.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  63.7k|    handler.verify();
  714|  63.7k|    return p;
  715|  63.7k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIwEEvPKT_S8_:
 1176|  34.4k|    {
 1177|  34.4k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  63.7k|    {
 1530|  63.7k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  63.7k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  67.1k|    {
 1523|  67.1k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  67.1k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  67.1k|{
 1494|  67.1k|    auto it = pctx.begin();
 1495|  67.1k|    auto end = pctx.end();
 1496|  67.1k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.44k, False: 63.7k]
  |  Branch (1496:22): [True: 0, False: 63.7k]
  ------------------
 1497|  3.44k|        pctx.on_error(
 1498|  3.44k|            "Format string without specifiers is not valid for this type");
 1499|  3.44k|        return it;
 1500|  3.44k|    }
 1501|       |
 1502|  63.7k|    auto checker = detail::tm_format_checker<T>{};
 1503|  63.7k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  63.7k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 63.7k, False: 0]
  ------------------
 1505|  63.7k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  63.7k|    }
 1507|  63.7k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 63.7k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  63.7k|    return end;
 1512|  63.7k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  63.7k|{
  377|  63.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 63.7k]
  |  Branch (377:25): [True: 0, False: 63.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  63.7k|    auto p = begin;
  383|  63.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 63.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  63.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 63.7k]
  |  Branch (392:21): [True: 0, False: 63.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   203k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 203k, False: 0]
  ------------------
  399|   203k|        auto ch = *p;
  400|   203k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 63.7k, False: 139k]
  ------------------
  401|  63.7k|            break;
  402|  63.7k|        }
  403|   139k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 34.4k, False: 104k]
  ------------------
  404|  34.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 34.4k]
  |  Branch (404:32): [True: 34.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 34.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  34.4k|            const auto cp_len =
  412|  34.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  34.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 34.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  34.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 34.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  34.4k|            ++p;
  439|  34.4k|            continue;
  440|  34.4k|        }
  441|   104k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 34.4k, False: 70.5k]
  ------------------
  442|  34.4k|            handler.on_text(begin, p);
  443|  34.4k|        }
  444|   104k|        ++p;  // Consume '%'
  445|   104k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 104k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   104k|        ch = *p;
  451|   104k|        ++p;
  452|       |
  453|   104k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 104k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 104k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 104k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.88k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.88k, False: 98.1k]
  ------------------
  463|  6.88k|                handler.on_full_year();
  464|  6.88k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 104k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 104k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 104k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 104k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.33k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.33k, False: 96.6k]
  ------------------
  479|  8.33k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 104k]
  ------------------
  480|  8.33k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 104k]
  ------------------
  481|  8.33k|                handler.on_month_name();
  482|  8.33k|                break;
  483|  6.88k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.88k, False: 98.1k]
  ------------------
  484|  6.88k|                handler.on_dec_month();
  485|  6.88k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 104k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 104k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 104k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 104k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.88k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.88k, False: 98.1k]
  ------------------
  502|  6.88k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 104k]
  ------------------
  503|  6.88k|                handler.on_day_of_month();
  504|  6.88k|                break;
  505|       |            // Day of week
  506|  6.88k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.88k, False: 98.1k]
  ------------------
  507|  6.88k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 104k]
  ------------------
  508|  6.88k|                handler.on_weekday_name();
  509|  6.88k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 104k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 104k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.88k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.88k, False: 98.1k]
  ------------------
  518|  6.88k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 104k]
  ------------------
  519|  6.88k|                handler.on_24_hour();
  520|  6.88k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 104k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 104k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.88k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.88k, False: 98.1k]
  ------------------
  527|  6.88k|                handler.on_minute();
  528|  6.88k|                break;
  529|       |            // Second
  530|  6.88k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.88k, False: 98.1k]
  ------------------
  531|  6.88k|                handler.on_second();
  532|  6.88k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 104k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.88k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.88k, False: 98.1k]
  ------------------
  563|  6.88k|                handler.on_tz_offset();
  564|  6.88k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 104k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 104k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 104k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 104k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.90k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.90k, False: 98.0k]
  ------------------
  579|  6.90k|                handler.on_us_date();
  580|  6.90k|                break;
  581|  6.90k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.90k, False: 98.0k]
  ------------------
  582|  6.90k|                handler.on_iso_date();
  583|  6.90k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 104k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  20.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 20.5k, False: 84.4k]
  ------------------
  588|  20.5k|                handler.on_24_hour_time();
  589|  20.5k|                break;
  590|  7.27k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.27k, False: 97.7k]
  ------------------
  591|  7.27k|                handler.on_iso_time();
  592|  7.27k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 104k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 104k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 104k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 104k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 104k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 104k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 104k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 104k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   104k|        }
  704|   104k|        begin = p;
  705|       |
  706|   104k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 104k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   104k|    }
  710|  63.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 63.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  63.7k|    handler.verify();
  714|  63.7k|    return p;
  715|  63.7k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIwEEvPKT_S8_:
 1176|  34.4k|    {
 1177|  34.4k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  63.7k|    {
 1530|  63.7k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  63.7k|    }
_ZN3scn2v47weekdayC2Ej:
   71|  3.16k|        : m_value(static_cast<unsigned char>(wd != 7 ? wd : 0))
  ------------------
  |  Branch (71:46): [True: 3.16k, False: 0]
  ------------------
   72|  3.16k|    {
   73|  3.16k|    }
_ZN3scn2v45monthC2Ej:
  119|  14.7k|        : m_value(static_cast<unsigned char>(d))
  120|  14.7k|    {
  121|  14.7k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  31.6k|{
  377|  31.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.6k]
  |  Branch (377:25): [True: 0, False: 31.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.6k|    auto p = begin;
  383|  31.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.6k]
  |  Branch (392:21): [True: 0, False: 31.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  52.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.9k, False: 20.0k]
  ------------------
  399|  31.9k|        auto ch = *p;
  400|  31.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 188, False: 31.7k]
  ------------------
  404|    188|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 188]
  |  Branch (404:32): [True: 188, False: 0]
  |  Branch (404:46): [True: 0, False: 188]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    188|            const auto cp_len =
  412|    188|                detail::code_point_length_by_starting_code_unit(ch);
  413|    188|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 188]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    188|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 188]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    188|            ++p;
  439|    188|            continue;
  440|    188|        }
  441|  31.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 188, False: 31.6k]
  ------------------
  442|    188|            handler.on_text(begin, p);
  443|    188|        }
  444|  31.7k|        ++p;  // Consume '%'
  445|  31.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.7k|        ch = *p;
  451|  31.7k|        ++p;
  452|       |
  453|  31.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.66k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.66k, False: 30.1k]
  ------------------
  463|  1.66k|                handler.on_full_year();
  464|  1.66k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.64k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.64k, False: 27.1k]
  ------------------
  479|  4.64k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.7k]
  ------------------
  480|  4.64k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.7k]
  ------------------
  481|  4.64k|                handler.on_month_name();
  482|  4.64k|                break;
  483|     80|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 80, False: 31.7k]
  ------------------
  484|     80|                handler.on_dec_month();
  485|     80|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     58|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 58, False: 31.7k]
  ------------------
  502|     58|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.7k]
  ------------------
  503|     58|                handler.on_day_of_month();
  504|     58|                break;
  505|       |            // Day of week
  506|  3.27k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.27k, False: 28.5k]
  ------------------
  507|  3.27k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.7k]
  ------------------
  508|  3.27k|                handler.on_weekday_name();
  509|  3.27k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 31.7k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.7k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.25k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.25k, False: 25.5k]
  ------------------
  579|  6.25k|                handler.on_us_date();
  580|  6.25k|                break;
  581|  1.97k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.97k, False: 29.8k]
  ------------------
  582|  1.97k|                handler.on_iso_date();
  583|  1.97k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.0k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.0k, False: 20.7k]
  ------------------
  588|  11.0k|                handler.on_24_hour_time();
  589|  11.0k|                break;
  590|  2.70k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.70k, False: 29.0k]
  ------------------
  591|  2.70k|                handler.on_iso_time();
  592|  2.70k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.7k|        }
  704|  31.7k|        begin = p;
  705|       |
  706|  31.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.5k, False: 20.2k]
  ------------------
  707|  11.5k|            return p;
  708|  11.5k|        }
  709|  31.7k|    }
  710|  20.0k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 20.0k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  20.0k|    handler.verify();
  714|  20.0k|    return p;
  715|  31.6k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.63k|    {                                                                \
  769|  3.63k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.63k|        field##_set = 1;                                             \
  774|  3.63k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.63k|    {                                                                \
  769|  4.63k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.63k|        field##_set = 1;                                             \
  774|  4.63k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  8.52k|    {                                                                \
  769|  8.52k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.52k|        field##_set = 1;                                             \
  774|  8.52k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.03k|    {                                                                \
  769|  5.03k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.03k|        field##_set = 1;                                             \
  774|  5.03k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.61k|    {                                                                \
  769|  1.61k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.61k|        field##_set = 1;                                             \
  774|  1.61k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.4k|    {                                                                \
  769|  11.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.4k|        field##_set = 1;                                             \
  774|  11.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.0k|    {                                                                \
  769|  11.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.0k|        field##_set = 1;                                             \
  774|  11.0k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.08k|    {                                                                \
  769|  1.08k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.08k|        field##_set = 1;                                             \
  774|  1.08k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  20.0k|    {
  800|  20.0k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.5k, False: 9.55k]
  |  Branch (800:27): [True: 0, False: 10.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  20.0k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 20.0k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  20.0k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 314, False: 19.7k]
  |  Branch (818:31): [True: 0, False: 314]
  |  Branch (818:46): [True: 0, False: 314]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  20.0k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 20.0k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  20.0k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.61k, False: 18.4k]
  |  Branch (829:26): [True: 4.92k, False: 13.5k]
  |  Branch (829:38): [True: 0, False: 13.5k]
  ------------------
  830|  20.0k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.54k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  20.0k|    }
_ZN3scn2v46detail12setter_state29handle_short_year_and_centuryIiEEvRT_S4_:
  866|  14.3k|    {
  867|  14.3k|        assert(!full_year_set);
  868|  14.3k|        if (short_year_set && century_set) {
  ------------------
  |  Branch (868:13): [True: 14.3k, False: 0]
  |  Branch (868:31): [True: 0, False: 14.3k]
  ------------------
  869|      0|            year = century_value * 100 + short_year_value - offset;
  870|      0|        }
  871|  14.3k|        else if (short_year_set) {
  ------------------
  |  Branch (871:18): [True: 14.3k, False: 0]
  ------------------
  872|  14.3k|            if (short_year_value >= 69) {
  ------------------
  |  Branch (872:17): [True: 156, False: 14.1k]
  ------------------
  873|    156|                year = 1900 + short_year_value - offset;
  874|    156|            }
  875|  14.1k|            else {
  876|  14.1k|                year = 2000 + short_year_value - offset;
  877|  14.1k|            }
  878|  14.3k|        }
  879|      0|        else if (century_set) {
  ------------------
  |  Branch (879:18): [True: 0, False: 0]
  ------------------
  880|      0|            year = 100 * century_value - offset;
  881|      0|        }
  882|  14.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  26.7k|{
  377|  26.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 26.7k]
  |  Branch (377:25): [True: 0, False: 26.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  26.7k|    auto p = begin;
  383|  26.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 26.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  26.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 26.7k]
  |  Branch (392:21): [True: 0, False: 26.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  42.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 27.0k, False: 14.9k]
  ------------------
  399|  27.0k|        auto ch = *p;
  400|  27.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 27.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  27.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 182, False: 26.9k]
  ------------------
  404|    182|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 182]
  |  Branch (404:32): [True: 182, False: 0]
  |  Branch (404:46): [True: 0, False: 182]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    182|            const auto cp_len =
  412|    182|                detail::code_point_length_by_starting_code_unit(ch);
  413|    182|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 182]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    182|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 182]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    182|            ++p;
  439|    182|            continue;
  440|    182|        }
  441|  26.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 182, False: 26.7k]
  ------------------
  442|    182|            handler.on_text(begin, p);
  443|    182|        }
  444|  26.9k|        ++p;  // Consume '%'
  445|  26.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 26.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  26.9k|        ch = *p;
  451|  26.9k|        ++p;
  452|       |
  453|  26.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 26.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 26.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 26.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.69k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.69k, False: 25.2k]
  ------------------
  463|  1.69k|                handler.on_full_year();
  464|  1.69k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 26.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 26.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 26.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 26.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.67k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.67k, False: 22.2k]
  ------------------
  479|  4.67k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 26.9k]
  ------------------
  480|  4.67k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 26.9k]
  ------------------
  481|  4.67k|                handler.on_month_name();
  482|  4.67k|                break;
  483|     74|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 74, False: 26.8k]
  ------------------
  484|     74|                handler.on_dec_month();
  485|     74|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 26.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 26.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 26.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 26.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     58|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 58, False: 26.8k]
  ------------------
  502|     58|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 26.9k]
  ------------------
  503|     58|                handler.on_day_of_month();
  504|     58|                break;
  505|       |            // Day of week
  506|  3.24k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.24k, False: 23.6k]
  ------------------
  507|  3.24k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 26.9k]
  ------------------
  508|  3.24k|                handler.on_weekday_name();
  509|  3.24k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 26.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 26.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 26.8k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 26.9k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 26.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 26.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 26.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 26.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 26.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 26.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 26.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 26.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 26.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 26.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.82k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.82k, False: 25.0k]
  ------------------
  579|  1.82k|                handler.on_us_date();
  580|  1.82k|                break;
  581|  2.00k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.00k, False: 24.9k]
  ------------------
  582|  2.00k|                handler.on_iso_date();
  583|  2.00k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 26.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.5k, False: 16.3k]
  ------------------
  588|  10.5k|                handler.on_24_hour_time();
  589|  10.5k|                break;
  590|  2.72k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.72k, False: 24.1k]
  ------------------
  591|  2.72k|                handler.on_iso_time();
  592|  2.72k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 26.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 26.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 26.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 26.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 26.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 26.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 26.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 26.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  26.9k|        }
  704|  26.9k|        begin = p;
  705|       |
  706|  26.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.7k, False: 15.1k]
  ------------------
  707|  11.7k|            return p;
  708|  11.7k|        }
  709|  26.9k|    }
  710|  14.9k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 14.9k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  14.9k|    handler.verify();
  714|  14.9k|    return p;
  715|  26.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.70k|    {                                                                \
  769|  3.70k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.70k|        field##_set = 1;                                             \
  774|  3.70k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    146|    {                                                                \
  769|    146|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    146|        field##_set = 1;                                             \
  774|    146|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.99k|    {                                                                \
  769|  3.99k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.99k|        field##_set = 1;                                             \
  774|  3.99k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    536|    {                                                                \
  769|    536|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    536|        field##_set = 1;                                             \
  774|    536|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.55k|    {                                                                \
  769|  1.55k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.55k|        field##_set = 1;                                             \
  774|  1.55k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.6k|    {                                                                \
  769|  10.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.6k|        field##_set = 1;                                             \
  774|  10.6k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.4k|    {                                                                \
  769|  10.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.4k|        field##_set = 1;                                             \
  774|  10.4k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.06k|    {                                                                \
  769|  1.06k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.06k|        field##_set = 1;                                             \
  774|  1.06k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  14.9k|    {
  800|  14.9k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 9.95k, False: 5.00k]
  |  Branch (800:27): [True: 0, False: 9.95k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  14.9k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 14.9k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  14.9k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 314, False: 14.6k]
  |  Branch (818:31): [True: 0, False: 314]
  |  Branch (818:46): [True: 0, False: 314]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  14.9k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 14.9k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  14.9k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.55k, False: 13.4k]
  |  Branch (829:26): [True: 450, False: 12.9k]
  |  Branch (829:38): [True: 0, False: 12.9k]
  ------------------
  830|  14.9k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 2.00k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  14.9k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  31.6k|{
  377|  31.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.6k]
  |  Branch (377:25): [True: 0, False: 31.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.6k|    auto p = begin;
  383|  31.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.6k]
  |  Branch (392:21): [True: 0, False: 31.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  52.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.9k, False: 20.0k]
  ------------------
  399|  31.9k|        auto ch = *p;
  400|  31.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 188, False: 31.7k]
  ------------------
  404|    188|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 188]
  |  Branch (404:32): [True: 188, False: 0]
  |  Branch (404:46): [True: 0, False: 188]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    188|            const auto cp_len =
  412|    188|                detail::code_point_length_by_starting_code_unit(ch);
  413|    188|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 188]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    188|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 188]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    188|            ++p;
  439|    188|            continue;
  440|    188|        }
  441|  31.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 188, False: 31.6k]
  ------------------
  442|    188|            handler.on_text(begin, p);
  443|    188|        }
  444|  31.7k|        ++p;  // Consume '%'
  445|  31.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.7k|        ch = *p;
  451|  31.7k|        ++p;
  452|       |
  453|  31.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.66k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.66k, False: 30.1k]
  ------------------
  463|  1.66k|                handler.on_full_year();
  464|  1.66k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.64k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.64k, False: 27.1k]
  ------------------
  479|  4.64k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.7k]
  ------------------
  480|  4.64k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.7k]
  ------------------
  481|  4.64k|                handler.on_month_name();
  482|  4.64k|                break;
  483|     80|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 80, False: 31.7k]
  ------------------
  484|     80|                handler.on_dec_month();
  485|     80|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     58|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 58, False: 31.7k]
  ------------------
  502|     58|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.7k]
  ------------------
  503|     58|                handler.on_day_of_month();
  504|     58|                break;
  505|       |            // Day of week
  506|  3.27k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.27k, False: 28.5k]
  ------------------
  507|  3.27k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.7k]
  ------------------
  508|  3.27k|                handler.on_weekday_name();
  509|  3.27k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 31.7k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.7k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.25k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.25k, False: 25.5k]
  ------------------
  579|  6.25k|                handler.on_us_date();
  580|  6.25k|                break;
  581|  1.97k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.97k, False: 29.8k]
  ------------------
  582|  1.97k|                handler.on_iso_date();
  583|  1.97k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.0k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.0k, False: 20.7k]
  ------------------
  588|  11.0k|                handler.on_24_hour_time();
  589|  11.0k|                break;
  590|  2.70k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.70k, False: 29.0k]
  ------------------
  591|  2.70k|                handler.on_iso_time();
  592|  2.70k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.7k|        }
  704|  31.7k|        begin = p;
  705|       |
  706|  31.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.5k, False: 20.2k]
  ------------------
  707|  11.5k|            return p;
  708|  11.5k|        }
  709|  31.7k|    }
  710|  20.0k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 20.0k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  20.0k|    handler.verify();
  714|  20.0k|    return p;
  715|  31.6k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.63k|    {                                                                \
  769|  3.63k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.63k|        field##_set = 1;                                             \
  774|  3.63k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.63k|    {                                                                \
  769|  4.63k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.63k|        field##_set = 1;                                             \
  774|  4.63k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  8.52k|    {                                                                \
  769|  8.52k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.52k|        field##_set = 1;                                             \
  774|  8.52k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.03k|    {                                                                \
  769|  5.03k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.03k|        field##_set = 1;                                             \
  774|  5.03k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.61k|    {                                                                \
  769|  1.61k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.61k|        field##_set = 1;                                             \
  774|  1.61k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.4k|    {                                                                \
  769|  11.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.4k|        field##_set = 1;                                             \
  774|  11.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.0k|    {                                                                \
  769|  11.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.0k|        field##_set = 1;                                             \
  774|  11.0k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.08k|    {                                                                \
  769|  1.08k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.08k|        field##_set = 1;                                             \
  774|  1.08k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  20.0k|    {
  800|  20.0k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.5k, False: 9.55k]
  |  Branch (800:27): [True: 0, False: 10.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  20.0k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 20.0k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  20.0k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 314, False: 19.7k]
  |  Branch (818:31): [True: 0, False: 314]
  |  Branch (818:46): [True: 0, False: 314]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  20.0k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 20.0k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  20.0k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.61k, False: 18.4k]
  |  Branch (829:26): [True: 4.92k, False: 13.5k]
  |  Branch (829:38): [True: 0, False: 13.5k]
  ------------------
  830|  20.0k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.54k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  20.0k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  26.7k|{
  377|  26.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 26.7k]
  |  Branch (377:25): [True: 0, False: 26.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  26.7k|    auto p = begin;
  383|  26.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 26.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  26.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 26.7k]
  |  Branch (392:21): [True: 0, False: 26.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  42.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 27.0k, False: 14.9k]
  ------------------
  399|  27.0k|        auto ch = *p;
  400|  27.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 27.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  27.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 182, False: 26.9k]
  ------------------
  404|    182|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 182]
  |  Branch (404:32): [True: 182, False: 0]
  |  Branch (404:46): [True: 0, False: 182]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    182|            const auto cp_len =
  412|    182|                detail::code_point_length_by_starting_code_unit(ch);
  413|    182|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 182]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    182|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 182]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    182|            ++p;
  439|    182|            continue;
  440|    182|        }
  441|  26.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 182, False: 26.7k]
  ------------------
  442|    182|            handler.on_text(begin, p);
  443|    182|        }
  444|  26.9k|        ++p;  // Consume '%'
  445|  26.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 26.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  26.9k|        ch = *p;
  451|  26.9k|        ++p;
  452|       |
  453|  26.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 26.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 26.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 26.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.69k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.69k, False: 25.2k]
  ------------------
  463|  1.69k|                handler.on_full_year();
  464|  1.69k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 26.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 26.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 26.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 26.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.67k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.67k, False: 22.2k]
  ------------------
  479|  4.67k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 26.9k]
  ------------------
  480|  4.67k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 26.9k]
  ------------------
  481|  4.67k|                handler.on_month_name();
  482|  4.67k|                break;
  483|     74|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 74, False: 26.8k]
  ------------------
  484|     74|                handler.on_dec_month();
  485|     74|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 26.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 26.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 26.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 26.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     58|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 58, False: 26.8k]
  ------------------
  502|     58|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 26.9k]
  ------------------
  503|     58|                handler.on_day_of_month();
  504|     58|                break;
  505|       |            // Day of week
  506|  3.24k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.24k, False: 23.6k]
  ------------------
  507|  3.24k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 26.9k]
  ------------------
  508|  3.24k|                handler.on_weekday_name();
  509|  3.24k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 26.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 26.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 26.8k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 26.9k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 26.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 26.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 26.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 26.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 26.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 26.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 26.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 26.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 26.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 26.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.82k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.82k, False: 25.0k]
  ------------------
  579|  1.82k|                handler.on_us_date();
  580|  1.82k|                break;
  581|  2.00k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.00k, False: 24.9k]
  ------------------
  582|  2.00k|                handler.on_iso_date();
  583|  2.00k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 26.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.5k, False: 16.3k]
  ------------------
  588|  10.5k|                handler.on_24_hour_time();
  589|  10.5k|                break;
  590|  2.72k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.72k, False: 24.1k]
  ------------------
  591|  2.72k|                handler.on_iso_time();
  592|  2.72k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 26.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 26.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 26.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 26.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 26.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 26.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 26.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 26.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  26.9k|        }
  704|  26.9k|        begin = p;
  705|       |
  706|  26.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.7k, False: 15.1k]
  ------------------
  707|  11.7k|            return p;
  708|  11.7k|        }
  709|  26.9k|    }
  710|  14.9k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 14.9k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  14.9k|    handler.verify();
  714|  14.9k|    return p;
  715|  26.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.70k|    {                                                                \
  769|  3.70k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.70k|        field##_set = 1;                                             \
  774|  3.70k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    146|    {                                                                \
  769|    146|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    146|        field##_set = 1;                                             \
  774|    146|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.99k|    {                                                                \
  769|  3.99k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.99k|        field##_set = 1;                                             \
  774|  3.99k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    536|    {                                                                \
  769|    536|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    536|        field##_set = 1;                                             \
  774|    536|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.55k|    {                                                                \
  769|  1.55k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.55k|        field##_set = 1;                                             \
  774|  1.55k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.6k|    {                                                                \
  769|  10.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.6k|        field##_set = 1;                                             \
  774|  10.6k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.4k|    {                                                                \
  769|  10.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.4k|        field##_set = 1;                                             \
  774|  10.4k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.06k|    {                                                                \
  769|  1.06k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.06k|        field##_set = 1;                                             \
  774|  1.06k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  14.9k|    {
  800|  14.9k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 9.95k, False: 5.00k]
  |  Branch (800:27): [True: 0, False: 9.95k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  14.9k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 14.9k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  14.9k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 314, False: 14.6k]
  |  Branch (818:31): [True: 0, False: 314]
  |  Branch (818:46): [True: 0, False: 314]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  14.9k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 14.9k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  14.9k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.55k, False: 13.4k]
  |  Branch (829:26): [True: 450, False: 12.9k]
  |  Branch (829:38): [True: 0, False: 12.9k]
  ------------------
  830|  14.9k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 2.00k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  14.9k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  31.6k|{
  377|  31.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.6k]
  |  Branch (377:25): [True: 0, False: 31.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.6k|    auto p = begin;
  383|  31.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.6k]
  |  Branch (392:21): [True: 0, False: 31.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  52.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.9k, False: 20.0k]
  ------------------
  399|  31.9k|        auto ch = *p;
  400|  31.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 188, False: 31.7k]
  ------------------
  404|    188|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 188]
  |  Branch (404:32): [True: 188, False: 0]
  |  Branch (404:46): [True: 0, False: 188]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    188|            const auto cp_len =
  412|    188|                detail::code_point_length_by_starting_code_unit(ch);
  413|    188|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 188]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    188|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 188]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    188|            ++p;
  439|    188|            continue;
  440|    188|        }
  441|  31.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 188, False: 31.6k]
  ------------------
  442|    188|            handler.on_text(begin, p);
  443|    188|        }
  444|  31.7k|        ++p;  // Consume '%'
  445|  31.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.7k|        ch = *p;
  451|  31.7k|        ++p;
  452|       |
  453|  31.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.66k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.66k, False: 30.1k]
  ------------------
  463|  1.66k|                handler.on_full_year();
  464|  1.66k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.64k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.64k, False: 27.1k]
  ------------------
  479|  4.64k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.7k]
  ------------------
  480|  4.64k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.7k]
  ------------------
  481|  4.64k|                handler.on_month_name();
  482|  4.64k|                break;
  483|     80|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 80, False: 31.7k]
  ------------------
  484|     80|                handler.on_dec_month();
  485|     80|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     58|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 58, False: 31.7k]
  ------------------
  502|     58|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.7k]
  ------------------
  503|     58|                handler.on_day_of_month();
  504|     58|                break;
  505|       |            // Day of week
  506|  3.27k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.27k, False: 28.5k]
  ------------------
  507|  3.27k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.7k]
  ------------------
  508|  3.27k|                handler.on_weekday_name();
  509|  3.27k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 31.7k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.7k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.25k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.25k, False: 25.5k]
  ------------------
  579|  6.25k|                handler.on_us_date();
  580|  6.25k|                break;
  581|  1.97k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.97k, False: 29.8k]
  ------------------
  582|  1.97k|                handler.on_iso_date();
  583|  1.97k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.0k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.0k, False: 20.7k]
  ------------------
  588|  11.0k|                handler.on_24_hour_time();
  589|  11.0k|                break;
  590|  2.70k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.70k, False: 29.0k]
  ------------------
  591|  2.70k|                handler.on_iso_time();
  592|  2.70k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.7k|        }
  704|  31.7k|        begin = p;
  705|       |
  706|  31.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.5k, False: 20.2k]
  ------------------
  707|  11.5k|            return p;
  708|  11.5k|        }
  709|  31.7k|    }
  710|  20.0k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 20.0k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  20.0k|    handler.verify();
  714|  20.0k|    return p;
  715|  31.6k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.63k|    {                                                                \
  769|  3.63k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.63k|        field##_set = 1;                                             \
  774|  3.63k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  6.25k|    {                                                                \
  769|  6.25k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.25k|        field##_set = 1;                                             \
  774|  6.25k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  8.52k|    {                                                                \
  769|  8.52k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.52k|        field##_set = 1;                                             \
  774|  8.52k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.03k|    {                                                                \
  769|  5.03k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.03k|        field##_set = 1;                                             \
  774|  5.03k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.61k|    {                                                                \
  769|  1.61k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.61k|        field##_set = 1;                                             \
  774|  1.61k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.4k|    {                                                                \
  769|  11.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.4k|        field##_set = 1;                                             \
  774|  11.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.0k|    {                                                                \
  769|  11.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.0k|        field##_set = 1;                                             \
  774|  11.0k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.08k|    {                                                                \
  769|  1.08k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.08k|        field##_set = 1;                                             \
  774|  1.08k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  20.0k|    {
  800|  20.0k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.5k, False: 9.55k]
  |  Branch (800:27): [True: 0, False: 10.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  20.0k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 20.0k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  20.0k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 314, False: 19.7k]
  |  Branch (818:31): [True: 0, False: 314]
  |  Branch (818:46): [True: 0, False: 314]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  20.0k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 20.0k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  20.0k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.61k, False: 18.4k]
  |  Branch (829:26): [True: 4.92k, False: 13.5k]
  |  Branch (829:38): [True: 0, False: 13.5k]
  ------------------
  830|  20.0k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.54k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  20.0k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  26.7k|{
  377|  26.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 26.7k]
  |  Branch (377:25): [True: 0, False: 26.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  26.7k|    auto p = begin;
  383|  26.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 26.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  26.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 26.7k]
  |  Branch (392:21): [True: 0, False: 26.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  42.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 27.0k, False: 14.9k]
  ------------------
  399|  27.0k|        auto ch = *p;
  400|  27.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 27.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  27.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 182, False: 26.9k]
  ------------------
  404|    182|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 182]
  |  Branch (404:32): [True: 182, False: 0]
  |  Branch (404:46): [True: 0, False: 182]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    182|            const auto cp_len =
  412|    182|                detail::code_point_length_by_starting_code_unit(ch);
  413|    182|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 182]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    182|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 182]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    182|            ++p;
  439|    182|            continue;
  440|    182|        }
  441|  26.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 182, False: 26.7k]
  ------------------
  442|    182|            handler.on_text(begin, p);
  443|    182|        }
  444|  26.9k|        ++p;  // Consume '%'
  445|  26.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 26.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  26.9k|        ch = *p;
  451|  26.9k|        ++p;
  452|       |
  453|  26.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 26.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 26.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 26.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.69k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.69k, False: 25.2k]
  ------------------
  463|  1.69k|                handler.on_full_year();
  464|  1.69k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 26.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 26.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 26.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 26.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.67k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.67k, False: 22.2k]
  ------------------
  479|  4.67k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 26.9k]
  ------------------
  480|  4.67k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 26.9k]
  ------------------
  481|  4.67k|                handler.on_month_name();
  482|  4.67k|                break;
  483|     74|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 74, False: 26.8k]
  ------------------
  484|     74|                handler.on_dec_month();
  485|     74|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 26.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 26.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 26.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 26.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     58|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 58, False: 26.8k]
  ------------------
  502|     58|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 26.9k]
  ------------------
  503|     58|                handler.on_day_of_month();
  504|     58|                break;
  505|       |            // Day of week
  506|  3.24k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.24k, False: 23.6k]
  ------------------
  507|  3.24k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 26.9k]
  ------------------
  508|  3.24k|                handler.on_weekday_name();
  509|  3.24k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 26.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 26.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 26.8k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 26.9k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 26.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 26.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 26.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 26.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 26.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 26.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 26.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 26.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 26.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 26.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.82k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.82k, False: 25.0k]
  ------------------
  579|  1.82k|                handler.on_us_date();
  580|  1.82k|                break;
  581|  2.00k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.00k, False: 24.9k]
  ------------------
  582|  2.00k|                handler.on_iso_date();
  583|  2.00k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 26.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.5k, False: 16.3k]
  ------------------
  588|  10.5k|                handler.on_24_hour_time();
  589|  10.5k|                break;
  590|  2.72k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.72k, False: 24.1k]
  ------------------
  591|  2.72k|                handler.on_iso_time();
  592|  2.72k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 26.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 26.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 26.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 26.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 26.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 26.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 26.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 26.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  26.9k|        }
  704|  26.9k|        begin = p;
  705|       |
  706|  26.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.7k, False: 15.1k]
  ------------------
  707|  11.7k|            return p;
  708|  11.7k|        }
  709|  26.9k|    }
  710|  14.9k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 14.9k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  14.9k|    handler.verify();
  714|  14.9k|    return p;
  715|  26.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.70k|    {                                                                \
  769|  3.70k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.70k|        field##_set = 1;                                             \
  774|  3.70k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.82k|    {                                                                \
  769|  1.82k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.82k|        field##_set = 1;                                             \
  774|  1.82k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.99k|    {                                                                \
  769|  3.99k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.99k|        field##_set = 1;                                             \
  774|  3.99k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    536|    {                                                                \
  769|    536|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    536|        field##_set = 1;                                             \
  774|    536|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.55k|    {                                                                \
  769|  1.55k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.55k|        field##_set = 1;                                             \
  774|  1.55k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.6k|    {                                                                \
  769|  10.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.6k|        field##_set = 1;                                             \
  774|  10.6k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.4k|    {                                                                \
  769|  10.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.4k|        field##_set = 1;                                             \
  774|  10.4k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.06k|    {                                                                \
  769|  1.06k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.06k|        field##_set = 1;                                             \
  774|  1.06k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  14.9k|    {
  800|  14.9k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 9.95k, False: 5.00k]
  |  Branch (800:27): [True: 0, False: 9.95k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  14.9k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 14.9k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  14.9k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 314, False: 14.6k]
  |  Branch (818:31): [True: 0, False: 314]
  |  Branch (818:46): [True: 0, False: 314]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  14.9k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 14.9k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  14.9k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.55k, False: 13.4k]
  |  Branch (829:26): [True: 450, False: 12.9k]
  |  Branch (829:38): [True: 0, False: 12.9k]
  ------------------
  830|  14.9k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 2.00k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  14.9k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  31.5k|{
  377|  31.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.5k]
  |  Branch (377:25): [True: 0, False: 31.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.5k|    auto p = begin;
  383|  31.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.5k]
  |  Branch (392:21): [True: 0, False: 31.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  39.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.6k, False: 7.77k]
  ------------------
  399|  31.6k|        auto ch = *p;
  400|  31.6k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.6k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.6k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 68, False: 31.5k]
  ------------------
  404|     68|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 68]
  |  Branch (404:32): [True: 68, False: 0]
  |  Branch (404:46): [True: 0, False: 68]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     68|            const auto cp_len =
  412|     68|                detail::code_point_length_by_starting_code_unit(ch);
  413|     68|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 68]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     68|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 68]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     68|            ++p;
  439|     68|            continue;
  440|     68|        }
  441|  31.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 68, False: 31.5k]
  ------------------
  442|     68|            handler.on_text(begin, p);
  443|     68|        }
  444|  31.5k|        ++p;  // Consume '%'
  445|  31.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.5k|        ch = *p;
  451|  31.5k|        ++p;
  452|       |
  453|  31.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.40k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.40k, False: 28.1k]
  ------------------
  463|  3.40k|                handler.on_full_year();
  464|  3.40k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.11k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.11k, False: 27.4k]
  ------------------
  479|  4.11k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.5k]
  ------------------
  480|  4.11k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.5k]
  ------------------
  481|  4.11k|                handler.on_month_name();
  482|  4.11k|                break;
  483|     38|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 38, False: 31.5k]
  ------------------
  484|     38|                handler.on_dec_month();
  485|     38|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     20|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 20, False: 31.5k]
  ------------------
  502|     20|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.5k]
  ------------------
  503|     20|                handler.on_day_of_month();
  504|     20|                break;
  505|       |            // Day of week
  506|  3.40k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.40k, False: 28.1k]
  ------------------
  507|  3.40k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.5k]
  ------------------
  508|  3.40k|                handler.on_weekday_name();
  509|  3.40k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     10|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 10, False: 31.5k]
  ------------------
  518|     10|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.5k]
  ------------------
  519|     10|                handler.on_24_hour();
  520|     10|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.40k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.40k, False: 28.1k]
  ------------------
  579|  3.40k|                handler.on_us_date();
  580|  3.40k|                break;
  581|  3.40k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.40k, False: 28.1k]
  ------------------
  582|  3.40k|                handler.on_iso_date();
  583|  3.40k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.1k, False: 21.3k]
  ------------------
  588|  10.1k|                handler.on_24_hour_time();
  589|  10.1k|                break;
  590|  3.59k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.59k, False: 27.9k]
  ------------------
  591|  3.59k|                handler.on_iso_time();
  592|  3.59k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.5k|        }
  704|  31.5k|        begin = p;
  705|       |
  706|  31.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.7k, False: 7.84k]
  ------------------
  707|  23.7k|            return p;
  708|  23.7k|        }
  709|  31.5k|    }
  710|  7.77k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.77k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.77k|    handler.verify();
  714|  7.77k|    return p;
  715|  31.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.80k|    {                                                                \
  769|  6.80k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.80k|        field##_set = 1;                                             \
  774|  6.80k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.12k|    {                                                                \
  769|  1.12k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.12k|        field##_set = 1;                                             \
  774|  1.12k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     78|    {                                                                \
  769|     78|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     78|        field##_set = 1;                                             \
  774|     78|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.45k|    {                                                                \
  769|  7.45k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.45k|        field##_set = 1;                                             \
  774|  7.45k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.41k|    {                                                                \
  769|  7.41k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.41k|        field##_set = 1;                                             \
  774|  7.41k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    230|    {                                                                \
  769|    230|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    230|        field##_set = 1;                                             \
  774|    230|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.77k|    {
  800|  7.77k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.02k, False: 746]
  |  Branch (800:27): [True: 0, False: 7.02k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.77k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.77k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.77k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 10, False: 7.76k]
  |  Branch (818:31): [True: 0, False: 10]
  |  Branch (818:46): [True: 0, False: 10]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.77k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.77k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.77k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.77k]
  |  Branch (829:26): [True: 20, False: 7.75k]
  |  Branch (829:38): [True: 0, False: 7.75k]
  ------------------
  830|  7.77k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 20]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.77k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  31.5k|{
  377|  31.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.5k]
  |  Branch (377:25): [True: 0, False: 31.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.5k|    auto p = begin;
  383|  31.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.5k]
  |  Branch (392:21): [True: 0, False: 31.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  39.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.6k, False: 7.77k]
  ------------------
  399|  31.6k|        auto ch = *p;
  400|  31.6k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.6k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.6k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 68, False: 31.5k]
  ------------------
  404|     68|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 68]
  |  Branch (404:32): [True: 68, False: 0]
  |  Branch (404:46): [True: 0, False: 68]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     68|            const auto cp_len =
  412|     68|                detail::code_point_length_by_starting_code_unit(ch);
  413|     68|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 68]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     68|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 68]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     68|            ++p;
  439|     68|            continue;
  440|     68|        }
  441|  31.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 68, False: 31.5k]
  ------------------
  442|     68|            handler.on_text(begin, p);
  443|     68|        }
  444|  31.5k|        ++p;  // Consume '%'
  445|  31.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.5k|        ch = *p;
  451|  31.5k|        ++p;
  452|       |
  453|  31.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.40k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.40k, False: 28.1k]
  ------------------
  463|  3.40k|                handler.on_full_year();
  464|  3.40k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.11k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.11k, False: 27.4k]
  ------------------
  479|  4.11k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.5k]
  ------------------
  480|  4.11k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.5k]
  ------------------
  481|  4.11k|                handler.on_month_name();
  482|  4.11k|                break;
  483|     38|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 38, False: 31.5k]
  ------------------
  484|     38|                handler.on_dec_month();
  485|     38|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     20|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 20, False: 31.5k]
  ------------------
  502|     20|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.5k]
  ------------------
  503|     20|                handler.on_day_of_month();
  504|     20|                break;
  505|       |            // Day of week
  506|  3.40k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.40k, False: 28.1k]
  ------------------
  507|  3.40k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.5k]
  ------------------
  508|  3.40k|                handler.on_weekday_name();
  509|  3.40k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     10|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 10, False: 31.5k]
  ------------------
  518|     10|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.5k]
  ------------------
  519|     10|                handler.on_24_hour();
  520|     10|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.40k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.40k, False: 28.1k]
  ------------------
  579|  3.40k|                handler.on_us_date();
  580|  3.40k|                break;
  581|  3.40k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.40k, False: 28.1k]
  ------------------
  582|  3.40k|                handler.on_iso_date();
  583|  3.40k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.1k, False: 21.3k]
  ------------------
  588|  10.1k|                handler.on_24_hour_time();
  589|  10.1k|                break;
  590|  3.59k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.59k, False: 27.9k]
  ------------------
  591|  3.59k|                handler.on_iso_time();
  592|  3.59k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.5k|        }
  704|  31.5k|        begin = p;
  705|       |
  706|  31.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.7k, False: 7.84k]
  ------------------
  707|  23.7k|            return p;
  708|  23.7k|        }
  709|  31.5k|    }
  710|  7.77k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.77k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.77k|    handler.verify();
  714|  7.77k|    return p;
  715|  31.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.80k|    {                                                                \
  769|  6.80k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.80k|        field##_set = 1;                                             \
  774|  6.80k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.12k|    {                                                                \
  769|  1.12k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.12k|        field##_set = 1;                                             \
  774|  1.12k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     78|    {                                                                \
  769|     78|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     78|        field##_set = 1;                                             \
  774|     78|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.45k|    {                                                                \
  769|  7.45k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.45k|        field##_set = 1;                                             \
  774|  7.45k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.41k|    {                                                                \
  769|  7.41k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.41k|        field##_set = 1;                                             \
  774|  7.41k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    230|    {                                                                \
  769|    230|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    230|        field##_set = 1;                                             \
  774|    230|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.77k|    {
  800|  7.77k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.02k, False: 746]
  |  Branch (800:27): [True: 0, False: 7.02k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.77k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.77k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.77k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 10, False: 7.76k]
  |  Branch (818:31): [True: 0, False: 10]
  |  Branch (818:46): [True: 0, False: 10]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.77k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.77k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.77k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.77k]
  |  Branch (829:26): [True: 20, False: 7.75k]
  |  Branch (829:38): [True: 0, False: 7.75k]
  ------------------
  830|  7.77k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 20]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.77k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  31.5k|{
  377|  31.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.5k]
  |  Branch (377:25): [True: 0, False: 31.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.5k|    auto p = begin;
  383|  31.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.5k]
  |  Branch (392:21): [True: 0, False: 31.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  39.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.6k, False: 7.77k]
  ------------------
  399|  31.6k|        auto ch = *p;
  400|  31.6k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.6k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.6k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 68, False: 31.5k]
  ------------------
  404|     68|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 68]
  |  Branch (404:32): [True: 68, False: 0]
  |  Branch (404:46): [True: 0, False: 68]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     68|            const auto cp_len =
  412|     68|                detail::code_point_length_by_starting_code_unit(ch);
  413|     68|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 68]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     68|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 68]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     68|            ++p;
  439|     68|            continue;
  440|     68|        }
  441|  31.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 68, False: 31.5k]
  ------------------
  442|     68|            handler.on_text(begin, p);
  443|     68|        }
  444|  31.5k|        ++p;  // Consume '%'
  445|  31.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.5k|        ch = *p;
  451|  31.5k|        ++p;
  452|       |
  453|  31.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.40k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.40k, False: 28.1k]
  ------------------
  463|  3.40k|                handler.on_full_year();
  464|  3.40k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.11k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.11k, False: 27.4k]
  ------------------
  479|  4.11k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.5k]
  ------------------
  480|  4.11k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.5k]
  ------------------
  481|  4.11k|                handler.on_month_name();
  482|  4.11k|                break;
  483|     38|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 38, False: 31.5k]
  ------------------
  484|     38|                handler.on_dec_month();
  485|     38|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     20|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 20, False: 31.5k]
  ------------------
  502|     20|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.5k]
  ------------------
  503|     20|                handler.on_day_of_month();
  504|     20|                break;
  505|       |            // Day of week
  506|  3.40k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.40k, False: 28.1k]
  ------------------
  507|  3.40k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.5k]
  ------------------
  508|  3.40k|                handler.on_weekday_name();
  509|  3.40k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     10|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 10, False: 31.5k]
  ------------------
  518|     10|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.5k]
  ------------------
  519|     10|                handler.on_24_hour();
  520|     10|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.40k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.40k, False: 28.1k]
  ------------------
  579|  3.40k|                handler.on_us_date();
  580|  3.40k|                break;
  581|  3.40k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.40k, False: 28.1k]
  ------------------
  582|  3.40k|                handler.on_iso_date();
  583|  3.40k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.1k, False: 21.3k]
  ------------------
  588|  10.1k|                handler.on_24_hour_time();
  589|  10.1k|                break;
  590|  3.59k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.59k, False: 27.9k]
  ------------------
  591|  3.59k|                handler.on_iso_time();
  592|  3.59k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.5k|        }
  704|  31.5k|        begin = p;
  705|       |
  706|  31.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.7k, False: 7.84k]
  ------------------
  707|  23.7k|            return p;
  708|  23.7k|        }
  709|  31.5k|    }
  710|  7.77k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.77k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.77k|    handler.verify();
  714|  7.77k|    return p;
  715|  31.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.80k|    {                                                                \
  769|  6.80k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.80k|        field##_set = 1;                                             \
  774|  6.80k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.12k|    {                                                                \
  769|  1.12k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.12k|        field##_set = 1;                                             \
  774|  1.12k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     78|    {                                                                \
  769|     78|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     78|        field##_set = 1;                                             \
  774|     78|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.45k|    {                                                                \
  769|  7.45k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.45k|        field##_set = 1;                                             \
  774|  7.45k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.41k|    {                                                                \
  769|  7.41k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.41k|        field##_set = 1;                                             \
  774|  7.41k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    230|    {                                                                \
  769|    230|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    230|        field##_set = 1;                                             \
  774|    230|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.77k|    {
  800|  7.77k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.02k, False: 746]
  |  Branch (800:27): [True: 0, False: 7.02k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.77k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.77k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.77k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 10, False: 7.76k]
  |  Branch (818:31): [True: 0, False: 10]
  |  Branch (818:46): [True: 0, False: 10]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.77k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.77k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.77k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.77k]
  |  Branch (829:26): [True: 20, False: 7.75k]
  |  Branch (829:38): [True: 0, False: 7.75k]
  ------------------
  830|  7.77k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 20]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.77k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  31.5k|{
  377|  31.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.5k]
  |  Branch (377:25): [True: 0, False: 31.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.5k|    auto p = begin;
  383|  31.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.5k]
  |  Branch (392:21): [True: 0, False: 31.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  39.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.6k, False: 7.77k]
  ------------------
  399|  31.6k|        auto ch = *p;
  400|  31.6k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.6k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.6k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 68, False: 31.5k]
  ------------------
  404|     68|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 68]
  |  Branch (404:32): [True: 68, False: 0]
  |  Branch (404:46): [True: 0, False: 68]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     68|            const auto cp_len =
  412|     68|                detail::code_point_length_by_starting_code_unit(ch);
  413|     68|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 68]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     68|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 68]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     68|            ++p;
  439|     68|            continue;
  440|     68|        }
  441|  31.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 68, False: 31.5k]
  ------------------
  442|     68|            handler.on_text(begin, p);
  443|     68|        }
  444|  31.5k|        ++p;  // Consume '%'
  445|  31.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.5k|        ch = *p;
  451|  31.5k|        ++p;
  452|       |
  453|  31.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.40k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.40k, False: 28.1k]
  ------------------
  463|  3.40k|                handler.on_full_year();
  464|  3.40k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.11k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.11k, False: 27.4k]
  ------------------
  479|  4.11k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.5k]
  ------------------
  480|  4.11k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.5k]
  ------------------
  481|  4.11k|                handler.on_month_name();
  482|  4.11k|                break;
  483|     38|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 38, False: 31.5k]
  ------------------
  484|     38|                handler.on_dec_month();
  485|     38|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     20|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 20, False: 31.5k]
  ------------------
  502|     20|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.5k]
  ------------------
  503|     20|                handler.on_day_of_month();
  504|     20|                break;
  505|       |            // Day of week
  506|  3.40k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.40k, False: 28.1k]
  ------------------
  507|  3.40k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.5k]
  ------------------
  508|  3.40k|                handler.on_weekday_name();
  509|  3.40k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     10|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 10, False: 31.5k]
  ------------------
  518|     10|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.5k]
  ------------------
  519|     10|                handler.on_24_hour();
  520|     10|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.40k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.40k, False: 28.1k]
  ------------------
  579|  3.40k|                handler.on_us_date();
  580|  3.40k|                break;
  581|  3.40k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.40k, False: 28.1k]
  ------------------
  582|  3.40k|                handler.on_iso_date();
  583|  3.40k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.1k, False: 21.3k]
  ------------------
  588|  10.1k|                handler.on_24_hour_time();
  589|  10.1k|                break;
  590|  3.59k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.59k, False: 27.9k]
  ------------------
  591|  3.59k|                handler.on_iso_time();
  592|  3.59k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.5k|        }
  704|  31.5k|        begin = p;
  705|       |
  706|  31.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.7k, False: 7.84k]
  ------------------
  707|  23.7k|            return p;
  708|  23.7k|        }
  709|  31.5k|    }
  710|  7.77k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.77k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.77k|    handler.verify();
  714|  7.77k|    return p;
  715|  31.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.80k|    {                                                                \
  769|  6.80k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.80k|        field##_set = 1;                                             \
  774|  6.80k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.12k|    {                                                                \
  769|  1.12k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.12k|        field##_set = 1;                                             \
  774|  1.12k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     78|    {                                                                \
  769|     78|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     78|        field##_set = 1;                                             \
  774|     78|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.45k|    {                                                                \
  769|  7.45k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.45k|        field##_set = 1;                                             \
  774|  7.45k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.41k|    {                                                                \
  769|  7.41k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.41k|        field##_set = 1;                                             \
  774|  7.41k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    230|    {                                                                \
  769|    230|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    230|        field##_set = 1;                                             \
  774|    230|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.77k|    {
  800|  7.77k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.02k, False: 746]
  |  Branch (800:27): [True: 0, False: 7.02k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.77k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.77k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.77k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 10, False: 7.76k]
  |  Branch (818:31): [True: 0, False: 10]
  |  Branch (818:46): [True: 0, False: 10]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.77k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.77k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.77k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.77k]
  |  Branch (829:26): [True: 20, False: 7.75k]
  |  Branch (829:38): [True: 0, False: 7.75k]
  ------------------
  830|  7.77k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 20]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.77k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  31.5k|{
  377|  31.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.5k]
  |  Branch (377:25): [True: 0, False: 31.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.5k|    auto p = begin;
  383|  31.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.5k]
  |  Branch (392:21): [True: 0, False: 31.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  39.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.6k, False: 7.77k]
  ------------------
  399|  31.6k|        auto ch = *p;
  400|  31.6k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.6k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.6k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 68, False: 31.5k]
  ------------------
  404|     68|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 68]
  |  Branch (404:32): [True: 68, False: 0]
  |  Branch (404:46): [True: 0, False: 68]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     68|            const auto cp_len =
  412|     68|                detail::code_point_length_by_starting_code_unit(ch);
  413|     68|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 68]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     68|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 68]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     68|            ++p;
  439|     68|            continue;
  440|     68|        }
  441|  31.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 68, False: 31.5k]
  ------------------
  442|     68|            handler.on_text(begin, p);
  443|     68|        }
  444|  31.5k|        ++p;  // Consume '%'
  445|  31.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.5k|        ch = *p;
  451|  31.5k|        ++p;
  452|       |
  453|  31.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.40k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.40k, False: 28.1k]
  ------------------
  463|  3.40k|                handler.on_full_year();
  464|  3.40k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.11k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.11k, False: 27.4k]
  ------------------
  479|  4.11k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.5k]
  ------------------
  480|  4.11k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.5k]
  ------------------
  481|  4.11k|                handler.on_month_name();
  482|  4.11k|                break;
  483|     38|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 38, False: 31.5k]
  ------------------
  484|     38|                handler.on_dec_month();
  485|     38|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     20|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 20, False: 31.5k]
  ------------------
  502|     20|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.5k]
  ------------------
  503|     20|                handler.on_day_of_month();
  504|     20|                break;
  505|       |            // Day of week
  506|  3.40k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.40k, False: 28.1k]
  ------------------
  507|  3.40k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.5k]
  ------------------
  508|  3.40k|                handler.on_weekday_name();
  509|  3.40k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     10|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 10, False: 31.5k]
  ------------------
  518|     10|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.5k]
  ------------------
  519|     10|                handler.on_24_hour();
  520|     10|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.40k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.40k, False: 28.1k]
  ------------------
  579|  3.40k|                handler.on_us_date();
  580|  3.40k|                break;
  581|  3.40k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.40k, False: 28.1k]
  ------------------
  582|  3.40k|                handler.on_iso_date();
  583|  3.40k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.1k, False: 21.3k]
  ------------------
  588|  10.1k|                handler.on_24_hour_time();
  589|  10.1k|                break;
  590|  3.59k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.59k, False: 27.9k]
  ------------------
  591|  3.59k|                handler.on_iso_time();
  592|  3.59k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.5k|        }
  704|  31.5k|        begin = p;
  705|       |
  706|  31.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.7k, False: 7.84k]
  ------------------
  707|  23.7k|            return p;
  708|  23.7k|        }
  709|  31.5k|    }
  710|  7.77k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.77k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.77k|    handler.verify();
  714|  7.77k|    return p;
  715|  31.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.80k|    {                                                                \
  769|  6.80k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.80k|        field##_set = 1;                                             \
  774|  6.80k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  3.40k|    {                                                                \
  769|  3.40k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.40k|        field##_set = 1;                                             \
  774|  3.40k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.12k|    {                                                                \
  769|  1.12k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.12k|        field##_set = 1;                                             \
  774|  1.12k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     78|    {                                                                \
  769|     78|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     78|        field##_set = 1;                                             \
  774|     78|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.45k|    {                                                                \
  769|  7.45k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.45k|        field##_set = 1;                                             \
  774|  7.45k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.41k|    {                                                                \
  769|  7.41k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.41k|        field##_set = 1;                                             \
  774|  7.41k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    230|    {                                                                \
  769|    230|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    230|        field##_set = 1;                                             \
  774|    230|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.77k|    {
  800|  7.77k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.02k, False: 746]
  |  Branch (800:27): [True: 0, False: 7.02k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.77k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.77k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.77k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 10, False: 7.76k]
  |  Branch (818:31): [True: 0, False: 10]
  |  Branch (818:46): [True: 0, False: 10]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.77k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.77k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.77k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.77k]
  |  Branch (829:26): [True: 20, False: 7.75k]
  |  Branch (829:38): [True: 0, False: 7.75k]
  ------------------
  830|  7.77k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 20]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.77k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  31.5k|{
  377|  31.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.5k]
  |  Branch (377:25): [True: 0, False: 31.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.5k|    auto p = begin;
  383|  31.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.5k]
  |  Branch (392:21): [True: 0, False: 31.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  39.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.6k, False: 7.77k]
  ------------------
  399|  31.6k|        auto ch = *p;
  400|  31.6k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.6k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.6k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 68, False: 31.5k]
  ------------------
  404|     68|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 68]
  |  Branch (404:32): [True: 68, False: 0]
  |  Branch (404:46): [True: 0, False: 68]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     68|            const auto cp_len =
  412|     68|                detail::code_point_length_by_starting_code_unit(ch);
  413|     68|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 68]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     68|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 68]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     68|            ++p;
  439|     68|            continue;
  440|     68|        }
  441|  31.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 68, False: 31.5k]
  ------------------
  442|     68|            handler.on_text(begin, p);
  443|     68|        }
  444|  31.5k|        ++p;  // Consume '%'
  445|  31.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.5k|        ch = *p;
  451|  31.5k|        ++p;
  452|       |
  453|  31.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.40k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.40k, False: 28.1k]
  ------------------
  463|  3.40k|                handler.on_full_year();
  464|  3.40k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.11k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.11k, False: 27.4k]
  ------------------
  479|  4.11k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.5k]
  ------------------
  480|  4.11k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.5k]
  ------------------
  481|  4.11k|                handler.on_month_name();
  482|  4.11k|                break;
  483|     38|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 38, False: 31.5k]
  ------------------
  484|     38|                handler.on_dec_month();
  485|     38|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     20|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 20, False: 31.5k]
  ------------------
  502|     20|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.5k]
  ------------------
  503|     20|                handler.on_day_of_month();
  504|     20|                break;
  505|       |            // Day of week
  506|  3.40k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.40k, False: 28.1k]
  ------------------
  507|  3.40k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.5k]
  ------------------
  508|  3.40k|                handler.on_weekday_name();
  509|  3.40k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     10|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 10, False: 31.5k]
  ------------------
  518|     10|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.5k]
  ------------------
  519|     10|                handler.on_24_hour();
  520|     10|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.40k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.40k, False: 28.1k]
  ------------------
  579|  3.40k|                handler.on_us_date();
  580|  3.40k|                break;
  581|  3.40k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.40k, False: 28.1k]
  ------------------
  582|  3.40k|                handler.on_iso_date();
  583|  3.40k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.1k, False: 21.3k]
  ------------------
  588|  10.1k|                handler.on_24_hour_time();
  589|  10.1k|                break;
  590|  3.59k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.59k, False: 27.9k]
  ------------------
  591|  3.59k|                handler.on_iso_time();
  592|  3.59k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.5k|        }
  704|  31.5k|        begin = p;
  705|       |
  706|  31.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.7k, False: 7.84k]
  ------------------
  707|  23.7k|            return p;
  708|  23.7k|        }
  709|  31.5k|    }
  710|  7.77k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.77k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.77k|    handler.verify();
  714|  7.77k|    return p;
  715|  31.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.80k|    {                                                                \
  769|  6.80k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.80k|        field##_set = 1;                                             \
  774|  6.80k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  3.40k|    {                                                                \
  769|  3.40k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.40k|        field##_set = 1;                                             \
  774|  3.40k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.12k|    {                                                                \
  769|  1.12k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.12k|        field##_set = 1;                                             \
  774|  1.12k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     78|    {                                                                \
  769|     78|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     78|        field##_set = 1;                                             \
  774|     78|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.45k|    {                                                                \
  769|  7.45k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.45k|        field##_set = 1;                                             \
  774|  7.45k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.41k|    {                                                                \
  769|  7.41k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.41k|        field##_set = 1;                                             \
  774|  7.41k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    230|    {                                                                \
  769|    230|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    230|        field##_set = 1;                                             \
  774|    230|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.77k|    {
  800|  7.77k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.02k, False: 746]
  |  Branch (800:27): [True: 0, False: 7.02k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.77k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.77k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.77k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 10, False: 7.76k]
  |  Branch (818:31): [True: 0, False: 10]
  |  Branch (818:46): [True: 0, False: 10]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.77k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.77k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.77k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.77k]
  |  Branch (829:26): [True: 20, False: 7.75k]
  |  Branch (829:38): [True: 0, False: 7.75k]
  ------------------
  830|  7.77k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 20]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.77k|    }

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4066|   903k|{
 4067|   903k|    if constexpr (sizeof(U) == 1) {
 4068|   903k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4069|       |    }
 4070|       |    else if constexpr (sizeof(U) == 2) {
 4071|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4072|       |    }
 4073|       |    else {
 4074|       |        // utf-32
 4075|       |        static_assert(sizeof(U) == 4);
 4076|       |        SCN_UNUSED(ch);
 4077|       |        return 1;
 4078|       |    }
 4079|   903k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4030|   903k|{
 4031|   903k|    static_assert(sizeof(U8) == 1);
 4032|       |
 4033|   903k|    SCN_GCC_COMPAT_PUSH
 4034|   903k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4035|   903k|    constexpr char lengths[] =
 4036|   903k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4037|   903k|        "\1\1\1\1\1\1\1\1"
 4038|   903k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4039|       |                            // byte
 4040|   903k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4041|   903k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4042|   903k|        "\4";               // highest bits 11110 -> 4-byte cp
 4043|   903k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4044|   903k|    SCN_GCC_COMPAT_POP
 4045|   903k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4272|   440k|{
 4273|   440k|    if constexpr (sizeof(CharT) == 1) {
 4274|   440k|        return decode_utf8_code_point_exhaustive(input);
 4275|       |    }
 4276|       |    else if constexpr (sizeof(CharT) == 2) {
 4277|       |        return decode_utf16_code_point_exhaustive(input);
 4278|       |    }
 4279|       |    else {
 4280|       |        SCN_EXPECT(input.size() == 1);
 4281|       |        auto cp = static_cast<char32_t>(input.front());
 4282|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4283|       |            return invalid_code_point;
 4284|       |        }
 4285|       |        return cp;
 4286|       |    }
 4287|   440k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4085|   440k|{
 4086|   440k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1051|   440k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   440k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4087|       |
 4088|   440k|    const auto is_trailing_code_unit = [](char ch) {
 4089|   440k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4090|   440k|    };
 4091|       |
 4092|   440k|    if (input.size() == 1) {
  ------------------
  |  Branch (4092:9): [True: 429k, False: 10.7k]
  ------------------
 4093|   429k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4093:13): [True: 174, False: 429k]
  ------------------
 4094|    174|            SCN_UNLIKELY_ATTR
 4095|    174|            return invalid_code_point;
 4096|    174|        }
 4097|   429k|        return static_cast<char32_t>(input[0]);
 4098|   429k|    }
 4099|       |
 4100|  10.7k|    if (input.size() == 2) {
  ------------------
  |  Branch (4100:9): [True: 9.08k, False: 1.65k]
  ------------------
 4101|  9.08k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4101:13): [True: 102, False: 8.98k]
  ------------------
 4102|    102|            SCN_UNLIKELY_ATTR
 4103|    102|            return invalid_code_point;
 4104|    102|        }
 4105|  8.98k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4105:13): [True: 2.34k, False: 6.63k]
  ------------------
 4106|  2.34k|            SCN_UNLIKELY_ATTR
 4107|  2.34k|            return invalid_code_point;
 4108|  2.34k|        }
 4109|       |
 4110|  6.63k|        char32_t cp{};
 4111|  6.63k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4112|  6.63k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4113|  6.63k|        return cp;
 4114|  8.98k|    }
 4115|       |
 4116|  1.65k|    if (input.size() == 3) {
  ------------------
  |  Branch (4116:9): [True: 634, False: 1.01k]
  ------------------
 4117|    634|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4117:13): [True: 48, False: 586]
  ------------------
 4118|     48|            SCN_UNLIKELY_ATTR
 4119|     48|            return invalid_code_point;
 4120|     48|        }
 4121|    586|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4121:13): [True: 333, False: 253]
  ------------------
 4122|    586|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4122:13): [True: 133, False: 120]
  ------------------
 4123|    466|            SCN_UNLIKELY_ATTR
 4124|    466|            return invalid_code_point;
 4125|    466|        }
 4126|       |
 4127|    120|        char32_t cp{};
 4128|    120|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4129|    120|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4130|    120|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4131|    120|        return cp;
 4132|    586|    }
 4133|       |
 4134|  1.01k|    if (input.size() == 4) {
  ------------------
  |  Branch (4134:9): [True: 1.01k, False: 0]
  ------------------
 4135|  1.01k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4135:13): [True: 0, False: 1.01k]
  ------------------
 4136|      0|            SCN_UNLIKELY_ATTR
 4137|      0|            return invalid_code_point;
 4138|      0|        }
 4139|  1.01k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4139:13): [True: 294, False: 725]
  ------------------
 4140|    294|            SCN_UNLIKELY_ATTR
 4141|    294|            return invalid_code_point;
 4142|    294|        }
 4143|    725|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4143:13): [True: 333, False: 392]
  ------------------
 4144|    725|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4144:13): [True: 120, False: 272]
  ------------------
 4145|    725|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4145:13): [True: 145, False: 127]
  ------------------
 4146|    598|            SCN_UNLIKELY_ATTR
 4147|    598|            return invalid_code_point;
 4148|    598|        }
 4149|       |
 4150|    127|        char32_t cp{};
 4151|    127|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4152|    127|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4153|    127|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4154|    127|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4155|    127|        return cp;
 4156|    725|    }
 4157|       |
 4158|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4159|       |    // gcc 7 thinks we'll get here, even when we won't
 4160|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4161|      0|#endif
 4162|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4163|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4088|  11.2k|    const auto is_trailing_code_unit = [](char ch) {
 4089|  11.2k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4090|  11.2k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3958|   335k|{
 3959|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3960|       |                                          decltype(first), decltype(last)> &&
 3961|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3962|       |        return {first, last};
 3963|       |    }
 3964|   335k|    else {
 3965|   335k|        return {to_address(first), static_cast<size_t>(std::distance(
 3966|   335k|                                       to_address(first), to_address(last)))};
 3967|   335k|    }
 3968|   335k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.01M|{
  316|  1.01M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.01M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  1.34M|{
  294|  1.34M|    return p;
  295|  1.34M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3989|   479k|{
 3990|       |    if constexpr (std::is_constructible_v<
 3991|       |                      typename std::basic_string_view<CharT>::iterator,
 3992|       |                      decltype(it)> &&
 3993|   479k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3994|   479k|        SCN_UNUSED(sv);
  ------------------
  |  | 1036|   479k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3995|   479k|        return it;
 3996|       |    }
 3997|       |    else {
 3998|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3999|       |    }
 4000|   479k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  39.5k|    {
 2868|  39.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  39.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  39.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  39.5k|    {
 2849|  39.5k|        return decay_copy(t.begin());
 2850|  39.5k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2092|   984k|{
 2093|   984k|    return SCN_FWD(t);
  ------------------
  |  | 1057|   984k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|   984k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   167k|    {
 2925|   167k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   167k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   167k|    {
 2907|   167k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   167k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9760|  13.4k|{
 9761|  13.4k|    auto result = make_scan_result<Source, Args...>();
 9762|  13.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  13.4k|                                   make_scan_args(result->values())));
 9764|  13.4k|    return result;
 9765|  13.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEEDav:
 9716|  27.8k|{
 9717|  27.8k|    return scan_result_type<Source, Args...>();
 9718|  27.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1550|  27.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  27.8k|        : m_value(T{}), m_has_value(true)
  427|  27.8k|    {
  428|  27.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2Ev:
 6623|  27.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6466|  83.5k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3458|  83.5k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJ2tmEEC2Ev:
 6397|   127k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9701|  27.8k|{
 9702|  27.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.9k, False: 14.9k]
  |  |  ------------------
  ------------------
 9703|  12.9k|        out = unexpected(in.error());
 9704|  12.9k|    }
 9705|  14.9k|    else {
 9706|  14.9k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  14.9k|    static_cast<    \
  |  | 1056|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  14.9k|    }
 9708|  27.8k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1738|  83.5k|    {
 1739|  83.5k|        return has_value();
 1740|  83.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   167k|    {
  490|   167k|        return m_has_value;
  491|   167k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1744|  38.7k|    {
 1745|  38.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  38.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  38.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  38.7k|        return this->get_unexpected().error();
 1747|  38.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  38.7k|    {
  473|  38.7k|        return m_unexpected;
  474|  38.7k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  3.64M|    {
  365|  3.64M|        return m_unexpected;
  366|  3.64M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  1.91M|        : m_unexpected(std::forward<Err>(e))
  350|  1.91M|    {
  351|  1.91M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  1.91M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.91M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1614|  12.9k|        : base(unexpect, std::move(e.error())),
 1615|  12.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  12.9k|    {
 1617|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  12.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.9k|          m_has_value(false)
  451|  12.9k|    {
  452|  12.9k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  1.93M|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.93M|    {
  360|  1.93M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  1.93M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.93M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  12.9k|    {
 1315|  12.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1555|  12.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  901|  12.9k|    {
  902|  12.9k|        assign_common(std::move(other));
  903|  12.9k|        return *this;
  904|  12.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  948|  12.9k|    {
  949|  12.9k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 12.9k, False: 0]
  ------------------
  950|  12.9k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 12.9k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  12.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  12.9k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   111k|    {
  490|   111k|        return m_has_value;
  491|   111k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  57.7k|    {
  456|  57.7k|        return m_value;
  457|  57.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1044|  12.9k|    {
 1045|  12.9k|        this->destroy_value();
 1046|  12.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  12.9k|    {
  504|  12.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.9k|                                  std::forward<Args>(args)...);
  506|  12.9k|        m_has_value = false;
  507|  12.9k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   232k|{
  396|   232k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   232k|        T(std::forward<Args>(args)...);
  398|   232k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.9k|    {
  473|  12.9k|        return m_unexpected;
  474|  12.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.9k|    {
  481|  12.9k|        return std::move(m_unexpected);
  482|  12.9k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6497|  44.8k|    {
 6498|  44.8k|        m_range = std::forward<Other>(r);
 6499|  44.8k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1793|  44.8k|    {
 1794|  44.8k|        return value();
 1795|  44.8k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|  44.8k|    {
 1768|  44.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  44.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  44.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  44.8k|        return this->get_value();
 1770|  44.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  44.8k|    {
  456|  44.8k|        return m_value;
  457|  44.8k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9522|  40.4k|{
 9523|  40.4k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1057|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9524|  40.4k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9459|  40.4k|{
 9460|  40.4k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|  40.4k|    auto result = vscan_impl(buffer, format, args);
 9463|  40.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  40.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 18.0k, False: 22.4k]
  |  |  ------------------
  ------------------
 9464|  18.0k|        return unexpected(result.error());
 9465|  18.0k|    }
 9466|  22.4k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  22.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|  40.4k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5379|  83.5k|{
 5380|  83.5k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|  83.5k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|  83.5k|                  "\n"
 5384|  83.5k|                  "Unsupported range type given as input to a scanning "
 5385|  83.5k|                  "function.\n"
 5386|  83.5k|                  "A range needs to have a character type (value type) "
 5387|  83.5k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|  83.5k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|  83.5k|                  "to be included.\n"
 5390|  83.5k|                  "See the scnlib documentation for more details.");
 5391|  83.5k|    static_assert(
 5392|  83.5k|        !std::is_same_v<T, custom_char_traits>,
 5393|  83.5k|        "\n"
 5394|  83.5k|        "Unsupported range type given as input to a scanning "
 5395|  83.5k|        "function.\n"
 5396|  83.5k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|  83.5k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|  83.5k|        "not supported.");
 5399|  83.5k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|  83.5k|                  "\n"
 5401|  83.5k|                  "Unsupported range type given as input to a scanning "
 5402|  83.5k|                  "function.\n"
 5403|  83.5k|                  "file_marker_found cannot be used as an "
 5404|  83.5k|                  "source range type to scn::scan.\n"
 5405|  83.5k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|  83.5k|                  "and do not provide an explicit source range, "
 5407|  83.5k|                  "or use scn::scan with a FILE* directly.");
 5408|  83.5k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|  83.5k|                  "\n"
 5410|  83.5k|                  "Unsupported range type given as input to a scanning "
 5411|  83.5k|                  "function.\n"
 5412|  83.5k|                  "In order to be scannable, a range needs to satisfy "
 5413|  83.5k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|  83.5k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|  83.5k|                  "\n"
 5416|  83.5k|                  "Unsupported range type given as input to a scanning "
 5417|  83.5k|                  "function.\n"
 5418|  83.5k|                  "A range needs to model forward_range and have a valid "
 5419|  83.5k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|  83.5k|                  "Examples of scannable ranges are std::string, "
 5421|  83.5k|                  "std::string_view, "
 5422|  83.5k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|  83.5k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|  83.5k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|  83.5k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5318|  83.5k|{
 5319|  83.5k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5320|  83.5k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5321|       |    }
 5322|       |    else {
 5323|       |        return invalid_char_type{};
 5324|       |    }
 5325|  83.5k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|  83.5k|    {
 2999|  83.5k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|  83.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|  83.5k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|  83.5k|    {
 2980|  83.5k|        return t.data();
 2981|  83.5k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3381|  83.5k|    {
 3382|  83.5k|        return detail::to_address(ranges::begin(derived()));
 3383|  83.5k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   329k|{
  316|   329k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   329k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   128k|    {
 2868|   128k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   128k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   128k|    {
 2849|   128k|        return decay_copy(t.begin());
 2850|   128k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3478|  1.11M|    {
 3479|  1.11M|        return m_iterator;
 3480|  1.11M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3337|  83.5k|    {
 3338|  83.5k|        return static_cast<const D&>(*this);
 3339|  83.5k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3073|  83.5k|    {
 3074|  83.5k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  83.5k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3039|  83.5k|    {
 3040|  83.5k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  83.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  83.5k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2092|   713k|{
 2093|   713k|    return SCN_FWD(t);
  ------------------
  |  | 1057|   713k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|   713k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3494|   373k|    {
 3495|   373k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3496|   373k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1738|   583k|    {
 1739|   583k|        return has_value();
 1740|   583k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  1.05M|    {
  490|  1.05M|        return m_has_value;
  491|  1.05M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1744|   232k|    {
 1745|   232k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   232k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   232k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   232k|        return this->get_unexpected().error();
 1747|   232k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   232k|    {
  473|   232k|        return m_unexpected;
  474|   232k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1614|  38.7k|        : base(unexpect, std::move(e.error())),
 1615|  38.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  38.7k|    {
 1617|  38.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  38.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  38.7k|          m_has_value(false)
  451|  38.7k|    {
  452|  38.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  83.5k|    {
 1315|  83.5k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6727|  44.8k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|  44.8k|                      ranges::iterator_t<SourceRange>>) {
 6730|  44.8k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|  44.8k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   370k|    {
 2868|   370k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   370k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   370k|    {
 2849|   370k|        return decay_copy(t.begin());
 2850|   370k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6714|  44.8k|{
 6715|  44.8k|    return ranges::end(source);
 6716|  44.8k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   116k|    {
 2925|   116k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   116k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   116k|    {
 2907|   116k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   116k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3482|   846k|    {
 3483|   846k|        return m_sentinel;
 3484|   846k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1793|   235k|    {
 1794|   235k|        return value();
 1795|   235k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1767|   235k|    {
 1768|   235k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   235k|        return this->get_value();
 1770|   235k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|   235k|    {
  456|   235k|        return m_value;
  457|   235k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|  44.8k|        : base(std::in_place, std::forward<U>(val)),
 1569|  44.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  44.8k|    {
 1571|  44.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  44.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  44.8k|    {
  442|  44.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8797|  26.9k|    {
 8798|  26.9k|        return m_str;
 8799|  26.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  59.1k|{
 6127|  59.1k|    detail::check_scan_arg_types<Args...>();
 6128|  59.1k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  59.1k|}
_ZN3scn2v46detail20check_scan_arg_typesIJ2tmEEEbv:
 5841|   127k|{
 5842|   127k|    constexpr bool default_constructible_constraint =
 5843|   127k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   127k|    static_assert(default_constructible_constraint,
 5845|   127k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   127k|    constexpr bool destructible_constraint =
 5848|   127k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   127k|    static_assert(destructible_constraint,
 5850|   127k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   127k|    constexpr bool non_reference_constraint =
 5853|   127k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   127k|    static_assert(non_reference_constraint,
 5855|   127k|                  "Scan argument types must not be references");
 5856|       |
 5857|   127k|    constexpr bool movable_constraint =
 5858|   127k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   127k|    static_assert(movable_constraint,
 5860|   127k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   127k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   127k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   127k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6102|  59.1k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  59.1k|    {
 6104|  59.1k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6111|  59.1k|    {
 6112|  59.1k|        return {detail::make_arg<
 6113|  59.1k|            kind, Context,
 6114|  59.1k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  59.1k|                                 typename Context::char_type>::value>(args)...};
 6116|  59.1k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE27E2tmvEENS1_9arg_valueERT2_:
 5900|  59.1k|{
 5901|  59.1k|    return make_value<Context>(value);
 5902|  59.1k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEEDaRT0_:
 5826|  60.8k|{
 5827|  60.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|       |                                  needs_context_tag>) {
 5831|       |        return make_value_impl<T>(SCN_FWD(arg));
 5832|       |    }
 5833|  60.8k|    else {
 5834|  60.8k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|  60.8k|            value, context_tag<Context>{}));
 5836|  60.8k|    }
 5837|  60.8k|}
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5731|  60.8k|    {
 5732|  60.8k|        return {};
 5733|  60.8k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5795|  60.8k|{
 5796|  60.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  60.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  60.8k|    constexpr bool scannable_char =
 5800|  60.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  60.8k|    static_assert(scannable_char,
 5802|  60.8k|                  "Cannot scan an argument of an unsupported character "
 5803|  60.8k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  60.8k|    constexpr bool scannable_const =
 5806|  60.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  60.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  60.8k|    constexpr bool scannable_disabled =
 5810|  60.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  60.8k|    static_assert(scannable_disabled,
 5812|  60.8k|                  "Cannot scan an argument that has been disabled by "
 5813|  60.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  60.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  60.8k|    static_assert(
 5817|  60.8k|        scannable,
 5818|  60.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  60.8k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  60.8k|    return arg_value{arg};
 5822|  60.8k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5609|  60.8k|        : custom_value{static_cast<void*>(&val.val),
 5610|  60.8k|                       scan_custom_arg<T, Context>}
 5611|  60.8k|    {
 5612|  60.8k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5627|  60.8k|    {
 5628|  60.8k|        static_assert(!is_type_disabled<T>,
 5629|  60.8k|                      "Scanning of custom types is disabled by "
 5630|  60.8k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5631|  60.8k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1051|  60.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  60.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5632|       |
 5633|  60.8k|        using context_type = Context;
 5634|  60.8k|        using parse_context_type = typename context_type::parse_context_type;
 5635|  60.8k|        using scanner_type = typename context_type::template scanner_type<T>;
 5636|       |
 5637|  60.8k|        auto s = scanner_type{};
 5638|       |
 5639|  60.8k|        auto& arg_ref = *static_cast<T*>(arg);
 5640|  60.8k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5641|  60.8k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5642|       |
 5643|  60.8k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3929|  60.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  60.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 1.72k, False: 59.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.72k|    }
  ------------------
 5644|  59.1k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3939|  59.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  59.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  59.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 24.0k, False: 35.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  24.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  24.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  24.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  24.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  24.0k|    }                                                  \
  |  |  |  | 3938|  59.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5645|  35.0k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  35.0k|    static_cast<    \
  |  | 1056|  35.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5646|       |
 5647|  35.0k|        return {};
 5648|  59.1k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5560|  60.8k|{
 5561|  60.8k|#if SCN_HAS_EXCEPTIONS
 5562|  60.8k|    auto fmt_it = pctx.begin();
 5563|  60.8k|    try {
 5564|  60.8k|        fmt_it = s.parse(pctx);
 5565|  60.8k|    }
 5566|  60.8k|    catch (const detail::scan_format_string_error_base& ex) {
 5567|       |        // scan_error takes a const char*.
 5568|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5569|       |        // stores a reference-counted string,
 5570|       |        // that will go out of scope here.
 5571|       |        // We need to provide a const char* that will stay in scope.
 5572|       |        // If scan_format_string_error was thrown with a string literal,
 5573|       |        // use that, otherwise refer to a thread_local std::string
 5574|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5574:25): [True: 0, False: 0]
  ------------------
 5575|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5576|      0|        }
 5577|      0|        thread_local std::string err_msg{};
 5578|      0|        err_msg = ex.what();
 5579|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5580|      0|                                     err_msg.c_str());
 5581|      0|    }
 5582|       |#else
 5583|       |    auto fmt_it = s.parse(pctx_ref);
 5584|       |#endif
 5585|  60.8k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  60.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.72k, False: 59.1k]
  |  |  ------------------
  ------------------
 5586|  1.72k|        return e;
 5587|  1.72k|    }
 5588|  59.1k|    pctx.advance_to(fmt_it);
 5589|  59.1k|    return {};
 5590|  60.8k|}
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6311|   897k|    {
 6312|   897k|        return m_format.data();
 6313|   897k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE3endEv:
 6316|   182k|    {
 6317|   182k|        return m_format.data() + m_format.size();
 6318|   182k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6357|  5.16k|    {
 6358|  5.16k|        m_error = unexpected(detail::handle_error(
 6359|  5.16k|            scan_error{scan_error::invalid_format_string, msg}));
 6360|  5.16k|        return m_error.error();
 6361|  5.16k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3739|   902k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3740|   902k|    {
 3741|   902k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1036|   902k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3742|   902k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  15.4k|        : m_unexpected(std::forward<Err>(e))
  350|  15.4k|    {
  351|  15.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  15.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  15.4k|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  5.48M|    {
  572|  5.48M|        return m_has_value;
  573|  5.48M|    }
_ZN3scn2v46detail11is_cp_spaceEDi:
 4306|   580k|{
 4307|       |    // Pattern_White_Space property
 4308|   580k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4308:13): [True: 499k, False: 81.1k]
  |  Branch (4308:27): [True: 7.47k, False: 492k]
  ------------------
 4309|   580k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4309:12): [True: 269k, False: 303k]
  ------------------
 4310|   580k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4310:12): [True: 7.36k, False: 296k]
  ------------------
 4311|   580k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4311:12): [True: 660, False: 295k]
  ------------------
 4312|   580k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4312:12): [True: 1.00k, False: 294k]
  ------------------
 4313|   580k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4313:12): [True: 288, False: 294k]
  ------------------
 4314|   580k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 0, False: 294k]
  ------------------
 4315|   580k|}
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3974|   339k|{
 3975|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3976|       |                                          const CharT*, const CharT*>) {
 3977|       |        return {first, last};
 3978|       |    }
 3979|   339k|    else {
 3980|   339k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3981|   339k|    }
 3982|   339k|}
_ZN3scn2v424basic_scan_parse_contextIcE9get_errorEv:
 6364|   182k|    {
 6365|   182k|        return m_error;
 6366|   182k|    }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6322|   354k|    {
 6323|   354k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6324|   354k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1738|  3.90M|    {
 1739|  3.90M|        return has_value();
 1740|  3.90M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1744|   692k|    {
 1745|   692k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   692k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   692k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   692k|        return this->get_unexpected().error();
 1747|   692k|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   692k|    {
  555|   692k|        return m_unexpected;
  556|   692k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1614|   676k|        : base(unexpect, std::move(e.error())),
 1615|   676k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   676k|    {
 1617|   676k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   676k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   676k|          m_has_value(false)
  550|   676k|    {
  551|   676k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   676k|    {
 1315|   676k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1738|   453k|    {
 1739|   453k|        return has_value();
 1740|   453k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   907k|    {
  490|   907k|        return m_has_value;
  491|   907k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1744|   148k|    {
 1745|   148k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   148k|        return this->get_unexpected().error();
 1747|   148k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   148k|    {
  473|   148k|        return m_unexpected;
  474|   148k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|   199k|    {
 1804|   199k|        return std::move(value());
 1805|   199k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|   305k|    {
 1768|   305k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   305k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   305k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   305k|        return this->get_value();
 1770|   305k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   305k|    {
  456|   305k|        return m_value;
  457|   305k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9000|   260k|    {
 9001|   260k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|   260k|    static_cast<    \
  |  | 1056|   260k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9002|   260k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1550|  2.00M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  2.00M|        : m_deferred_init(), m_has_value(true)
  529|  2.00M|    {
  530|  2.00M|    }
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5739|  60.8k|    {
 5740|  60.8k|        return {val};
 5741|  60.8k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE6valuesEv:
 6406|   122k|    {
 6407|   122k|        return m_values;
 6408|   122k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  59.1k|        : basic_scan_args(store.desc, store.args.data())
 6153|  59.1k|    {
 6154|  59.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKNS3_9arg_valueE:
 6209|   177k|        : m_desc(desc), m_values(data)
 6210|   177k|    {
 6211|   177k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3463|   616k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   616k|    static_cast<    \
  |  | 1056|   616k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   616k|    static_cast<    \
  |  | 1056|   616k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   616k|    {
 3465|   616k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8458|   177k|{
 8459|   177k|    return s;
 8460|   177k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8435|   177k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  26.9k|        : m_str(r.str)
 8793|  26.9k|    {
 8794|  26.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1738|  27.8k|    {
 1739|  27.8k|        return has_value();
 1740|  27.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1813|  57.7k|    {
 1814|  57.7k|        return &value();
 1815|  57.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1767|  57.7k|    {
 1768|  57.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  57.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  57.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  57.7k|        return this->get_value();
 1770|  57.7k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6486|  44.8k|    {
 6487|  44.8k|        return ranges::begin(m_range);
 6488|  44.8k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9829|  13.4k|{
 9830|  13.4k|    auto result = make_scan_result<Source, Args...>();
 9831|  13.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  13.4k|                                   make_scan_args(result->values())));
 9833|  13.4k|    return result;
 9834|  13.4k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9540|  40.4k|{
 9541|  40.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1057|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9542|  40.4k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9475|  40.4k|{
 9476|  40.4k|#if !SCN_DISABLE_LOCALE
 9477|  40.4k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|  40.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|  40.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|  40.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|  40.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  40.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 18.0k, False: 22.4k]
  |  |  ------------------
  ------------------
 9484|  18.0k|        return unexpected(result.error());
 9485|  18.0k|    }
 9486|  22.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  22.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|  40.4k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9870|    860|{
 9871|    860|    auto result = make_scan_result<Source, T>();
 9872|    860|    fill_scan_result(
 9873|    860|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|    860|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|    860|                            detail::make_arg<scan_context>(result->value())));
 9875|    860|    return result;
 9876|    860|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9553|  2.58k|{
 9554|  2.58k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1057|  2.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9555|  2.58k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  2.58k|{
 9500|  2.58k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  2.58k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  2.58k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  2.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.58k, False: 0]
  |  |  ------------------
  ------------------
 9504|  2.58k|        return unexpected(result.error());
 9505|  2.58k|    }
 9506|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  2.58k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5876|  1.72k|{
 5877|  1.72k|    check_scan_arg_types<T>();
 5878|       |
 5879|  1.72k|    basic_scan_arg<Context> arg;
 5880|  1.72k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  1.72k|    arg.m_value = make_value<Context>(value);
 5882|  1.72k|    return arg;
 5883|  1.72k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5971|   182k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5599|   383k|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  5.16k|    {
 6429|  5.16k|        return std::get<0>(m_values);
 6430|  5.16k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9760|  13.4k|{
 9761|  13.4k|    auto result = make_scan_result<Source, Args...>();
 9762|  13.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  13.4k|                                   make_scan_args(result->values())));
 9764|  13.4k|    return result;
 9765|  13.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEEDav:
 9716|  27.8k|{
 9717|  27.8k|    return scan_result_type<Source, Args...>();
 9718|  27.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1550|  27.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  27.8k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  27.8k|    {
  613|  27.8k|        construct();
  614|  27.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  27.8k|    {
  694|  27.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  27.8k|        m_has_value = true;
  696|  27.8k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  27.8k|{
  396|  27.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  27.8k|        T(std::forward<Args>(args)...);
  398|  27.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6623|  27.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEEC2Ev:
 6397|   127k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   113k|    {
  718|   113k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   113k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   113k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9701|  27.8k|{
 9702|  27.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.9k, False: 14.9k]
  |  |  ------------------
  ------------------
 9703|  12.9k|        out = unexpected(in.error());
 9704|  12.9k|    }
 9705|  14.9k|    else {
 9706|  14.9k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  14.9k|    static_cast<    \
  |  | 1056|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  14.9k|    }
 9708|  27.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1614|  12.9k|        : base(unexpect, std::move(e.error())),
 1615|  12.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  12.9k|    {
 1617|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  12.9k|        : m_has_value(false)
  637|  12.9k|    {
  638|  12.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  12.9k|    {
  701|  12.9k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.9k|                                  std::forward<Args>(args)...);
  703|  12.9k|        m_has_value = false;
  704|  12.9k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|   154k|{
  396|   154k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   154k|        T(std::forward<Args>(args)...);
  398|   154k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  64.5k|    {
  730|  64.5k|        return reinterpret_cast<unexpected<E>*>(
  731|  64.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  64.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  64.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  12.9k|    {
 1315|  12.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1555|  12.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  901|  12.9k|    {
  902|  12.9k|        assign_common(std::move(other));
  903|  12.9k|        return *this;
  904|  12.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  948|  12.9k|    {
  949|  12.9k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 12.9k, False: 0]
  ------------------
  950|  12.9k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 12.9k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  12.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  12.9k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   152k|    {
  687|   152k|        return m_has_value;
  688|   152k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  57.7k|    {
  653|  57.7k|        return *value_ptr();
  654|  57.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1044|  12.9k|    {
 1045|  12.9k|        this->destroy_value();
 1046|  12.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  27.8k|    {
  708|  27.8k|        scn::detail::destroy_at(value_ptr());
  709|  27.8k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  27.8k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  27.8k|    else {
  408|  27.8k|        p->~T();
  409|  27.8k|    }
  410|  27.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEED2Ev:
 6630|  27.8k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  12.9k|    {
  701|  12.9k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.9k|                                  std::forward<Args>(args)...);
  703|  12.9k|        m_has_value = false;
  704|  12.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.9k|    {
  678|  12.9k|        return std::move(*unexpected_ptr());
  679|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  25.8k|    {
  712|  25.8k|        scn::detail::destroy_at(unexpected_ptr());
  713|  25.8k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   309k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   309k|    else {
  408|   309k|        p->~T();
  409|   309k|    }
  410|   309k|}
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8797|  26.9k|    {
 8798|  26.9k|        return m_str;
 8799|  26.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  59.1k|{
 6127|  59.1k|    detail::check_scan_arg_types<Args...>();
 6128|  59.1k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  59.1k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_10tm_with_tzEEEEbv:
 5841|   127k|{
 5842|   127k|    constexpr bool default_constructible_constraint =
 5843|   127k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   127k|    static_assert(default_constructible_constraint,
 5845|   127k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   127k|    constexpr bool destructible_constraint =
 5848|   127k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   127k|    static_assert(destructible_constraint,
 5850|   127k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   127k|    constexpr bool non_reference_constraint =
 5853|   127k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   127k|    static_assert(non_reference_constraint,
 5855|   127k|                  "Scan argument types must not be references");
 5856|       |
 5857|   127k|    constexpr bool movable_constraint =
 5858|   127k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   127k|    static_assert(movable_constraint,
 5860|   127k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   127k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   127k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   127k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6102|  59.1k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  59.1k|    {
 6104|  59.1k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6111|  59.1k|    {
 6112|  59.1k|        return {detail::make_arg<
 6113|  59.1k|            kind, Context,
 6114|  59.1k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  59.1k|                                 typename Context::char_type>::value>(args)...};
 6116|  59.1k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE27ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5900|  59.1k|{
 5901|  59.1k|    return make_value<Context>(value);
 5902|  59.1k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEEDaRT0_:
 5826|  60.8k|{
 5827|  60.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|       |                                  needs_context_tag>) {
 5831|       |        return make_value_impl<T>(SCN_FWD(arg));
 5832|       |    }
 5833|  60.8k|    else {
 5834|  60.8k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|  60.8k|            value, context_tag<Context>{}));
 5836|  60.8k|    }
 5837|  60.8k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5731|  60.8k|    {
 5732|  60.8k|        return {};
 5733|  60.8k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5795|  60.8k|{
 5796|  60.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  60.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  60.8k|    constexpr bool scannable_char =
 5800|  60.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  60.8k|    static_assert(scannable_char,
 5802|  60.8k|                  "Cannot scan an argument of an unsupported character "
 5803|  60.8k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  60.8k|    constexpr bool scannable_const =
 5806|  60.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  60.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  60.8k|    constexpr bool scannable_disabled =
 5810|  60.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  60.8k|    static_assert(scannable_disabled,
 5812|  60.8k|                  "Cannot scan an argument that has been disabled by "
 5813|  60.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  60.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  60.8k|    static_assert(
 5817|  60.8k|        scannable,
 5818|  60.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  60.8k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  60.8k|    return arg_value{arg};
 5822|  60.8k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5609|  60.8k|        : custom_value{static_cast<void*>(&val.val),
 5610|  60.8k|                       scan_custom_arg<T, Context>}
 5611|  60.8k|    {
 5612|  60.8k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5627|  60.8k|    {
 5628|  60.8k|        static_assert(!is_type_disabled<T>,
 5629|  60.8k|                      "Scanning of custom types is disabled by "
 5630|  60.8k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5631|  60.8k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1051|  60.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  60.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5632|       |
 5633|  60.8k|        using context_type = Context;
 5634|  60.8k|        using parse_context_type = typename context_type::parse_context_type;
 5635|  60.8k|        using scanner_type = typename context_type::template scanner_type<T>;
 5636|       |
 5637|  60.8k|        auto s = scanner_type{};
 5638|       |
 5639|  60.8k|        auto& arg_ref = *static_cast<T*>(arg);
 5640|  60.8k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5641|  60.8k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5642|       |
 5643|  60.8k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3929|  60.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  60.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 1.72k, False: 59.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.72k|    }
  ------------------
 5644|  59.1k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3939|  59.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  59.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  59.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 24.0k, False: 35.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  24.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  24.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  24.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  24.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  24.0k|    }                                                  \
  |  |  |  | 3938|  59.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5645|  35.0k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  35.0k|    static_cast<    \
  |  | 1056|  35.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5646|       |
 5647|  35.0k|        return {};
 5648|  59.1k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5560|  60.8k|{
 5561|  60.8k|#if SCN_HAS_EXCEPTIONS
 5562|  60.8k|    auto fmt_it = pctx.begin();
 5563|  60.8k|    try {
 5564|  60.8k|        fmt_it = s.parse(pctx);
 5565|  60.8k|    }
 5566|  60.8k|    catch (const detail::scan_format_string_error_base& ex) {
 5567|       |        // scan_error takes a const char*.
 5568|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5569|       |        // stores a reference-counted string,
 5570|       |        // that will go out of scope here.
 5571|       |        // We need to provide a const char* that will stay in scope.
 5572|       |        // If scan_format_string_error was thrown with a string literal,
 5573|       |        // use that, otherwise refer to a thread_local std::string
 5574|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5574:25): [True: 0, False: 0]
  ------------------
 5575|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5576|      0|        }
 5577|      0|        thread_local std::string err_msg{};
 5578|      0|        err_msg = ex.what();
 5579|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5580|      0|                                     err_msg.c_str());
 5581|      0|    }
 5582|       |#else
 5583|       |    auto fmt_it = s.parse(pctx_ref);
 5584|       |#endif
 5585|  60.8k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  60.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.72k, False: 59.1k]
  |  |  ------------------
  ------------------
 5586|  1.72k|        return e;
 5587|  1.72k|    }
 5588|  59.1k|    pctx.advance_to(fmt_it);
 5589|  59.1k|    return {};
 5590|  60.8k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5739|  60.8k|    {
 5740|  60.8k|        return {val};
 5741|  60.8k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE6valuesEv:
 6406|   122k|    {
 6407|   122k|        return m_values;
 6408|   122k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  59.1k|        : basic_scan_args(store.desc, store.args.data())
 6153|  59.1k|    {
 6154|  59.1k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  26.9k|        : m_str(r.str)
 8793|  26.9k|    {
 8794|  26.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1738|  27.8k|    {
 1739|  27.8k|        return has_value();
 1740|  27.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1813|  57.7k|    {
 1814|  57.7k|        return &value();
 1815|  57.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1767|  57.7k|    {
 1768|  57.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  57.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  57.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  57.7k|        return this->get_value();
 1770|  57.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  40.7k|    {
  643|  40.7k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 14.9k, False: 25.8k]
  ------------------
  644|  14.9k|            destroy_value();
  645|  14.9k|        }
  646|  25.8k|        else {
  647|  25.8k|            destroy_unexpected();
  648|  25.8k|        }
  649|  40.7k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9829|  13.4k|{
 9830|  13.4k|    auto result = make_scan_result<Source, Args...>();
 9831|  13.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  13.4k|                                   make_scan_args(result->values())));
 9833|  13.4k|    return result;
 9834|  13.4k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9870|    860|{
 9871|    860|    auto result = make_scan_result<Source, T>();
 9872|    860|    fill_scan_result(
 9873|    860|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|    860|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|    860|                            detail::make_arg<scan_context>(result->value())));
 9875|    860|    return result;
 9876|    860|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5876|  1.72k|{
 5877|  1.72k|    check_scan_arg_types<T>();
 5878|       |
 5879|  1.72k|    basic_scan_arg<Context> arg;
 5880|  1.72k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  1.72k|    arg.m_value = make_value<Context>(value);
 5882|  1.72k|    return arg;
 5883|  1.72k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  5.16k|    {
 6429|  5.16k|        return std::get<0>(m_values);
 6430|  5.16k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9760|  13.4k|{
 9761|  13.4k|    auto result = make_scan_result<Source, Args...>();
 9762|  13.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  13.4k|                                   make_scan_args(result->values())));
 9764|  13.4k|    return result;
 9765|  13.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEEDav:
 9716|  27.8k|{
 9717|  27.8k|    return scan_result_type<Source, Args...>();
 9718|  27.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1550|  27.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  27.8k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  27.8k|    {
  613|  27.8k|        construct();
  614|  27.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  27.8k|    {
  694|  27.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  27.8k|        m_has_value = true;
  696|  27.8k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  27.8k|{
  396|  27.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  27.8k|        T(std::forward<Args>(args)...);
  398|  27.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6623|  27.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEEC2Ev:
 6397|   127k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   113k|    {
  718|   113k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   113k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   113k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9701|  27.8k|{
 9702|  27.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.9k, False: 14.9k]
  |  |  ------------------
  ------------------
 9703|  12.9k|        out = unexpected(in.error());
 9704|  12.9k|    }
 9705|  14.9k|    else {
 9706|  14.9k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  14.9k|    static_cast<    \
  |  | 1056|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  14.9k|    }
 9708|  27.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1614|  12.9k|        : base(unexpect, std::move(e.error())),
 1615|  12.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  12.9k|    {
 1617|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  12.9k|        : m_has_value(false)
  637|  12.9k|    {
  638|  12.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  12.9k|    {
  701|  12.9k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.9k|                                  std::forward<Args>(args)...);
  703|  12.9k|        m_has_value = false;
  704|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  64.5k|    {
  730|  64.5k|        return reinterpret_cast<unexpected<E>*>(
  731|  64.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  64.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  64.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  12.9k|    {
 1315|  12.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1555|  12.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  901|  12.9k|    {
  902|  12.9k|        assign_common(std::move(other));
  903|  12.9k|        return *this;
  904|  12.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  948|  12.9k|    {
  949|  12.9k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 12.9k, False: 0]
  ------------------
  950|  12.9k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 12.9k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  12.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  12.9k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   152k|    {
  687|   152k|        return m_has_value;
  688|   152k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  57.7k|    {
  653|  57.7k|        return *value_ptr();
  654|  57.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1044|  12.9k|    {
 1045|  12.9k|        this->destroy_value();
 1046|  12.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  27.8k|    {
  708|  27.8k|        scn::detail::destroy_at(value_ptr());
  709|  27.8k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  27.8k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  27.8k|    else {
  408|  27.8k|        p->~T();
  409|  27.8k|    }
  410|  27.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEED2Ev:
 6630|  27.8k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  12.9k|    {
  701|  12.9k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.9k|                                  std::forward<Args>(args)...);
  703|  12.9k|        m_has_value = false;
  704|  12.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.9k|    {
  678|  12.9k|        return std::move(*unexpected_ptr());
  679|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  25.8k|    {
  712|  25.8k|        scn::detail::destroy_at(unexpected_ptr());
  713|  25.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8797|  26.9k|    {
 8798|  26.9k|        return m_str;
 8799|  26.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  59.1k|{
 6127|  59.1k|    detail::check_scan_arg_types<Args...>();
 6128|  59.1k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  59.1k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_19datetime_componentsEEEEbv:
 5841|   127k|{
 5842|   127k|    constexpr bool default_constructible_constraint =
 5843|   127k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   127k|    static_assert(default_constructible_constraint,
 5845|   127k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   127k|    constexpr bool destructible_constraint =
 5848|   127k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   127k|    static_assert(destructible_constraint,
 5850|   127k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   127k|    constexpr bool non_reference_constraint =
 5853|   127k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   127k|    static_assert(non_reference_constraint,
 5855|   127k|                  "Scan argument types must not be references");
 5856|       |
 5857|   127k|    constexpr bool movable_constraint =
 5858|   127k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   127k|    static_assert(movable_constraint,
 5860|   127k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   127k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   127k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   127k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6102|  59.1k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  59.1k|    {
 6104|  59.1k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6111|  59.1k|    {
 6112|  59.1k|        return {detail::make_arg<
 6113|  59.1k|            kind, Context,
 6114|  59.1k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  59.1k|                                 typename Context::char_type>::value>(args)...};
 6116|  59.1k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE27ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5900|  59.1k|{
 5901|  59.1k|    return make_value<Context>(value);
 5902|  59.1k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEEDaRT0_:
 5826|  60.8k|{
 5827|  60.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|       |                                  needs_context_tag>) {
 5831|       |        return make_value_impl<T>(SCN_FWD(arg));
 5832|       |    }
 5833|  60.8k|    else {
 5834|  60.8k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|  60.8k|            value, context_tag<Context>{}));
 5836|  60.8k|    }
 5837|  60.8k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5731|  60.8k|    {
 5732|  60.8k|        return {};
 5733|  60.8k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5795|  60.8k|{
 5796|  60.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  60.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  60.8k|    constexpr bool scannable_char =
 5800|  60.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  60.8k|    static_assert(scannable_char,
 5802|  60.8k|                  "Cannot scan an argument of an unsupported character "
 5803|  60.8k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  60.8k|    constexpr bool scannable_const =
 5806|  60.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  60.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  60.8k|    constexpr bool scannable_disabled =
 5810|  60.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  60.8k|    static_assert(scannable_disabled,
 5812|  60.8k|                  "Cannot scan an argument that has been disabled by "
 5813|  60.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  60.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  60.8k|    static_assert(
 5817|  60.8k|        scannable,
 5818|  60.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  60.8k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  60.8k|    return arg_value{arg};
 5822|  60.8k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5609|  60.8k|        : custom_value{static_cast<void*>(&val.val),
 5610|  60.8k|                       scan_custom_arg<T, Context>}
 5611|  60.8k|    {
 5612|  60.8k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5627|  60.8k|    {
 5628|  60.8k|        static_assert(!is_type_disabled<T>,
 5629|  60.8k|                      "Scanning of custom types is disabled by "
 5630|  60.8k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5631|  60.8k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1051|  60.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  60.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5632|       |
 5633|  60.8k|        using context_type = Context;
 5634|  60.8k|        using parse_context_type = typename context_type::parse_context_type;
 5635|  60.8k|        using scanner_type = typename context_type::template scanner_type<T>;
 5636|       |
 5637|  60.8k|        auto s = scanner_type{};
 5638|       |
 5639|  60.8k|        auto& arg_ref = *static_cast<T*>(arg);
 5640|  60.8k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5641|  60.8k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5642|       |
 5643|  60.8k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3929|  60.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  60.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 1.72k, False: 59.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.72k|    }
  ------------------
 5644|  59.1k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3939|  59.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  59.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  59.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 24.0k, False: 35.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  24.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  24.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  24.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  24.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  24.0k|    }                                                  \
  |  |  |  | 3938|  59.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5645|  35.0k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  35.0k|    static_cast<    \
  |  | 1056|  35.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5646|       |
 5647|  35.0k|        return {};
 5648|  59.1k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5560|  60.8k|{
 5561|  60.8k|#if SCN_HAS_EXCEPTIONS
 5562|  60.8k|    auto fmt_it = pctx.begin();
 5563|  60.8k|    try {
 5564|  60.8k|        fmt_it = s.parse(pctx);
 5565|  60.8k|    }
 5566|  60.8k|    catch (const detail::scan_format_string_error_base& ex) {
 5567|       |        // scan_error takes a const char*.
 5568|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5569|       |        // stores a reference-counted string,
 5570|       |        // that will go out of scope here.
 5571|       |        // We need to provide a const char* that will stay in scope.
 5572|       |        // If scan_format_string_error was thrown with a string literal,
 5573|       |        // use that, otherwise refer to a thread_local std::string
 5574|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5574:25): [True: 0, False: 0]
  ------------------
 5575|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5576|      0|        }
 5577|      0|        thread_local std::string err_msg{};
 5578|      0|        err_msg = ex.what();
 5579|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5580|      0|                                     err_msg.c_str());
 5581|      0|    }
 5582|       |#else
 5583|       |    auto fmt_it = s.parse(pctx_ref);
 5584|       |#endif
 5585|  60.8k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  60.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.72k, False: 59.1k]
  |  |  ------------------
  ------------------
 5586|  1.72k|        return e;
 5587|  1.72k|    }
 5588|  59.1k|    pctx.advance_to(fmt_it);
 5589|  59.1k|    return {};
 5590|  60.8k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5739|  60.8k|    {
 5740|  60.8k|        return {val};
 5741|  60.8k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE6valuesEv:
 6406|   122k|    {
 6407|   122k|        return m_values;
 6408|   122k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  59.1k|        : basic_scan_args(store.desc, store.args.data())
 6153|  59.1k|    {
 6154|  59.1k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  26.9k|        : m_str(r.str)
 8793|  26.9k|    {
 8794|  26.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1738|  27.8k|    {
 1739|  27.8k|        return has_value();
 1740|  27.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1813|  57.7k|    {
 1814|  57.7k|        return &value();
 1815|  57.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1767|  57.7k|    {
 1768|  57.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  57.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  57.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  57.7k|        return this->get_value();
 1770|  57.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  40.7k|    {
  643|  40.7k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 14.9k, False: 25.8k]
  ------------------
  644|  14.9k|            destroy_value();
  645|  14.9k|        }
  646|  25.8k|        else {
  647|  25.8k|            destroy_unexpected();
  648|  25.8k|        }
  649|  40.7k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9829|  13.4k|{
 9830|  13.4k|    auto result = make_scan_result<Source, Args...>();
 9831|  13.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  13.4k|                                   make_scan_args(result->values())));
 9833|  13.4k|    return result;
 9834|  13.4k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9870|    860|{
 9871|    860|    auto result = make_scan_result<Source, T>();
 9872|    860|    fill_scan_result(
 9873|    860|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|    860|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|    860|                            detail::make_arg<scan_context>(result->value())));
 9875|    860|    return result;
 9876|    860|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5876|  1.72k|{
 5877|  1.72k|    check_scan_arg_types<T>();
 5878|       |
 5879|  1.72k|    basic_scan_arg<Context> arg;
 5880|  1.72k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  1.72k|    arg.m_value = make_value<Context>(value);
 5882|  1.72k|    return arg;
 5883|  1.72k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  5.16k|    {
 6429|  5.16k|        return std::get<0>(m_values);
 6430|  5.16k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  38.7k|    {
 2868|  38.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  38.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  38.7k|    {
 2849|  38.7k|        return decay_copy(t.begin());
 2850|  38.7k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2092|  2.77M|{
 2093|  2.77M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  2.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  2.77M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   197k|    {
 2925|   197k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   197k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   197k|    {
 2907|   197k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   197k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9760|  16.0k|{
 9761|  16.0k|    auto result = make_scan_result<Source, Args...>();
 9762|  16.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  16.0k|                                   make_scan_args(result->values())));
 9764|  16.0k|    return result;
 9765|  16.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEEDav:
 9716|  32.9k|{
 9717|  32.9k|    return scan_result_type<Source, Args...>();
 9718|  32.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1550|  32.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  32.9k|        : m_value(T{}), m_has_value(true)
  427|  32.9k|    {
  428|  32.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2Ev:
 6623|  32.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6466|  98.9k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3458|  98.9k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  32.9k|{
 9702|  32.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  32.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.9k, False: 20.0k]
  |  |  ------------------
  ------------------
 9703|  12.9k|        out = unexpected(in.error());
 9704|  12.9k|    }
 9705|  20.0k|    else {
 9706|  20.0k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  20.0k|    static_cast<    \
  |  | 1056|  20.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  20.0k|    }
 9708|  32.9k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1738|  98.9k|    {
 1739|  98.9k|        return has_value();
 1740|  98.9k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   197k|    {
  490|   197k|        return m_has_value;
  491|   197k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1744|  38.7k|    {
 1745|  38.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  38.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  38.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  38.7k|        return this->get_unexpected().error();
 1747|  38.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  38.7k|    {
  473|  38.7k|        return m_unexpected;
  474|  38.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  12.9k|        : base(unexpect, std::move(e.error())),
 1615|  12.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  12.9k|    {
 1617|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  12.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.9k|          m_has_value(false)
  451|  12.9k|    {
  452|  12.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  12.9k|    {
 1315|  12.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1555|  12.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  901|  12.9k|    {
  902|  12.9k|        assign_common(std::move(other));
  903|  12.9k|        return *this;
  904|  12.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  12.9k|    {
  949|  12.9k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 12.9k, False: 0]
  ------------------
  950|  12.9k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 12.9k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  12.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  12.9k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   131k|    {
  490|   131k|        return m_has_value;
  491|   131k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  73.1k|    {
  456|  73.1k|        return m_value;
  457|  73.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  12.9k|    {
 1045|  12.9k|        this->destroy_value();
 1046|  12.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  12.9k|    {
  504|  12.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.9k|                                  std::forward<Args>(args)...);
  506|  12.9k|        m_has_value = false;
  507|  12.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.9k|    {
  473|  12.9k|        return m_unexpected;
  474|  12.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.9k|    {
  481|  12.9k|        return std::move(m_unexpected);
  482|  12.9k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6497|  60.2k|    {
 6498|  60.2k|        m_range = std::forward<Other>(r);
 6499|  60.2k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1793|  60.2k|    {
 1794|  60.2k|        return value();
 1795|  60.2k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1767|  60.2k|    {
 1768|  60.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  60.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  60.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  60.2k|        return this->get_value();
 1770|  60.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  60.2k|    {
  456|  60.2k|        return m_value;
  457|  60.2k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9522|  48.1k|{
 9523|  48.1k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1057|  48.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9524|  48.1k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9459|  48.1k|{
 9460|  48.1k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|  48.1k|    auto result = vscan_impl(buffer, format, args);
 9463|  48.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  48.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 18.0k, False: 30.1k]
  |  |  ------------------
  ------------------
 9464|  18.0k|        return unexpected(result.error());
 9465|  18.0k|    }
 9466|  30.1k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|  48.1k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5379|  98.9k|{
 5380|  98.9k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|  98.9k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|  98.9k|                  "\n"
 5384|  98.9k|                  "Unsupported range type given as input to a scanning "
 5385|  98.9k|                  "function.\n"
 5386|  98.9k|                  "A range needs to have a character type (value type) "
 5387|  98.9k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|  98.9k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|  98.9k|                  "to be included.\n"
 5390|  98.9k|                  "See the scnlib documentation for more details.");
 5391|  98.9k|    static_assert(
 5392|  98.9k|        !std::is_same_v<T, custom_char_traits>,
 5393|  98.9k|        "\n"
 5394|  98.9k|        "Unsupported range type given as input to a scanning "
 5395|  98.9k|        "function.\n"
 5396|  98.9k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|  98.9k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|  98.9k|        "not supported.");
 5399|  98.9k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|  98.9k|                  "\n"
 5401|  98.9k|                  "Unsupported range type given as input to a scanning "
 5402|  98.9k|                  "function.\n"
 5403|  98.9k|                  "file_marker_found cannot be used as an "
 5404|  98.9k|                  "source range type to scn::scan.\n"
 5405|  98.9k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|  98.9k|                  "and do not provide an explicit source range, "
 5407|  98.9k|                  "or use scn::scan with a FILE* directly.");
 5408|  98.9k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|  98.9k|                  "\n"
 5410|  98.9k|                  "Unsupported range type given as input to a scanning "
 5411|  98.9k|                  "function.\n"
 5412|  98.9k|                  "In order to be scannable, a range needs to satisfy "
 5413|  98.9k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|  98.9k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|  98.9k|                  "\n"
 5416|  98.9k|                  "Unsupported range type given as input to a scanning "
 5417|  98.9k|                  "function.\n"
 5418|  98.9k|                  "A range needs to model forward_range and have a valid "
 5419|  98.9k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|  98.9k|                  "Examples of scannable ranges are std::string, "
 5421|  98.9k|                  "std::string_view, "
 5422|  98.9k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|  98.9k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|  98.9k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|  98.9k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5349|  98.9k|{
 5350|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5351|       |        return file_marker_found{};
 5352|       |    }
 5353|       |    else if constexpr (!ranges::forward_range<Range>) {
 5354|       |        if constexpr (ranges::range<Range>) {
 5355|       |            return insufficient_range{};
 5356|       |        }
 5357|       |        else {
 5358|       |            return invalid_input_range{};
 5359|       |        }
 5360|       |    }
 5361|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5362|       |        return invalid_char_type{};
 5363|       |    }
 5364|  98.9k|    else {
 5365|  98.9k|        return make_forward_scan_buffer(r);
 5366|  98.9k|    }
 5367|  98.9k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5183|  98.9k|{
 5184|  98.9k|    return basic_scan_forward_buffer_impl(range);
 5185|  98.9k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|  98.9k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1057|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|  98.9k|          m_cursor(ranges::begin(*m_range))
 4765|  98.9k|    {
 4766|  98.9k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4735|  98.9k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|  98.9k|    {
 4737|  98.9k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4426|  98.9k|        : m_current_view(sv), m_is_contiguous(false)
 4427|  98.9k|    {
 4428|  98.9k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4339|   179k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   159k|    {
 2868|   159k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   159k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   159k|    {
 2849|   159k|        return decay_copy(t.begin());
 2850|   159k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3478|   219k|    {
 3479|   219k|        return m_iterator;
 3480|   219k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4769|   764k|    {
 4770|   764k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 15.1k, False: 749k]
  ------------------
 4771|  15.1k|            return false;
 4772|  15.1k|        }
 4773|   749k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|   749k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1051|   749k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   749k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|   749k|        }
 4776|   749k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 653k, False: 96.1k]
  ------------------
 4777|   653k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|   653k|                                          this->m_current_view.begin(),
 4779|   653k|                                          this->m_current_view.end());
 4780|   653k|        }
 4781|   749k|        m_latest = *m_cursor;
 4782|   749k|        ++m_cursor;
 4783|   749k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|   749k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|   749k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1051|   749k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   749k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|   749k|        }
 4787|   749k|        return true;
 4788|   764k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  2.26M|    {
 2925|  2.26M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  2.26M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  2.26M|    {
 2907|  2.26M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  2.26M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3482|  2.32M|    {
 3483|  2.32M|        return m_sentinel;
 3484|  2.32M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4344|  98.9k|    {
 4345|  98.9k|        SCN_UNUSED(position);
  ------------------
  |  | 1036|  98.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4346|  98.9k|        return true;
 4347|  98.9k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1614|  38.7k|        : base(unexpect, std::move(e.error())),
 1615|  38.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  38.7k|    {
 1617|  38.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  38.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  38.7k|          m_has_value(false)
  451|  38.7k|    {
  452|  38.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  98.9k|    {
 1315|  98.9k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6727|  60.2k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|  60.2k|                      ranges::iterator_t<SourceRange>>) {
 6730|  60.2k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|  60.2k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  60.2k|    {
 2868|  60.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  60.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  60.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  60.2k|    {
 2849|  60.2k|        return decay_copy(t.begin());
 2850|  60.2k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6714|  60.2k|{
 6715|  60.2k|    return ranges::end(source);
 6716|  60.2k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  60.2k|    {
 2925|  60.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  60.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  60.2k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  60.2k|    {
 2907|  60.2k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  60.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  60.2k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1568|  60.2k|        : base(std::in_place, std::forward<U>(val)),
 1569|  60.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  60.2k|    {
 1571|  60.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  60.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  60.2k|    {
  442|  60.2k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|  32.1k|    {
 8798|  32.1k|        return m_str;
 8799|  32.1k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3463|   159k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   159k|    {
 3465|   159k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  32.1k|        : m_str(r.str)
 8793|  32.1k|    {
 8794|  32.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1738|  32.9k|    {
 1739|  32.9k|        return has_value();
 1740|  32.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1813|  73.1k|    {
 1814|  73.1k|        return &value();
 1815|  73.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  73.1k|    {
 1768|  73.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  73.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  73.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  73.1k|        return this->get_value();
 1770|  73.1k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6486|  60.2k|    {
 6487|  60.2k|        return ranges::begin(m_range);
 6488|  60.2k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9829|  16.0k|{
 9830|  16.0k|    auto result = make_scan_result<Source, Args...>();
 9831|  16.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  16.0k|                                   make_scan_args(result->values())));
 9833|  16.0k|    return result;
 9834|  16.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9540|  48.1k|{
 9541|  48.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1057|  48.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9542|  48.1k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9475|  48.1k|{
 9476|  48.1k|#if !SCN_DISABLE_LOCALE
 9477|  48.1k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|  48.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|  48.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|  48.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|  48.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  48.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 18.0k, False: 30.1k]
  |  |  ------------------
  ------------------
 9484|  18.0k|        return unexpected(result.error());
 9485|  18.0k|    }
 9486|  30.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|  48.1k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9870|    860|{
 9871|    860|    auto result = make_scan_result<Source, T>();
 9872|    860|    fill_scan_result(
 9873|    860|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|    860|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|    860|                            detail::make_arg<scan_context>(result->value())));
 9875|    860|    return result;
 9876|    860|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9553|  2.58k|{
 9554|  2.58k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1057|  2.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9555|  2.58k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  2.58k|{
 9500|  2.58k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  2.58k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  2.58k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  2.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.58k, False: 0]
  |  |  ------------------
  ------------------
 9504|  2.58k|        return unexpected(result.error());
 9505|  2.58k|    }
 9506|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  2.58k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9760|  16.0k|{
 9761|  16.0k|    auto result = make_scan_result<Source, Args...>();
 9762|  16.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  16.0k|                                   make_scan_args(result->values())));
 9764|  16.0k|    return result;
 9765|  16.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9716|  32.9k|{
 9717|  32.9k|    return scan_result_type<Source, Args...>();
 9718|  32.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1550|  32.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  32.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  32.9k|    {
  613|  32.9k|        construct();
  614|  32.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  32.9k|    {
  694|  32.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  32.9k|        m_has_value = true;
  696|  32.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  32.9k|{
  396|  32.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  32.9k|        T(std::forward<Args>(args)...);
  398|  32.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6623|  32.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   139k|    {
  718|   139k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   139k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   139k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  32.9k|{
 9702|  32.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  32.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.9k, False: 20.0k]
  |  |  ------------------
  ------------------
 9703|  12.9k|        out = unexpected(in.error());
 9704|  12.9k|    }
 9705|  20.0k|    else {
 9706|  20.0k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  20.0k|    static_cast<    \
  |  | 1056|  20.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  20.0k|    }
 9708|  32.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  12.9k|        : base(unexpect, std::move(e.error())),
 1615|  12.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  12.9k|    {
 1617|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  12.9k|        : m_has_value(false)
  637|  12.9k|    {
  638|  12.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  12.9k|    {
  701|  12.9k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.9k|                                  std::forward<Args>(args)...);
  703|  12.9k|        m_has_value = false;
  704|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  64.5k|    {
  730|  64.5k|        return reinterpret_cast<unexpected<E>*>(
  731|  64.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  64.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  64.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  12.9k|    {
 1315|  12.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1555|  12.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  901|  12.9k|    {
  902|  12.9k|        assign_common(std::move(other));
  903|  12.9k|        return *this;
  904|  12.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  12.9k|    {
  949|  12.9k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 12.9k, False: 0]
  ------------------
  950|  12.9k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 12.9k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  12.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  12.9k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   177k|    {
  687|   177k|        return m_has_value;
  688|   177k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  73.1k|    {
  653|  73.1k|        return *value_ptr();
  654|  73.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  12.9k|    {
 1045|  12.9k|        this->destroy_value();
 1046|  12.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  32.9k|    {
  708|  32.9k|        scn::detail::destroy_at(value_ptr());
  709|  32.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  32.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  32.9k|    else {
  408|  32.9k|        p->~T();
  409|  32.9k|    }
  410|  32.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6630|  32.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  12.9k|    {
  701|  12.9k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.9k|                                  std::forward<Args>(args)...);
  703|  12.9k|        m_has_value = false;
  704|  12.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.9k|    {
  678|  12.9k|        return std::move(*unexpected_ptr());
  679|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  25.8k|    {
  712|  25.8k|        scn::detail::destroy_at(unexpected_ptr());
  713|  25.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|  32.1k|    {
 8798|  32.1k|        return m_str;
 8799|  32.1k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  32.1k|        : m_str(r.str)
 8793|  32.1k|    {
 8794|  32.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1738|  32.9k|    {
 1739|  32.9k|        return has_value();
 1740|  32.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1813|  73.1k|    {
 1814|  73.1k|        return &value();
 1815|  73.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  73.1k|    {
 1768|  73.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  73.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  73.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  73.1k|        return this->get_value();
 1770|  73.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  45.8k|    {
  643|  45.8k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 20.0k, False: 25.8k]
  ------------------
  644|  20.0k|            destroy_value();
  645|  20.0k|        }
  646|  25.8k|        else {
  647|  25.8k|            destroy_unexpected();
  648|  25.8k|        }
  649|  45.8k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9829|  16.0k|{
 9830|  16.0k|    auto result = make_scan_result<Source, Args...>();
 9831|  16.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  16.0k|                                   make_scan_args(result->values())));
 9833|  16.0k|    return result;
 9834|  16.0k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9870|    860|{
 9871|    860|    auto result = make_scan_result<Source, T>();
 9872|    860|    fill_scan_result(
 9873|    860|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|    860|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|    860|                            detail::make_arg<scan_context>(result->value())));
 9875|    860|    return result;
 9876|    860|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9760|  16.0k|{
 9761|  16.0k|    auto result = make_scan_result<Source, Args...>();
 9762|  16.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  16.0k|                                   make_scan_args(result->values())));
 9764|  16.0k|    return result;
 9765|  16.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9716|  32.9k|{
 9717|  32.9k|    return scan_result_type<Source, Args...>();
 9718|  32.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1550|  32.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  32.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  32.9k|    {
  613|  32.9k|        construct();
  614|  32.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  32.9k|    {
  694|  32.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  32.9k|        m_has_value = true;
  696|  32.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  32.9k|{
  396|  32.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  32.9k|        T(std::forward<Args>(args)...);
  398|  32.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6623|  32.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   139k|    {
  718|   139k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   139k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   139k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  32.9k|{
 9702|  32.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  32.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.9k, False: 20.0k]
  |  |  ------------------
  ------------------
 9703|  12.9k|        out = unexpected(in.error());
 9704|  12.9k|    }
 9705|  20.0k|    else {
 9706|  20.0k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  20.0k|    static_cast<    \
  |  | 1056|  20.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  20.0k|    }
 9708|  32.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  12.9k|        : base(unexpect, std::move(e.error())),
 1615|  12.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  12.9k|    {
 1617|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  12.9k|        : m_has_value(false)
  637|  12.9k|    {
  638|  12.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  12.9k|    {
  701|  12.9k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.9k|                                  std::forward<Args>(args)...);
  703|  12.9k|        m_has_value = false;
  704|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  64.5k|    {
  730|  64.5k|        return reinterpret_cast<unexpected<E>*>(
  731|  64.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  64.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  64.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  12.9k|    {
 1315|  12.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1555|  12.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  901|  12.9k|    {
  902|  12.9k|        assign_common(std::move(other));
  903|  12.9k|        return *this;
  904|  12.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  12.9k|    {
  949|  12.9k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 12.9k, False: 0]
  ------------------
  950|  12.9k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 12.9k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  12.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  12.9k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   177k|    {
  687|   177k|        return m_has_value;
  688|   177k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  73.1k|    {
  653|  73.1k|        return *value_ptr();
  654|  73.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  12.9k|    {
 1045|  12.9k|        this->destroy_value();
 1046|  12.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  32.9k|    {
  708|  32.9k|        scn::detail::destroy_at(value_ptr());
  709|  32.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  32.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  32.9k|    else {
  408|  32.9k|        p->~T();
  409|  32.9k|    }
  410|  32.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6630|  32.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  12.9k|    {
  701|  12.9k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.9k|                                  std::forward<Args>(args)...);
  703|  12.9k|        m_has_value = false;
  704|  12.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.9k|    {
  678|  12.9k|        return std::move(*unexpected_ptr());
  679|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  25.8k|    {
  712|  25.8k|        scn::detail::destroy_at(unexpected_ptr());
  713|  25.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|  32.1k|    {
 8798|  32.1k|        return m_str;
 8799|  32.1k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  32.1k|        : m_str(r.str)
 8793|  32.1k|    {
 8794|  32.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1738|  32.9k|    {
 1739|  32.9k|        return has_value();
 1740|  32.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1813|  73.1k|    {
 1814|  73.1k|        return &value();
 1815|  73.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  73.1k|    {
 1768|  73.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  73.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  73.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  73.1k|        return this->get_value();
 1770|  73.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  45.8k|    {
  643|  45.8k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 20.0k, False: 25.8k]
  ------------------
  644|  20.0k|            destroy_value();
  645|  20.0k|        }
  646|  25.8k|        else {
  647|  25.8k|            destroy_unexpected();
  648|  25.8k|        }
  649|  45.8k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9829|  16.0k|{
 9830|  16.0k|    auto result = make_scan_result<Source, Args...>();
 9831|  16.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  16.0k|                                   make_scan_args(result->values())));
 9833|  16.0k|    return result;
 9834|  16.0k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9870|    860|{
 9871|    860|    auto result = make_scan_result<Source, T>();
 9872|    860|    fill_scan_result(
 9873|    860|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|    860|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|    860|                            detail::make_arg<scan_context>(result->value())));
 9875|    860|    return result;
 9876|    860|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  79.1k|    {
 2868|  79.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  79.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  79.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  79.1k|    {
 2849|  79.1k|        return decay_copy(t.begin());
 2850|  79.1k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2092|  1.02M|{
 2093|  1.02M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  1.02M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   203k|    {
 2925|   203k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   203k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   203k|    {
 2907|   203k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   203k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEEDav:
 9716|  33.5k|{
 9717|  33.5k|    return scan_result_type<Source, Args...>();
 9718|  33.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1550|  33.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  33.5k|        : m_value(T{}), m_has_value(true)
  427|  33.5k|    {
  428|  33.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2Ev:
 6623|  33.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6466|   100k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3458|   100k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9701|  33.5k|{
 9702|  33.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 25.8k, False: 7.77k]
  |  |  ------------------
  ------------------
 9703|  25.8k|        out = unexpected(in.error());
 9704|  25.8k|    }
 9705|  7.77k|    else {
 9706|  7.77k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  7.77k|    static_cast<    \
  |  | 1056|  7.77k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  7.77k|    }
 9708|  33.5k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1738|   100k|    {
 1739|   100k|        return has_value();
 1740|   100k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   201k|    {
  490|   201k|        return m_has_value;
  491|   201k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1744|  77.4k|    {
 1745|  77.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  77.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  77.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  77.4k|        return this->get_unexpected().error();
 1747|  77.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  77.4k|    {
  473|  77.4k|        return m_unexpected;
  474|  77.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1614|  25.8k|        : base(unexpect, std::move(e.error())),
 1615|  25.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  25.8k|    {
 1617|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  25.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  25.8k|          m_has_value(false)
  451|  25.8k|    {
  452|  25.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  25.8k|    {
 1315|  25.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1555|  25.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  901|  25.8k|    {
  902|  25.8k|        assign_common(std::move(other));
  903|  25.8k|        return *this;
  904|  25.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  948|  25.8k|    {
  949|  25.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 25.8k, False: 0]
  ------------------
  950|  25.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 25.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  25.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  25.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   134k|    {
  490|   134k|        return m_has_value;
  491|   134k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  49.1k|    {
  456|  49.1k|        return m_value;
  457|  49.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1044|  25.8k|    {
 1045|  25.8k|        this->destroy_value();
 1046|  25.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  25.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  25.8k|    {
  504|  25.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  25.8k|                                  std::forward<Args>(args)...);
  506|  25.8k|        m_has_value = false;
  507|  25.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  25.8k|    {
  473|  25.8k|        return m_unexpected;
  474|  25.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  25.8k|    {
  481|  25.8k|        return std::move(m_unexpected);
  482|  25.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6497|  23.3k|    {
 6498|  23.3k|        m_range = std::forward<Other>(r);
 6499|  23.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1793|  23.3k|    {
 1794|  23.3k|        return value();
 1795|  23.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|  23.3k|    {
 1768|  23.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  23.3k|        return this->get_value();
 1770|  23.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  23.3k|    {
  456|  23.3k|        return m_value;
  457|  23.3k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9459|  47.7k|{
 9460|  47.7k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|  47.7k|    auto result = vscan_impl(buffer, format, args);
 9463|  47.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  47.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 36.1k, False: 11.6k]
  |  |  ------------------
  ------------------
 9464|  36.1k|        return unexpected(result.error());
 9465|  36.1k|    }
 9466|  11.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|  47.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5379|   100k|{
 5380|   100k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   100k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   100k|                  "\n"
 5384|   100k|                  "Unsupported range type given as input to a scanning "
 5385|   100k|                  "function.\n"
 5386|   100k|                  "A range needs to have a character type (value type) "
 5387|   100k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   100k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   100k|                  "to be included.\n"
 5390|   100k|                  "See the scnlib documentation for more details.");
 5391|   100k|    static_assert(
 5392|   100k|        !std::is_same_v<T, custom_char_traits>,
 5393|   100k|        "\n"
 5394|   100k|        "Unsupported range type given as input to a scanning "
 5395|   100k|        "function.\n"
 5396|   100k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   100k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   100k|        "not supported.");
 5399|   100k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   100k|                  "\n"
 5401|   100k|                  "Unsupported range type given as input to a scanning "
 5402|   100k|                  "function.\n"
 5403|   100k|                  "file_marker_found cannot be used as an "
 5404|   100k|                  "source range type to scn::scan.\n"
 5405|   100k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   100k|                  "and do not provide an explicit source range, "
 5407|   100k|                  "or use scn::scan with a FILE* directly.");
 5408|   100k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   100k|                  "\n"
 5410|   100k|                  "Unsupported range type given as input to a scanning "
 5411|   100k|                  "function.\n"
 5412|   100k|                  "In order to be scannable, a range needs to satisfy "
 5413|   100k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   100k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   100k|                  "\n"
 5416|   100k|                  "Unsupported range type given as input to a scanning "
 5417|   100k|                  "function.\n"
 5418|   100k|                  "A range needs to model forward_range and have a valid "
 5419|   100k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   100k|                  "Examples of scannable ranges are std::string, "
 5421|   100k|                  "std::string_view, "
 5422|   100k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   100k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   100k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   100k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5318|   100k|{
 5319|   100k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5320|   100k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5321|       |    }
 5322|       |    else {
 5323|       |        return invalid_char_type{};
 5324|       |    }
 5325|   100k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   100k|    {
 2999|   100k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   100k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   100k|    {
 2980|   100k|        return t.data();
 2981|   100k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3381|   100k|    {
 3382|   100k|        return detail::to_address(ranges::begin(derived()));
 3383|   100k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   296k|{
  316|   296k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   296k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   296k|{
  294|   296k|    return p;
  295|   296k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   124k|    {
 2868|   124k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   124k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   124k|    {
 2849|   124k|        return decay_copy(t.begin());
 2850|   124k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3478|  1.77M|    {
 3479|  1.77M|        return m_iterator;
 3480|  1.77M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3337|   100k|    {
 3338|   100k|        return static_cast<const D&>(*this);
 3339|   100k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3073|   100k|    {
 3074|   100k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   100k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3039|   100k|    {
 3040|   100k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   100k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3494|   320k|    {
 3495|   320k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3496|   320k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1614|  77.4k|        : base(unexpect, std::move(e.error())),
 1615|  77.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  77.4k|    {
 1617|  77.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  77.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  77.4k|          m_has_value(false)
  451|  77.4k|    {
  452|  77.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   100k|    {
 1315|   100k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6727|  23.3k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|  23.3k|                      ranges::iterator_t<SourceRange>>) {
 6730|  23.3k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|  23.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   314k|    {
 2868|   314k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   314k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   314k|    {
 2849|   314k|        return decay_copy(t.begin());
 2850|   314k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6714|  23.3k|{
 6715|  23.3k|    return ranges::end(source);
 6716|  23.3k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   116k|    {
 2925|   116k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   116k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   116k|    {
 2907|   116k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   116k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3482|  1.40M|    {
 3483|  1.40M|        return m_sentinel;
 3484|  1.40M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|  23.3k|        : base(std::in_place, std::forward<U>(val)),
 1569|  23.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  23.3k|    {
 1571|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  23.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  23.3k|    {
  442|  23.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8797|  31.8k|    {
 8798|  31.8k|        return m_str;
 8799|  31.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  63.7k|{
 6127|  63.7k|    detail::check_scan_arg_types<Args...>();
 6128|  63.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  63.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6102|  63.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  63.7k|    {
 6104|  63.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6111|  63.7k|    {
 6112|  63.7k|        return {detail::make_arg<
 6113|  63.7k|            kind, Context,
 6114|  63.7k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  63.7k|                                 typename Context::char_type>::value>(args)...};
 6116|  63.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE27E2tmvEENS1_9arg_valueERT2_:
 5900|  63.7k|{
 5901|  63.7k|    return make_value<Context>(value);
 5902|  63.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEEDaRT0_:
 5826|  67.1k|{
 5827|  67.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|       |                                  needs_context_tag>) {
 5831|       |        return make_value_impl<T>(SCN_FWD(arg));
 5832|       |    }
 5833|  67.1k|    else {
 5834|  67.1k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|  67.1k|            value, context_tag<Context>{}));
 5836|  67.1k|    }
 5837|  67.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5731|  67.1k|    {
 5732|  67.1k|        return {};
 5733|  67.1k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5795|  67.1k|{
 5796|  67.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  67.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  67.1k|    constexpr bool scannable_char =
 5800|  67.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  67.1k|    static_assert(scannable_char,
 5802|  67.1k|                  "Cannot scan an argument of an unsupported character "
 5803|  67.1k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  67.1k|    constexpr bool scannable_const =
 5806|  67.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  67.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  67.1k|    constexpr bool scannable_disabled =
 5810|  67.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  67.1k|    static_assert(scannable_disabled,
 5812|  67.1k|                  "Cannot scan an argument that has been disabled by "
 5813|  67.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  67.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  67.1k|    static_assert(
 5817|  67.1k|        scannable,
 5818|  67.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  67.1k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  67.1k|    return arg_value{arg};
 5822|  67.1k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5609|  67.1k|        : custom_value{static_cast<void*>(&val.val),
 5610|  67.1k|                       scan_custom_arg<T, Context>}
 5611|  67.1k|    {
 5612|  67.1k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5627|  67.1k|    {
 5628|  67.1k|        static_assert(!is_type_disabled<T>,
 5629|  67.1k|                      "Scanning of custom types is disabled by "
 5630|  67.1k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5631|  67.1k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1051|  67.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  67.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5632|       |
 5633|  67.1k|        using context_type = Context;
 5634|  67.1k|        using parse_context_type = typename context_type::parse_context_type;
 5635|  67.1k|        using scanner_type = typename context_type::template scanner_type<T>;
 5636|       |
 5637|  67.1k|        auto s = scanner_type{};
 5638|       |
 5639|  67.1k|        auto& arg_ref = *static_cast<T*>(arg);
 5640|  67.1k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5641|  67.1k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5642|       |
 5643|  67.1k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3929|  67.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 3.44k, False: 63.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  3.44k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  3.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  3.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  3.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.44k|    }
  ------------------
 5644|  63.7k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3939|  63.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  63.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  63.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 48.1k, False: 15.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  48.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  48.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  48.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  48.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  48.1k|    }                                                  \
  |  |  |  | 3938|  63.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5645|  15.5k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  15.5k|    static_cast<    \
  |  | 1056|  15.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5646|       |
 5647|  15.5k|        return {};
 5648|  63.7k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5560|  67.1k|{
 5561|  67.1k|#if SCN_HAS_EXCEPTIONS
 5562|  67.1k|    auto fmt_it = pctx.begin();
 5563|  67.1k|    try {
 5564|  67.1k|        fmt_it = s.parse(pctx);
 5565|  67.1k|    }
 5566|  67.1k|    catch (const detail::scan_format_string_error_base& ex) {
 5567|       |        // scan_error takes a const char*.
 5568|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5569|       |        // stores a reference-counted string,
 5570|       |        // that will go out of scope here.
 5571|       |        // We need to provide a const char* that will stay in scope.
 5572|       |        // If scan_format_string_error was thrown with a string literal,
 5573|       |        // use that, otherwise refer to a thread_local std::string
 5574|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5574:25): [True: 0, False: 0]
  ------------------
 5575|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5576|      0|        }
 5577|      0|        thread_local std::string err_msg{};
 5578|      0|        err_msg = ex.what();
 5579|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5580|      0|                                     err_msg.c_str());
 5581|      0|    }
 5582|       |#else
 5583|       |    auto fmt_it = s.parse(pctx_ref);
 5584|       |#endif
 5585|  67.1k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.44k, False: 63.7k]
  |  |  ------------------
  ------------------
 5586|  3.44k|        return e;
 5587|  3.44k|    }
 5588|  63.7k|    pctx.advance_to(fmt_it);
 5589|  63.7k|    return {};
 5590|  67.1k|}
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6311|   976k|    {
 6312|   976k|        return m_format.data();
 6313|   976k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE3endEv:
 6316|   201k|    {
 6317|   201k|        return m_format.data() + m_format.size();
 6318|   201k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6357|  10.3k|    {
 6358|  10.3k|        m_error = unexpected(detail::handle_error(
 6359|  10.3k|            scan_error{scan_error::invalid_format_string, msg}));
 6360|  10.3k|        return m_error.error();
 6361|  10.3k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4066|   466k|{
 4067|       |    if constexpr (sizeof(U) == 1) {
 4068|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4069|       |    }
 4070|       |    else if constexpr (sizeof(U) == 2) {
 4071|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4072|       |    }
 4073|   466k|    else {
 4074|       |        // utf-32
 4075|   466k|        static_assert(sizeof(U) == 4);
 4076|   466k|        SCN_UNUSED(ch);
  ------------------
  |  | 1036|   466k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4077|   466k|        return 1;
 4078|   466k|    }
 4079|   466k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4272|   362k|{
 4273|       |    if constexpr (sizeof(CharT) == 1) {
 4274|       |        return decode_utf8_code_point_exhaustive(input);
 4275|       |    }
 4276|       |    else if constexpr (sizeof(CharT) == 2) {
 4277|       |        return decode_utf16_code_point_exhaustive(input);
 4278|       |    }
 4279|   362k|    else {
 4280|   362k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1051|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4281|   362k|        auto cp = static_cast<char32_t>(input.front());
 4282|   362k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  986|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 45.1k, False: 317k]
  |  |  ------------------
  ------------------
 4283|  45.1k|            return invalid_code_point;
 4284|  45.1k|        }
 4285|   317k|        return cp;
 4286|   362k|    }
 4287|   362k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3974|   382k|{
 3975|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3976|       |                                          const CharT*, const CharT*>) {
 3977|       |        return {first, last};
 3978|       |    }
 3979|   382k|    else {
 3980|   382k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3981|   382k|    }
 3982|   382k|}
_ZN3scn2v424basic_scan_parse_contextIwE9get_errorEv:
 6364|   201k|    {
 6365|   201k|        return m_error;
 6366|   201k|    }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6322|   382k|    {
 6323|   382k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6324|   382k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1738|   482k|    {
 1739|   482k|        return has_value();
 1740|   482k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   965k|    {
  490|   965k|        return m_has_value;
  491|   965k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1744|   295k|    {
 1745|   295k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   295k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   295k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   295k|        return this->get_unexpected().error();
 1747|   295k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   295k|    {
  473|   295k|        return m_unexpected;
  474|   295k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|   141k|    {
 1804|   141k|        return std::move(value());
 1805|   141k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|   187k|    {
 1768|   187k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   187k|        return this->get_value();
 1770|   187k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   187k|    {
  456|   187k|        return m_value;
  457|   187k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9000|   164k|    {
 9001|   164k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|   164k|    static_cast<    \
  |  | 1056|   164k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9002|   164k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5739|  67.1k|    {
 5740|  67.1k|        return {val};
 5741|  67.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  63.7k|        : basic_scan_args(store.desc, store.args.data())
 6153|  63.7k|    {
 6154|  63.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKNS3_9arg_valueE:
 6209|   191k|        : m_desc(desc), m_values(data)
 6210|   191k|    {
 6211|   191k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3463|   882k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   882k|    static_cast<    \
  |  | 1056|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   882k|    static_cast<    \
  |  | 1056|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   882k|    {
 3465|   882k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8463|   191k|{
 8464|   191k|    return s;
 8465|   191k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8435|   191k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  31.8k|        : m_str(r.str)
 8793|  31.8k|    {
 8794|  31.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1738|  33.5k|    {
 1739|  33.5k|        return has_value();
 1740|  33.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1813|  49.1k|    {
 1814|  49.1k|        return &value();
 1815|  49.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1767|  49.1k|    {
 1768|  49.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  49.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  49.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  49.1k|        return this->get_value();
 1770|  49.1k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6486|  23.3k|    {
 6487|  23.3k|        return ranges::begin(m_range);
 6488|  23.3k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9475|  47.7k|{
 9476|  47.7k|#if !SCN_DISABLE_LOCALE
 9477|  47.7k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|  47.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|  47.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|  47.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|  47.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  47.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 36.1k, False: 11.6k]
  |  |  ------------------
  ------------------
 9484|  36.1k|        return unexpected(result.error());
 9485|  36.1k|    }
 9486|  11.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|  47.7k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  5.16k|{
 9500|  5.16k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  5.16k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  5.16k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  5.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 5.16k, False: 0]
  |  |  ------------------
  ------------------
 9504|  5.16k|        return unexpected(result.error());
 9505|  5.16k|    }
 9506|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  5.16k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5876|  3.44k|{
 5877|  3.44k|    check_scan_arg_types<T>();
 5878|       |
 5879|  3.44k|    basic_scan_arg<Context> arg;
 5880|  3.44k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  3.44k|    arg.m_value = make_value<Context>(value);
 5882|  3.44k|    return arg;
 5883|  3.44k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5971|   201k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEEDav:
 9716|  33.5k|{
 9717|  33.5k|    return scan_result_type<Source, Args...>();
 9718|  33.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1550|  33.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  33.5k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  33.5k|    {
  613|  33.5k|        construct();
  614|  33.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  33.5k|    {
  694|  33.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  33.5k|        m_has_value = true;
  696|  33.5k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  33.5k|{
  396|  33.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  33.5k|        T(std::forward<Args>(args)...);
  398|  33.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6623|  33.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   116k|    {
  718|   116k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   116k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9701|  33.5k|{
 9702|  33.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 25.8k, False: 7.77k]
  |  |  ------------------
  ------------------
 9703|  25.8k|        out = unexpected(in.error());
 9704|  25.8k|    }
 9705|  7.77k|    else {
 9706|  7.77k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  7.77k|    static_cast<    \
  |  | 1056|  7.77k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  7.77k|    }
 9708|  33.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1614|  25.8k|        : base(unexpect, std::move(e.error())),
 1615|  25.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  25.8k|    {
 1617|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  25.8k|        : m_has_value(false)
  637|  25.8k|    {
  638|  25.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  25.8k|    {
  701|  25.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.8k|                                  std::forward<Args>(args)...);
  703|  25.8k|        m_has_value = false;
  704|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   129k|    {
  730|   129k|        return reinterpret_cast<unexpected<E>*>(
  731|   129k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|   129k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   129k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  25.8k|    {
 1315|  25.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1555|  25.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  901|  25.8k|    {
  902|  25.8k|        assign_common(std::move(other));
  903|  25.8k|        return *this;
  904|  25.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  948|  25.8k|    {
  949|  25.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 25.8k, False: 0]
  ------------------
  950|  25.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 25.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  25.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  25.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   193k|    {
  687|   193k|        return m_has_value;
  688|   193k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  49.1k|    {
  653|  49.1k|        return *value_ptr();
  654|  49.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1044|  25.8k|    {
 1045|  25.8k|        this->destroy_value();
 1046|  25.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  33.5k|    {
  708|  33.5k|        scn::detail::destroy_at(value_ptr());
  709|  33.5k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  33.5k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  33.5k|    else {
  408|  33.5k|        p->~T();
  409|  33.5k|    }
  410|  33.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEED2Ev:
 6630|  33.5k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  25.8k|    {
  701|  25.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.8k|                                  std::forward<Args>(args)...);
  703|  25.8k|        m_has_value = false;
  704|  25.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  25.8k|    {
  678|  25.8k|        return std::move(*unexpected_ptr());
  679|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  51.6k|    {
  712|  51.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  51.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8797|  31.8k|    {
 8798|  31.8k|        return m_str;
 8799|  31.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  63.7k|{
 6127|  63.7k|    detail::check_scan_arg_types<Args...>();
 6128|  63.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  63.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6102|  63.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  63.7k|    {
 6104|  63.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6111|  63.7k|    {
 6112|  63.7k|        return {detail::make_arg<
 6113|  63.7k|            kind, Context,
 6114|  63.7k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  63.7k|                                 typename Context::char_type>::value>(args)...};
 6116|  63.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE27ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5900|  63.7k|{
 5901|  63.7k|    return make_value<Context>(value);
 5902|  63.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEEDaRT0_:
 5826|  67.1k|{
 5827|  67.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|       |                                  needs_context_tag>) {
 5831|       |        return make_value_impl<T>(SCN_FWD(arg));
 5832|       |    }
 5833|  67.1k|    else {
 5834|  67.1k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|  67.1k|            value, context_tag<Context>{}));
 5836|  67.1k|    }
 5837|  67.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5731|  67.1k|    {
 5732|  67.1k|        return {};
 5733|  67.1k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5795|  67.1k|{
 5796|  67.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  67.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  67.1k|    constexpr bool scannable_char =
 5800|  67.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  67.1k|    static_assert(scannable_char,
 5802|  67.1k|                  "Cannot scan an argument of an unsupported character "
 5803|  67.1k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  67.1k|    constexpr bool scannable_const =
 5806|  67.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  67.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  67.1k|    constexpr bool scannable_disabled =
 5810|  67.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  67.1k|    static_assert(scannable_disabled,
 5812|  67.1k|                  "Cannot scan an argument that has been disabled by "
 5813|  67.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  67.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  67.1k|    static_assert(
 5817|  67.1k|        scannable,
 5818|  67.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  67.1k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  67.1k|    return arg_value{arg};
 5822|  67.1k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5609|  67.1k|        : custom_value{static_cast<void*>(&val.val),
 5610|  67.1k|                       scan_custom_arg<T, Context>}
 5611|  67.1k|    {
 5612|  67.1k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5627|  67.1k|    {
 5628|  67.1k|        static_assert(!is_type_disabled<T>,
 5629|  67.1k|                      "Scanning of custom types is disabled by "
 5630|  67.1k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5631|  67.1k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1051|  67.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  67.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5632|       |
 5633|  67.1k|        using context_type = Context;
 5634|  67.1k|        using parse_context_type = typename context_type::parse_context_type;
 5635|  67.1k|        using scanner_type = typename context_type::template scanner_type<T>;
 5636|       |
 5637|  67.1k|        auto s = scanner_type{};
 5638|       |
 5639|  67.1k|        auto& arg_ref = *static_cast<T*>(arg);
 5640|  67.1k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5641|  67.1k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5642|       |
 5643|  67.1k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3929|  67.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 3.44k, False: 63.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  3.44k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  3.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  3.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  3.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.44k|    }
  ------------------
 5644|  63.7k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3939|  63.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  63.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  63.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 48.1k, False: 15.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  48.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  48.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  48.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  48.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  48.1k|    }                                                  \
  |  |  |  | 3938|  63.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5645|  15.5k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  15.5k|    static_cast<    \
  |  | 1056|  15.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5646|       |
 5647|  15.5k|        return {};
 5648|  63.7k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5560|  67.1k|{
 5561|  67.1k|#if SCN_HAS_EXCEPTIONS
 5562|  67.1k|    auto fmt_it = pctx.begin();
 5563|  67.1k|    try {
 5564|  67.1k|        fmt_it = s.parse(pctx);
 5565|  67.1k|    }
 5566|  67.1k|    catch (const detail::scan_format_string_error_base& ex) {
 5567|       |        // scan_error takes a const char*.
 5568|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5569|       |        // stores a reference-counted string,
 5570|       |        // that will go out of scope here.
 5571|       |        // We need to provide a const char* that will stay in scope.
 5572|       |        // If scan_format_string_error was thrown with a string literal,
 5573|       |        // use that, otherwise refer to a thread_local std::string
 5574|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5574:25): [True: 0, False: 0]
  ------------------
 5575|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5576|      0|        }
 5577|      0|        thread_local std::string err_msg{};
 5578|      0|        err_msg = ex.what();
 5579|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5580|      0|                                     err_msg.c_str());
 5581|      0|    }
 5582|       |#else
 5583|       |    auto fmt_it = s.parse(pctx_ref);
 5584|       |#endif
 5585|  67.1k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.44k, False: 63.7k]
  |  |  ------------------
  ------------------
 5586|  3.44k|        return e;
 5587|  3.44k|    }
 5588|  63.7k|    pctx.advance_to(fmt_it);
 5589|  63.7k|    return {};
 5590|  67.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5739|  67.1k|    {
 5740|  67.1k|        return {val};
 5741|  67.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  63.7k|        : basic_scan_args(store.desc, store.args.data())
 6153|  63.7k|    {
 6154|  63.7k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  31.8k|        : m_str(r.str)
 8793|  31.8k|    {
 8794|  31.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1738|  33.5k|    {
 1739|  33.5k|        return has_value();
 1740|  33.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1813|  49.1k|    {
 1814|  49.1k|        return &value();
 1815|  49.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1767|  49.1k|    {
 1768|  49.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  49.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  49.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  49.1k|        return this->get_value();
 1770|  49.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  59.3k|    {
  643|  59.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.77k, False: 51.6k]
  ------------------
  644|  7.77k|            destroy_value();
  645|  7.77k|        }
  646|  51.6k|        else {
  647|  51.6k|            destroy_unexpected();
  648|  51.6k|        }
  649|  59.3k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5876|  3.44k|{
 5877|  3.44k|    check_scan_arg_types<T>();
 5878|       |
 5879|  3.44k|    basic_scan_arg<Context> arg;
 5880|  3.44k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  3.44k|    arg.m_value = make_value<Context>(value);
 5882|  3.44k|    return arg;
 5883|  3.44k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEEDav:
 9716|  33.5k|{
 9717|  33.5k|    return scan_result_type<Source, Args...>();
 9718|  33.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1550|  33.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  33.5k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  33.5k|    {
  613|  33.5k|        construct();
  614|  33.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  33.5k|    {
  694|  33.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  33.5k|        m_has_value = true;
  696|  33.5k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  33.5k|{
  396|  33.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  33.5k|        T(std::forward<Args>(args)...);
  398|  33.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6623|  33.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   116k|    {
  718|   116k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   116k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9701|  33.5k|{
 9702|  33.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 25.8k, False: 7.77k]
  |  |  ------------------
  ------------------
 9703|  25.8k|        out = unexpected(in.error());
 9704|  25.8k|    }
 9705|  7.77k|    else {
 9706|  7.77k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  7.77k|    static_cast<    \
  |  | 1056|  7.77k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  7.77k|    }
 9708|  33.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1614|  25.8k|        : base(unexpect, std::move(e.error())),
 1615|  25.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  25.8k|    {
 1617|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  25.8k|        : m_has_value(false)
  637|  25.8k|    {
  638|  25.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  25.8k|    {
  701|  25.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.8k|                                  std::forward<Args>(args)...);
  703|  25.8k|        m_has_value = false;
  704|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   129k|    {
  730|   129k|        return reinterpret_cast<unexpected<E>*>(
  731|   129k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|   129k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   129k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  25.8k|    {
 1315|  25.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1555|  25.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  901|  25.8k|    {
  902|  25.8k|        assign_common(std::move(other));
  903|  25.8k|        return *this;
  904|  25.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  948|  25.8k|    {
  949|  25.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 25.8k, False: 0]
  ------------------
  950|  25.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 25.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  25.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  25.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   193k|    {
  687|   193k|        return m_has_value;
  688|   193k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  49.1k|    {
  653|  49.1k|        return *value_ptr();
  654|  49.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1044|  25.8k|    {
 1045|  25.8k|        this->destroy_value();
 1046|  25.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  33.5k|    {
  708|  33.5k|        scn::detail::destroy_at(value_ptr());
  709|  33.5k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  33.5k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  33.5k|    else {
  408|  33.5k|        p->~T();
  409|  33.5k|    }
  410|  33.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEED2Ev:
 6630|  33.5k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  25.8k|    {
  701|  25.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.8k|                                  std::forward<Args>(args)...);
  703|  25.8k|        m_has_value = false;
  704|  25.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  25.8k|    {
  678|  25.8k|        return std::move(*unexpected_ptr());
  679|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  51.6k|    {
  712|  51.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  51.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8797|  31.8k|    {
 8798|  31.8k|        return m_str;
 8799|  31.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  63.7k|{
 6127|  63.7k|    detail::check_scan_arg_types<Args...>();
 6128|  63.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  63.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6102|  63.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  63.7k|    {
 6104|  63.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6111|  63.7k|    {
 6112|  63.7k|        return {detail::make_arg<
 6113|  63.7k|            kind, Context,
 6114|  63.7k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  63.7k|                                 typename Context::char_type>::value>(args)...};
 6116|  63.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE27ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5900|  63.7k|{
 5901|  63.7k|    return make_value<Context>(value);
 5902|  63.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEEDaRT0_:
 5826|  67.1k|{
 5827|  67.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|       |                                  needs_context_tag>) {
 5831|       |        return make_value_impl<T>(SCN_FWD(arg));
 5832|       |    }
 5833|  67.1k|    else {
 5834|  67.1k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|  67.1k|            value, context_tag<Context>{}));
 5836|  67.1k|    }
 5837|  67.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5731|  67.1k|    {
 5732|  67.1k|        return {};
 5733|  67.1k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5795|  67.1k|{
 5796|  67.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  67.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  67.1k|    constexpr bool scannable_char =
 5800|  67.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  67.1k|    static_assert(scannable_char,
 5802|  67.1k|                  "Cannot scan an argument of an unsupported character "
 5803|  67.1k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  67.1k|    constexpr bool scannable_const =
 5806|  67.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  67.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  67.1k|    constexpr bool scannable_disabled =
 5810|  67.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  67.1k|    static_assert(scannable_disabled,
 5812|  67.1k|                  "Cannot scan an argument that has been disabled by "
 5813|  67.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  67.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  67.1k|    static_assert(
 5817|  67.1k|        scannable,
 5818|  67.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  67.1k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  67.1k|    return arg_value{arg};
 5822|  67.1k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5609|  67.1k|        : custom_value{static_cast<void*>(&val.val),
 5610|  67.1k|                       scan_custom_arg<T, Context>}
 5611|  67.1k|    {
 5612|  67.1k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5627|  67.1k|    {
 5628|  67.1k|        static_assert(!is_type_disabled<T>,
 5629|  67.1k|                      "Scanning of custom types is disabled by "
 5630|  67.1k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5631|  67.1k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1051|  67.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  67.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5632|       |
 5633|  67.1k|        using context_type = Context;
 5634|  67.1k|        using parse_context_type = typename context_type::parse_context_type;
 5635|  67.1k|        using scanner_type = typename context_type::template scanner_type<T>;
 5636|       |
 5637|  67.1k|        auto s = scanner_type{};
 5638|       |
 5639|  67.1k|        auto& arg_ref = *static_cast<T*>(arg);
 5640|  67.1k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5641|  67.1k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5642|       |
 5643|  67.1k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3929|  67.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 3.44k, False: 63.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  3.44k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  3.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  3.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  3.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.44k|    }
  ------------------
 5644|  63.7k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3939|  63.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  63.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  63.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 48.1k, False: 15.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  48.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  48.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  48.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  48.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  48.1k|    }                                                  \
  |  |  |  | 3938|  63.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5645|  15.5k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  15.5k|    static_cast<    \
  |  | 1056|  15.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5646|       |
 5647|  15.5k|        return {};
 5648|  63.7k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5560|  67.1k|{
 5561|  67.1k|#if SCN_HAS_EXCEPTIONS
 5562|  67.1k|    auto fmt_it = pctx.begin();
 5563|  67.1k|    try {
 5564|  67.1k|        fmt_it = s.parse(pctx);
 5565|  67.1k|    }
 5566|  67.1k|    catch (const detail::scan_format_string_error_base& ex) {
 5567|       |        // scan_error takes a const char*.
 5568|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5569|       |        // stores a reference-counted string,
 5570|       |        // that will go out of scope here.
 5571|       |        // We need to provide a const char* that will stay in scope.
 5572|       |        // If scan_format_string_error was thrown with a string literal,
 5573|       |        // use that, otherwise refer to a thread_local std::string
 5574|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5574:25): [True: 0, False: 0]
  ------------------
 5575|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5576|      0|        }
 5577|      0|        thread_local std::string err_msg{};
 5578|      0|        err_msg = ex.what();
 5579|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5580|      0|                                     err_msg.c_str());
 5581|      0|    }
 5582|       |#else
 5583|       |    auto fmt_it = s.parse(pctx_ref);
 5584|       |#endif
 5585|  67.1k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.44k, False: 63.7k]
  |  |  ------------------
  ------------------
 5586|  3.44k|        return e;
 5587|  3.44k|    }
 5588|  63.7k|    pctx.advance_to(fmt_it);
 5589|  63.7k|    return {};
 5590|  67.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5739|  67.1k|    {
 5740|  67.1k|        return {val};
 5741|  67.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  63.7k|        : basic_scan_args(store.desc, store.args.data())
 6153|  63.7k|    {
 6154|  63.7k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  31.8k|        : m_str(r.str)
 8793|  31.8k|    {
 8794|  31.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1738|  33.5k|    {
 1739|  33.5k|        return has_value();
 1740|  33.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1813|  49.1k|    {
 1814|  49.1k|        return &value();
 1815|  49.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1767|  49.1k|    {
 1768|  49.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  49.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  49.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  49.1k|        return this->get_value();
 1770|  49.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  59.3k|    {
  643|  59.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.77k, False: 51.6k]
  ------------------
  644|  7.77k|            destroy_value();
  645|  7.77k|        }
  646|  51.6k|        else {
  647|  51.6k|            destroy_unexpected();
  648|  51.6k|        }
  649|  59.3k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5876|  3.44k|{
 5877|  3.44k|    check_scan_arg_types<T>();
 5878|       |
 5879|  3.44k|    basic_scan_arg<Context> arg;
 5880|  3.44k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  3.44k|    arg.m_value = make_value<Context>(value);
 5882|  3.44k|    return arg;
 5883|  3.44k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  77.4k|    {
 2868|  77.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  77.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  77.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  77.4k|    {
 2849|  77.4k|        return decay_copy(t.begin());
 2850|  77.4k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2092|  1.45M|{
 2093|  1.45M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  1.45M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   201k|    {
 2925|   201k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   201k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   201k|    {
 2907|   201k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   201k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEEDav:
 9716|  33.5k|{
 9717|  33.5k|    return scan_result_type<Source, Args...>();
 9718|  33.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1550|  33.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  33.5k|        : m_value(T{}), m_has_value(true)
  427|  33.5k|    {
  428|  33.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2Ev:
 6623|  33.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6466|   100k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3458|   100k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  33.5k|{
 9702|  33.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 25.8k, False: 7.77k]
  |  |  ------------------
  ------------------
 9703|  25.8k|        out = unexpected(in.error());
 9704|  25.8k|    }
 9705|  7.77k|    else {
 9706|  7.77k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  7.77k|    static_cast<    \
  |  | 1056|  7.77k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  7.77k|    }
 9708|  33.5k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1738|   100k|    {
 1739|   100k|        return has_value();
 1740|   100k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   201k|    {
  490|   201k|        return m_has_value;
  491|   201k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1744|  77.4k|    {
 1745|  77.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  77.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  77.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  77.4k|        return this->get_unexpected().error();
 1747|  77.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  77.4k|    {
  473|  77.4k|        return m_unexpected;
  474|  77.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  25.8k|        : base(unexpect, std::move(e.error())),
 1615|  25.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  25.8k|    {
 1617|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  25.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  25.8k|          m_has_value(false)
  451|  25.8k|    {
  452|  25.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  25.8k|    {
 1315|  25.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1555|  25.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  901|  25.8k|    {
  902|  25.8k|        assign_common(std::move(other));
  903|  25.8k|        return *this;
  904|  25.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  25.8k|    {
  949|  25.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 25.8k, False: 0]
  ------------------
  950|  25.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 25.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  25.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  25.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   134k|    {
  490|   134k|        return m_has_value;
  491|   134k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  49.1k|    {
  456|  49.1k|        return m_value;
  457|  49.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  25.8k|    {
 1045|  25.8k|        this->destroy_value();
 1046|  25.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  25.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  25.8k|    {
  504|  25.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  25.8k|                                  std::forward<Args>(args)...);
  506|  25.8k|        m_has_value = false;
  507|  25.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  25.8k|    {
  473|  25.8k|        return m_unexpected;
  474|  25.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  25.8k|    {
  481|  25.8k|        return std::move(m_unexpected);
  482|  25.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6497|  23.3k|    {
 6498|  23.3k|        m_range = std::forward<Other>(r);
 6499|  23.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1793|  23.3k|    {
 1794|  23.3k|        return value();
 1795|  23.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1767|  23.3k|    {
 1768|  23.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  23.3k|        return this->get_value();
 1770|  23.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  23.3k|    {
  456|  23.3k|        return m_value;
  457|  23.3k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9459|  47.7k|{
 9460|  47.7k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|  47.7k|    auto result = vscan_impl(buffer, format, args);
 9463|  47.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  47.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 36.1k, False: 11.6k]
  |  |  ------------------
  ------------------
 9464|  36.1k|        return unexpected(result.error());
 9465|  36.1k|    }
 9466|  11.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|  47.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5379|   100k|{
 5380|   100k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   100k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   100k|                  "\n"
 5384|   100k|                  "Unsupported range type given as input to a scanning "
 5385|   100k|                  "function.\n"
 5386|   100k|                  "A range needs to have a character type (value type) "
 5387|   100k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   100k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   100k|                  "to be included.\n"
 5390|   100k|                  "See the scnlib documentation for more details.");
 5391|   100k|    static_assert(
 5392|   100k|        !std::is_same_v<T, custom_char_traits>,
 5393|   100k|        "\n"
 5394|   100k|        "Unsupported range type given as input to a scanning "
 5395|   100k|        "function.\n"
 5396|   100k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   100k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   100k|        "not supported.");
 5399|   100k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   100k|                  "\n"
 5401|   100k|                  "Unsupported range type given as input to a scanning "
 5402|   100k|                  "function.\n"
 5403|   100k|                  "file_marker_found cannot be used as an "
 5404|   100k|                  "source range type to scn::scan.\n"
 5405|   100k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   100k|                  "and do not provide an explicit source range, "
 5407|   100k|                  "or use scn::scan with a FILE* directly.");
 5408|   100k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   100k|                  "\n"
 5410|   100k|                  "Unsupported range type given as input to a scanning "
 5411|   100k|                  "function.\n"
 5412|   100k|                  "In order to be scannable, a range needs to satisfy "
 5413|   100k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   100k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   100k|                  "\n"
 5416|   100k|                  "Unsupported range type given as input to a scanning "
 5417|   100k|                  "function.\n"
 5418|   100k|                  "A range needs to model forward_range and have a valid "
 5419|   100k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   100k|                  "Examples of scannable ranges are std::string, "
 5421|   100k|                  "std::string_view, "
 5422|   100k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   100k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   100k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   100k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5349|   100k|{
 5350|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5351|       |        return file_marker_found{};
 5352|       |    }
 5353|       |    else if constexpr (!ranges::forward_range<Range>) {
 5354|       |        if constexpr (ranges::range<Range>) {
 5355|       |            return insufficient_range{};
 5356|       |        }
 5357|       |        else {
 5358|       |            return invalid_input_range{};
 5359|       |        }
 5360|       |    }
 5361|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5362|       |        return invalid_char_type{};
 5363|       |    }
 5364|   100k|    else {
 5365|   100k|        return make_forward_scan_buffer(r);
 5366|   100k|    }
 5367|   100k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5183|   100k|{
 5184|   100k|    return basic_scan_forward_buffer_impl(range);
 5185|   100k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|   100k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|   100k|          m_cursor(ranges::begin(*m_range))
 4765|   100k|    {
 4766|   100k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4735|   100k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|   100k|    {
 4737|   100k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4426|   100k|        : m_current_view(sv), m_is_contiguous(false)
 4427|   100k|    {
 4428|   100k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4339|   196k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   124k|    {
 2868|   124k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   124k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   124k|    {
 2849|   124k|        return decay_copy(t.begin());
 2850|   124k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3478|   147k|    {
 3479|   147k|        return m_iterator;
 3480|   147k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4769|   347k|    {
 4770|   347k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 18.3k, False: 328k]
  ------------------
 4771|  18.3k|            return false;
 4772|  18.3k|        }
 4773|   328k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|   328k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1051|   328k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   328k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|   328k|        }
 4776|   328k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 233k, False: 95.4k]
  ------------------
 4777|   233k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|   233k|                                          this->m_current_view.begin(),
 4779|   233k|                                          this->m_current_view.end());
 4780|   233k|        }
 4781|   328k|        m_latest = *m_cursor;
 4782|   328k|        ++m_cursor;
 4783|   328k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|   328k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|   328k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1051|   328k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   328k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|   328k|        }
 4787|   328k|        return true;
 4788|   347k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  1.00M|    {
 2925|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  1.00M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  1.00M|    {
 2907|  1.00M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  1.00M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3482|  1.02M|    {
 3483|  1.02M|        return m_sentinel;
 3484|  1.02M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4344|   100k|    {
 4345|   100k|        SCN_UNUSED(position);
  ------------------
  |  | 1036|   100k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4346|   100k|        return true;
 4347|   100k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1614|  77.4k|        : base(unexpect, std::move(e.error())),
 1615|  77.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  77.4k|    {
 1617|  77.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  77.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  77.4k|          m_has_value(false)
  451|  77.4k|    {
  452|  77.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   100k|    {
 1315|   100k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6727|  23.3k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|  23.3k|                      ranges::iterator_t<SourceRange>>) {
 6730|  23.3k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|  23.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  23.3k|    {
 2868|  23.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  23.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  23.3k|    {
 2849|  23.3k|        return decay_copy(t.begin());
 2850|  23.3k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6714|  23.3k|{
 6715|  23.3k|    return ranges::end(source);
 6716|  23.3k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  23.3k|    {
 2925|  23.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  23.3k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  23.3k|    {
 2907|  23.3k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  23.3k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1568|  23.3k|        : base(std::in_place, std::forward<U>(val)),
 1569|  23.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  23.3k|    {
 1571|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  23.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  23.3k|    {
  442|  23.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|  31.8k|    {
 8798|  31.8k|        return m_str;
 8799|  31.8k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3463|   124k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   124k|    static_cast<    \
  |  | 1056|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   124k|    static_cast<    \
  |  | 1056|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   124k|    {
 3465|   124k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  31.8k|        : m_str(r.str)
 8793|  31.8k|    {
 8794|  31.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1738|  33.5k|    {
 1739|  33.5k|        return has_value();
 1740|  33.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1813|  49.1k|    {
 1814|  49.1k|        return &value();
 1815|  49.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  49.1k|    {
 1768|  49.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  49.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  49.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  49.1k|        return this->get_value();
 1770|  49.1k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6486|  23.3k|    {
 6487|  23.3k|        return ranges::begin(m_range);
 6488|  23.3k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9475|  47.7k|{
 9476|  47.7k|#if !SCN_DISABLE_LOCALE
 9477|  47.7k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|  47.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|  47.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|  47.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|  47.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  47.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 36.1k, False: 11.6k]
  |  |  ------------------
  ------------------
 9484|  36.1k|        return unexpected(result.error());
 9485|  36.1k|    }
 9486|  11.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|  47.7k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  5.16k|{
 9500|  5.16k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  5.16k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  5.16k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  5.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 5.16k, False: 0]
  |  |  ------------------
  ------------------
 9504|  5.16k|        return unexpected(result.error());
 9505|  5.16k|    }
 9506|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  5.16k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9716|  33.5k|{
 9717|  33.5k|    return scan_result_type<Source, Args...>();
 9718|  33.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1550|  33.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  33.5k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  33.5k|    {
  613|  33.5k|        construct();
  614|  33.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  33.5k|    {
  694|  33.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  33.5k|        m_has_value = true;
  696|  33.5k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  33.5k|{
  396|  33.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  33.5k|        T(std::forward<Args>(args)...);
  398|  33.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6623|  33.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   116k|    {
  718|   116k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   116k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  33.5k|{
 9702|  33.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 25.8k, False: 7.77k]
  |  |  ------------------
  ------------------
 9703|  25.8k|        out = unexpected(in.error());
 9704|  25.8k|    }
 9705|  7.77k|    else {
 9706|  7.77k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  7.77k|    static_cast<    \
  |  | 1056|  7.77k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  7.77k|    }
 9708|  33.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  25.8k|        : base(unexpect, std::move(e.error())),
 1615|  25.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  25.8k|    {
 1617|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  25.8k|        : m_has_value(false)
  637|  25.8k|    {
  638|  25.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  25.8k|    {
  701|  25.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.8k|                                  std::forward<Args>(args)...);
  703|  25.8k|        m_has_value = false;
  704|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   129k|    {
  730|   129k|        return reinterpret_cast<unexpected<E>*>(
  731|   129k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|   129k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   129k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  25.8k|    {
 1315|  25.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1555|  25.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  901|  25.8k|    {
  902|  25.8k|        assign_common(std::move(other));
  903|  25.8k|        return *this;
  904|  25.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  25.8k|    {
  949|  25.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 25.8k, False: 0]
  ------------------
  950|  25.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 25.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  25.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  25.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   193k|    {
  687|   193k|        return m_has_value;
  688|   193k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  49.1k|    {
  653|  49.1k|        return *value_ptr();
  654|  49.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  25.8k|    {
 1045|  25.8k|        this->destroy_value();
 1046|  25.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  33.5k|    {
  708|  33.5k|        scn::detail::destroy_at(value_ptr());
  709|  33.5k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  33.5k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  33.5k|    else {
  408|  33.5k|        p->~T();
  409|  33.5k|    }
  410|  33.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6630|  33.5k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  25.8k|    {
  701|  25.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.8k|                                  std::forward<Args>(args)...);
  703|  25.8k|        m_has_value = false;
  704|  25.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  25.8k|    {
  678|  25.8k|        return std::move(*unexpected_ptr());
  679|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  51.6k|    {
  712|  51.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  51.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|  31.8k|    {
 8798|  31.8k|        return m_str;
 8799|  31.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  31.8k|        : m_str(r.str)
 8793|  31.8k|    {
 8794|  31.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1738|  33.5k|    {
 1739|  33.5k|        return has_value();
 1740|  33.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1813|  49.1k|    {
 1814|  49.1k|        return &value();
 1815|  49.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  49.1k|    {
 1768|  49.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  49.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  49.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  49.1k|        return this->get_value();
 1770|  49.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  59.3k|    {
  643|  59.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.77k, False: 51.6k]
  ------------------
  644|  7.77k|            destroy_value();
  645|  7.77k|        }
  646|  51.6k|        else {
  647|  51.6k|            destroy_unexpected();
  648|  51.6k|        }
  649|  59.3k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9716|  33.5k|{
 9717|  33.5k|    return scan_result_type<Source, Args...>();
 9718|  33.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1550|  33.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  33.5k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  33.5k|    {
  613|  33.5k|        construct();
  614|  33.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  33.5k|    {
  694|  33.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  33.5k|        m_has_value = true;
  696|  33.5k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  33.5k|{
  396|  33.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  33.5k|        T(std::forward<Args>(args)...);
  398|  33.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6623|  33.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   116k|    {
  718|   116k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   116k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  33.5k|{
 9702|  33.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 25.8k, False: 7.77k]
  |  |  ------------------
  ------------------
 9703|  25.8k|        out = unexpected(in.error());
 9704|  25.8k|    }
 9705|  7.77k|    else {
 9706|  7.77k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  7.77k|    static_cast<    \
  |  | 1056|  7.77k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  7.77k|    }
 9708|  33.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  25.8k|        : base(unexpect, std::move(e.error())),
 1615|  25.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  25.8k|    {
 1617|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  25.8k|        : m_has_value(false)
  637|  25.8k|    {
  638|  25.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  25.8k|    {
  701|  25.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.8k|                                  std::forward<Args>(args)...);
  703|  25.8k|        m_has_value = false;
  704|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   129k|    {
  730|   129k|        return reinterpret_cast<unexpected<E>*>(
  731|   129k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|   129k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   129k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  25.8k|    {
 1315|  25.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1555|  25.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  901|  25.8k|    {
  902|  25.8k|        assign_common(std::move(other));
  903|  25.8k|        return *this;
  904|  25.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  25.8k|    {
  949|  25.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 25.8k, False: 0]
  ------------------
  950|  25.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 25.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  25.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  25.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   193k|    {
  687|   193k|        return m_has_value;
  688|   193k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  49.1k|    {
  653|  49.1k|        return *value_ptr();
  654|  49.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  25.8k|    {
 1045|  25.8k|        this->destroy_value();
 1046|  25.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  33.5k|    {
  708|  33.5k|        scn::detail::destroy_at(value_ptr());
  709|  33.5k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  33.5k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  33.5k|    else {
  408|  33.5k|        p->~T();
  409|  33.5k|    }
  410|  33.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6630|  33.5k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  25.8k|    {
  701|  25.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.8k|                                  std::forward<Args>(args)...);
  703|  25.8k|        m_has_value = false;
  704|  25.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  25.8k|    {
  678|  25.8k|        return std::move(*unexpected_ptr());
  679|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  51.6k|    {
  712|  51.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  51.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|  31.8k|    {
 8798|  31.8k|        return m_str;
 8799|  31.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  31.8k|        : m_str(r.str)
 8793|  31.8k|    {
 8794|  31.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1738|  33.5k|    {
 1739|  33.5k|        return has_value();
 1740|  33.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1813|  49.1k|    {
 1814|  49.1k|        return &value();
 1815|  49.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  49.1k|    {
 1768|  49.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  49.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  49.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  49.1k|        return this->get_value();
 1770|  49.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  59.3k|    {
  643|  59.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.77k, False: 51.6k]
  ------------------
  644|  7.77k|            destroy_value();
  645|  7.77k|        }
  646|  51.6k|        else {
  647|  51.6k|            destroy_unexpected();
  648|  51.6k|        }
  649|  59.3k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3478|  1.32M|    {
 3479|  1.32M|        return m_iterator;
 3480|  1.32M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3478|  1.12M|    {
 3479|  1.12M|        return m_iterator;
 3480|  1.12M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4471|  12.6M|    {
 4472|  12.6M|        assert(m_begin);
 4473|  12.6M|        return m_end == nullptr;
 4474|  12.6M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4488|   177k|    {
 4489|   177k|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 80.9k, False: 96.3k]
  ------------------
 4490|  80.9k|            return make_string_view_from_pointers(
 4491|  80.9k|                static_cast<const CharT*>(m_begin) + position(),
 4492|  80.9k|                static_cast<const CharT*>(m_end));
 4493|  80.9k|        }
 4494|  96.3k|        return parent()->get_segment_starting_at(position());
 4495|   177k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4482|  7.35M|    {
 4483|  7.35M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1051|  7.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|  7.35M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|  7.35M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4375|  96.3k|    {
 4376|  96.3k|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 96.3k]
  |  |  ------------------
  ------------------
 4377|  96.3k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4378|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4379|      0|        }
 4380|  96.3k|        const auto start = pos - m_putback_buffer.size();
 4381|  96.3k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1051|  96.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  96.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4382|  96.3k|        return m_current_view.substr(start);
 4383|  96.3k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4466|   267k|    {
 4467|   267k|        return m_position;
 4468|   267k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4397|   377k|    {
 4398|   377k|        return m_is_contiguous;
 4399|   377k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4471|  6.78M|    {
 4472|  6.78M|        assert(m_begin);
 4473|  6.78M|        return m_end == nullptr;
 4474|  6.78M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4488|  95.5k|    {
 4489|  95.5k|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 95.5k, False: 0]
  ------------------
 4490|  95.5k|            return make_string_view_from_pointers(
 4491|  95.5k|                static_cast<const CharT*>(m_begin) + position(),
 4492|  95.5k|                static_cast<const CharT*>(m_end));
 4493|  95.5k|        }
 4494|      0|        return parent()->get_segment_starting_at(position());
 4495|  95.5k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4482|  3.75M|    {
 4483|  3.75M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1051|  3.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|  3.75M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|  3.75M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4466|   142k|    {
 4467|   142k|        return m_position;
 4468|   142k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4397|   397k|    {
 4398|   397k|        return m_is_contiguous;
 4399|   397k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3332|   245k|    {
 3333|   245k|        return static_cast<D&>(*this);
 3334|   245k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3373|   245k|    {
 3374|   245k|        return detail::to_address(ranges::begin(derived()));
 3375|   245k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3332|   196k|    {
 3333|   196k|        return static_cast<D&>(*this);
 3334|   196k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3373|   196k|    {
 3374|   196k|        return detail::to_address(ranges::begin(derived()));
 3375|   196k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8994|   191k|    {
 8995|   191k|        return ranges::subrange{begin(), end()};
 8996|   191k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8986|   191k|    {
 8987|   191k|        return ranges::default_sentinel;
 8988|   191k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3463|   706k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   706k|    static_cast<    \
  |  | 1056|   706k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   706k|    static_cast<    \
  |  | 1056|   706k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   706k|    {
 3465|   706k|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8813|   199k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|  96.3k|    {
 1978|  96.3k|        return detail::transform_error_impl(std::move(*this),
 1979|  96.3k|                                            std::forward<F>(f));
 1980|  96.3k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|  96.3k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  96.3k|    else {
 1471|  96.3k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  96.3k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  96.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 94.8k, False: 1.56k]
  |  |  ------------------
  ------------------
 1473|  96.3k|                   ? result(*std::forward<Exp>(exp))
 1474|  96.3k|                   : result(unexpect,
 1475|  1.56k|                            trivial_invoke(std::forward<F>(f),
 1476|  1.56k|                                           std::forward<Exp>(exp).error()));
 1477|  96.3k|    }
 1478|  96.3k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   192k|    {
  490|   192k|        return m_has_value;
  491|   192k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|  94.8k|    {
 1804|  94.8k|        return std::move(value());
 1805|  94.8k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|  94.8k|    {
 1768|  94.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  94.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  94.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  94.8k|        return this->get_value();
 1770|  94.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  94.8k|    {
  456|  94.8k|        return m_value;
  457|  94.8k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1568|   260k|        : base(std::in_place, std::forward<U>(val)),
 1569|   260k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   260k|    {
 1571|   260k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   260k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   260k|    {
  442|   260k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   453k|    {
 1315|   453k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1348|  4.42k|{
 1349|  4.42k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1350|  4.42k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1754|  1.56k|    {
 1755|  1.56k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  1.56k|        return std::move(this->get_unexpected().error());
 1757|  1.56k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  1.56k|    {
  473|  1.56k|        return m_unexpected;
  474|  1.56k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  8.84k|    {
  365|  8.84k|        return m_unexpected;
  366|  8.84k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1624|  1.56k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  1.56k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  1.56k|    {
 1627|  1.56k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   148k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   148k|          m_has_value(false)
  451|   148k|    {
  452|   148k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8994|   190k|    {
 8995|   190k|        return ranges::subrange{begin(), end()};
 8996|   190k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8986|   190k|    {
 8987|   190k|        return ranges::default_sentinel;
 8988|   190k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3463|   663k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   663k|    static_cast<    \
  |  | 1056|   663k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   663k|    static_cast<    \
  |  | 1056|   663k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   663k|    {
 3465|   663k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|  95.5k|    {
 1978|  95.5k|        return detail::transform_error_impl(std::move(*this),
 1979|  95.5k|                                            std::forward<F>(f));
 1980|  95.5k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|  95.5k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  95.5k|    else {
 1471|  95.5k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  95.5k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  95.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 94.5k, False: 1.03k]
  |  |  ------------------
  ------------------
 1473|  95.5k|                   ? result(*std::forward<Exp>(exp))
 1474|  95.5k|                   : result(unexpect,
 1475|  1.03k|                            trivial_invoke(std::forward<F>(f),
 1476|  1.03k|                                           std::forward<Exp>(exp).error()));
 1477|  95.5k|    }
 1478|  95.5k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   191k|    {
  490|   191k|        return m_has_value;
  491|   191k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|  94.5k|    {
 1804|  94.5k|        return std::move(value());
 1805|  94.5k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|  94.5k|    {
 1768|  94.5k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  94.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  94.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  94.5k|        return this->get_value();
 1770|  94.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  94.5k|    {
  456|  94.5k|        return m_value;
  457|  94.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1568|   164k|        : base(std::in_place, std::forward<U>(val)),
 1569|   164k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   164k|    {
 1571|   164k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   164k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   164k|    {
  442|   164k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   482k|    {
 1315|   482k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1754|  1.03k|    {
 1755|  1.03k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  1.03k|        return std::move(this->get_unexpected().error());
 1757|  1.03k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  1.03k|    {
  473|  1.03k|        return m_unexpected;
  474|  1.03k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1624|  1.03k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  1.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  1.03k|    {
 1627|  1.03k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   295k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   295k|          m_has_value(false)
  451|   295k|    {
  452|   295k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1614|   232k|        : base(unexpect, std::move(e.error())),
 1615|   232k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   232k|    {
 1617|   232k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   232k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   232k|          m_has_value(false)
  451|   232k|    {
  452|   232k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   383k|    {
 1315|   383k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1614|  38.7k|        : base(unexpect, std::move(e.error())),
 1615|  38.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  38.7k|    {
 1617|  38.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  39.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  39.4k|          m_has_value(false)
  451|  39.4k|    {
  452|  39.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   164k|    {
 1315|   164k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1568|   125k|        : base(std::in_place, std::forward<U>(val)),
 1569|   125k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   125k|    {
 1571|   125k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   125k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   125k|    {
  442|   125k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1738|   164k|    {
 1739|   164k|        return has_value();
 1740|   164k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   329k|    {
  490|   329k|        return m_has_value;
  491|   329k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1744|  39.4k|    {
 1745|  39.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  39.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  39.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  39.4k|        return this->get_unexpected().error();
 1747|  39.4k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  39.4k|    {
  473|  39.4k|        return m_unexpected;
  474|  39.4k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1803|   125k|    {
 1804|   125k|        return std::move(value());
 1805|   125k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1767|   125k|    {
 1768|   125k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   125k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   125k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   125k|        return this->get_value();
 1770|   125k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   125k|    {
  456|   125k|        return m_value;
  457|   125k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1614|  77.4k|        : base(unexpect, std::move(e.error())),
 1615|  77.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  77.4k|    {
 1617|  77.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  78.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  78.4k|          m_has_value(false)
  451|  78.4k|    {
  452|  78.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   196k|    {
 1315|   196k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1568|   117k|        : base(std::in_place, std::forward<U>(val)),
 1569|   117k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   117k|    {
 1571|   117k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   117k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   117k|    {
  442|   117k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1738|   196k|    {
 1739|   196k|        return has_value();
 1740|   196k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|   392k|    {
  490|   392k|        return m_has_value;
  491|   392k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1744|  78.4k|    {
 1745|  78.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  78.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  78.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  78.4k|        return this->get_unexpected().error();
 1747|  78.4k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  78.4k|    {
  473|  78.4k|        return m_unexpected;
  474|  78.4k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1803|   117k|    {
 1804|   117k|        return std::move(value());
 1805|   117k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1767|   117k|    {
 1768|   117k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   117k|        return this->get_value();
 1770|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|   117k|    {
  456|   117k|        return m_value;
  457|   117k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|  80.9k|    {
 1978|  80.9k|        return detail::transform_error_impl(std::move(*this),
 1979|  80.9k|                                            std::forward<F>(f));
 1980|  80.9k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|  80.9k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  80.9k|    else {
 1471|  80.9k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  80.9k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  80.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 80.1k, False: 780]
  |  |  ------------------
  ------------------
 1473|  80.9k|                   ? result(*std::forward<Exp>(exp))
 1474|  80.9k|                   : result(unexpect,
 1475|    780|                            trivial_invoke(std::forward<F>(f),
 1476|    780|                                           std::forward<Exp>(exp).error()));
 1477|  80.9k|    }
 1478|  80.9k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   161k|    {
  490|   161k|        return m_has_value;
  491|   161k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|  80.1k|    {
 1804|  80.1k|        return std::move(value());
 1805|  80.1k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|  80.1k|    {
 1768|  80.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  80.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  80.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  80.1k|        return this->get_value();
 1770|  80.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  80.1k|    {
  456|  80.1k|        return m_value;
  457|  80.1k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1754|    780|    {
 1755|    780|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    780|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    780|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|    780|        return std::move(this->get_unexpected().error());
 1757|    780|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    780|    {
  473|    780|        return m_unexpected;
  474|    780|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1624|    780|        : base(unexpect, std::forward<Args>(args)...),
 1625|    780|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|    780|    {
 1627|    780|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8978|   756k|    {
 8979|   756k|        return m_current;
 8980|   756k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8866|   161k|    {
 8867|   161k|        return m_args;
 8868|   161k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8871|   336k|    {
 8872|   336k|        return m_locale;
 8873|   336k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8877|   344k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   344k|    static_cast<    \
  |  | 1056|   344k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   344k|    static_cast<    \
  |  | 1056|   344k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8878|   344k|    {
 8879|   344k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   161k|    {
 2999|   161k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   161k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   161k|    {
 2980|   161k|        return t.data();
 2981|   161k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|  80.9k|    {
 3074|  80.9k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  80.9k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3039|  80.9k|    {
 3040|  80.9k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  80.9k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|   147k|        : base(unexpect, std::move(e.error())),
 1615|   147k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   147k|    {
 1617|   147k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1568|  44.8k|        : base(std::in_place, std::forward<U>(val)),
 1569|  44.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  44.8k|    {
 1571|  44.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  44.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  44.8k|    {
  442|  44.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8978|   665k|    {
 8979|   665k|        return m_current;
 8980|   665k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8866|   191k|    {
 8867|   191k|        return m_args;
 8868|   191k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8871|   380k|    {
 8872|   380k|        return m_locale;
 8873|   380k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8877|   392k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   392k|    static_cast<    \
  |  | 1056|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   392k|    static_cast<    \
  |  | 1056|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8878|   392k|    {
 8879|   392k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   191k|    {
 2999|   191k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   191k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   191k|    {
 2980|   191k|        return t.data();
 2981|   191k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|  95.5k|    {
 3074|  95.5k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  95.5k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3039|  95.5k|    {
 3040|  95.5k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  95.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  95.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|   294k|        : base(unexpect, std::move(e.error())),
 1615|   294k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   294k|    {
 1617|   294k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1568|  23.3k|        : base(std::in_place, std::forward<U>(val)),
 1569|  23.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  23.3k|    {
 1571|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  23.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  23.3k|    {
  442|  23.3k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|   535k|    {
 4558|   535k|        return x.is_at_end();
 4559|   535k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4601|  1.31M|    {
 4602|  1.31M|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 1.31M]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|  1.31M|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 1.31M]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|  1.31M|        return !read_at_position();
 4609|  1.31M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4581|  3.79M|    {
 4582|  3.79M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  3.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  3.79M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 3.79M]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|  3.79M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  985|  3.79M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 3.03M, False: 764k]
  |  |  ------------------
  ------------------
 4589|  3.03M|            return true;
 4590|  3.03M|        }
 4591|       |
 4592|  1.51M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 764k, False: 749k]
  ------------------
 4593|   764k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 15.1k, False: 749k]
  ------------------
 4594|  15.1k|                return false;
 4595|  15.1k|            }
 4596|   764k|        }
 4597|   749k|        return true;
 4598|   764k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4516|  1.18M|    {
 4517|  1.18M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|  1.18M|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 1.18M]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|  1.18M|        auto res = read_at_position();
 4526|  1.18M|        SCN_EXPECT(res);
  ------------------
  |  | 1051|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|  1.18M|        return parent()->get_character_at(m_position);
 4528|  1.18M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4386|  1.18M|    {
 4387|  1.18M|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 387k, False: 797k]
  |  |  ------------------
  ------------------
 4388|  1.18M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|   387k|            return m_putback_buffer[pos];
 4390|   387k|        }
 4391|   797k|        const auto start = pos - m_putback_buffer.size();
 4392|   797k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1051|   797k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   797k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|   797k|        return m_current_view[start];
 4394|   797k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1568|  94.8k|        : base(std::in_place, std::forward<U>(val)),
 1569|  94.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  94.8k|    {
 1571|  94.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  94.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  94.8k|    {
  442|  94.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  96.3k|    {
 1315|  96.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|  1.56k|        : base(unexpect, std::move(e.error())),
 1615|  1.56k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  1.56k|    {
 1617|  1.56k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.56k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.56k|          m_has_value(false)
  451|  1.56k|    {
  452|  1.56k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  4.42k|        : m_unexpected(std::forward<Args>(args)...)
  359|  4.42k|    {
  360|  4.42k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  4.42k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  4.42k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4502|  1.30M|    {
 4503|  1.30M|        ++m_position;
 4504|  1.30M|        (void)read_at_position();
 4505|  1.30M|        return *this;
 4506|  1.30M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4551|   580k|    {
 4552|   580k|        return !(lhs == rhs);
 4553|   580k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4546|   580k|    {
 4547|   580k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 580k, False: 0]
  |  Branch (4547:46): [True: 70.8k, False: 510k]
  ------------------
 4548|   580k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  4.42k|        : m_unexpected(std::forward<Err>(e))
  350|  4.42k|    {
  351|  4.42k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  4.42k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  4.42k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3482|  1.63M|    {
 3483|  1.63M|        return m_sentinel;
 3484|  1.63M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|   774k|    {
 4569|   774k|        return !x.is_at_end();
 4570|   774k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|    780|        : base(unexpect, std::move(e.error())),
 1615|    780|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    780|    {
 1617|    780|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    780|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    780|          m_has_value(false)
  451|    780|    {
  452|    780|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  80.9k|    {
 1315|  80.9k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1568|  80.1k|        : base(std::in_place, std::forward<U>(val)),
 1569|  80.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  80.1k|    {
 1571|  80.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  80.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  80.1k|    {
  442|  80.1k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   242k|    {
 2999|   242k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   242k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   242k|    {
 2980|   242k|        return t.data();
 2981|   242k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1568|   151k|        : base(std::in_place, std::forward<U>(val)),
 1569|   151k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   151k|    {
 1571|   151k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|   151k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   151k|    {
  442|   151k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1793|   105k|    {
 1794|   105k|        return value();
 1795|   105k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2867|  94.8k|    {
 2868|  94.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  94.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  94.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2848|  94.8k|    {
 2849|  94.8k|        return decay_copy(t.begin());
 2850|  94.8k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2092|  94.8k|{
 2093|  94.8k|    return SCN_FWD(t);
  ------------------
  |  | 1057|  94.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  94.8k|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3909|  80.9k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|  80.9k|    static_cast<    \
  |  | 1056|  80.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|  80.9k|    {
 3911|  80.9k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3909|  96.3k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|  96.3k|    static_cast<    \
  |  | 1056|  96.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|  96.3k|    {
 3911|  96.3k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|   427k|    {
 4558|   427k|        return x.is_at_end();
 4559|   427k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4601|   824k|    {
 4602|   824k|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 824k]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|   824k|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 824k]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|   824k|        return !read_at_position();
 4609|   824k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4581|  2.00M|    {
 4582|  2.00M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  2.00M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 2.00M]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|  2.00M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  985|  2.00M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.66M, False: 347k]
  |  |  ------------------
  ------------------
 4589|  1.66M|            return true;
 4590|  1.66M|        }
 4591|       |
 4592|   675k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 347k, False: 328k]
  ------------------
 4593|   347k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 18.3k, False: 328k]
  ------------------
 4594|  18.3k|                return false;
 4595|  18.3k|            }
 4596|   347k|        }
 4597|   328k|        return true;
 4598|   347k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4355|  2.68M|    {
 4356|  2.68M|        return m_putback_buffer.size() + m_current_view.size();
 4357|  2.68M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4516|   726k|    {
 4517|   726k|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|   726k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   726k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|   726k|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 726k]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|   726k|        auto res = read_at_position();
 4526|   726k|        SCN_EXPECT(res);
  ------------------
  |  | 1051|   726k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   726k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|   726k|        return parent()->get_character_at(m_position);
 4528|   726k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4386|   726k|    {
 4387|   726k|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|   726k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 394k, False: 332k]
  |  |  ------------------
  ------------------
 4388|   726k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|   394k|            return m_putback_buffer[pos];
 4390|   394k|        }
 4391|   332k|        const auto start = pos - m_putback_buffer.size();
 4392|   332k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1051|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|   332k|        return m_current_view[start];
 4394|   332k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1568|  94.5k|        : base(std::in_place, std::forward<U>(val)),
 1569|  94.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  94.5k|    {
 1571|  94.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  94.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  94.5k|    {
  442|  94.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  95.5k|    {
 1315|  95.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|  1.03k|        : base(unexpect, std::move(e.error())),
 1615|  1.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  1.03k|    {
 1617|  1.03k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.03k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.03k|          m_has_value(false)
  451|  1.03k|    {
  452|  1.03k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4502|   457k|    {
 4503|   457k|        ++m_position;
 4504|   457k|        (void)read_at_position();
 4505|   457k|        return *this;
 4506|   457k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4551|   161k|    {
 4552|   161k|        return !(lhs == rhs);
 4553|   161k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4546|   161k|    {
 4547|   161k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 161k, False: 0]
  |  Branch (4547:46): [True: 23.3k, False: 138k]
  ------------------
 4548|   161k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3482|  1.10M|    {
 3483|  1.10M|        return m_sentinel;
 3484|  1.10M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|   397k|    {
 4569|   397k|        return !x.is_at_end();
 4570|   397k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|  1.03k|        : base(unexpect, std::move(e.error())),
 1615|  1.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  1.03k|    {
 1617|  1.03k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.03k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.03k|          m_has_value(false)
  451|  1.03k|    {
  452|  1.03k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  95.5k|    {
 1315|  95.5k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1568|  94.5k|        : base(std::in_place, std::forward<U>(val)),
 1569|  94.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  94.5k|    {
 1571|  94.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  94.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  94.5k|    {
  442|  94.5k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   191k|    {
  490|   191k|        return m_has_value;
  491|   191k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|  94.5k|    {
 1768|  94.5k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  94.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  94.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  94.5k|        return this->get_value();
 1770|  94.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  94.5k|    {
  456|  94.5k|        return m_value;
  457|  94.5k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|  95.5k|    {
 1978|  95.5k|        return detail::transform_error_impl(std::move(*this),
 1979|  95.5k|                                            std::forward<F>(f));
 1980|  95.5k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|  95.5k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  95.5k|    else {
 1471|  95.5k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  95.5k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  95.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 94.5k, False: 1.03k]
  |  |  ------------------
  ------------------
 1473|  95.5k|                   ? result(*std::forward<Exp>(exp))
 1474|  95.5k|                   : result(unexpect,
 1475|  1.03k|                            trivial_invoke(std::forward<F>(f),
 1476|  1.03k|                                           std::forward<Exp>(exp).error()));
 1477|  95.5k|    }
 1478|  95.5k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|  94.5k|    {
 1804|  94.5k|        return std::move(value());
 1805|  94.5k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1754|  1.03k|    {
 1755|  1.03k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  1.03k|        return std::move(this->get_unexpected().error());
 1757|  1.03k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  1.03k|    {
  473|  1.03k|        return m_unexpected;
  474|  1.03k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1624|  1.03k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  1.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  1.03k|    {
 1627|  1.03k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   191k|    {
 2999|   191k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   191k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   191k|    {
 2980|   191k|        return t.data();
 2981|   191k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1793|  46.6k|    {
 1794|  46.6k|        return value();
 1795|  46.6k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2867|  94.5k|    {
 2868|  94.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  94.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  94.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2848|  94.5k|    {
 2849|  94.5k|        return decay_copy(t.begin());
 2850|  94.5k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2092|  94.5k|{
 2093|  94.5k|    return SCN_FWD(t);
  ------------------
  |  | 1057|  94.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  94.5k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3909|  95.5k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|  95.5k|    static_cast<    \
  |  | 1056|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|  95.5k|    {
 3911|  95.5k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3909|  95.5k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|  95.5k|    static_cast<    \
  |  | 1056|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|  95.5k|    {
 3911|  95.5k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4355|  5.31M|    {
 4356|  5.31M|        return m_putback_buffer.size() + m_current_view.size();
 4357|  5.31M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6193|   177k|    {
 6194|   177k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 6195|      0|            return max_size();
 6196|      0|        }
 6197|       |
 6198|   177k|        return static_cast<std::size_t>(m_desc &
 6199|   177k|                                        ((1 << detail::packed_arg_bits) - 1));
 6200|   177k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6219|   354k|    {
 6220|   354k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6221|   354k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6161|   177k|    {
 6162|   177k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 6163|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6164|      0|                return m_args[id];
 6165|      0|            }
 6166|      0|            return {};
 6167|      0|        }
 6168|       |
 6169|   177k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  986|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 6170|      0|            return {};
 6171|      0|        }
 6172|       |
 6173|   177k|        const auto t = type(id);
 6174|   177k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  986|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 6175|      0|            return {};
 6176|      0|        }
 6177|       |
 6178|   177k|        basic_scan_arg<Context> arg;
 6179|   177k|        arg.m_type = t;
 6180|   177k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 177k]
  ------------------
 6181|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6182|      0|        }
 6183|   177k|        else {
 6184|   177k|            arg.m_value = m_values[id];
 6185|   177k|        }
 6186|   177k|        return arg;
 6187|   177k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6228|   177k|    {
 6229|       |        // First (0th) index is size, types start after that
 6230|   177k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6231|   177k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6232|   177k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6233|   177k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6223|   177k|    {
 6224|   177k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6225|   177k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5977|   359k|    {
 5978|   359k|        return m_type != detail::arg_type::none_type;
 5979|   359k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9361|  2.58k|{
 9362|  2.58k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  2.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  2.58k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  2.58k|{
 9251|  2.58k|#define SCN_VISIT(Type)                                                \
 9252|  2.58k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  2.58k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  2.58k|    }                                                                  \
 9255|  2.58k|    else {                                                             \
 9256|  2.58k|        return vis(monostate_val);                                     \
 9257|  2.58k|    }
 9258|       |
 9259|  2.58k|    monostate monostate_val{};
 9260|       |
 9261|  2.58k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 2.58k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 2.58k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 2.58k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 2.58k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 2.58k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 2.58k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 2.58k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 2.58k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 2.58k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 2.58k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 2.58k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 2.58k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 2.58k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 2.58k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 2.58k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 2.58k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 2.58k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 2.58k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 2.58k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 2.58k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 2.58k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 2.58k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 2.58k]
  ------------------
 9315|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9316|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 2.58k]
  ------------------
 9317|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9318|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 2.58k]
  ------------------
 9319|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9320|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 2.58k]
  ------------------
 9321|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9322|       |
 9323|  2.58k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 2.58k, False: 0]
  ------------------
 9324|  2.58k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  2.58k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  2.58k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 2.58k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 2.58k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  2.58k|            SCN_CLANG_POP
 9341|  2.58k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6022|   359k|{
 6023|   359k|    return arg.m_type;
 6024|   359k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6034|   182k|{
 6035|   182k|    return arg.m_value;
 6036|   182k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEi:
 6292|  2.58k|        : m_format{format},
 6293|  2.58k|          m_next_arg_id{next_arg_id},
 6294|  2.58k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  2.58k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  2.58k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  2.58k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  2.58k|    {
 6300|  2.58k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2ENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEl:
 4459|  83.5k|        : m_begin(const_cast<CharT*>(view.data())),
 4460|  83.5k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4461|  83.5k|          m_position(pos)
 4462|  83.5k|    {
 4463|  83.5k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8962|   182k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1055|   182k|    static_cast<    \
  |  | 1056|   182k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8963|   182k|    {
 8964|   182k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handle4scanERNS0_24basic_scan_parse_contextIcEERS5_:
 5955|   182k|        {
 5956|   182k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5957|   182k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handleC2ENS3_17custom_value_typeE:
 5960|   182k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4689|   179k|{
 4690|   179k|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 80.9k, False: 98.9k]
  ------------------
 4691|  80.9k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|  80.9k|                                ranges::default_sentinel};
 4693|  80.9k|    }
 4694|  98.9k|    return ranges::subrange{forward_iterator{this, 0},
 4695|  98.9k|                            ranges::default_sentinel};
 4696|   179k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4452|  98.9k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|  98.9k|    {
 4454|  98.9k|        SCN_EXPECT(parent);
  ------------------
  |  | 1051|  98.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  98.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|  98.9k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1051|  98.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  98.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  98.9k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9361|  2.58k|{
 9362|  2.58k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  2.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  2.58k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  2.58k|{
 9251|  2.58k|#define SCN_VISIT(Type)                                                \
 9252|  2.58k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  2.58k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  2.58k|    }                                                                  \
 9255|  2.58k|    else {                                                             \
 9256|  2.58k|        return vis(monostate_val);                                     \
 9257|  2.58k|    }
 9258|       |
 9259|  2.58k|    monostate monostate_val{};
 9260|       |
 9261|  2.58k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 2.58k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 2.58k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 2.58k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 2.58k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 2.58k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 2.58k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 2.58k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 2.58k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 2.58k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 2.58k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 2.58k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 2.58k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 2.58k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 2.58k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 2.58k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 2.58k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 2.58k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 2.58k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 2.58k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 2.58k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 2.58k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 2.58k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 2.58k]
  ------------------
 9315|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9316|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 2.58k]
  ------------------
 9317|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9318|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 2.58k]
  ------------------
 9319|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9320|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 2.58k]
  ------------------
 9321|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9322|       |
 9323|  2.58k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 2.58k, False: 0]
  ------------------
 9324|  2.58k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  2.58k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  2.58k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 2.58k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 2.58k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  2.58k|            SCN_CLANG_POP
 9341|  2.58k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSH_11char_traitsIcEEEEi:
 6292|  2.58k|        : m_format{format},
 6293|  2.58k|          m_next_arg_id{next_arg_id},
 6294|  2.58k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  2.58k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  2.58k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  2.58k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  2.58k|    {
 6300|  2.58k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6292|  80.9k|        : m_format{format},
 6293|  80.9k|          m_next_arg_id{next_arg_id},
 6294|  80.9k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  80.9k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  80.9k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  80.9k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  80.9k|    {
 6300|  80.9k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|  80.9k|    {
 3074|  80.9k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  80.9k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3039|  80.9k|    {
 3040|  80.9k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  80.9k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|  80.9k|{
 7809|  80.9k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|  80.9k|    handler.check_args_exhausted();
 7811|  80.9k|    return handler.get_error();
 7812|  80.9k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|  80.9k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|  80.9k|    auto begin = format.data();
 7777|  80.9k|    auto it = begin;
 7778|  80.9k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   125k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 80.9k, False: 44.8k]
  ------------------
 7781|  80.9k|        const auto ch = *it++;
 7782|  80.9k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 80.9k, False: 0]
  ------------------
 7783|  80.9k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|  80.9k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|  80.9k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 36.1k, False: 44.8k]
  ------------------
 7787|  36.1k|                return;
 7788|  36.1k|            }
 7789|  80.9k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|  80.9k|    }
 7800|       |
 7801|  44.8k|    handler.on_literal_text(begin, end);
 7802|  44.8k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7705|  80.9k|{
 7706|  80.9k|    struct id_adapter {
 7707|  80.9k|        constexpr void operator()()
 7708|  80.9k|        {
 7709|  80.9k|            arg_id = handler.on_arg_id();
 7710|  80.9k|        }
 7711|  80.9k|        constexpr void operator()(std::size_t id)
 7712|  80.9k|        {
 7713|  80.9k|            arg_id = handler.on_arg_id(id);
 7714|  80.9k|        }
 7715|       |
 7716|  80.9k|        constexpr void on_error(const char* msg)
 7717|  80.9k|        {
 7718|  80.9k|            SCN_UNLIKELY_ATTR
 7719|  80.9k|            handler.on_error(msg);
 7720|  80.9k|        }
 7721|       |
 7722|  80.9k|        Handler& handler;
 7723|  80.9k|        std::size_t arg_id;
 7724|  80.9k|    };
 7725|       |
 7726|  80.9k|    ++begin;
 7727|  80.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 80.9k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|  80.9k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 80.9k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|  80.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 80.9k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|  80.9k|    else {
 7739|  80.9k|        auto adapter = id_adapter{handler, 0};
 7740|  80.9k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|  80.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 80.9k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|  80.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 80.9k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|  80.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 80.9k, False: 0]
  ------------------
 7751|  80.9k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 80.9k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|  80.9k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|  80.9k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 80.9k]
  |  |  |  Branch (986:45): [True: 0, False: 80.9k]
  |  |  |  Branch (986:45): [True: 0, False: 80.9k]
  |  |  ------------------
  ------------------
 7757|      0|                handler.on_error("Unknown format specifier");
 7758|      0|                return begin;
 7759|      0|            }
 7760|  80.9k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|  80.9k|    }
 7767|  80.9k|    return begin + 1;
 7768|  80.9k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8861|   177k|    {
 8862|   177k|        return m_args.get(id);
 8863|   177k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6327|   177k|    {
 6328|   177k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  986|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 6329|      0|            on_error(
 6330|      0|                "Cannot switch from manual to automatic argument indexing");
 6331|      0|            return 0;
 6332|      0|        }
 6333|       |
 6334|   177k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6335|   177k|        do_check_arg_id(id);
 6336|   177k|        return id;
 6337|   177k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6821|   177k|{
 6822|   177k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6822:9): [Folded - Ignored]
  ------------------
 6823|   177k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6823:10): [Folded - Ignored]
  |  Branch (6823:22): [Folded - Ignored]
  ------------------
 6824|       |        // The cast below will cause an error on gcc pre-12
 6825|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6826|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6826:13): [True: 0, False: 0]
  ------------------
 6827|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6828|      0|            SCN_UNLIKELY_ATTR
 6829|      0|            on_error("Argument not found");
 6830|      0|        }
 6831|      0|    }
 6832|   177k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|  80.9k|{
 7207|  80.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  80.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  80.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|  80.9k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 80.9k, False: 0]
  |  Branch (7208:26): [True: 0, False: 80.9k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|  80.9k|    handler();
 7213|  80.9k|    return begin;
 7214|  80.9k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|  80.9k|        {
 7709|  80.9k|            arg_id = handler.on_arg_id();
 7710|  80.9k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9361|   177k|{
 9362|   177k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   177k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   177k|{
 9251|   177k|#define SCN_VISIT(Type)                                                \
 9252|   177k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   177k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   177k|    }                                                                  \
 9255|   177k|    else {                                                             \
 9256|   177k|        return vis(monostate_val);                                     \
 9257|   177k|    }
 9258|       |
 9259|   177k|    monostate monostate_val{};
 9260|       |
 9261|   177k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 177k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 177k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 177k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 177k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 177k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 177k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 177k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 177k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 177k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 177k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 177k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 177k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 177k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 177k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 177k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 177k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 177k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 177k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 177k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 177k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 177k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 177k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 177k]
  ------------------
 9315|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9316|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 177k]
  ------------------
 9317|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9318|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 177k]
  ------------------
 9319|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9320|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 177k]
  ------------------
 9321|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9322|       |
 9323|   177k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 177k, False: 0]
  ------------------
 9324|   177k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   177k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   177k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 177k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 177k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   177k|            SCN_CLANG_POP
 9341|   177k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4715|  80.9k|        : base(typename base::contiguous_tag{}, sv)
 4716|  80.9k|    {
 4717|  80.9k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4420|  80.9k|        : m_current_view(sv), m_is_contiguous(true)
 4421|  80.9k|    {
 4422|  80.9k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   161k|    {
 2999|   161k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   161k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2989|   161k|    {
 2990|   161k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  | 1057|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2991|   161k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   161k|    {
 2868|   161k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   161k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   161k|    {
 2849|   161k|        return decay_copy(t.begin());
 2850|   161k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3073|  80.9k|    {
 3074|  80.9k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  80.9k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3039|  80.9k|    {
 3040|  80.9k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  80.9k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator16batch_advance_toEl:
 4538|  80.9k|    {
 4539|  80.9k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  | 1051|  80.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  80.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4540|  80.9k|        m_position = i;
 4541|  80.9k|        return *this;
 4542|  80.9k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6292|  96.3k|        : m_format{format},
 6293|  96.3k|          m_next_arg_id{next_arg_id},
 6294|  96.3k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  96.3k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  96.3k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  96.3k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  96.3k|    {
 6300|  96.3k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|  96.3k|{
 7809|  96.3k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|  96.3k|    handler.check_args_exhausted();
 7811|  96.3k|    return handler.get_error();
 7812|  96.3k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|  96.3k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|  96.3k|    auto begin = format.data();
 7777|  96.3k|    auto it = begin;
 7778|  96.3k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   156k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 96.3k, False: 60.2k]
  ------------------
 7781|  96.3k|        const auto ch = *it++;
 7782|  96.3k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 96.3k, False: 0]
  ------------------
 7783|  96.3k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|  96.3k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|  96.3k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 36.1k, False: 60.2k]
  ------------------
 7787|  36.1k|                return;
 7788|  36.1k|            }
 7789|  96.3k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|  96.3k|    }
 7800|       |
 7801|  60.2k|    handler.on_literal_text(begin, end);
 7802|  60.2k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7705|  96.3k|{
 7706|  96.3k|    struct id_adapter {
 7707|  96.3k|        constexpr void operator()()
 7708|  96.3k|        {
 7709|  96.3k|            arg_id = handler.on_arg_id();
 7710|  96.3k|        }
 7711|  96.3k|        constexpr void operator()(std::size_t id)
 7712|  96.3k|        {
 7713|  96.3k|            arg_id = handler.on_arg_id(id);
 7714|  96.3k|        }
 7715|       |
 7716|  96.3k|        constexpr void on_error(const char* msg)
 7717|  96.3k|        {
 7718|  96.3k|            SCN_UNLIKELY_ATTR
 7719|  96.3k|            handler.on_error(msg);
 7720|  96.3k|        }
 7721|       |
 7722|  96.3k|        Handler& handler;
 7723|  96.3k|        std::size_t arg_id;
 7724|  96.3k|    };
 7725|       |
 7726|  96.3k|    ++begin;
 7727|  96.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 96.3k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|  96.3k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 96.3k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|  96.3k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 96.3k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|  96.3k|    else {
 7739|  96.3k|        auto adapter = id_adapter{handler, 0};
 7740|  96.3k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|  96.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 96.3k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|  96.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 96.3k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|  96.3k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 96.3k, False: 0]
  ------------------
 7751|  96.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 96.3k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|  96.3k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|  96.3k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 96.3k]
  |  |  |  Branch (986:45): [True: 0, False: 96.3k]
  |  |  |  Branch (986:45): [True: 0, False: 96.3k]
  |  |  ------------------
  ------------------
 7757|      0|                handler.on_error("Unknown format specifier");
 7758|      0|                return begin;
 7759|      0|            }
 7760|  96.3k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|  96.3k|    }
 7767|  96.3k|    return begin + 1;
 7768|  96.3k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|  96.3k|{
 7207|  96.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  96.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  96.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|  96.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 96.3k, False: 0]
  |  Branch (7208:26): [True: 0, False: 96.3k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|  96.3k|    handler();
 7213|  96.3k|    return begin;
 7214|  96.3k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|  96.3k|        {
 7709|  96.3k|            arg_id = handler.on_arg_id();
 7710|  96.3k|        }
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4350|  38.7k|    {
 4351|  38.7k|        return sync(0);
 4352|  38.7k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6193|   191k|    {
 6194|   191k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 191k]
  |  |  ------------------
  ------------------
 6195|      0|            return max_size();
 6196|      0|        }
 6197|       |
 6198|   191k|        return static_cast<std::size_t>(m_desc &
 6199|   191k|                                        ((1 << detail::packed_arg_bits) - 1));
 6200|   191k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6219|   382k|    {
 6220|   382k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6221|   382k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6161|   191k|    {
 6162|   191k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 191k]
  |  |  ------------------
  ------------------
 6163|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6164|      0|                return m_args[id];
 6165|      0|            }
 6166|      0|            return {};
 6167|      0|        }
 6168|       |
 6169|   191k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 191k]
  |  |  ------------------
  ------------------
 6170|      0|            return {};
 6171|      0|        }
 6172|       |
 6173|   191k|        const auto t = type(id);
 6174|   191k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 191k]
  |  |  ------------------
  ------------------
 6175|      0|            return {};
 6176|      0|        }
 6177|       |
 6178|   191k|        basic_scan_arg<Context> arg;
 6179|   191k|        arg.m_type = t;
 6180|   191k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 191k]
  ------------------
 6181|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6182|      0|        }
 6183|   191k|        else {
 6184|   191k|            arg.m_value = m_values[id];
 6185|   191k|        }
 6186|   191k|        return arg;
 6187|   191k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6228|   191k|    {
 6229|       |        // First (0th) index is size, types start after that
 6230|   191k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6231|   191k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6232|   191k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6233|   191k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6223|   191k|    {
 6224|   191k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6225|   191k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5977|   392k|    {
 5978|   392k|        return m_type != detail::arg_type::none_type;
 5979|   392k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9361|  5.16k|{
 9362|  5.16k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  5.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  5.16k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  5.16k|{
 9251|  5.16k|#define SCN_VISIT(Type)                                                \
 9252|  5.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  5.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  5.16k|    }                                                                  \
 9255|  5.16k|    else {                                                             \
 9256|  5.16k|        return vis(monostate_val);                                     \
 9257|  5.16k|    }
 9258|       |
 9259|  5.16k|    monostate monostate_val{};
 9260|       |
 9261|  5.16k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 5.16k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 5.16k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 5.16k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 5.16k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 5.16k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 5.16k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 5.16k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 5.16k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 5.16k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 5.16k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 5.16k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 5.16k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 5.16k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 5.16k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 5.16k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 5.16k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 5.16k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 5.16k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 5.16k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 5.16k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 5.16k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 5.16k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 5.16k]
  ------------------
 9315|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9316|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 5.16k]
  ------------------
 9317|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9318|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 5.16k]
  ------------------
 9319|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9320|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 5.16k]
  ------------------
 9321|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9322|       |
 9323|  5.16k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 5.16k, False: 0]
  ------------------
 9324|  5.16k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  5.16k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  5.16k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 5.16k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 5.16k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  5.16k|            SCN_CLANG_POP
 9341|  5.16k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6022|   392k|{
 6023|   392k|    return arg.m_type;
 6024|   392k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6034|   201k|{
 6035|   201k|    return arg.m_value;
 6036|   201k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEi:
 6292|  5.16k|        : m_format{format},
 6293|  5.16k|          m_next_arg_id{next_arg_id},
 6294|  5.16k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  5.16k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  5.16k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  5.16k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  5.16k|    {
 6300|  5.16k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2ENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEl:
 4459|   100k|        : m_begin(const_cast<CharT*>(view.data())),
 4460|   100k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4461|   100k|          m_position(pos)
 4462|   100k|    {
 4463|   100k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8962|   201k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1055|   201k|    static_cast<    \
  |  | 1056|   201k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8963|   201k|    {
 8964|   201k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handle4scanERNS0_24basic_scan_parse_contextIwEERS5_:
 5955|   201k|        {
 5956|   201k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5957|   201k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handleC2ENS3_17custom_value_typeE:
 5960|   201k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6292|  95.5k|        : m_format{format},
 6293|  95.5k|          m_next_arg_id{next_arg_id},
 6294|  95.5k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  95.5k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  95.5k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  95.5k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  95.5k|    {
 6300|  95.5k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|  95.5k|    {
 3074|  95.5k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  95.5k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3039|  95.5k|    {
 3040|  95.5k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  95.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  95.5k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|  95.5k|{
 7809|  95.5k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|  95.5k|    handler.check_args_exhausted();
 7811|  95.5k|    return handler.get_error();
 7812|  95.5k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|  95.5k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|  95.5k|    auto begin = format.data();
 7777|  95.5k|    auto it = begin;
 7778|  95.5k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   118k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 95.5k, False: 23.3k]
  ------------------
 7781|  95.5k|        const auto ch = *it++;
 7782|  95.5k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 95.5k, False: 0]
  ------------------
 7783|  95.5k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|  95.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|  95.5k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 72.2k, False: 23.3k]
  ------------------
 7787|  72.2k|                return;
 7788|  72.2k|            }
 7789|  95.5k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|  95.5k|    }
 7800|       |
 7801|  23.3k|    handler.on_literal_text(begin, end);
 7802|  23.3k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7705|  95.5k|{
 7706|  95.5k|    struct id_adapter {
 7707|  95.5k|        constexpr void operator()()
 7708|  95.5k|        {
 7709|  95.5k|            arg_id = handler.on_arg_id();
 7710|  95.5k|        }
 7711|  95.5k|        constexpr void operator()(std::size_t id)
 7712|  95.5k|        {
 7713|  95.5k|            arg_id = handler.on_arg_id(id);
 7714|  95.5k|        }
 7715|       |
 7716|  95.5k|        constexpr void on_error(const char* msg)
 7717|  95.5k|        {
 7718|  95.5k|            SCN_UNLIKELY_ATTR
 7719|  95.5k|            handler.on_error(msg);
 7720|  95.5k|        }
 7721|       |
 7722|  95.5k|        Handler& handler;
 7723|  95.5k|        std::size_t arg_id;
 7724|  95.5k|    };
 7725|       |
 7726|  95.5k|    ++begin;
 7727|  95.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 95.5k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|  95.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 95.5k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|  95.5k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 95.5k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|  95.5k|    else {
 7739|  95.5k|        auto adapter = id_adapter{handler, 0};
 7740|  95.5k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|  95.5k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 95.5k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|  95.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 95.5k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|  95.5k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 95.5k, False: 0]
  ------------------
 7751|  95.5k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 95.5k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|  95.5k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|  95.5k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 95.5k]
  |  |  |  Branch (986:45): [True: 0, False: 95.5k]
  |  |  |  Branch (986:45): [True: 0, False: 95.5k]
  |  |  ------------------
  ------------------
 7757|      0|                handler.on_error("Unknown format specifier");
 7758|      0|                return begin;
 7759|      0|            }
 7760|  95.5k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|  95.5k|    }
 7767|  95.5k|    return begin + 1;
 7768|  95.5k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8861|   191k|    {
 8862|   191k|        return m_args.get(id);
 8863|   191k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6327|   191k|    {
 6328|   191k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 191k]
  |  |  ------------------
  ------------------
 6329|      0|            on_error(
 6330|      0|                "Cannot switch from manual to automatic argument indexing");
 6331|      0|            return 0;
 6332|      0|        }
 6333|       |
 6334|   191k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6335|   191k|        do_check_arg_id(id);
 6336|   191k|        return id;
 6337|   191k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6821|   191k|{
 6822|   191k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6822:9): [Folded - Ignored]
  ------------------
 6823|   191k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6823:10): [Folded - Ignored]
  |  Branch (6823:22): [Folded - Ignored]
  ------------------
 6824|       |        // The cast below will cause an error on gcc pre-12
 6825|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6826|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6826:13): [True: 0, False: 0]
  ------------------
 6827|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6828|      0|            SCN_UNLIKELY_ATTR
 6829|      0|            on_error("Argument not found");
 6830|      0|        }
 6831|      0|    }
 6832|   191k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|  95.5k|{
 7207|  95.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  95.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  95.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|  95.5k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 95.5k, False: 0]
  |  Branch (7208:26): [True: 0, False: 95.5k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|  95.5k|    handler();
 7213|  95.5k|    return begin;
 7214|  95.5k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|  95.5k|        {
 7709|  95.5k|            arg_id = handler.on_arg_id();
 7710|  95.5k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9361|   191k|{
 9362|   191k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   191k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   191k|{
 9251|   191k|#define SCN_VISIT(Type)                                                \
 9252|   191k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   191k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   191k|    }                                                                  \
 9255|   191k|    else {                                                             \
 9256|   191k|        return vis(monostate_val);                                     \
 9257|   191k|    }
 9258|       |
 9259|   191k|    monostate monostate_val{};
 9260|       |
 9261|   191k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 191k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 191k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 191k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 191k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 191k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 191k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 191k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 191k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 191k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 191k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 191k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 191k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 191k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 191k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 191k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 191k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 191k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 191k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 191k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 191k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 191k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 191k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 191k]
  ------------------
 9315|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9316|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 191k]
  ------------------
 9317|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9318|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 191k]
  ------------------
 9319|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9320|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 191k]
  ------------------
 9321|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9322|       |
 9323|   191k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 191k, False: 0]
  ------------------
 9324|   191k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   191k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   191k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 191k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 191k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   191k|            SCN_CLANG_POP
 9341|   191k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4715|  95.5k|        : base(typename base::contiguous_tag{}, sv)
 4716|  95.5k|    {
 4717|  95.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4420|  95.5k|        : m_current_view(sv), m_is_contiguous(true)
 4421|  95.5k|    {
 4422|  95.5k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   191k|    {
 2999|   191k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   191k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2989|   191k|    {
 2990|   191k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  | 1057|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2991|   191k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   191k|    {
 2868|   191k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   191k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   191k|    {
 2849|   191k|        return decay_copy(t.begin());
 2850|   191k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3073|  95.5k|    {
 3074|  95.5k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  95.5k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3039|  95.5k|    {
 3040|  95.5k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  95.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  95.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4689|   196k|{
 4690|   196k|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 95.5k, False: 100k]
  ------------------
 4691|  95.5k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|  95.5k|                                ranges::default_sentinel};
 4693|  95.5k|    }
 4694|   100k|    return ranges::subrange{forward_iterator{this, 0},
 4695|   100k|                            ranges::default_sentinel};
 4696|   196k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4452|   100k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|   100k|    {
 4454|   100k|        SCN_EXPECT(parent);
  ------------------
  |  | 1051|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|   100k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1051|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   100k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator16batch_advance_toEl:
 4538|  95.5k|    {
 4539|  95.5k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  | 1051|  95.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  95.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4540|  95.5k|        m_position = i;
 4541|  95.5k|        return *this;
 4542|  95.5k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9361|  5.16k|{
 9362|  5.16k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  5.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  5.16k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  5.16k|{
 9251|  5.16k|#define SCN_VISIT(Type)                                                \
 9252|  5.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  5.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  5.16k|    }                                                                  \
 9255|  5.16k|    else {                                                             \
 9256|  5.16k|        return vis(monostate_val);                                     \
 9257|  5.16k|    }
 9258|       |
 9259|  5.16k|    monostate monostate_val{};
 9260|       |
 9261|  5.16k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 5.16k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 5.16k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 5.16k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 5.16k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 5.16k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 5.16k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 5.16k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 5.16k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 5.16k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 5.16k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 5.16k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 5.16k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 5.16k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 5.16k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 5.16k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 5.16k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 5.16k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 5.16k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 5.16k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 5.16k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 5.16k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 5.16k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 5.16k]
  ------------------
 9315|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9316|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 5.16k]
  ------------------
 9317|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9318|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 5.16k]
  ------------------
 9319|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9320|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 5.16k]
  ------------------
 9321|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9322|       |
 9323|  5.16k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 5.16k, False: 0]
  ------------------
 9324|  5.16k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  5.16k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  5.16k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 5.16k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 5.16k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  5.16k|            SCN_CLANG_POP
 9341|  5.16k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSH_11char_traitsIwEEEEi:
 6292|  5.16k|        : m_format{format},
 6293|  5.16k|          m_next_arg_id{next_arg_id},
 6294|  5.16k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  5.16k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  5.16k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  5.16k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  5.16k|    {
 6300|  5.16k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6292|  95.5k|        : m_format{format},
 6293|  95.5k|          m_next_arg_id{next_arg_id},
 6294|  95.5k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  95.5k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  95.5k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  95.5k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  95.5k|    {
 6300|  95.5k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|  95.5k|{
 7809|  95.5k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|  95.5k|    handler.check_args_exhausted();
 7811|  95.5k|    return handler.get_error();
 7812|  95.5k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|  95.5k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|  95.5k|    auto begin = format.data();
 7777|  95.5k|    auto it = begin;
 7778|  95.5k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   118k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 95.5k, False: 23.3k]
  ------------------
 7781|  95.5k|        const auto ch = *it++;
 7782|  95.5k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 95.5k, False: 0]
  ------------------
 7783|  95.5k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|  95.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|  95.5k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 72.2k, False: 23.3k]
  ------------------
 7787|  72.2k|                return;
 7788|  72.2k|            }
 7789|  95.5k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|  95.5k|    }
 7800|       |
 7801|  23.3k|    handler.on_literal_text(begin, end);
 7802|  23.3k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7705|  95.5k|{
 7706|  95.5k|    struct id_adapter {
 7707|  95.5k|        constexpr void operator()()
 7708|  95.5k|        {
 7709|  95.5k|            arg_id = handler.on_arg_id();
 7710|  95.5k|        }
 7711|  95.5k|        constexpr void operator()(std::size_t id)
 7712|  95.5k|        {
 7713|  95.5k|            arg_id = handler.on_arg_id(id);
 7714|  95.5k|        }
 7715|       |
 7716|  95.5k|        constexpr void on_error(const char* msg)
 7717|  95.5k|        {
 7718|  95.5k|            SCN_UNLIKELY_ATTR
 7719|  95.5k|            handler.on_error(msg);
 7720|  95.5k|        }
 7721|       |
 7722|  95.5k|        Handler& handler;
 7723|  95.5k|        std::size_t arg_id;
 7724|  95.5k|    };
 7725|       |
 7726|  95.5k|    ++begin;
 7727|  95.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 95.5k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|  95.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 95.5k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|  95.5k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 95.5k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|  95.5k|    else {
 7739|  95.5k|        auto adapter = id_adapter{handler, 0};
 7740|  95.5k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|  95.5k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 95.5k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|  95.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 95.5k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|  95.5k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 95.5k, False: 0]
  ------------------
 7751|  95.5k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 95.5k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|  95.5k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|  95.5k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 95.5k]
  |  |  |  Branch (986:45): [True: 0, False: 95.5k]
  |  |  |  Branch (986:45): [True: 0, False: 95.5k]
  |  |  ------------------
  ------------------
 7757|      0|                handler.on_error("Unknown format specifier");
 7758|      0|                return begin;
 7759|      0|            }
 7760|  95.5k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|  95.5k|    }
 7767|  95.5k|    return begin + 1;
 7768|  95.5k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|  95.5k|{
 7207|  95.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  95.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  95.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|  95.5k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 95.5k, False: 0]
  |  Branch (7208:26): [True: 0, False: 95.5k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|  95.5k|    handler();
 7213|  95.5k|    return begin;
 7214|  95.5k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|  95.5k|        {
 7709|  95.5k|            arg_id = handler.on_arg_id();
 7710|  95.5k|        }
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4350|  77.4k|    {
 4351|  77.4k|        return sync(0);
 4352|  77.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6147|  5.16k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6147|  10.3k|    constexpr basic_scan_args() = default;
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2924|  99.4k|    {
 2925|  99.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  99.4k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2906|  99.4k|    {
 2907|  99.4k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  99.4k|    }
_ZN3scn2v46ranges6detail10decay_copyINS1_18default_sentinel_tEEEu7__decayIT_EOS5_:
 2092|   192k|{
 2093|   192k|    return SCN_FWD(t);
  ------------------
  |  | 1057|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|   192k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
 4531|  44.8k|    {
 4532|  44.8k|        SCN_EXPECT(n >= 0);
  ------------------
  |  | 1051|  44.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  44.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4533|  44.8k|        m_position += n;
 4534|  44.8k|        return *this;
 4535|  44.8k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2924|  93.2k|    {
 2925|  93.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  93.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  93.2k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2906|  93.2k|    {
 2907|  93.2k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  93.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  93.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
 4531|  23.3k|    {
 4532|  23.3k|        SCN_EXPECT(n >= 0);
  ------------------
  |  | 1051|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4533|  23.3k|        m_position += n;
 4534|  23.3k|        return *this;
 4535|  23.3k|    }

_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.9k|{
   89|  15.9k|    auto result = make_scan_result<Source, Args...>();
   90|  15.9k|    fill_scan_result(result,
   91|  15.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.9k|    return result;
   94|  15.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  47.7k|{
   44|  47.7k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1057|  47.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  47.7k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.9k|{
  131|  15.9k|    auto result = make_scan_result<Source, Args...>();
  132|  15.9k|    fill_scan_result(result,
  133|  15.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.9k|    return result;
  136|  15.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  47.7k|{
   60|  47.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1057|  47.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  47.7k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.72k|{
  171|  1.72k|    auto result = make_scan_result<Source, T>();
  172|  1.72k|    fill_scan_result(
  173|  1.72k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.72k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.72k|    return result;
  176|  1.72k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  5.16k|{
   72|  5.16k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1057|  5.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  5.16k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.9k|{
   89|  15.9k|    auto result = make_scan_result<Source, Args...>();
   90|  15.9k|    fill_scan_result(result,
   91|  15.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.9k|    return result;
   94|  15.9k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.9k|{
  131|  15.9k|    auto result = make_scan_result<Source, Args...>();
  132|  15.9k|    fill_scan_result(result,
  133|  15.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.9k|    return result;
  136|  15.9k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.72k|{
  171|  1.72k|    auto result = make_scan_result<Source, T>();
  172|  1.72k|    fill_scan_result(
  173|  1.72k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.72k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.72k|    return result;
  176|  1.72k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.9k|{
   89|  15.9k|    auto result = make_scan_result<Source, Args...>();
   90|  15.9k|    fill_scan_result(result,
   91|  15.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.9k|    return result;
   94|  15.9k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.9k|{
  131|  15.9k|    auto result = make_scan_result<Source, Args...>();
  132|  15.9k|    fill_scan_result(result,
  133|  15.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.9k|    return result;
  136|  15.9k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.72k|{
  171|  1.72k|    auto result = make_scan_result<Source, T>();
  172|  1.72k|    fill_scan_result(
  173|  1.72k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.72k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.72k|    return result;
  176|  1.72k|}
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.9k|{
   89|  15.9k|    auto result = make_scan_result<Source, Args...>();
   90|  15.9k|    fill_scan_result(result,
   91|  15.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.9k|    return result;
   94|  15.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  47.7k|{
   44|  47.7k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1057|  47.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  47.7k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.9k|{
  131|  15.9k|    auto result = make_scan_result<Source, Args...>();
  132|  15.9k|    fill_scan_result(result,
  133|  15.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.9k|    return result;
  136|  15.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  47.7k|{
   60|  47.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1057|  47.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  47.7k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.72k|{
  171|  1.72k|    auto result = make_scan_result<Source, T>();
  172|  1.72k|    fill_scan_result(
  173|  1.72k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.72k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.72k|    return result;
  176|  1.72k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  5.16k|{
   72|  5.16k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1057|  5.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  5.16k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.9k|{
   89|  15.9k|    auto result = make_scan_result<Source, Args...>();
   90|  15.9k|    fill_scan_result(result,
   91|  15.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.9k|    return result;
   94|  15.9k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.9k|{
  131|  15.9k|    auto result = make_scan_result<Source, Args...>();
  132|  15.9k|    fill_scan_result(result,
  133|  15.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.9k|    return result;
  136|  15.9k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.72k|{
  171|  1.72k|    auto result = make_scan_result<Source, T>();
  172|  1.72k|    fill_scan_result(
  173|  1.72k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.72k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.72k|    return result;
  176|  1.72k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.9k|{
   89|  15.9k|    auto result = make_scan_result<Source, Args...>();
   90|  15.9k|    fill_scan_result(result,
   91|  15.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.9k|    return result;
   94|  15.9k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.9k|{
  131|  15.9k|    auto result = make_scan_result<Source, Args...>();
  132|  15.9k|    fill_scan_result(result,
  133|  15.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.9k|    return result;
  136|  15.9k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.72k|{
  171|  1.72k|    auto result = make_scan_result<Source, T>();
  172|  1.72k|    fill_scan_result(
  173|  1.72k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.72k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.72k|    return result;
  176|  1.72k|}

_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  96.3k|{
  250|  96.3k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  96.3k|        .transform_error(impl::make_eof_scan_error);
  252|  96.3k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  95.5k|{
  250|  95.5k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  95.5k|        .transform_error(impl::make_eof_scan_error);
  252|  95.5k|}
_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   184k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   184k|{
  309|   184k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   184k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2179|  40.4k|{
 2180|  40.4k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2181|  40.4k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2187|  48.1k|{
 2188|  48.1k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2189|  48.1k|    return sync_after_vscan(source, n);
 2190|  48.1k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2197|  47.7k|{
 2198|  47.7k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2199|  47.7k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2205|  47.7k|{
 2206|  47.7k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2207|  47.7k|    return sync_after_vscan(source, n);
 2208|  47.7k|}
_ZN3scn2v46detail16chrono_scan_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3872|  59.1k|{
 3873|  59.1k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3873:9): [True: 32.1k, False: 26.9k]
  ------------------
 3874|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3875|  32.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3876|  32.1k|    }
 3877|       |
 3878|  26.9k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3879|  26.9k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3880|  26.9k|    auto begin = contiguous_ctx.begin();
 3881|  26.9k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3939|  26.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  26.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  26.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12.0k, False: 14.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  12.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  12.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  12.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  12.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.0k|    }                                                  \
  |  |  |  | 3938|  26.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3882|  14.9k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3883|  26.9k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3872|  59.1k|{
 3873|  59.1k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3873:9): [True: 32.1k, False: 26.9k]
  ------------------
 3874|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3875|  32.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3876|  32.1k|    }
 3877|       |
 3878|  26.9k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3879|  26.9k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3880|  26.9k|    auto begin = contiguous_ctx.begin();
 3881|  26.9k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3939|  26.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  26.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  26.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12.0k, False: 14.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  12.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  12.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  12.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  12.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.0k|    }                                                  \
  |  |  |  | 3938|  26.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3882|  14.9k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3883|  26.9k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3872|  59.1k|{
 3873|  59.1k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3873:9): [True: 32.1k, False: 26.9k]
  ------------------
 3874|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3875|  32.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3876|  32.1k|    }
 3877|       |
 3878|  26.9k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3879|  26.9k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3880|  26.9k|    auto begin = contiguous_ctx.begin();
 3881|  26.9k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3939|  26.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  26.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  26.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12.0k, False: 14.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  12.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  12.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  12.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  12.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.0k|    }                                                  \
  |  |  |  | 3938|  26.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3882|  14.9k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3883|  26.9k|}
_ZN3scn2v46detail16chrono_scan_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3872|  63.7k|{
 3873|  63.7k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3873:9): [True: 31.8k, False: 31.8k]
  ------------------
 3874|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3875|  31.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3876|  31.8k|    }
 3877|       |
 3878|  31.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3879|  31.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3880|  31.8k|    auto begin = contiguous_ctx.begin();
 3881|  31.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3939|  31.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  31.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  31.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 24.0k, False: 7.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  24.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  24.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  24.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  24.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  24.0k|    }                                                  \
  |  |  |  | 3938|  31.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3882|  7.77k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3883|  31.8k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3872|  63.7k|{
 3873|  63.7k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3873:9): [True: 31.8k, False: 31.8k]
  ------------------
 3874|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3875|  31.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3876|  31.8k|    }
 3877|       |
 3878|  31.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3879|  31.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3880|  31.8k|    auto begin = contiguous_ctx.begin();
 3881|  31.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3939|  31.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  31.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  31.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 24.0k, False: 7.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  24.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  24.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  24.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  24.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  24.0k|    }                                                  \
  |  |  |  | 3938|  31.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3882|  7.77k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3883|  31.8k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3872|  63.7k|{
 3873|  63.7k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3873:9): [True: 31.8k, False: 31.8k]
  ------------------
 3874|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3875|  31.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3876|  31.8k|    }
 3877|       |
 3878|  31.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3879|  31.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3880|  31.8k|    auto begin = contiguous_ctx.begin();
 3881|  31.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3939|  31.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  31.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  31.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 24.0k, False: 7.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  24.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  24.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  24.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  24.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  24.0k|    }                                                  \
  |  |  |  | 3938|  31.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3882|  7.77k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3883|  31.8k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   177k|{
  215|   177k|    return find_classic_impl(
  216|   177k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   177k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   177k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|  15.4k|{
  329|  15.4k|    SCN_UNLIKELY_ATTR
  330|  15.4k|    return e;
  331|  15.4k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2148|  40.4k|{
 2149|  40.4k|    return vscan_internal(source, format, args);
 2150|  40.4k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2154|  48.1k|{
 2155|  48.1k|    auto n = vscan_internal(source, format, args);
 2156|  48.1k|    return sync_after_vscan(source, n);
 2157|  48.1k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2162|  47.7k|{
 2163|  47.7k|    return vscan_internal(source, format, args);
 2164|  47.7k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2168|  47.7k|{
 2169|  47.7k|    auto n = vscan_internal(source, format, args);
 2170|  47.7k|    return sync_after_vscan(source, n);
 2171|  47.7k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2234|  2.58k|{
 2235|  2.58k|    return vscan_value_internal(source, arg);
 2236|  2.58k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2239|  2.58k|{
 2240|  2.58k|    auto n = vscan_value_internal(source, arg);
 2241|  2.58k|    return sync_after_vscan(source, n);
 2242|  2.58k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2247|  5.16k|{
 2248|  5.16k|    return vscan_value_internal(source, arg);
 2249|  5.16k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2253|  5.16k|{
 2254|  5.16k|    auto n = vscan_value_internal(source, arg);
 2255|  5.16k|    return sync_after_vscan(source, n);
 2256|  5.16k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  86.1k|{
  118|  86.1k|    static_assert(sizeof(*source.data()) == 1);
  119|  86.1k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1051|  86.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  86.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  86.1k|    uint64_t word{};
  121|  86.1k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  86.1k|    return has_byte_greater(word, 127) != 0;
  124|  86.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   177k|{
  131|   177k|    auto it = source.begin();
  132|       |
  133|   183k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 86.1k, False: 97.1k]
  ------------------
  134|  86.1k|        auto sv =
  135|  86.1k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  86.1k|                .substr(0, 8);
  137|       |
  138|  86.1k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 74.2k, False: 11.9k]
  ------------------
  139|  74.2k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  74.2k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  74.2k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 69.5k, False: 4.63k]
  ------------------
  142|  69.5k|                break;
  143|  69.5k|            }
  144|  4.63k|            continue;
  145|  74.2k|        }
  146|       |
  147|  17.9k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 16.5k, False: 1.36k]
  ------------------
  148|  16.5k|            auto tmp =
  149|  16.5k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  16.5k|            auto res = get_next_code_point(tmp);
  151|  16.5k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 10.6k, False: 5.92k]
  ------------------
  152|  10.6k|                return it;
  153|  10.6k|            }
  154|  5.92k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  5.92k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  5.92k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1052|  5.92k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|  5.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  5.92k|        }
  158|  11.9k|    }
  159|       |
  160|   166k|    return detail::make_string_view_iterator(source, it);
  161|   177k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   162k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  16.5k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2045|  96.3k|{
 2046|  96.3k|    const auto argcount = args.size();
 2047|  96.3k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2047:9): [True: 0, False: 96.3k]
  |  Branch (2047:60): [True: 0, False: 0]
  ------------------
 2048|      0|        auto arg = args.get(0);
 2049|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2050|      0|    }
 2051|       |
 2052|  96.3k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2052:9): [True: 0, False: 96.3k]
  ------------------
 2053|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2054|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2056|      0|        return vscan_parse_format_string(format, handler);
 2057|      0|    }
 2058|       |
 2059|  96.3k|    SCN_UNLIKELY_ATTR
 2060|  96.3k|    {
 2061|  96.3k|        auto handler = format_handler<false, CharT>{
 2062|  96.3k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  96.3k|    static_cast<    \
  |  | 1056|  96.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  96.3k|    static_cast<    \
  |  | 1056|  96.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  96.3k|        return vscan_parse_format_string(format, handler);
 2064|  96.3k|    }
 2065|  96.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1593|   177k|{
 1594|   177k|    if (format.size() != 2) {
  ------------------
  |  Branch (1594:9): [True: 177k, False: 0]
  ------------------
 1595|   177k|        return false;
 1596|   177k|    }
 1597|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1597:12): [True: 0, False: 0]
  |  Branch (1597:39): [True: 0, False: 0]
  ------------------
 1598|   177k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1626|  2.58k|{
 1627|  2.58k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  2.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 2.58k]
  |  |  ------------------
  ------------------
 1628|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1629|      0|                                             "Argument #0 not found");
 1630|      0|    }
 1631|       |
 1632|  2.58k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  985|  2.58k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 2.58k]
  |  |  ------------------
  ------------------
 1633|      0|        auto reader = impl::default_arg_reader<
 1634|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1635|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1636|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1637|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1638|      0|    }
 1639|       |
 1640|  2.58k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1641|  2.58k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1055|  2.58k|    static_cast<    \
  |  | 1056|  2.58k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1642|  2.58k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|  2.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  2.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  2.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  2.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.58k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.58k|    }                                                  \
  |  |  |  | 3938|  2.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1643|      0|    return it.position();
 1644|  2.58k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1869|  80.9k|        : format_handler_base{argcount},
 1870|  80.9k|          parse_ctx{source_tag<Source&&>, format},
 1871|  80.9k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  80.9k|    static_cast<    \
  |  | 1056|  80.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  80.9k|    static_cast<    \
  |  | 1056|  80.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|  80.9k|    {
 1873|  80.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1687|   368k|    format_handler_base(size_t argcount) : args_count(argcount)
 1688|   368k|    {
 1689|   368k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  986|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 368k]
  |  |  ------------------
  ------------------
 1690|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1691|      0|        }
 1692|   368k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1820|  80.9k|        : contiguous_ctx(source, args, loc)
 1821|  80.9k|    {
 1822|  80.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|  80.9k|{
 2011|  80.9k|    const auto beg = handler.get_ctx().begin();
 2012|  80.9k|    detail::parse_format_string<false>(format, handler);
 2013|  80.9k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 36.1k, False: 44.8k]
  |  |  ------------------
  ------------------
 2014|  36.1k|        return unexpected(err.error());
 2015|  36.1k|    }
 2016|  44.8k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|  80.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1994|   251k|    {
 1995|   251k|        return ctx.get();
 1996|   251k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1825|   251k|    {
 1826|   251k|        return contiguous_ctx;
 1827|   251k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1876|   125k|    {
 1877|   125k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 125k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   125k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1736|   216k|    {
 1737|   216k|        error = unexpected(err);
 1738|   216k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1648|  80.9k|{
 1649|  80.9k|    auto arg = ctx.arg(id);
 1650|  80.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 80.9k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|  80.9k|    return arg;
 1654|  80.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1762|   368k|    {
 1763|   368k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  986|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 368k]
  |  |  ------------------
  ------------------
 1764|      0|            on_error({scan_error::invalid_format_string,
 1765|      0|                      "Argument ID out-of-range"});
 1766|      0|            return;
 1767|      0|        }
 1768|       |
 1769|   368k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  986|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 368k]
  |  |  ------------------
  ------------------
 1770|      0|            on_error({scan_error::invalid_format_string,
 1771|      0|                      "Argument with this ID has already been scanned"});
 1772|      0|        }
 1773|       |
 1774|   368k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  985|   368k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 368k, False: 0]
  |  |  ------------------
  ------------------
 1775|   368k|            visited_args_lower64 |= (1ull << id);
 1776|   368k|            return;
 1777|   368k|        }
 1778|       |
 1779|      0|        id -= 64;
 1780|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1781|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1746|   368k|    {
 1747|   368k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  986|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 368k]
  |  |  ------------------
  ------------------
 1748|      0|            on_error({scan_error::invalid_format_string,
 1749|      0|                      "Argument ID out-of-range"});
 1750|      0|            return false;
 1751|      0|        }
 1752|       |
 1753|   368k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  985|   368k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 368k, False: 0]
  |  |  ------------------
  ------------------
 1754|   368k|            return (visited_args_lower64 >> id) & 1ull;
 1755|   368k|        }
 1756|       |
 1757|      0|        id -= 64;
 1758|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1759|   368k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1916|  80.9k|    {
 1917|  80.9k|        return parse_ctx.next_arg_id();
 1918|  80.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1956|  80.9k|    {
 1957|  80.9k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|  80.9k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|  80.9k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 80.9k, False: 0]
  ------------------
 1961|  80.9k|            parse_ctx.advance_to(begin);
 1962|  80.9k|            on_visit_scan_arg(
 1963|  80.9k|                impl::custom_reader<detail::default_context<char_type>>{
 1964|  80.9k|                    parse_ctx, get_custom_ctx()},
 1965|  80.9k|                arg);
 1966|  80.9k|            return parse_ctx.begin();
 1967|  80.9k|        }
 1968|       |
 1969|      0|        auto specs = detail::format_specs{};
 1970|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|      0|            detail::get_arg_type(arg)};
 1973|       |
 1974|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1975|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 0]
  |  Branch (1975:29): [True: 0, False: 0]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1982|      0|            return parse_ctx.begin();
 1983|      0|        }
 1984|      0|        parse_ctx.advance_to(begin);
 1985|       |
 1986|      0|        on_visit_scan_arg(
 1987|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|      0|                                           get_ctx().locale()},
 1989|      0|            arg);
 1990|      0|        return parse_ctx.begin();
 1991|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1927|  80.9k|    {
 1928|  80.9k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 80.9k]
  |  Branch (1928:13): [True: 0, False: 80.9k]
  |  Branch (1928:29): [True: 0, False: 80.9k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|  80.9k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|  80.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 36.1k, False: 44.8k]
  |  |  ------------------
  ------------------
 1935|  36.1k|            on_error(r.error());
 1936|  36.1k|        }
 1937|  44.8k|        else {
 1938|  44.8k|            get_ctx().advance_to(*r);
 1939|  44.8k|        }
 1940|  80.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE14get_custom_ctxEv:
 1998|  80.9k|    {
 1999|  80.9k|        return ctx.get_custom();
 2000|  80.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE10get_customEv:
 1829|  80.9k|    {
 1830|  80.9k|        if (!buffer) {
  ------------------
  |  Branch (1830:13): [True: 80.9k, False: 0]
  ------------------
 1831|  80.9k|            buffer.emplace(detail::make_string_view_from_pointers(
 1832|  80.9k|                ranges::data(contiguous_ctx.underlying_range()),
 1833|  80.9k|                ranges::data(contiguous_ctx.underlying_range()) +
 1834|  80.9k|                    ranges::size(contiguous_ctx.underlying_range())));
 1835|  80.9k|        }
 1836|  80.9k|        auto it = buffer->get().begin();
 1837|  80.9k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1838|  80.9k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1839|  80.9k|        return *custom_ctx;
 1840|  80.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1695|   368k|    {
 1696|   368k|        {
 1697|   368k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1697:45): [True: 0, False: 368k]
  ------------------
 1698|   368k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1698:35): [True: 0, False: 368k]
  ------------------
 1699|   368k|                                      ? std::numeric_limits<uint64_t>::max()
 1700|   368k|                                      : (1ull << args_count_lower64) - 1;
 1701|       |
 1702|   368k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1702:17): [True: 0, False: 368k]
  ------------------
 1703|      0|                return on_error({scan_error::invalid_format_string,
 1704|      0|                                 "Argument list not exhausted"});
 1705|      0|            }
 1706|   368k|        }
 1707|       |
 1708|   368k|        if (args_count < 64) {
  ------------------
  |  Branch (1708:13): [True: 368k, False: 0]
  ------------------
 1709|   368k|            return;
 1710|   368k|        }
 1711|       |
 1712|      0|        auto last_args_count = args_count - 64;
 1713|      0|        for (auto it = visited_args_upper.begin();
 1714|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1714:14): [True: 0, False: 0]
  ------------------
 1715|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1715:17): [True: 0, False: 0]
  ------------------
 1716|      0|                return on_error({scan_error::invalid_format_string,
 1717|      0|                                 "Argument list not exhausted"});
 1718|      0|            }
 1719|      0|            last_args_count -= 8;
 1720|      0|        }
 1721|       |
 1722|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1723|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1723:13): [True: 0, False: 0]
  ------------------
 1724|      0|            return on_error({scan_error::invalid_format_string,
 1725|      0|                             "Argument list not exhausted"});
 1726|      0|        }
 1727|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1741|  1.47M|    {
 1742|  1.47M|        return error;
 1743|  1.47M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1869|  96.3k|        : format_handler_base{argcount},
 1870|  96.3k|          parse_ctx{source_tag<Source&&>, format},
 1871|  96.3k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|  96.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  96.3k|    static_cast<    \
  |  | 1056|  96.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  96.3k|    static_cast<    \
  |  | 1056|  96.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|  96.3k|    {
 1873|  96.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1796|  96.3k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1055|  96.3k|    static_cast<    \
  |  | 1056|  96.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1797|  96.3k|    {
 1798|  96.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|  96.3k|{
 2011|  96.3k|    const auto beg = handler.get_ctx().begin();
 2012|  96.3k|    detail::parse_format_string<false>(format, handler);
 2013|  96.3k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 36.1k, False: 60.2k]
  |  |  ------------------
  ------------------
 2014|  36.1k|        return unexpected(err.error());
 2015|  36.1k|    }
 2016|  60.2k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|  96.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1994|   313k|    {
 1995|   313k|        return ctx.get();
 1996|   313k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1801|   313k|    {
 1802|   313k|        return ctx;
 1803|   313k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1876|   156k|    {
 1877|   156k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 156k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1648|  96.3k|{
 1649|  96.3k|    auto arg = ctx.arg(id);
 1650|  96.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 96.3k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|  96.3k|    return arg;
 1654|  96.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1916|  96.3k|    {
 1917|  96.3k|        return parse_ctx.next_arg_id();
 1918|  96.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1956|  96.3k|    {
 1957|  96.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|  96.3k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|  96.3k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 96.3k, False: 0]
  ------------------
 1961|  96.3k|            parse_ctx.advance_to(begin);
 1962|  96.3k|            on_visit_scan_arg(
 1963|  96.3k|                impl::custom_reader<detail::default_context<char_type>>{
 1964|  96.3k|                    parse_ctx, get_custom_ctx()},
 1965|  96.3k|                arg);
 1966|  96.3k|            return parse_ctx.begin();
 1967|  96.3k|        }
 1968|       |
 1969|      0|        auto specs = detail::format_specs{};
 1970|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|      0|            detail::get_arg_type(arg)};
 1973|       |
 1974|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1975|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 0]
  |  Branch (1975:29): [True: 0, False: 0]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1982|      0|            return parse_ctx.begin();
 1983|      0|        }
 1984|      0|        parse_ctx.advance_to(begin);
 1985|       |
 1986|      0|        on_visit_scan_arg(
 1987|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|      0|                                           get_ctx().locale()},
 1989|      0|            arg);
 1990|      0|        return parse_ctx.begin();
 1991|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1927|  96.3k|    {
 1928|  96.3k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 96.3k]
  |  Branch (1928:13): [True: 0, False: 96.3k]
  |  Branch (1928:29): [True: 0, False: 96.3k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|  96.3k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|  96.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|  96.3k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 36.1k, False: 60.2k]
  |  |  ------------------
  ------------------
 1935|  36.1k|            on_error(r.error());
 1936|  36.1k|        }
 1937|  60.2k|        else {
 1938|  60.2k|            get_ctx().advance_to(*r);
 1939|  60.2k|        }
 1940|  96.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE14get_custom_ctxEv:
 1998|  96.3k|    {
 1999|  96.3k|        return ctx.get_custom();
 2000|  96.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE10get_customEv:
 1805|  96.3k|    {
 1806|  96.3k|        return ctx;
 1807|  96.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2025|  80.9k|{
 2026|  80.9k|    const auto argcount = args.size();
 2027|  80.9k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2027:9): [True: 0, False: 80.9k]
  |  Branch (2027:60): [True: 0, False: 0]
  ------------------
 2028|      0|        auto arg = args.get(0);
 2029|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2030|      0|    }
 2031|       |
 2032|  80.9k|    auto handler = format_handler<true, CharT>{
 2033|  80.9k|        ranges::subrange<const CharT*>{source.data(),
 2034|  80.9k|                                       source.data() + source.size()},
 2035|  80.9k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  80.9k|    static_cast<    \
  |  | 1056|  80.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  80.9k|    static_cast<    \
  |  | 1056|  80.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2036|  80.9k|    return vscan_parse_format_string(format, handler);
 2037|  80.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1606|  2.58k|{
 1607|  2.58k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  2.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 2.58k]
  |  |  ------------------
  ------------------
 1608|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1609|      0|                                             "Argument #0 not found");
 1610|      0|    }
 1611|       |
 1612|  2.58k|    auto reader =
 1613|  2.58k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1614|  2.58k|            ranges::subrange<const CharT*>{source.data(),
 1615|  2.58k|                                           source.data() + source.size()},
 1616|  2.58k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1055|  2.58k|    static_cast<    \
  |  | 1056|  2.58k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1617|  2.58k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|  2.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  2.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  2.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  2.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.58k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.58k|    }                                                  \
  |  |  |  | 3938|  2.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1618|      0|    return ranges::distance(source.data(), it);
 1619|  2.58k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2125|  98.9k|{
 2126|  98.9k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  985|  98.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 60.2k, False: 38.7k]
  |  |  ------------------
  ------------------
 2127|  60.2k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  986|  60.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 60.2k]
  |  |  ------------------
  ------------------
 2128|      0|            return detail::unexpected_scan_error(
 2129|      0|                scan_error::invalid_source_state,
 2130|      0|                "Failed to sync with underlying source");
 2131|      0|        }
 2132|  60.2k|    }
 2133|  38.7k|    else {
 2134|  38.7k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  986|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 38.7k]
  |  |  ------------------
  ------------------
 2135|      0|            return detail::unexpected_scan_error(
 2136|      0|                scan_error::invalid_source_state,
 2137|      0|                "Failed to sync with underlying source");
 2138|      0|        }
 2139|  38.7k|    }
 2140|  98.9k|    return result;
 2141|  98.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2025|  95.5k|{
 2026|  95.5k|    const auto argcount = args.size();
 2027|  95.5k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2027:9): [True: 0, False: 95.5k]
  |  Branch (2027:60): [True: 0, False: 0]
  ------------------
 2028|      0|        auto arg = args.get(0);
 2029|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2030|      0|    }
 2031|       |
 2032|  95.5k|    auto handler = format_handler<true, CharT>{
 2033|  95.5k|        ranges::subrange<const CharT*>{source.data(),
 2034|  95.5k|                                       source.data() + source.size()},
 2035|  95.5k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  95.5k|    static_cast<    \
  |  | 1056|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  95.5k|    static_cast<    \
  |  | 1056|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2036|  95.5k|    return vscan_parse_format_string(format, handler);
 2037|  95.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1593|   191k|{
 1594|   191k|    if (format.size() != 2) {
  ------------------
  |  Branch (1594:9): [True: 191k, False: 0]
  ------------------
 1595|   191k|        return false;
 1596|   191k|    }
 1597|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1597:12): [True: 0, False: 0]
  |  Branch (1597:39): [True: 0, False: 0]
  ------------------
 1598|   191k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1606|  5.16k|{
 1607|  5.16k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  5.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 5.16k]
  |  |  ------------------
  ------------------
 1608|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1609|      0|                                             "Argument #0 not found");
 1610|      0|    }
 1611|       |
 1612|  5.16k|    auto reader =
 1613|  5.16k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1614|  5.16k|            ranges::subrange<const CharT*>{source.data(),
 1615|  5.16k|                                           source.data() + source.size()},
 1616|  5.16k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1055|  5.16k|    static_cast<    \
  |  | 1056|  5.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1617|  5.16k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|  5.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  5.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  5.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  5.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 5.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  5.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  5.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.16k|    }                                                  \
  |  |  |  | 3938|  5.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1618|      0|    return ranges::distance(source.data(), it);
 1619|  5.16k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1869|  95.5k|        : format_handler_base{argcount},
 1870|  95.5k|          parse_ctx{source_tag<Source&&>, format},
 1871|  95.5k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|  95.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  95.5k|    static_cast<    \
  |  | 1056|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  95.5k|    static_cast<    \
  |  | 1056|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|  95.5k|    {
 1873|  95.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1820|  95.5k|        : contiguous_ctx(source, args, loc)
 1821|  95.5k|    {
 1822|  95.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|  95.5k|{
 2011|  95.5k|    const auto beg = handler.get_ctx().begin();
 2012|  95.5k|    detail::parse_format_string<false>(format, handler);
 2013|  95.5k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 72.2k, False: 23.3k]
  |  |  ------------------
  ------------------
 2014|  72.2k|        return unexpected(err.error());
 2015|  72.2k|    }
 2016|  23.3k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|  95.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1994|   237k|    {
 1995|   237k|        return ctx.get();
 1996|   237k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1825|   237k|    {
 1826|   237k|        return contiguous_ctx;
 1827|   237k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1876|   118k|    {
 1877|   118k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 118k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   118k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1648|  95.5k|{
 1649|  95.5k|    auto arg = ctx.arg(id);
 1650|  95.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 95.5k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|  95.5k|    return arg;
 1654|  95.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1916|  95.5k|    {
 1917|  95.5k|        return parse_ctx.next_arg_id();
 1918|  95.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1956|  95.5k|    {
 1957|  95.5k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|  95.5k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|  95.5k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 95.5k, False: 0]
  ------------------
 1961|  95.5k|            parse_ctx.advance_to(begin);
 1962|  95.5k|            on_visit_scan_arg(
 1963|  95.5k|                impl::custom_reader<detail::default_context<char_type>>{
 1964|  95.5k|                    parse_ctx, get_custom_ctx()},
 1965|  95.5k|                arg);
 1966|  95.5k|            return parse_ctx.begin();
 1967|  95.5k|        }
 1968|       |
 1969|      0|        auto specs = detail::format_specs{};
 1970|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|      0|            detail::get_arg_type(arg)};
 1973|       |
 1974|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1975|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 0]
  |  Branch (1975:29): [True: 0, False: 0]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1982|      0|            return parse_ctx.begin();
 1983|      0|        }
 1984|      0|        parse_ctx.advance_to(begin);
 1985|       |
 1986|      0|        on_visit_scan_arg(
 1987|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|      0|                                           get_ctx().locale()},
 1989|      0|            arg);
 1990|      0|        return parse_ctx.begin();
 1991|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1927|  95.5k|    {
 1928|  95.5k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 95.5k]
  |  Branch (1928:13): [True: 0, False: 95.5k]
  |  Branch (1928:29): [True: 0, False: 95.5k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|  95.5k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|  95.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|  95.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 72.2k, False: 23.3k]
  |  |  ------------------
  ------------------
 1935|  72.2k|            on_error(r.error());
 1936|  72.2k|        }
 1937|  23.3k|        else {
 1938|  23.3k|            get_ctx().advance_to(*r);
 1939|  23.3k|        }
 1940|  95.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE14get_custom_ctxEv:
 1998|  95.5k|    {
 1999|  95.5k|        return ctx.get_custom();
 2000|  95.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE10get_customEv:
 1829|  95.5k|    {
 1830|  95.5k|        if (!buffer) {
  ------------------
  |  Branch (1830:13): [True: 95.5k, False: 0]
  ------------------
 1831|  95.5k|            buffer.emplace(detail::make_string_view_from_pointers(
 1832|  95.5k|                ranges::data(contiguous_ctx.underlying_range()),
 1833|  95.5k|                ranges::data(contiguous_ctx.underlying_range()) +
 1834|  95.5k|                    ranges::size(contiguous_ctx.underlying_range())));
 1835|  95.5k|        }
 1836|  95.5k|        auto it = buffer->get().begin();
 1837|  95.5k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1838|  95.5k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1839|  95.5k|        return *custom_ctx;
 1840|  95.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2045|  95.5k|{
 2046|  95.5k|    const auto argcount = args.size();
 2047|  95.5k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2047:9): [True: 0, False: 95.5k]
  |  Branch (2047:60): [True: 0, False: 0]
  ------------------
 2048|      0|        auto arg = args.get(0);
 2049|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2050|      0|    }
 2051|       |
 2052|  95.5k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2052:9): [True: 0, False: 95.5k]
  ------------------
 2053|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2054|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2056|      0|        return vscan_parse_format_string(format, handler);
 2057|      0|    }
 2058|       |
 2059|  95.5k|    SCN_UNLIKELY_ATTR
 2060|  95.5k|    {
 2061|  95.5k|        auto handler = format_handler<false, CharT>{
 2062|  95.5k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  95.5k|    static_cast<    \
  |  | 1056|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  95.5k|    static_cast<    \
  |  | 1056|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  95.5k|        return vscan_parse_format_string(format, handler);
 2064|  95.5k|    }
 2065|  95.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1626|  5.16k|{
 1627|  5.16k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  5.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 5.16k]
  |  |  ------------------
  ------------------
 1628|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1629|      0|                                             "Argument #0 not found");
 1630|      0|    }
 1631|       |
 1632|  5.16k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  985|  5.16k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 5.16k]
  |  |  ------------------
  ------------------
 1633|      0|        auto reader = impl::default_arg_reader<
 1634|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1635|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1636|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1637|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1638|      0|    }
 1639|       |
 1640|  5.16k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1641|  5.16k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1055|  5.16k|    static_cast<    \
  |  | 1056|  5.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1642|  5.16k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|  5.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  5.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  5.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  5.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 5.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  5.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  5.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.16k|    }                                                  \
  |  |  |  | 3938|  5.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1643|      0|    return it.position();
 1644|  5.16k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1869|  95.5k|        : format_handler_base{argcount},
 1870|  95.5k|          parse_ctx{source_tag<Source&&>, format},
 1871|  95.5k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|  95.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  95.5k|    static_cast<    \
  |  | 1056|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  95.5k|    static_cast<    \
  |  | 1056|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|  95.5k|    {
 1873|  95.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1796|  95.5k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1055|  95.5k|    static_cast<    \
  |  | 1056|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1797|  95.5k|    {
 1798|  95.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|  95.5k|{
 2011|  95.5k|    const auto beg = handler.get_ctx().begin();
 2012|  95.5k|    detail::parse_format_string<false>(format, handler);
 2013|  95.5k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 72.2k, False: 23.3k]
  |  |  ------------------
  ------------------
 2014|  72.2k|        return unexpected(err.error());
 2015|  72.2k|    }
 2016|  23.3k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|  95.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1994|   237k|    {
 1995|   237k|        return ctx.get();
 1996|   237k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1801|   237k|    {
 1802|   237k|        return ctx;
 1803|   237k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1876|   118k|    {
 1877|   118k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 118k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   118k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1648|  95.5k|{
 1649|  95.5k|    auto arg = ctx.arg(id);
 1650|  95.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 95.5k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|  95.5k|    return arg;
 1654|  95.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1916|  95.5k|    {
 1917|  95.5k|        return parse_ctx.next_arg_id();
 1918|  95.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1956|  95.5k|    {
 1957|  95.5k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|  95.5k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|  95.5k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 95.5k, False: 0]
  ------------------
 1961|  95.5k|            parse_ctx.advance_to(begin);
 1962|  95.5k|            on_visit_scan_arg(
 1963|  95.5k|                impl::custom_reader<detail::default_context<char_type>>{
 1964|  95.5k|                    parse_ctx, get_custom_ctx()},
 1965|  95.5k|                arg);
 1966|  95.5k|            return parse_ctx.begin();
 1967|  95.5k|        }
 1968|       |
 1969|      0|        auto specs = detail::format_specs{};
 1970|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|      0|            detail::get_arg_type(arg)};
 1973|       |
 1974|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1975|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 0]
  |  Branch (1975:29): [True: 0, False: 0]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1982|      0|            return parse_ctx.begin();
 1983|      0|        }
 1984|      0|        parse_ctx.advance_to(begin);
 1985|       |
 1986|      0|        on_visit_scan_arg(
 1987|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|      0|                                           get_ctx().locale()},
 1989|      0|            arg);
 1990|      0|        return parse_ctx.begin();
 1991|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1927|  95.5k|    {
 1928|  95.5k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 95.5k]
  |  Branch (1928:13): [True: 0, False: 95.5k]
  |  Branch (1928:29): [True: 0, False: 95.5k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|  95.5k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|  95.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|  95.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 72.2k, False: 23.3k]
  |  |  ------------------
  ------------------
 1935|  72.2k|            on_error(r.error());
 1936|  72.2k|        }
 1937|  23.3k|        else {
 1938|  23.3k|            get_ctx().advance_to(*r);
 1939|  23.3k|        }
 1940|  95.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE14get_custom_ctxEv:
 1998|  95.5k|    {
 1999|  95.5k|        return ctx.get_custom();
 2000|  95.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE10get_customEv:
 1805|  95.5k|    {
 1806|  95.5k|        return ctx;
 1807|  95.5k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2125|   100k|{
 2126|   100k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  985|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 23.3k, False: 77.4k]
  |  |  ------------------
  ------------------
 2127|  23.3k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  986|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 23.3k]
  |  |  ------------------
  ------------------
 2128|      0|            return detail::unexpected_scan_error(
 2129|      0|                scan_error::invalid_source_state,
 2130|      0|                "Failed to sync with underlying source");
 2131|      0|        }
 2132|  23.3k|    }
 2133|  77.4k|    else {
 2134|  77.4k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  986|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 77.4k]
  |  |  ------------------
  ------------------
 2135|      0|            return detail::unexpected_scan_error(
 2136|      0|                scan_error::invalid_source_state,
 2137|      0|                "Failed to sync with underlying source");
 2138|      0|        }
 2139|  77.4k|    }
 2140|   100k|    return result;
 2141|   100k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2071|  2.58k|{
 2072|  2.58k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  2.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  2.58k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2071|  2.58k|{
 2072|  2.58k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  2.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  2.58k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2071|  5.16k|{
 2072|  5.16k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  5.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  5.16k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2071|  5.16k|{
 2072|  5.16k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  5.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  5.16k|}
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3853|  32.1k|{
 3854|  32.1k|    {
 3855|  32.1k|        SCN_TRY(it,
  ------------------
  |  | 3939|  32.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  32.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  32.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 522, False: 31.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    522|    }                                                  \
  |  |  |  | 3938|  32.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  31.6k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  31.6k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  31.6k|    static_cast<    \
  |  | 1056|  31.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  31.6k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  31.6k|        ctx.range(), t, ctx.locale());
 3862|  31.6k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  31.6k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 11.5k, False: 20.0k]
  |  |  ------------------
  ------------------
 3864|  11.5k|        return unexpected(e.error());
 3865|  11.5k|    }
 3866|  20.0k|    return r.get_iterator();
 3867|  31.6k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2997|  31.6k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  31.6k|    static_cast<    \
  |  | 1056|  31.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  31.6k|          m_begin(ranges::begin(m_range)),
 2999|  31.6k|          m_tm(t),
 3000|  31.6k|          m_loc(loc)
 3001|  31.6k|    {
 3002|  31.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3648|  10.7k|    {
 3649|  10.7k|        set_error({scan_error::invalid_format_string, msg});
 3650|  10.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3653|  45.7k|    {
 3654|  45.7k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 11.5k, False: 34.2k]
  ------------------
 3655|  11.5k|            m_error = unexpected(e);
 3656|  11.5k|        }
 3657|  45.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3005|  33.1k|    {
 3006|  55.3k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 33.1k, False: 22.2k]
  ------------------
 3007|  33.1k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 214, False: 32.9k]
  ------------------
 3008|    214|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    214|            }
 3010|  32.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 10.7k, False: 22.2k]
  ------------------
 3011|  10.7k|                return on_error("Invalid literal character");
 3012|  10.7k|            }
 3013|  22.2k|            ++beg;
 3014|  22.2k|            ++m_begin;
 3015|  22.2k|        }
 3016|  33.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3035|  3.63k|    {
 3036|  3.63k|#if !SCN_DISABLE_LOCALE
 3037|  3.63k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 3.63k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  3.63k|#endif
 3044|       |
 3045|  3.63k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  3.63k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  3.63k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  3.63k|    {
 2509|  3.63k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.63k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  3.63k|        t.tm_year = y - 1900;
 2514|  3.63k|        st.set_full_year(h);
 2515|  3.63k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3671|  56.8k|    {
 3672|  56.8k|        int digits_read = 0;
 3673|  56.8k|        int accumulator = 0;
 3674|  98.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 98.3k, False: 434]
  ------------------
 3675|  98.3k|            const auto ch = *m_begin;
 3676|  98.3k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 29.3k, False: 68.9k]
  |  Branch (3676:36): [True: 18.1k, False: 50.8k]
  ------------------
 3677|  47.5k|                break;
 3678|  47.5k|            }
 3679|  50.8k|            ++m_begin;
 3680|  50.8k|            ++digits_read;
 3681|  50.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  50.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 8.87k, False: 41.9k]
  ------------------
 3683|  8.87k|                break;
 3684|  8.87k|            }
 3685|  50.8k|        }
 3686|  56.8k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 17.1k, False: 39.7k]
  ------------------
 3687|  17.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  17.1k|                                 "Too few integer digits"});
 3689|  17.1k|            return -1;
 3690|  17.1k|        }
 3691|  39.7k|        return accumulator;
 3692|  56.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3049|  6.25k|    {
 3050|  6.25k|#if !SCN_DISABLE_LOCALE
 3051|  6.25k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 6.25k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  6.25k|#endif
 3059|       |
 3060|  6.25k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  6.25k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  6.25k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  6.25k|    {
 2526|  6.25k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.62k, False: 4.63k]
  |  |  |  Branch (986:45): [True: 1.62k, False: 4.63k]
  |  |  |  Branch (986:45): [True: 0, False: 4.63k]
  |  |  ------------------
  ------------------
 2527|  1.62k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  1.62k|                                "Invalid value for tm_year"});
 2529|  1.62k|        }
 2530|  4.63k|        st.short_year_value = y;
 2531|  4.63k|        st.set_short_year(h);
 2532|  4.63k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3092|  4.64k|    {
 3093|  4.64k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.64k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.64k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.64k|#endif
 3101|       |
 3102|  4.64k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.64k|            {"January", 1},
 3104|  4.64k|            {"February", 2},
 3105|  4.64k|            {"March", 3},
 3106|  4.64k|            {"April", 4},
 3107|  4.64k|            {"May", 5},
 3108|  4.64k|            {"June", 6},
 3109|  4.64k|            {"July", 7},
 3110|  4.64k|            {"August", 8},
 3111|  4.64k|            {"September", 9},
 3112|  4.64k|            {"October", 10},
 3113|  4.64k|            {"November", 11},
 3114|  4.64k|            {"December", 12},
 3115|  4.64k|        }};
 3116|  4.64k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 76, False: 4.56k]
  ------------------
 3117|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     76|        }
 3119|  4.56k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.56k|            {"Jan", 1},
 3121|  4.56k|            {"Feb", 2},
 3122|  4.56k|            {"Mar", 3},
 3123|  4.56k|            {"Apr", 4},
 3124|  4.56k|            {"Jun", 6},
 3125|  4.56k|            {"Jul", 7},
 3126|  4.56k|            {"Aug", 8},
 3127|  4.56k|            {"Sep", 9},
 3128|  4.56k|            {"Oct", 10},
 3129|  4.56k|            {"Nov", 11},
 3130|  4.56k|            {"Dec", 12},
 3131|  4.56k|        }};
 3132|  4.56k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 2.92k, False: 1.64k]
  ------------------
 3133|  2.92k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|  2.92k|        }
 3135|  1.64k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  1.64k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  11.3k|    {
 2499|  11.3k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.79k, False: 8.52k]
  |  |  |  Branch (986:45): [True: 2.66k, False: 8.64k]
  |  |  |  Branch (986:45): [True: 122, False: 8.52k]
  |  |  ------------------
  ------------------
 2500|  2.79k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  2.79k|                                "Invalid value for tm_mon"});
 2502|  2.79k|        }
 2503|  8.52k|        t.tm_mon = m - 1;
 2504|  8.52k|        st.set_mon(h);
 2505|  8.52k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.64k|    {
 3710|  4.64k|        auto start_it = m_begin;
 3711|  4.64k|        std::size_t options_available = N;
 3712|  4.64k|        std::size_t chars_consumed = 0;
 3713|  18.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 13.9k, False: 4.50k]
  ------------------
 3714|  18.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 13.9k, False: 76]
  ------------------
 3715|  13.9k|            std::size_t i = 0;
 3716|  13.9k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 66, False: 13.8k]
  ------------------
 3717|     66|                options_available = 0;
 3718|     66|                break;
 3719|     66|            }
 3720|  13.8k|            const auto ch = *m_begin;
 3721|  13.8k|            ++m_begin;
 3722|  85.0k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 71.1k, False: 13.8k]
  ------------------
 3723|  71.1k|                const auto cmp = static_cast<unsigned>(
 3724|  71.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  71.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 71.1k]
  ------------------
 3726|  71.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 58.6k, False: 12.5k]
  |  Branch (3726:34): [True: 55.5k, False: 3.08k]
  ------------------
 3727|  55.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  55.5k|                                options.end());
 3729|  55.5k|                    --options_available;
 3730|  55.5k|                    continue;
 3731|  55.5k|                }
 3732|  15.6k|                ++i;
 3733|  15.6k|            }
 3734|  13.8k|            ++chars_consumed;
 3735|  13.8k|        }
 3736|  4.64k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.56k, False: 76]
  ------------------
 3737|  4.56k|            m_begin = start_it;
 3738|  4.56k|            return std::nullopt;
 3739|  4.56k|        }
 3740|     76|        return options.front().second;
 3741|  4.64k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.56k|    {
 3710|  4.56k|        auto start_it = m_begin;
 3711|  4.56k|        std::size_t options_available = N;
 3712|  4.56k|        std::size_t chars_consumed = 0;
 3713|  15.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 13.6k, False: 1.58k]
  ------------------
 3714|  15.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 10.7k, False: 2.92k]
  ------------------
 3715|  10.7k|            std::size_t i = 0;
 3716|  10.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 58, False: 10.6k]
  ------------------
 3717|     58|                options_available = 0;
 3718|     58|                break;
 3719|     58|            }
 3720|  10.6k|            const auto ch = *m_begin;
 3721|  10.6k|            ++m_begin;
 3722|  67.1k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 56.4k, False: 10.6k]
  ------------------
 3723|  56.4k|                const auto cmp = static_cast<unsigned>(
 3724|  56.4k|                    ch ^ options[i].first[chars_consumed]);
 3725|  56.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 56.4k]
  ------------------
 3726|  56.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.2k, False: 6.16k]
  |  Branch (3726:34): [True: 47.2k, False: 3.00k]
  ------------------
 3727|  47.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  47.2k|                                options.end());
 3729|  47.2k|                    --options_available;
 3730|  47.2k|                    continue;
 3731|  47.2k|                }
 3732|  9.16k|                ++i;
 3733|  9.16k|            }
 3734|  10.6k|            ++chars_consumed;
 3735|  10.6k|        }
 3736|  4.56k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 1.64k, False: 2.92k]
  ------------------
 3737|  1.64k|            m_begin = start_it;
 3738|  1.64k|            return std::nullopt;
 3739|  1.64k|        }
 3740|  2.92k|        return options.front().second;
 3741|  4.56k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3138|  8.30k|    {
 3139|  8.30k|#if !SCN_DISABLE_LOCALE
 3140|  8.30k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 8.30k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  8.30k|#endif
 3147|       |
 3148|  8.30k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  8.30k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  8.30k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3170|  8.28k|    {
 3171|  8.28k|#if !SCN_DISABLE_LOCALE
 3172|  8.28k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 8.28k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  8.28k|#endif
 3179|       |
 3180|  8.28k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  8.28k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  8.28k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  8.28k|    {
 2489|  8.28k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.25k, False: 5.03k]
  |  |  |  Branch (986:45): [True: 3.17k, False: 5.11k]
  |  |  |  Branch (986:45): [True: 80, False: 5.03k]
  |  |  ------------------
  ------------------
 2490|  3.25k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  3.25k|                                "Invalid value for tm_mday"});
 2492|  3.25k|        }
 2493|  5.03k|        t.tm_mday = d;
 2494|  5.03k|        st.set_mday(h);
 2495|  5.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3185|  3.27k|    {
 3186|  3.27k|#if !SCN_DISABLE_LOCALE
 3187|  3.27k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.27k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.27k|#endif
 3194|       |
 3195|  3.27k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.27k|            {"Sunday", 0},
 3197|  3.27k|            {"Monday", 1},
 3198|  3.27k|            {"Tuesday", 2},
 3199|  3.27k|            {"Wednesday", 3},
 3200|  3.27k|            {"Thursday", 4},
 3201|  3.27k|            {"Friday", 5},
 3202|  3.27k|            {"Saturday", 6},
 3203|  3.27k|        }};
 3204|  3.27k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.27k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.27k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.27k|            {"Sun", 0},
 3209|  3.27k|            {"Mon", 1},
 3210|  3.27k|            {"Tue", 2},
 3211|  3.27k|            {"Wed", 3},
 3212|  3.27k|            {"Thu", 4},
 3213|  3.27k|            {"Fri", 5},
 3214|  3.27k|            {"Sat", 6},
 3215|  3.27k|        }};
 3216|  3.27k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 1.61k, False: 1.66k]
  ------------------
 3217|  1.61k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|  1.61k|        }
 3219|  1.66k|        return set_error(
 3220|  1.66k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.27k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2535|  1.61k|    {
 2536|  1.61k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  986|  3.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.61k]
  |  |  |  Branch (986:45): [True: 0, False: 1.61k]
  |  |  |  Branch (986:45): [True: 0, False: 1.61k]
  |  |  ------------------
  ------------------
 2537|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2538|      0|                                "Invalid value for tm_wday"});
 2539|      0|        }
 2540|  1.61k|        t.tm_wday = d;
 2541|  1.61k|        st.set_wday(h);
 2542|  1.61k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  6.55k|    {
 3710|  6.55k|        auto start_it = m_begin;
 3711|  6.55k|        std::size_t options_available = N;
 3712|  6.55k|        std::size_t chars_consumed = 0;
 3713|  21.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 16.8k, False: 4.88k]
  ------------------
 3714|  21.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 15.2k, False: 1.61k]
  ------------------
 3715|  15.2k|            std::size_t i = 0;
 3716|  15.2k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 54, False: 15.2k]
  ------------------
 3717|     54|                options_available = 0;
 3718|     54|                break;
 3719|     54|            }
 3720|  15.2k|            const auto ch = *m_begin;
 3721|  15.2k|            ++m_begin;
 3722|  69.7k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 54.5k, False: 15.2k]
  ------------------
 3723|  54.5k|                const auto cmp = static_cast<unsigned>(
 3724|  54.5k|                    ch ^ options[i].first[chars_consumed]);
 3725|  54.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 54.5k]
  ------------------
 3726|  54.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 44.2k, False: 10.2k]
  |  Branch (3726:34): [True: 44.2k, False: 72]
  ------------------
 3727|  44.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  44.2k|                                options.end());
 3729|  44.2k|                    --options_available;
 3730|  44.2k|                    continue;
 3731|  44.2k|                }
 3732|  10.3k|                ++i;
 3733|  10.3k|            }
 3734|  15.2k|            ++chars_consumed;
 3735|  15.2k|        }
 3736|  6.55k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.93k, False: 1.61k]
  ------------------
 3737|  4.93k|            m_begin = start_it;
 3738|  4.93k|            return std::nullopt;
 3739|  4.93k|        }
 3740|  1.61k|        return options.front().second;
 3741|  6.55k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 3259|  13.8k|    {
 3260|  13.8k|#if !SCN_DISABLE_LOCALE
 3261|  13.8k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 13.8k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  13.8k|#endif
 3268|       |
 3269|  13.8k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  13.8k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  13.8k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  13.8k|    {
 2469|  13.8k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.39k, False: 11.4k]
  |  |  |  Branch (986:45): [True: 2.18k, False: 11.6k]
  |  |  |  Branch (986:45): [True: 208, False: 11.4k]
  |  |  ------------------
  ------------------
 2470|  2.39k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  2.39k|                                  "Invalid value for tm_hour"});
 2472|  2.39k|        }
 2473|  11.4k|        t.tm_hour = h;
 2474|  11.4k|        st.set_hour24(hdl);
 2475|  11.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 3287|  13.7k|    {
 3288|  13.7k|#if !SCN_DISABLE_LOCALE
 3289|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 13.7k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  13.7k|#endif
 3296|       |
 3297|  13.7k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  13.7k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  13.7k|    {
 2459|  13.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  24.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.73k, False: 11.0k]
  |  |  |  Branch (986:45): [True: 2.70k, False: 11.0k]
  |  |  |  Branch (986:45): [True: 26, False: 11.0k]
  |  |  ------------------
  ------------------
 2460|  2.73k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  2.73k|                                "Invalid value for tm_min"});
 2462|  2.73k|        }
 2463|  11.0k|        t.tm_min = m;
 2464|  11.0k|        st.set_min(h);
 2465|  11.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3301|  2.70k|    {
 3302|  2.70k|#if !SCN_DISABLE_LOCALE
 3303|  2.70k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 2.70k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  2.70k|#endif
 3310|       |
 3311|  2.70k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  2.70k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  2.70k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  2.70k|    {
 2449|  2.70k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  3.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.62k, False: 1.08k]
  |  |  |  Branch (986:45): [True: 1.61k, False: 1.08k]
  |  |  |  Branch (986:45): [True: 4, False: 1.08k]
  |  |  ------------------
  ------------------
 2450|  1.62k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  1.62k|                                "Invalid value for tm_sec"});
 2452|  1.62k|        }
 2453|  1.08k|        t.tm_sec = s;
 2454|  1.08k|        st.set_sec(h);
 2455|  1.08k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3543|  6.25k|    {
 3544|       |        // %m/%d/%y
 3545|  6.25k|        constexpr CharT slash = '/';
 3546|  6.25k|        on_dec_month();
 3547|  6.25k|        on_text(&slash, &slash + 1);
 3548|  6.25k|        on_day_of_month();
 3549|  6.25k|        on_text(&slash, &slash + 1);
 3550|  6.25k|        on_short_year();
 3551|  6.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3553|  1.97k|    {
 3554|       |        // %Y-%m-%d
 3555|  1.97k|        constexpr CharT dash = '-';
 3556|  1.97k|        on_full_year();
 3557|  1.97k|        on_text(&dash, &dash + 1);
 3558|  1.97k|        on_dec_month();
 3559|  1.97k|        on_text(&dash, &dash + 1);
 3560|  1.97k|        on_day_of_month();
 3561|  1.97k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3585|  11.0k|    {
 3586|       |        // %H:%M
 3587|  11.0k|        constexpr CharT colon = ':';
 3588|  11.0k|        on_24_hour();
 3589|  11.0k|        on_text(&colon, &colon + 1);
 3590|  11.0k|        on_minute();
 3591|  11.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3593|  2.70k|    {
 3594|       |        // %H:%M:%S
 3595|  2.70k|        constexpr CharT colon = ':';
 3596|  2.70k|        on_24_hour();
 3597|  2.70k|        on_text(&colon, &colon + 1);
 3598|  2.70k|        on_minute();
 3599|  2.70k|        on_text(&colon, &colon + 1);
 3600|  2.70k|        on_second();
 3601|  2.70k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3632|  20.0k|    {
 3633|  20.0k|        m_st.verify(*this);
 3634|  20.0k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 20.0k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  20.0k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 19.7k, False: 314]
  |  Branch (3637:37): [True: 4.61k, False: 15.1k]
  |  Branch (3637:60): [True: 0, False: 15.1k]
  ------------------
 3638|  4.61k|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|  4.61k|        }
 3640|  20.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2586|  9.54k|    {
 2587|  9.54k|        st.handle_short_year_and_century(t.tm_year, 1900);
 2588|  9.54k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3643|  63.4k|    {
 3644|  63.4k|        return m_error;
 3645|  63.4k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3660|  20.0k|    {
 3661|  20.0k|        return m_begin;
 3662|  20.0k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3853|  26.9k|{
 3854|  26.9k|    {
 3855|  26.9k|        SCN_TRY(it,
  ------------------
  |  | 3939|  26.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  26.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  26.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 260, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    260|    }                                                  \
  |  |  |  | 3938|  26.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  26.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  26.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  26.7k|    static_cast<    \
  |  | 1056|  26.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  26.7k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  26.7k|        ctx.range(), t, ctx.locale());
 3862|  26.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  26.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 11.7k, False: 14.9k]
  |  |  ------------------
  ------------------
 3864|  11.7k|        return unexpected(e.error());
 3865|  11.7k|    }
 3866|  14.9k|    return r.get_iterator();
 3867|  26.7k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  80.9k|{
  250|  80.9k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  80.9k|        .transform_error(impl::make_eof_scan_error);
  252|  80.9k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2997|  26.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  26.7k|    static_cast<    \
  |  | 1056|  26.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  26.7k|          m_begin(ranges::begin(m_range)),
 2999|  26.7k|          m_tm(t),
 3000|  26.7k|          m_loc(loc)
 3001|  26.7k|    {
 3002|  26.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3648|  11.0k|    {
 3649|  11.0k|        set_error({scan_error::invalid_format_string, msg});
 3650|  11.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3653|  47.6k|    {
 3654|  47.6k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 11.7k, False: 35.8k]
  ------------------
 3655|  11.7k|            m_error = unexpected(e);
 3656|  11.7k|        }
 3657|  47.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3005|  23.8k|    {
 3006|  36.4k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 23.8k, False: 12.5k]
  ------------------
 3007|  23.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 168, False: 23.6k]
  ------------------
 3008|    168|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    168|            }
 3010|  23.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 11.0k, False: 12.5k]
  ------------------
 3011|  11.0k|                return on_error("Invalid literal character");
 3012|  11.0k|            }
 3013|  12.5k|            ++beg;
 3014|  12.5k|            ++m_begin;
 3015|  12.5k|        }
 3016|  23.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3035|  3.70k|    {
 3036|  3.70k|#if !SCN_DISABLE_LOCALE
 3037|  3.70k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 3.70k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  3.70k|#endif
 3044|       |
 3045|  3.70k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  3.70k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  3.70k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  3.70k|    {
 2509|  3.70k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  3.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.70k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  3.70k|        t.tm_year = y - 1900;
 2514|  3.70k|        st.set_full_year(h);
 2515|  3.70k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3671|  42.6k|    {
 3672|  42.6k|        int digits_read = 0;
 3673|  42.6k|        int accumulator = 0;
 3674|  69.3k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 69.0k, False: 356]
  ------------------
 3675|  69.0k|            const auto ch = *m_begin;
 3676|  69.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 21.1k, False: 47.9k]
  |  Branch (3676:36): [True: 17.0k, False: 30.8k]
  ------------------
 3677|  38.1k|                break;
 3678|  38.1k|            }
 3679|  30.8k|            ++m_begin;
 3680|  30.8k|            ++digits_read;
 3681|  30.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  30.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 4.14k, False: 26.7k]
  ------------------
 3683|  4.14k|                break;
 3684|  4.14k|            }
 3685|  30.8k|        }
 3686|  42.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 17.9k, False: 24.7k]
  ------------------
 3687|  17.9k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  17.9k|                                 "Too few integer digits"});
 3689|  17.9k|            return -1;
 3690|  17.9k|        }
 3691|  24.7k|        return accumulator;
 3692|  42.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3049|  1.82k|    {
 3050|  1.82k|#if !SCN_DISABLE_LOCALE
 3051|  1.82k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 1.82k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  1.82k|#endif
 3059|       |
 3060|  1.82k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  1.82k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  1.82k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  1.82k|    {
 2526|  1.82k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  1.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.67k, False: 146]
  |  |  |  Branch (986:45): [True: 1.67k, False: 146]
  |  |  |  Branch (986:45): [True: 0, False: 146]
  |  |  ------------------
  ------------------
 2527|  1.67k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  1.67k|                                "Invalid value for tm_year"});
 2529|  1.67k|        }
 2530|    146|        st.short_year_value = y;
 2531|    146|        st.set_short_year(h);
 2532|    146|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3092|  4.67k|    {
 3093|  4.67k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.67k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.67k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.67k|#endif
 3101|       |
 3102|  4.67k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.67k|            {"January", 1},
 3104|  4.67k|            {"February", 2},
 3105|  4.67k|            {"March", 3},
 3106|  4.67k|            {"April", 4},
 3107|  4.67k|            {"May", 5},
 3108|  4.67k|            {"June", 6},
 3109|  4.67k|            {"July", 7},
 3110|  4.67k|            {"August", 8},
 3111|  4.67k|            {"September", 9},
 3112|  4.67k|            {"October", 10},
 3113|  4.67k|            {"November", 11},
 3114|  4.67k|            {"December", 12},
 3115|  4.67k|        }};
 3116|  4.67k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 76, False: 4.60k]
  ------------------
 3117|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     76|        }
 3119|  4.60k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.60k|            {"Jan", 1},
 3121|  4.60k|            {"Feb", 2},
 3122|  4.60k|            {"Mar", 3},
 3123|  4.60k|            {"Apr", 4},
 3124|  4.60k|            {"Jun", 6},
 3125|  4.60k|            {"Jul", 7},
 3126|  4.60k|            {"Aug", 8},
 3127|  4.60k|            {"Sep", 9},
 3128|  4.60k|            {"Oct", 10},
 3129|  4.60k|            {"Nov", 11},
 3130|  4.60k|            {"Dec", 12},
 3131|  4.60k|        }};
 3132|  4.60k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 2.92k, False: 1.67k]
  ------------------
 3133|  2.92k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|  2.92k|        }
 3135|  1.67k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  1.67k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  6.89k|    {
 2499|  6.89k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.90k, False: 3.99k]
  |  |  |  Branch (986:45): [True: 2.80k, False: 4.09k]
  |  |  |  Branch (986:45): [True: 102, False: 3.99k]
  |  |  ------------------
  ------------------
 2500|  2.90k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  2.90k|                                "Invalid value for tm_mon"});
 2502|  2.90k|        }
 2503|  3.99k|        t.tm_mon = m - 1;
 2504|  3.99k|        st.set_mon(h);
 2505|  3.99k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.67k|    {
 3710|  4.67k|        auto start_it = m_begin;
 3711|  4.67k|        std::size_t options_available = N;
 3712|  4.67k|        std::size_t chars_consumed = 0;
 3713|  18.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 13.9k, False: 4.54k]
  ------------------
 3714|  18.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 13.9k, False: 76]
  ------------------
 3715|  13.9k|            std::size_t i = 0;
 3716|  13.9k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 60, False: 13.8k]
  ------------------
 3717|     60|                options_available = 0;
 3718|     60|                break;
 3719|     60|            }
 3720|  13.8k|            const auto ch = *m_begin;
 3721|  13.8k|            ++m_begin;
 3722|  85.3k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 71.5k, False: 13.8k]
  ------------------
 3723|  71.5k|                const auto cmp = static_cast<unsigned>(
 3724|  71.5k|                    ch ^ options[i].first[chars_consumed]);
 3725|  71.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 71.5k]
  ------------------
 3726|  71.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 58.9k, False: 12.5k]
  |  Branch (3726:34): [True: 55.9k, False: 3.05k]
  ------------------
 3727|  55.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  55.9k|                                options.end());
 3729|  55.9k|                    --options_available;
 3730|  55.9k|                    continue;
 3731|  55.9k|                }
 3732|  15.5k|                ++i;
 3733|  15.5k|            }
 3734|  13.8k|            ++chars_consumed;
 3735|  13.8k|        }
 3736|  4.67k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.60k, False: 76]
  ------------------
 3737|  4.60k|            m_begin = start_it;
 3738|  4.60k|            return std::nullopt;
 3739|  4.60k|        }
 3740|     76|        return options.front().second;
 3741|  4.67k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.60k|    {
 3710|  4.60k|        auto start_it = m_begin;
 3711|  4.60k|        std::size_t options_available = N;
 3712|  4.60k|        std::size_t chars_consumed = 0;
 3713|  15.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 13.6k, False: 1.62k]
  ------------------
 3714|  15.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 10.7k, False: 2.92k]
  ------------------
 3715|  10.7k|            std::size_t i = 0;
 3716|  10.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 52, False: 10.6k]
  ------------------
 3717|     52|                options_available = 0;
 3718|     52|                break;
 3719|     52|            }
 3720|  10.6k|            const auto ch = *m_begin;
 3721|  10.6k|            ++m_begin;
 3722|  67.4k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 56.7k, False: 10.6k]
  ------------------
 3723|  56.7k|                const auto cmp = static_cast<unsigned>(
 3724|  56.7k|                    ch ^ options[i].first[chars_consumed]);
 3725|  56.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 56.7k]
  ------------------
 3726|  56.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.5k, False: 6.13k]
  |  Branch (3726:34): [True: 47.6k, False: 2.97k]
  ------------------
 3727|  47.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  47.6k|                                options.end());
 3729|  47.6k|                    --options_available;
 3730|  47.6k|                    continue;
 3731|  47.6k|                }
 3732|  9.11k|                ++i;
 3733|  9.11k|            }
 3734|  10.6k|            ++chars_consumed;
 3735|  10.6k|        }
 3736|  4.60k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 1.67k, False: 2.92k]
  ------------------
 3737|  1.67k|            m_begin = start_it;
 3738|  1.67k|            return std::nullopt;
 3739|  1.67k|        }
 3740|  2.92k|        return options.front().second;
 3741|  4.60k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3138|  3.89k|    {
 3139|  3.89k|#if !SCN_DISABLE_LOCALE
 3140|  3.89k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 3.89k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  3.89k|#endif
 3147|       |
 3148|  3.89k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  3.89k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  3.89k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3170|  3.88k|    {
 3171|  3.88k|#if !SCN_DISABLE_LOCALE
 3172|  3.88k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 3.88k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  3.88k|#endif
 3179|       |
 3180|  3.88k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  3.88k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  3.88k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  3.88k|    {
 2489|  3.88k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.34k, False: 536]
  |  |  |  Branch (986:45): [True: 3.27k, False: 608]
  |  |  |  Branch (986:45): [True: 72, False: 536]
  |  |  ------------------
  ------------------
 2490|  3.34k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  3.34k|                                "Invalid value for tm_mday"});
 2492|  3.34k|        }
 2493|    536|        t.tm_mday = d;
 2494|    536|        st.set_mday(h);
 2495|    536|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3185|  3.24k|    {
 3186|  3.24k|#if !SCN_DISABLE_LOCALE
 3187|  3.24k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.24k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.24k|#endif
 3194|       |
 3195|  3.24k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.24k|            {"Sunday", 0},
 3197|  3.24k|            {"Monday", 1},
 3198|  3.24k|            {"Tuesday", 2},
 3199|  3.24k|            {"Wednesday", 3},
 3200|  3.24k|            {"Thursday", 4},
 3201|  3.24k|            {"Friday", 5},
 3202|  3.24k|            {"Saturday", 6},
 3203|  3.24k|        }};
 3204|  3.24k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.24k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.24k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.24k|            {"Sun", 0},
 3209|  3.24k|            {"Mon", 1},
 3210|  3.24k|            {"Tue", 2},
 3211|  3.24k|            {"Wed", 3},
 3212|  3.24k|            {"Thu", 4},
 3213|  3.24k|            {"Fri", 5},
 3214|  3.24k|            {"Sat", 6},
 3215|  3.24k|        }};
 3216|  3.24k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 1.55k, False: 1.69k]
  ------------------
 3217|  1.55k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|  1.55k|        }
 3219|  1.69k|        return set_error(
 3220|  1.69k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.24k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2535|  1.55k|    {
 2536|  1.55k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  986|  3.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.55k]
  |  |  |  Branch (986:45): [True: 0, False: 1.55k]
  |  |  |  Branch (986:45): [True: 0, False: 1.55k]
  |  |  ------------------
  ------------------
 2537|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2538|      0|                                "Invalid value for tm_wday"});
 2539|      0|        }
 2540|  1.55k|        t.tm_wday = d;
 2541|  1.55k|        st.set_wday(h);
 2542|  1.55k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  6.48k|    {
 3710|  6.48k|        auto start_it = m_begin;
 3711|  6.48k|        std::size_t options_available = N;
 3712|  6.48k|        std::size_t chars_consumed = 0;
 3713|  21.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 16.3k, False: 4.89k]
  ------------------
 3714|  21.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 14.7k, False: 1.55k]
  ------------------
 3715|  14.7k|            std::size_t i = 0;
 3716|  14.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 38, False: 14.7k]
  ------------------
 3717|     38|                options_available = 0;
 3718|     38|                break;
 3719|     38|            }
 3720|  14.7k|            const auto ch = *m_begin;
 3721|  14.7k|            ++m_begin;
 3722|  68.4k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 53.6k, False: 14.7k]
  ------------------
 3723|  53.6k|                const auto cmp = static_cast<unsigned>(
 3724|  53.6k|                    ch ^ options[i].first[chars_consumed]);
 3725|  53.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 53.6k]
  ------------------
 3726|  53.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 43.8k, False: 9.84k]
  |  Branch (3726:34): [True: 43.7k, False: 44]
  ------------------
 3727|  43.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  43.7k|                                options.end());
 3729|  43.7k|                    --options_available;
 3730|  43.7k|                    continue;
 3731|  43.7k|                }
 3732|  9.88k|                ++i;
 3733|  9.88k|            }
 3734|  14.7k|            ++chars_consumed;
 3735|  14.7k|        }
 3736|  6.48k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.93k, False: 1.55k]
  ------------------
 3737|  4.93k|            m_begin = start_it;
 3738|  4.93k|            return std::nullopt;
 3739|  4.93k|        }
 3740|  1.55k|        return options.front().second;
 3741|  6.48k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 3259|  13.3k|    {
 3260|  13.3k|#if !SCN_DISABLE_LOCALE
 3261|  13.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 13.3k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  13.3k|#endif
 3268|       |
 3269|  13.3k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  13.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  13.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  13.3k|    {
 2469|  13.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.66k, False: 10.6k]
  |  |  |  Branch (986:45): [True: 2.48k, False: 10.8k]
  |  |  |  Branch (986:45): [True: 186, False: 10.6k]
  |  |  ------------------
  ------------------
 2470|  2.66k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  2.66k|                                  "Invalid value for tm_hour"});
 2472|  2.66k|        }
 2473|  10.6k|        t.tm_hour = h;
 2474|  10.6k|        st.set_hour24(hdl);
 2475|  10.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 3287|  13.2k|    {
 3288|  13.2k|#if !SCN_DISABLE_LOCALE
 3289|  13.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 13.2k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  13.2k|#endif
 3296|       |
 3297|  13.2k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  13.2k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  13.2k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  13.2k|    {
 2459|  13.2k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.84k, False: 10.4k]
  |  |  |  Branch (986:45): [True: 2.82k, False: 10.4k]
  |  |  |  Branch (986:45): [True: 18, False: 10.4k]
  |  |  ------------------
  ------------------
 2460|  2.84k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  2.84k|                                "Invalid value for tm_min"});
 2462|  2.84k|        }
 2463|  10.4k|        t.tm_min = m;
 2464|  10.4k|        st.set_min(h);
 2465|  10.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3301|  2.72k|    {
 3302|  2.72k|#if !SCN_DISABLE_LOCALE
 3303|  2.72k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 2.72k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  2.72k|#endif
 3310|       |
 3311|  2.72k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  2.72k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  2.72k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  2.72k|    {
 2449|  2.72k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  3.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.66k, False: 1.06k]
  |  |  |  Branch (986:45): [True: 1.66k, False: 1.06k]
  |  |  |  Branch (986:45): [True: 2, False: 1.06k]
  |  |  ------------------
  ------------------
 2450|  1.66k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  1.66k|                                "Invalid value for tm_sec"});
 2452|  1.66k|        }
 2453|  1.06k|        t.tm_sec = s;
 2454|  1.06k|        st.set_sec(h);
 2455|  1.06k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3543|  1.82k|    {
 3544|       |        // %m/%d/%y
 3545|  1.82k|        constexpr CharT slash = '/';
 3546|  1.82k|        on_dec_month();
 3547|  1.82k|        on_text(&slash, &slash + 1);
 3548|  1.82k|        on_day_of_month();
 3549|  1.82k|        on_text(&slash, &slash + 1);
 3550|  1.82k|        on_short_year();
 3551|  1.82k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3553|  2.00k|    {
 3554|       |        // %Y-%m-%d
 3555|  2.00k|        constexpr CharT dash = '-';
 3556|  2.00k|        on_full_year();
 3557|  2.00k|        on_text(&dash, &dash + 1);
 3558|  2.00k|        on_dec_month();
 3559|  2.00k|        on_text(&dash, &dash + 1);
 3560|  2.00k|        on_day_of_month();
 3561|  2.00k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3585|  10.5k|    {
 3586|       |        // %H:%M
 3587|  10.5k|        constexpr CharT colon = ':';
 3588|  10.5k|        on_24_hour();
 3589|  10.5k|        on_text(&colon, &colon + 1);
 3590|  10.5k|        on_minute();
 3591|  10.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3593|  2.72k|    {
 3594|       |        // %H:%M:%S
 3595|  2.72k|        constexpr CharT colon = ':';
 3596|  2.72k|        on_24_hour();
 3597|  2.72k|        on_text(&colon, &colon + 1);
 3598|  2.72k|        on_minute();
 3599|  2.72k|        on_text(&colon, &colon + 1);
 3600|  2.72k|        on_second();
 3601|  2.72k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3632|  14.9k|    {
 3633|  14.9k|        m_st.verify(*this);
 3634|  14.9k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 14.9k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  14.9k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 14.6k, False: 314]
  |  Branch (3637:37): [True: 136, False: 14.5k]
  |  Branch (3637:60): [True: 0, False: 14.5k]
  ------------------
 3638|    136|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|    136|        }
 3640|  14.9k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3643|  53.6k|    {
 3644|  53.6k|        return m_error;
 3645|  53.6k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3660|  14.9k|    {
 3661|  14.9k|        return m_begin;
 3662|  14.9k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3853|  32.1k|{
 3854|  32.1k|    {
 3855|  32.1k|        SCN_TRY(it,
  ------------------
  |  | 3939|  32.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  32.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  32.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 522, False: 31.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    522|    }                                                  \
  |  |  |  | 3938|  32.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  31.6k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  31.6k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  31.6k|    static_cast<    \
  |  | 1056|  31.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  31.6k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  31.6k|        ctx.range(), t, ctx.locale());
 3862|  31.6k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  31.6k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 11.5k, False: 20.0k]
  |  |  ------------------
  ------------------
 3864|  11.5k|        return unexpected(e.error());
 3865|  11.5k|    }
 3866|  20.0k|    return r.get_iterator();
 3867|  31.6k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2997|  31.6k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  31.6k|    static_cast<    \
  |  | 1056|  31.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  31.6k|          m_begin(ranges::begin(m_range)),
 2999|  31.6k|          m_tm(t),
 3000|  31.6k|          m_loc(loc)
 3001|  31.6k|    {
 3002|  31.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3648|  10.7k|    {
 3649|  10.7k|        set_error({scan_error::invalid_format_string, msg});
 3650|  10.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3653|  45.7k|    {
 3654|  45.7k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 11.5k, False: 34.2k]
  ------------------
 3655|  11.5k|            m_error = unexpected(e);
 3656|  11.5k|        }
 3657|  45.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3005|  33.1k|    {
 3006|  55.3k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 33.1k, False: 22.2k]
  ------------------
 3007|  33.1k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 214, False: 32.9k]
  ------------------
 3008|    214|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    214|            }
 3010|  32.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 10.7k, False: 22.2k]
  ------------------
 3011|  10.7k|                return on_error("Invalid literal character");
 3012|  10.7k|            }
 3013|  22.2k|            ++beg;
 3014|  22.2k|            ++m_begin;
 3015|  22.2k|        }
 3016|  33.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3035|  3.63k|    {
 3036|  3.63k|#if !SCN_DISABLE_LOCALE
 3037|  3.63k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 3.63k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  3.63k|#endif
 3044|       |
 3045|  3.63k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  3.63k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  3.63k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  3.63k|    {
 2509|  3.63k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.63k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  3.63k|        t.tm_year = y - 1900;
 2514|  3.63k|        st.set_full_year(h);
 2515|  3.63k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3671|  56.8k|    {
 3672|  56.8k|        int digits_read = 0;
 3673|  56.8k|        int accumulator = 0;
 3674|  98.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 98.3k, False: 434]
  ------------------
 3675|  98.3k|            const auto ch = *m_begin;
 3676|  98.3k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 29.3k, False: 68.9k]
  |  Branch (3676:36): [True: 18.1k, False: 50.8k]
  ------------------
 3677|  47.5k|                break;
 3678|  47.5k|            }
 3679|  50.8k|            ++m_begin;
 3680|  50.8k|            ++digits_read;
 3681|  50.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  50.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 8.87k, False: 41.9k]
  ------------------
 3683|  8.87k|                break;
 3684|  8.87k|            }
 3685|  50.8k|        }
 3686|  56.8k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 17.1k, False: 39.7k]
  ------------------
 3687|  17.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  17.1k|                                 "Too few integer digits"});
 3689|  17.1k|            return -1;
 3690|  17.1k|        }
 3691|  39.7k|        return accumulator;
 3692|  56.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3049|  6.25k|    {
 3050|  6.25k|#if !SCN_DISABLE_LOCALE
 3051|  6.25k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 6.25k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  6.25k|#endif
 3059|       |
 3060|  6.25k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  6.25k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  6.25k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  6.25k|    {
 2526|  6.25k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.62k, False: 4.63k]
  |  |  |  Branch (986:45): [True: 1.62k, False: 4.63k]
  |  |  |  Branch (986:45): [True: 0, False: 4.63k]
  |  |  ------------------
  ------------------
 2527|  1.62k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  1.62k|                                "Invalid value for tm_year"});
 2529|  1.62k|        }
 2530|  4.63k|        st.short_year_value = y;
 2531|  4.63k|        st.set_short_year(h);
 2532|  4.63k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3092|  4.64k|    {
 3093|  4.64k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.64k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.64k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.64k|#endif
 3101|       |
 3102|  4.64k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.64k|            {"January", 1},
 3104|  4.64k|            {"February", 2},
 3105|  4.64k|            {"March", 3},
 3106|  4.64k|            {"April", 4},
 3107|  4.64k|            {"May", 5},
 3108|  4.64k|            {"June", 6},
 3109|  4.64k|            {"July", 7},
 3110|  4.64k|            {"August", 8},
 3111|  4.64k|            {"September", 9},
 3112|  4.64k|            {"October", 10},
 3113|  4.64k|            {"November", 11},
 3114|  4.64k|            {"December", 12},
 3115|  4.64k|        }};
 3116|  4.64k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 76, False: 4.56k]
  ------------------
 3117|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     76|        }
 3119|  4.56k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.56k|            {"Jan", 1},
 3121|  4.56k|            {"Feb", 2},
 3122|  4.56k|            {"Mar", 3},
 3123|  4.56k|            {"Apr", 4},
 3124|  4.56k|            {"Jun", 6},
 3125|  4.56k|            {"Jul", 7},
 3126|  4.56k|            {"Aug", 8},
 3127|  4.56k|            {"Sep", 9},
 3128|  4.56k|            {"Oct", 10},
 3129|  4.56k|            {"Nov", 11},
 3130|  4.56k|            {"Dec", 12},
 3131|  4.56k|        }};
 3132|  4.56k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 2.92k, False: 1.64k]
  ------------------
 3133|  2.92k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|  2.92k|        }
 3135|  1.64k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  1.64k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  11.3k|    {
 2499|  11.3k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.79k, False: 8.52k]
  |  |  |  Branch (986:45): [True: 2.66k, False: 8.64k]
  |  |  |  Branch (986:45): [True: 122, False: 8.52k]
  |  |  ------------------
  ------------------
 2500|  2.79k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  2.79k|                                "Invalid value for tm_mon"});
 2502|  2.79k|        }
 2503|  8.52k|        t.tm_mon = m - 1;
 2504|  8.52k|        st.set_mon(h);
 2505|  8.52k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.64k|    {
 3710|  4.64k|        auto start_it = m_begin;
 3711|  4.64k|        std::size_t options_available = N;
 3712|  4.64k|        std::size_t chars_consumed = 0;
 3713|  18.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 13.9k, False: 4.50k]
  ------------------
 3714|  18.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 13.9k, False: 76]
  ------------------
 3715|  13.9k|            std::size_t i = 0;
 3716|  13.9k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 66, False: 13.8k]
  ------------------
 3717|     66|                options_available = 0;
 3718|     66|                break;
 3719|     66|            }
 3720|  13.8k|            const auto ch = *m_begin;
 3721|  13.8k|            ++m_begin;
 3722|  85.0k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 71.1k, False: 13.8k]
  ------------------
 3723|  71.1k|                const auto cmp = static_cast<unsigned>(
 3724|  71.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  71.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 71.1k]
  ------------------
 3726|  71.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 58.6k, False: 12.5k]
  |  Branch (3726:34): [True: 55.5k, False: 3.08k]
  ------------------
 3727|  55.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  55.5k|                                options.end());
 3729|  55.5k|                    --options_available;
 3730|  55.5k|                    continue;
 3731|  55.5k|                }
 3732|  15.6k|                ++i;
 3733|  15.6k|            }
 3734|  13.8k|            ++chars_consumed;
 3735|  13.8k|        }
 3736|  4.64k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.56k, False: 76]
  ------------------
 3737|  4.56k|            m_begin = start_it;
 3738|  4.56k|            return std::nullopt;
 3739|  4.56k|        }
 3740|     76|        return options.front().second;
 3741|  4.64k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.56k|    {
 3710|  4.56k|        auto start_it = m_begin;
 3711|  4.56k|        std::size_t options_available = N;
 3712|  4.56k|        std::size_t chars_consumed = 0;
 3713|  15.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 13.6k, False: 1.58k]
  ------------------
 3714|  15.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 10.7k, False: 2.92k]
  ------------------
 3715|  10.7k|            std::size_t i = 0;
 3716|  10.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 58, False: 10.6k]
  ------------------
 3717|     58|                options_available = 0;
 3718|     58|                break;
 3719|     58|            }
 3720|  10.6k|            const auto ch = *m_begin;
 3721|  10.6k|            ++m_begin;
 3722|  67.1k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 56.4k, False: 10.6k]
  ------------------
 3723|  56.4k|                const auto cmp = static_cast<unsigned>(
 3724|  56.4k|                    ch ^ options[i].first[chars_consumed]);
 3725|  56.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 56.4k]
  ------------------
 3726|  56.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.2k, False: 6.16k]
  |  Branch (3726:34): [True: 47.2k, False: 3.00k]
  ------------------
 3727|  47.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  47.2k|                                options.end());
 3729|  47.2k|                    --options_available;
 3730|  47.2k|                    continue;
 3731|  47.2k|                }
 3732|  9.16k|                ++i;
 3733|  9.16k|            }
 3734|  10.6k|            ++chars_consumed;
 3735|  10.6k|        }
 3736|  4.56k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 1.64k, False: 2.92k]
  ------------------
 3737|  1.64k|            m_begin = start_it;
 3738|  1.64k|            return std::nullopt;
 3739|  1.64k|        }
 3740|  2.92k|        return options.front().second;
 3741|  4.56k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3138|  8.30k|    {
 3139|  8.30k|#if !SCN_DISABLE_LOCALE
 3140|  8.30k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 8.30k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  8.30k|#endif
 3147|       |
 3148|  8.30k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  8.30k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  8.30k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3170|  8.28k|    {
 3171|  8.28k|#if !SCN_DISABLE_LOCALE
 3172|  8.28k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 8.28k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  8.28k|#endif
 3179|       |
 3180|  8.28k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  8.28k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  8.28k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  8.28k|    {
 2489|  8.28k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.25k, False: 5.03k]
  |  |  |  Branch (986:45): [True: 3.17k, False: 5.11k]
  |  |  |  Branch (986:45): [True: 80, False: 5.03k]
  |  |  ------------------
  ------------------
 2490|  3.25k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  3.25k|                                "Invalid value for tm_mday"});
 2492|  3.25k|        }
 2493|  5.03k|        t.tm_mday = d;
 2494|  5.03k|        st.set_mday(h);
 2495|  5.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3185|  3.27k|    {
 3186|  3.27k|#if !SCN_DISABLE_LOCALE
 3187|  3.27k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.27k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.27k|#endif
 3194|       |
 3195|  3.27k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.27k|            {"Sunday", 0},
 3197|  3.27k|            {"Monday", 1},
 3198|  3.27k|            {"Tuesday", 2},
 3199|  3.27k|            {"Wednesday", 3},
 3200|  3.27k|            {"Thursday", 4},
 3201|  3.27k|            {"Friday", 5},
 3202|  3.27k|            {"Saturday", 6},
 3203|  3.27k|        }};
 3204|  3.27k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.27k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.27k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.27k|            {"Sun", 0},
 3209|  3.27k|            {"Mon", 1},
 3210|  3.27k|            {"Tue", 2},
 3211|  3.27k|            {"Wed", 3},
 3212|  3.27k|            {"Thu", 4},
 3213|  3.27k|            {"Fri", 5},
 3214|  3.27k|            {"Sat", 6},
 3215|  3.27k|        }};
 3216|  3.27k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 1.61k, False: 1.66k]
  ------------------
 3217|  1.61k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|  1.61k|        }
 3219|  1.66k|        return set_error(
 3220|  1.66k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.27k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2535|  1.61k|    {
 2536|  1.61k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  986|  3.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.61k]
  |  |  |  Branch (986:45): [True: 0, False: 1.61k]
  |  |  |  Branch (986:45): [True: 0, False: 1.61k]
  |  |  ------------------
  ------------------
 2537|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2538|      0|                                "Invalid value for tm_wday"});
 2539|      0|        }
 2540|  1.61k|        t.tm_wday = d;
 2541|  1.61k|        st.set_wday(h);
 2542|  1.61k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  6.55k|    {
 3710|  6.55k|        auto start_it = m_begin;
 3711|  6.55k|        std::size_t options_available = N;
 3712|  6.55k|        std::size_t chars_consumed = 0;
 3713|  21.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 16.8k, False: 4.88k]
  ------------------
 3714|  21.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 15.2k, False: 1.61k]
  ------------------
 3715|  15.2k|            std::size_t i = 0;
 3716|  15.2k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 54, False: 15.2k]
  ------------------
 3717|     54|                options_available = 0;
 3718|     54|                break;
 3719|     54|            }
 3720|  15.2k|            const auto ch = *m_begin;
 3721|  15.2k|            ++m_begin;
 3722|  69.7k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 54.5k, False: 15.2k]
  ------------------
 3723|  54.5k|                const auto cmp = static_cast<unsigned>(
 3724|  54.5k|                    ch ^ options[i].first[chars_consumed]);
 3725|  54.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 54.5k]
  ------------------
 3726|  54.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 44.2k, False: 10.2k]
  |  Branch (3726:34): [True: 44.2k, False: 72]
  ------------------
 3727|  44.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  44.2k|                                options.end());
 3729|  44.2k|                    --options_available;
 3730|  44.2k|                    continue;
 3731|  44.2k|                }
 3732|  10.3k|                ++i;
 3733|  10.3k|            }
 3734|  15.2k|            ++chars_consumed;
 3735|  15.2k|        }
 3736|  6.55k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.93k, False: 1.61k]
  ------------------
 3737|  4.93k|            m_begin = start_it;
 3738|  4.93k|            return std::nullopt;
 3739|  4.93k|        }
 3740|  1.61k|        return options.front().second;
 3741|  6.55k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 3259|  13.8k|    {
 3260|  13.8k|#if !SCN_DISABLE_LOCALE
 3261|  13.8k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 13.8k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  13.8k|#endif
 3268|       |
 3269|  13.8k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  13.8k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  13.8k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  13.8k|    {
 2469|  13.8k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.39k, False: 11.4k]
  |  |  |  Branch (986:45): [True: 2.18k, False: 11.6k]
  |  |  |  Branch (986:45): [True: 208, False: 11.4k]
  |  |  ------------------
  ------------------
 2470|  2.39k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  2.39k|                                  "Invalid value for tm_hour"});
 2472|  2.39k|        }
 2473|  11.4k|        t.tm_hour = h;
 2474|  11.4k|        st.set_hour24(hdl);
 2475|  11.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 3287|  13.7k|    {
 3288|  13.7k|#if !SCN_DISABLE_LOCALE
 3289|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 13.7k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  13.7k|#endif
 3296|       |
 3297|  13.7k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  13.7k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  13.7k|    {
 2459|  13.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  24.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.73k, False: 11.0k]
  |  |  |  Branch (986:45): [True: 2.70k, False: 11.0k]
  |  |  |  Branch (986:45): [True: 26, False: 11.0k]
  |  |  ------------------
  ------------------
 2460|  2.73k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  2.73k|                                "Invalid value for tm_min"});
 2462|  2.73k|        }
 2463|  11.0k|        t.tm_min = m;
 2464|  11.0k|        st.set_min(h);
 2465|  11.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3301|  2.70k|    {
 3302|  2.70k|#if !SCN_DISABLE_LOCALE
 3303|  2.70k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 2.70k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  2.70k|#endif
 3310|       |
 3311|  2.70k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  2.70k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  2.70k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  2.70k|    {
 2449|  2.70k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  3.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.62k, False: 1.08k]
  |  |  |  Branch (986:45): [True: 1.61k, False: 1.08k]
  |  |  |  Branch (986:45): [True: 4, False: 1.08k]
  |  |  ------------------
  ------------------
 2450|  1.62k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  1.62k|                                "Invalid value for tm_sec"});
 2452|  1.62k|        }
 2453|  1.08k|        t.tm_sec = s;
 2454|  1.08k|        st.set_sec(h);
 2455|  1.08k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3543|  6.25k|    {
 3544|       |        // %m/%d/%y
 3545|  6.25k|        constexpr CharT slash = '/';
 3546|  6.25k|        on_dec_month();
 3547|  6.25k|        on_text(&slash, &slash + 1);
 3548|  6.25k|        on_day_of_month();
 3549|  6.25k|        on_text(&slash, &slash + 1);
 3550|  6.25k|        on_short_year();
 3551|  6.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3553|  1.97k|    {
 3554|       |        // %Y-%m-%d
 3555|  1.97k|        constexpr CharT dash = '-';
 3556|  1.97k|        on_full_year();
 3557|  1.97k|        on_text(&dash, &dash + 1);
 3558|  1.97k|        on_dec_month();
 3559|  1.97k|        on_text(&dash, &dash + 1);
 3560|  1.97k|        on_day_of_month();
 3561|  1.97k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3585|  11.0k|    {
 3586|       |        // %H:%M
 3587|  11.0k|        constexpr CharT colon = ':';
 3588|  11.0k|        on_24_hour();
 3589|  11.0k|        on_text(&colon, &colon + 1);
 3590|  11.0k|        on_minute();
 3591|  11.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3593|  2.70k|    {
 3594|       |        // %H:%M:%S
 3595|  2.70k|        constexpr CharT colon = ':';
 3596|  2.70k|        on_24_hour();
 3597|  2.70k|        on_text(&colon, &colon + 1);
 3598|  2.70k|        on_minute();
 3599|  2.70k|        on_text(&colon, &colon + 1);
 3600|  2.70k|        on_second();
 3601|  2.70k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3632|  20.0k|    {
 3633|  20.0k|        m_st.verify(*this);
 3634|  20.0k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 20.0k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  20.0k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 19.7k, False: 314]
  |  Branch (3637:37): [True: 4.61k, False: 15.1k]
  |  Branch (3637:60): [True: 0, False: 15.1k]
  ------------------
 3638|  4.61k|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|  4.61k|        }
 3640|  20.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3643|  63.4k|    {
 3644|  63.4k|        return m_error;
 3645|  63.4k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3660|  20.0k|    {
 3661|  20.0k|        return m_begin;
 3662|  20.0k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3853|  26.9k|{
 3854|  26.9k|    {
 3855|  26.9k|        SCN_TRY(it,
  ------------------
  |  | 3939|  26.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  26.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  26.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 260, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    260|    }                                                  \
  |  |  |  | 3938|  26.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  26.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  26.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  26.7k|    static_cast<    \
  |  | 1056|  26.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  26.7k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  26.7k|        ctx.range(), t, ctx.locale());
 3862|  26.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  26.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 11.7k, False: 14.9k]
  |  |  ------------------
  ------------------
 3864|  11.7k|        return unexpected(e.error());
 3865|  11.7k|    }
 3866|  14.9k|    return r.get_iterator();
 3867|  26.7k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2997|  26.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  26.7k|    static_cast<    \
  |  | 1056|  26.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  26.7k|          m_begin(ranges::begin(m_range)),
 2999|  26.7k|          m_tm(t),
 3000|  26.7k|          m_loc(loc)
 3001|  26.7k|    {
 3002|  26.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3648|  11.0k|    {
 3649|  11.0k|        set_error({scan_error::invalid_format_string, msg});
 3650|  11.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3653|  47.6k|    {
 3654|  47.6k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 11.7k, False: 35.8k]
  ------------------
 3655|  11.7k|            m_error = unexpected(e);
 3656|  11.7k|        }
 3657|  47.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3005|  23.8k|    {
 3006|  36.4k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 23.8k, False: 12.5k]
  ------------------
 3007|  23.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 168, False: 23.6k]
  ------------------
 3008|    168|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    168|            }
 3010|  23.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 11.0k, False: 12.5k]
  ------------------
 3011|  11.0k|                return on_error("Invalid literal character");
 3012|  11.0k|            }
 3013|  12.5k|            ++beg;
 3014|  12.5k|            ++m_begin;
 3015|  12.5k|        }
 3016|  23.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3035|  3.70k|    {
 3036|  3.70k|#if !SCN_DISABLE_LOCALE
 3037|  3.70k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 3.70k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  3.70k|#endif
 3044|       |
 3045|  3.70k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  3.70k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  3.70k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  3.70k|    {
 2509|  3.70k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  3.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.70k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  3.70k|        t.tm_year = y - 1900;
 2514|  3.70k|        st.set_full_year(h);
 2515|  3.70k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3671|  42.6k|    {
 3672|  42.6k|        int digits_read = 0;
 3673|  42.6k|        int accumulator = 0;
 3674|  69.3k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 69.0k, False: 356]
  ------------------
 3675|  69.0k|            const auto ch = *m_begin;
 3676|  69.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 21.1k, False: 47.9k]
  |  Branch (3676:36): [True: 17.0k, False: 30.8k]
  ------------------
 3677|  38.1k|                break;
 3678|  38.1k|            }
 3679|  30.8k|            ++m_begin;
 3680|  30.8k|            ++digits_read;
 3681|  30.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  30.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 4.14k, False: 26.7k]
  ------------------
 3683|  4.14k|                break;
 3684|  4.14k|            }
 3685|  30.8k|        }
 3686|  42.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 17.9k, False: 24.7k]
  ------------------
 3687|  17.9k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  17.9k|                                 "Too few integer digits"});
 3689|  17.9k|            return -1;
 3690|  17.9k|        }
 3691|  24.7k|        return accumulator;
 3692|  42.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3049|  1.82k|    {
 3050|  1.82k|#if !SCN_DISABLE_LOCALE
 3051|  1.82k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 1.82k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  1.82k|#endif
 3059|       |
 3060|  1.82k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  1.82k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  1.82k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  1.82k|    {
 2526|  1.82k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  1.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.67k, False: 146]
  |  |  |  Branch (986:45): [True: 1.67k, False: 146]
  |  |  |  Branch (986:45): [True: 0, False: 146]
  |  |  ------------------
  ------------------
 2527|  1.67k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  1.67k|                                "Invalid value for tm_year"});
 2529|  1.67k|        }
 2530|    146|        st.short_year_value = y;
 2531|    146|        st.set_short_year(h);
 2532|    146|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3092|  4.67k|    {
 3093|  4.67k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.67k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.67k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.67k|#endif
 3101|       |
 3102|  4.67k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.67k|            {"January", 1},
 3104|  4.67k|            {"February", 2},
 3105|  4.67k|            {"March", 3},
 3106|  4.67k|            {"April", 4},
 3107|  4.67k|            {"May", 5},
 3108|  4.67k|            {"June", 6},
 3109|  4.67k|            {"July", 7},
 3110|  4.67k|            {"August", 8},
 3111|  4.67k|            {"September", 9},
 3112|  4.67k|            {"October", 10},
 3113|  4.67k|            {"November", 11},
 3114|  4.67k|            {"December", 12},
 3115|  4.67k|        }};
 3116|  4.67k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 76, False: 4.60k]
  ------------------
 3117|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     76|        }
 3119|  4.60k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.60k|            {"Jan", 1},
 3121|  4.60k|            {"Feb", 2},
 3122|  4.60k|            {"Mar", 3},
 3123|  4.60k|            {"Apr", 4},
 3124|  4.60k|            {"Jun", 6},
 3125|  4.60k|            {"Jul", 7},
 3126|  4.60k|            {"Aug", 8},
 3127|  4.60k|            {"Sep", 9},
 3128|  4.60k|            {"Oct", 10},
 3129|  4.60k|            {"Nov", 11},
 3130|  4.60k|            {"Dec", 12},
 3131|  4.60k|        }};
 3132|  4.60k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 2.92k, False: 1.67k]
  ------------------
 3133|  2.92k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|  2.92k|        }
 3135|  1.67k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  1.67k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  6.89k|    {
 2499|  6.89k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.90k, False: 3.99k]
  |  |  |  Branch (986:45): [True: 2.80k, False: 4.09k]
  |  |  |  Branch (986:45): [True: 102, False: 3.99k]
  |  |  ------------------
  ------------------
 2500|  2.90k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  2.90k|                                "Invalid value for tm_mon"});
 2502|  2.90k|        }
 2503|  3.99k|        t.tm_mon = m - 1;
 2504|  3.99k|        st.set_mon(h);
 2505|  3.99k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.67k|    {
 3710|  4.67k|        auto start_it = m_begin;
 3711|  4.67k|        std::size_t options_available = N;
 3712|  4.67k|        std::size_t chars_consumed = 0;
 3713|  18.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 13.9k, False: 4.54k]
  ------------------
 3714|  18.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 13.9k, False: 76]
  ------------------
 3715|  13.9k|            std::size_t i = 0;
 3716|  13.9k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 60, False: 13.8k]
  ------------------
 3717|     60|                options_available = 0;
 3718|     60|                break;
 3719|     60|            }
 3720|  13.8k|            const auto ch = *m_begin;
 3721|  13.8k|            ++m_begin;
 3722|  85.3k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 71.5k, False: 13.8k]
  ------------------
 3723|  71.5k|                const auto cmp = static_cast<unsigned>(
 3724|  71.5k|                    ch ^ options[i].first[chars_consumed]);
 3725|  71.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 71.5k]
  ------------------
 3726|  71.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 58.9k, False: 12.5k]
  |  Branch (3726:34): [True: 55.9k, False: 3.05k]
  ------------------
 3727|  55.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  55.9k|                                options.end());
 3729|  55.9k|                    --options_available;
 3730|  55.9k|                    continue;
 3731|  55.9k|                }
 3732|  15.5k|                ++i;
 3733|  15.5k|            }
 3734|  13.8k|            ++chars_consumed;
 3735|  13.8k|        }
 3736|  4.67k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.60k, False: 76]
  ------------------
 3737|  4.60k|            m_begin = start_it;
 3738|  4.60k|            return std::nullopt;
 3739|  4.60k|        }
 3740|     76|        return options.front().second;
 3741|  4.67k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.60k|    {
 3710|  4.60k|        auto start_it = m_begin;
 3711|  4.60k|        std::size_t options_available = N;
 3712|  4.60k|        std::size_t chars_consumed = 0;
 3713|  15.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 13.6k, False: 1.62k]
  ------------------
 3714|  15.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 10.7k, False: 2.92k]
  ------------------
 3715|  10.7k|            std::size_t i = 0;
 3716|  10.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 52, False: 10.6k]
  ------------------
 3717|     52|                options_available = 0;
 3718|     52|                break;
 3719|     52|            }
 3720|  10.6k|            const auto ch = *m_begin;
 3721|  10.6k|            ++m_begin;
 3722|  67.4k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 56.7k, False: 10.6k]
  ------------------
 3723|  56.7k|                const auto cmp = static_cast<unsigned>(
 3724|  56.7k|                    ch ^ options[i].first[chars_consumed]);
 3725|  56.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 56.7k]
  ------------------
 3726|  56.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.5k, False: 6.13k]
  |  Branch (3726:34): [True: 47.6k, False: 2.97k]
  ------------------
 3727|  47.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  47.6k|                                options.end());
 3729|  47.6k|                    --options_available;
 3730|  47.6k|                    continue;
 3731|  47.6k|                }
 3732|  9.11k|                ++i;
 3733|  9.11k|            }
 3734|  10.6k|            ++chars_consumed;
 3735|  10.6k|        }
 3736|  4.60k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 1.67k, False: 2.92k]
  ------------------
 3737|  1.67k|            m_begin = start_it;
 3738|  1.67k|            return std::nullopt;
 3739|  1.67k|        }
 3740|  2.92k|        return options.front().second;
 3741|  4.60k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3138|  3.89k|    {
 3139|  3.89k|#if !SCN_DISABLE_LOCALE
 3140|  3.89k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 3.89k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  3.89k|#endif
 3147|       |
 3148|  3.89k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  3.89k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  3.89k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3170|  3.88k|    {
 3171|  3.88k|#if !SCN_DISABLE_LOCALE
 3172|  3.88k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 3.88k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  3.88k|#endif
 3179|       |
 3180|  3.88k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  3.88k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  3.88k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  3.88k|    {
 2489|  3.88k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.34k, False: 536]
  |  |  |  Branch (986:45): [True: 3.27k, False: 608]
  |  |  |  Branch (986:45): [True: 72, False: 536]
  |  |  ------------------
  ------------------
 2490|  3.34k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  3.34k|                                "Invalid value for tm_mday"});
 2492|  3.34k|        }
 2493|    536|        t.tm_mday = d;
 2494|    536|        st.set_mday(h);
 2495|    536|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3185|  3.24k|    {
 3186|  3.24k|#if !SCN_DISABLE_LOCALE
 3187|  3.24k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.24k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.24k|#endif
 3194|       |
 3195|  3.24k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.24k|            {"Sunday", 0},
 3197|  3.24k|            {"Monday", 1},
 3198|  3.24k|            {"Tuesday", 2},
 3199|  3.24k|            {"Wednesday", 3},
 3200|  3.24k|            {"Thursday", 4},
 3201|  3.24k|            {"Friday", 5},
 3202|  3.24k|            {"Saturday", 6},
 3203|  3.24k|        }};
 3204|  3.24k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.24k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.24k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.24k|            {"Sun", 0},
 3209|  3.24k|            {"Mon", 1},
 3210|  3.24k|            {"Tue", 2},
 3211|  3.24k|            {"Wed", 3},
 3212|  3.24k|            {"Thu", 4},
 3213|  3.24k|            {"Fri", 5},
 3214|  3.24k|            {"Sat", 6},
 3215|  3.24k|        }};
 3216|  3.24k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 1.55k, False: 1.69k]
  ------------------
 3217|  1.55k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|  1.55k|        }
 3219|  1.69k|        return set_error(
 3220|  1.69k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.24k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2535|  1.55k|    {
 2536|  1.55k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  986|  3.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.55k]
  |  |  |  Branch (986:45): [True: 0, False: 1.55k]
  |  |  |  Branch (986:45): [True: 0, False: 1.55k]
  |  |  ------------------
  ------------------
 2537|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2538|      0|                                "Invalid value for tm_wday"});
 2539|      0|        }
 2540|  1.55k|        t.tm_wday = d;
 2541|  1.55k|        st.set_wday(h);
 2542|  1.55k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  6.48k|    {
 3710|  6.48k|        auto start_it = m_begin;
 3711|  6.48k|        std::size_t options_available = N;
 3712|  6.48k|        std::size_t chars_consumed = 0;
 3713|  21.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 16.3k, False: 4.89k]
  ------------------
 3714|  21.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 14.7k, False: 1.55k]
  ------------------
 3715|  14.7k|            std::size_t i = 0;
 3716|  14.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 38, False: 14.7k]
  ------------------
 3717|     38|                options_available = 0;
 3718|     38|                break;
 3719|     38|            }
 3720|  14.7k|            const auto ch = *m_begin;
 3721|  14.7k|            ++m_begin;
 3722|  68.4k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 53.6k, False: 14.7k]
  ------------------
 3723|  53.6k|                const auto cmp = static_cast<unsigned>(
 3724|  53.6k|                    ch ^ options[i].first[chars_consumed]);
 3725|  53.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 53.6k]
  ------------------
 3726|  53.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 43.8k, False: 9.84k]
  |  Branch (3726:34): [True: 43.7k, False: 44]
  ------------------
 3727|  43.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  43.7k|                                options.end());
 3729|  43.7k|                    --options_available;
 3730|  43.7k|                    continue;
 3731|  43.7k|                }
 3732|  9.88k|                ++i;
 3733|  9.88k|            }
 3734|  14.7k|            ++chars_consumed;
 3735|  14.7k|        }
 3736|  6.48k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.93k, False: 1.55k]
  ------------------
 3737|  4.93k|            m_begin = start_it;
 3738|  4.93k|            return std::nullopt;
 3739|  4.93k|        }
 3740|  1.55k|        return options.front().second;
 3741|  6.48k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 3259|  13.3k|    {
 3260|  13.3k|#if !SCN_DISABLE_LOCALE
 3261|  13.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 13.3k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  13.3k|#endif
 3268|       |
 3269|  13.3k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  13.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  13.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  13.3k|    {
 2469|  13.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.66k, False: 10.6k]
  |  |  |  Branch (986:45): [True: 2.48k, False: 10.8k]
  |  |  |  Branch (986:45): [True: 186, False: 10.6k]
  |  |  ------------------
  ------------------
 2470|  2.66k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  2.66k|                                  "Invalid value for tm_hour"});
 2472|  2.66k|        }
 2473|  10.6k|        t.tm_hour = h;
 2474|  10.6k|        st.set_hour24(hdl);
 2475|  10.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 3287|  13.2k|    {
 3288|  13.2k|#if !SCN_DISABLE_LOCALE
 3289|  13.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 13.2k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  13.2k|#endif
 3296|       |
 3297|  13.2k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  13.2k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  13.2k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  13.2k|    {
 2459|  13.2k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.84k, False: 10.4k]
  |  |  |  Branch (986:45): [True: 2.82k, False: 10.4k]
  |  |  |  Branch (986:45): [True: 18, False: 10.4k]
  |  |  ------------------
  ------------------
 2460|  2.84k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  2.84k|                                "Invalid value for tm_min"});
 2462|  2.84k|        }
 2463|  10.4k|        t.tm_min = m;
 2464|  10.4k|        st.set_min(h);
 2465|  10.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3301|  2.72k|    {
 3302|  2.72k|#if !SCN_DISABLE_LOCALE
 3303|  2.72k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 2.72k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  2.72k|#endif
 3310|       |
 3311|  2.72k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  2.72k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  2.72k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  2.72k|    {
 2449|  2.72k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  3.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.66k, False: 1.06k]
  |  |  |  Branch (986:45): [True: 1.66k, False: 1.06k]
  |  |  |  Branch (986:45): [True: 2, False: 1.06k]
  |  |  ------------------
  ------------------
 2450|  1.66k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  1.66k|                                "Invalid value for tm_sec"});
 2452|  1.66k|        }
 2453|  1.06k|        t.tm_sec = s;
 2454|  1.06k|        st.set_sec(h);
 2455|  1.06k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3543|  1.82k|    {
 3544|       |        // %m/%d/%y
 3545|  1.82k|        constexpr CharT slash = '/';
 3546|  1.82k|        on_dec_month();
 3547|  1.82k|        on_text(&slash, &slash + 1);
 3548|  1.82k|        on_day_of_month();
 3549|  1.82k|        on_text(&slash, &slash + 1);
 3550|  1.82k|        on_short_year();
 3551|  1.82k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3553|  2.00k|    {
 3554|       |        // %Y-%m-%d
 3555|  2.00k|        constexpr CharT dash = '-';
 3556|  2.00k|        on_full_year();
 3557|  2.00k|        on_text(&dash, &dash + 1);
 3558|  2.00k|        on_dec_month();
 3559|  2.00k|        on_text(&dash, &dash + 1);
 3560|  2.00k|        on_day_of_month();
 3561|  2.00k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3585|  10.5k|    {
 3586|       |        // %H:%M
 3587|  10.5k|        constexpr CharT colon = ':';
 3588|  10.5k|        on_24_hour();
 3589|  10.5k|        on_text(&colon, &colon + 1);
 3590|  10.5k|        on_minute();
 3591|  10.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3593|  2.72k|    {
 3594|       |        // %H:%M:%S
 3595|  2.72k|        constexpr CharT colon = ':';
 3596|  2.72k|        on_24_hour();
 3597|  2.72k|        on_text(&colon, &colon + 1);
 3598|  2.72k|        on_minute();
 3599|  2.72k|        on_text(&colon, &colon + 1);
 3600|  2.72k|        on_second();
 3601|  2.72k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3632|  14.9k|    {
 3633|  14.9k|        m_st.verify(*this);
 3634|  14.9k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 14.9k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  14.9k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 14.6k, False: 314]
  |  Branch (3637:37): [True: 136, False: 14.5k]
  |  Branch (3637:60): [True: 0, False: 14.5k]
  ------------------
 3638|    136|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|    136|        }
 3640|  14.9k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3643|  53.6k|    {
 3644|  53.6k|        return m_error;
 3645|  53.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3660|  14.9k|    {
 3661|  14.9k|        return m_begin;
 3662|  14.9k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3853|  32.1k|{
 3854|  32.1k|    {
 3855|  32.1k|        SCN_TRY(it,
  ------------------
  |  | 3939|  32.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  32.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  32.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 522, False: 31.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    522|    }                                                  \
  |  |  |  | 3938|  32.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  31.6k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  31.6k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  31.6k|    static_cast<    \
  |  | 1056|  31.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  31.6k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  31.6k|        ctx.range(), t, ctx.locale());
 3862|  31.6k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  31.6k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 11.5k, False: 20.0k]
  |  |  ------------------
  ------------------
 3864|  11.5k|        return unexpected(e.error());
 3865|  11.5k|    }
 3866|  20.0k|    return r.get_iterator();
 3867|  31.6k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2997|  31.6k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  31.6k|    static_cast<    \
  |  | 1056|  31.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  31.6k|          m_begin(ranges::begin(m_range)),
 2999|  31.6k|          m_tm(t),
 3000|  31.6k|          m_loc(loc)
 3001|  31.6k|    {
 3002|  31.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3648|  10.7k|    {
 3649|  10.7k|        set_error({scan_error::invalid_format_string, msg});
 3650|  10.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3653|  44.1k|    {
 3654|  44.1k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 11.5k, False: 32.6k]
  ------------------
 3655|  11.5k|            m_error = unexpected(e);
 3656|  11.5k|        }
 3657|  44.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3005|  33.1k|    {
 3006|  55.3k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 33.1k, False: 22.2k]
  ------------------
 3007|  33.1k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 214, False: 32.9k]
  ------------------
 3008|    214|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    214|            }
 3010|  32.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 10.7k, False: 22.2k]
  ------------------
 3011|  10.7k|                return on_error("Invalid literal character");
 3012|  10.7k|            }
 3013|  22.2k|            ++beg;
 3014|  22.2k|            ++m_begin;
 3015|  22.2k|        }
 3016|  33.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3035|  3.63k|    {
 3036|  3.63k|#if !SCN_DISABLE_LOCALE
 3037|  3.63k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 3.63k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  3.63k|#endif
 3044|       |
 3045|  3.63k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  3.63k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  3.63k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2686|  3.63k|    {
 2687|  3.63k|        t.year = y;
 2688|  3.63k|        st.set_full_year(h);
 2689|  3.63k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3671|  56.8k|    {
 3672|  56.8k|        int digits_read = 0;
 3673|  56.8k|        int accumulator = 0;
 3674|  98.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 98.3k, False: 434]
  ------------------
 3675|  98.3k|            const auto ch = *m_begin;
 3676|  98.3k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 29.3k, False: 68.9k]
  |  Branch (3676:36): [True: 18.1k, False: 50.8k]
  ------------------
 3677|  47.5k|                break;
 3678|  47.5k|            }
 3679|  50.8k|            ++m_begin;
 3680|  50.8k|            ++digits_read;
 3681|  50.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  50.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 8.87k, False: 41.9k]
  ------------------
 3683|  8.87k|                break;
 3684|  8.87k|            }
 3685|  50.8k|        }
 3686|  56.8k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 17.1k, False: 39.7k]
  ------------------
 3687|  17.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  17.1k|                                 "Too few integer digits"});
 3689|  17.1k|            return -1;
 3690|  17.1k|        }
 3691|  39.7k|        return accumulator;
 3692|  56.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3049|  6.25k|    {
 3050|  6.25k|#if !SCN_DISABLE_LOCALE
 3051|  6.25k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 6.25k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  6.25k|#endif
 3059|       |
 3060|  6.25k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  6.25k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  6.25k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2709|  6.25k|    {
 2710|  6.25k|        if (!t.year) {
  ------------------
  |  Branch (2710:13): [True: 6.25k, False: 0]
  ------------------
 2711|  6.25k|            t.year = y;
 2712|  6.25k|        }
 2713|      0|        else {
 2714|      0|            t.year = *t.year + y;
 2715|      0|        }
 2716|  6.25k|        st.set_short_year(h);
 2717|  6.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3092|  4.64k|    {
 3093|  4.64k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.64k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.64k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.64k|#endif
 3101|       |
 3102|  4.64k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.64k|            {"January", 1},
 3104|  4.64k|            {"February", 2},
 3105|  4.64k|            {"March", 3},
 3106|  4.64k|            {"April", 4},
 3107|  4.64k|            {"May", 5},
 3108|  4.64k|            {"June", 6},
 3109|  4.64k|            {"July", 7},
 3110|  4.64k|            {"August", 8},
 3111|  4.64k|            {"September", 9},
 3112|  4.64k|            {"October", 10},
 3113|  4.64k|            {"November", 11},
 3114|  4.64k|            {"December", 12},
 3115|  4.64k|        }};
 3116|  4.64k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 76, False: 4.56k]
  ------------------
 3117|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     76|        }
 3119|  4.56k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.56k|            {"Jan", 1},
 3121|  4.56k|            {"Feb", 2},
 3122|  4.56k|            {"Mar", 3},
 3123|  4.56k|            {"Apr", 4},
 3124|  4.56k|            {"Jun", 6},
 3125|  4.56k|            {"Jul", 7},
 3126|  4.56k|            {"Aug", 8},
 3127|  4.56k|            {"Sep", 9},
 3128|  4.56k|            {"Oct", 10},
 3129|  4.56k|            {"Nov", 11},
 3130|  4.56k|            {"Dec", 12},
 3131|  4.56k|        }};
 3132|  4.56k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 2.92k, False: 1.64k]
  ------------------
 3133|  2.92k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|  2.92k|        }
 3135|  1.64k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  1.64k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2673|  11.3k|    {
 2674|  11.3k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.79k, False: 8.52k]
  |  |  |  Branch (986:45): [True: 2.66k, False: 8.64k]
  |  |  |  Branch (986:45): [True: 122, False: 8.52k]
  |  |  ------------------
  ------------------
 2675|  2.79k|            return h.set_error(
 2676|  2.79k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2677|  2.79k|        }
 2678|  8.52k|        t.mon = month{static_cast<unsigned>(m)};
 2679|  8.52k|        st.set_mon(h);
 2680|  8.52k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.64k|    {
 3710|  4.64k|        auto start_it = m_begin;
 3711|  4.64k|        std::size_t options_available = N;
 3712|  4.64k|        std::size_t chars_consumed = 0;
 3713|  18.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 13.9k, False: 4.50k]
  ------------------
 3714|  18.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 13.9k, False: 76]
  ------------------
 3715|  13.9k|            std::size_t i = 0;
 3716|  13.9k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 66, False: 13.8k]
  ------------------
 3717|     66|                options_available = 0;
 3718|     66|                break;
 3719|     66|            }
 3720|  13.8k|            const auto ch = *m_begin;
 3721|  13.8k|            ++m_begin;
 3722|  85.0k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 71.1k, False: 13.8k]
  ------------------
 3723|  71.1k|                const auto cmp = static_cast<unsigned>(
 3724|  71.1k|                    ch ^ options[i].first[chars_consumed]);
 3725|  71.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 71.1k]
  ------------------
 3726|  71.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 58.6k, False: 12.5k]
  |  Branch (3726:34): [True: 55.5k, False: 3.08k]
  ------------------
 3727|  55.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  55.5k|                                options.end());
 3729|  55.5k|                    --options_available;
 3730|  55.5k|                    continue;
 3731|  55.5k|                }
 3732|  15.6k|                ++i;
 3733|  15.6k|            }
 3734|  13.8k|            ++chars_consumed;
 3735|  13.8k|        }
 3736|  4.64k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.56k, False: 76]
  ------------------
 3737|  4.56k|            m_begin = start_it;
 3738|  4.56k|            return std::nullopt;
 3739|  4.56k|        }
 3740|     76|        return options.front().second;
 3741|  4.64k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.56k|    {
 3710|  4.56k|        auto start_it = m_begin;
 3711|  4.56k|        std::size_t options_available = N;
 3712|  4.56k|        std::size_t chars_consumed = 0;
 3713|  15.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 13.6k, False: 1.58k]
  ------------------
 3714|  15.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 10.7k, False: 2.92k]
  ------------------
 3715|  10.7k|            std::size_t i = 0;
 3716|  10.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 58, False: 10.6k]
  ------------------
 3717|     58|                options_available = 0;
 3718|     58|                break;
 3719|     58|            }
 3720|  10.6k|            const auto ch = *m_begin;
 3721|  10.6k|            ++m_begin;
 3722|  67.1k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 56.4k, False: 10.6k]
  ------------------
 3723|  56.4k|                const auto cmp = static_cast<unsigned>(
 3724|  56.4k|                    ch ^ options[i].first[chars_consumed]);
 3725|  56.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 56.4k]
  ------------------
 3726|  56.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.2k, False: 6.16k]
  |  Branch (3726:34): [True: 47.2k, False: 3.00k]
  ------------------
 3727|  47.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  47.2k|                                options.end());
 3729|  47.2k|                    --options_available;
 3730|  47.2k|                    continue;
 3731|  47.2k|                }
 3732|  9.16k|                ++i;
 3733|  9.16k|            }
 3734|  10.6k|            ++chars_consumed;
 3735|  10.6k|        }
 3736|  4.56k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 1.64k, False: 2.92k]
  ------------------
 3737|  1.64k|            m_begin = start_it;
 3738|  1.64k|            return std::nullopt;
 3739|  1.64k|        }
 3740|  2.92k|        return options.front().second;
 3741|  4.56k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3138|  8.30k|    {
 3139|  8.30k|#if !SCN_DISABLE_LOCALE
 3140|  8.30k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 8.30k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  8.30k|#endif
 3147|       |
 3148|  8.30k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  8.30k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  8.30k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3170|  8.28k|    {
 3171|  8.28k|#if !SCN_DISABLE_LOCALE
 3172|  8.28k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 8.28k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  8.28k|#endif
 3179|       |
 3180|  8.28k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  8.28k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  8.28k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2660|  8.28k|    {
 2661|  8.28k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.25k, False: 5.03k]
  |  |  |  Branch (986:45): [True: 3.17k, False: 5.11k]
  |  |  |  Branch (986:45): [True: 80, False: 5.03k]
  |  |  ------------------
  ------------------
 2662|  3.25k|            return h.set_error(
 2663|  3.25k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2664|  3.25k|        }
 2665|  5.03k|        t.mday = d;
 2666|  5.03k|        st.set_mday(h);
 2667|  5.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3185|  3.27k|    {
 3186|  3.27k|#if !SCN_DISABLE_LOCALE
 3187|  3.27k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.27k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.27k|#endif
 3194|       |
 3195|  3.27k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.27k|            {"Sunday", 0},
 3197|  3.27k|            {"Monday", 1},
 3198|  3.27k|            {"Tuesday", 2},
 3199|  3.27k|            {"Wednesday", 3},
 3200|  3.27k|            {"Thursday", 4},
 3201|  3.27k|            {"Friday", 5},
 3202|  3.27k|            {"Saturday", 6},
 3203|  3.27k|        }};
 3204|  3.27k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.27k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.27k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.27k|            {"Sun", 0},
 3209|  3.27k|            {"Mon", 1},
 3210|  3.27k|            {"Tue", 2},
 3211|  3.27k|            {"Wed", 3},
 3212|  3.27k|            {"Thu", 4},
 3213|  3.27k|            {"Fri", 5},
 3214|  3.27k|            {"Sat", 6},
 3215|  3.27k|        }};
 3216|  3.27k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 1.61k, False: 1.66k]
  ------------------
 3217|  1.61k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|  1.61k|        }
 3219|  1.66k|        return set_error(
 3220|  1.66k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.27k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2723|  1.61k|    {
 2724|  1.61k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  986|  3.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.61k]
  |  |  |  Branch (986:45): [True: 0, False: 1.61k]
  |  |  |  Branch (986:45): [True: 0, False: 1.61k]
  |  |  ------------------
  ------------------
 2725|      0|            return h.set_error(
 2726|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 2727|      0|        }
 2728|  1.61k|        t.wday = weekday{static_cast<unsigned>(d)};
 2729|  1.61k|        st.set_wday(h);
 2730|  1.61k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  6.55k|    {
 3710|  6.55k|        auto start_it = m_begin;
 3711|  6.55k|        std::size_t options_available = N;
 3712|  6.55k|        std::size_t chars_consumed = 0;
 3713|  21.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 16.8k, False: 4.88k]
  ------------------
 3714|  21.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 15.2k, False: 1.61k]
  ------------------
 3715|  15.2k|            std::size_t i = 0;
 3716|  15.2k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 54, False: 15.2k]
  ------------------
 3717|     54|                options_available = 0;
 3718|     54|                break;
 3719|     54|            }
 3720|  15.2k|            const auto ch = *m_begin;
 3721|  15.2k|            ++m_begin;
 3722|  69.7k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 54.5k, False: 15.2k]
  ------------------
 3723|  54.5k|                const auto cmp = static_cast<unsigned>(
 3724|  54.5k|                    ch ^ options[i].first[chars_consumed]);
 3725|  54.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 54.5k]
  ------------------
 3726|  54.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 44.2k, False: 10.2k]
  |  Branch (3726:34): [True: 44.2k, False: 72]
  ------------------
 3727|  44.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  44.2k|                                options.end());
 3729|  44.2k|                    --options_available;
 3730|  44.2k|                    continue;
 3731|  44.2k|                }
 3732|  10.3k|                ++i;
 3733|  10.3k|            }
 3734|  15.2k|            ++chars_consumed;
 3735|  15.2k|        }
 3736|  6.55k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.93k, False: 1.61k]
  ------------------
 3737|  4.93k|            m_begin = start_it;
 3738|  4.93k|            return std::nullopt;
 3739|  4.93k|        }
 3740|  1.61k|        return options.front().second;
 3741|  6.55k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 3259|  13.8k|    {
 3260|  13.8k|#if !SCN_DISABLE_LOCALE
 3261|  13.8k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 13.8k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  13.8k|#endif
 3268|       |
 3269|  13.8k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  13.8k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  13.8k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2634|  13.8k|    {
 2635|  13.8k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.39k, False: 11.4k]
  |  |  |  Branch (986:45): [True: 2.18k, False: 11.6k]
  |  |  |  Branch (986:45): [True: 208, False: 11.4k]
  |  |  ------------------
  ------------------
 2636|  2.39k|            return hdl.set_error(
 2637|  2.39k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2638|  2.39k|        }
 2639|  11.4k|        t.hour = h;
 2640|  11.4k|        st.set_hour24(hdl);
 2641|  11.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 3287|  13.7k|    {
 3288|  13.7k|#if !SCN_DISABLE_LOCALE
 3289|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 13.7k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  13.7k|#endif
 3296|       |
 3297|  13.7k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  13.7k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  13.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2621|  13.7k|    {
 2622|  13.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  24.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.73k, False: 11.0k]
  |  |  |  Branch (986:45): [True: 2.70k, False: 11.0k]
  |  |  |  Branch (986:45): [True: 26, False: 11.0k]
  |  |  ------------------
  ------------------
 2623|  2.73k|            return h.set_error({scan_error::invalid_scanned_value,
 2624|  2.73k|                                "Invalid value for minutes"});
 2625|  2.73k|        }
 2626|  11.0k|        t.min = m;
 2627|  11.0k|        st.set_min(h);
 2628|  11.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3301|  2.70k|    {
 3302|  2.70k|#if !SCN_DISABLE_LOCALE
 3303|  2.70k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 2.70k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  2.70k|#endif
 3310|       |
 3311|  2.70k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  2.70k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  2.70k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2608|  2.70k|    {
 2609|  2.70k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  3.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.62k, False: 1.08k]
  |  |  |  Branch (986:45): [True: 1.61k, False: 1.08k]
  |  |  |  Branch (986:45): [True: 4, False: 1.08k]
  |  |  ------------------
  ------------------
 2610|  1.62k|            return h.set_error({scan_error::invalid_scanned_value,
 2611|  1.62k|                                "Invalid value for seconds"});
 2612|  1.62k|        }
 2613|  1.08k|        t.sec = s;
 2614|  1.08k|        st.set_sec(h);
 2615|  1.08k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3543|  6.25k|    {
 3544|       |        // %m/%d/%y
 3545|  6.25k|        constexpr CharT slash = '/';
 3546|  6.25k|        on_dec_month();
 3547|  6.25k|        on_text(&slash, &slash + 1);
 3548|  6.25k|        on_day_of_month();
 3549|  6.25k|        on_text(&slash, &slash + 1);
 3550|  6.25k|        on_short_year();
 3551|  6.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3553|  1.97k|    {
 3554|       |        // %Y-%m-%d
 3555|  1.97k|        constexpr CharT dash = '-';
 3556|  1.97k|        on_full_year();
 3557|  1.97k|        on_text(&dash, &dash + 1);
 3558|  1.97k|        on_dec_month();
 3559|  1.97k|        on_text(&dash, &dash + 1);
 3560|  1.97k|        on_day_of_month();
 3561|  1.97k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3585|  11.0k|    {
 3586|       |        // %H:%M
 3587|  11.0k|        constexpr CharT colon = ':';
 3588|  11.0k|        on_24_hour();
 3589|  11.0k|        on_text(&colon, &colon + 1);
 3590|  11.0k|        on_minute();
 3591|  11.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3593|  2.70k|    {
 3594|       |        // %H:%M:%S
 3595|  2.70k|        constexpr CharT colon = ':';
 3596|  2.70k|        on_24_hour();
 3597|  2.70k|        on_text(&colon, &colon + 1);
 3598|  2.70k|        on_minute();
 3599|  2.70k|        on_text(&colon, &colon + 1);
 3600|  2.70k|        on_second();
 3601|  2.70k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3632|  20.0k|    {
 3633|  20.0k|        m_st.verify(*this);
 3634|  20.0k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 20.0k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  20.0k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 19.7k, False: 314]
  |  Branch (3637:37): [True: 4.61k, False: 15.1k]
  |  Branch (3637:60): [True: 0, False: 15.1k]
  ------------------
 3638|  4.61k|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|  4.61k|        }
 3640|  20.0k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2773|  4.77k|    {
 2774|  4.77k|        assert(t.year);
 2775|  4.77k|        st.handle_short_year_and_century(*t.year, 0);
 2776|  4.77k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3643|  63.4k|    {
 3644|  63.4k|        return m_error;
 3645|  63.4k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3660|  20.0k|    {
 3661|  20.0k|        return m_begin;
 3662|  20.0k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3853|  26.9k|{
 3854|  26.9k|    {
 3855|  26.9k|        SCN_TRY(it,
  ------------------
  |  | 3939|  26.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  26.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  26.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 260, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    260|    }                                                  \
  |  |  |  | 3938|  26.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  26.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  26.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  26.7k|    static_cast<    \
  |  | 1056|  26.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  26.7k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  26.7k|        ctx.range(), t, ctx.locale());
 3862|  26.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  26.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 11.7k, False: 14.9k]
  |  |  ------------------
  ------------------
 3864|  11.7k|        return unexpected(e.error());
 3865|  11.7k|    }
 3866|  14.9k|    return r.get_iterator();
 3867|  26.7k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2997|  26.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  26.7k|    static_cast<    \
  |  | 1056|  26.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  26.7k|          m_begin(ranges::begin(m_range)),
 2999|  26.7k|          m_tm(t),
 3000|  26.7k|          m_loc(loc)
 3001|  26.7k|    {
 3002|  26.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3648|  11.0k|    {
 3649|  11.0k|        set_error({scan_error::invalid_format_string, msg});
 3650|  11.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3653|  45.9k|    {
 3654|  45.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 11.7k, False: 34.2k]
  ------------------
 3655|  11.7k|            m_error = unexpected(e);
 3656|  11.7k|        }
 3657|  45.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3005|  23.8k|    {
 3006|  36.4k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 23.8k, False: 12.5k]
  ------------------
 3007|  23.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 168, False: 23.6k]
  ------------------
 3008|    168|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    168|            }
 3010|  23.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 11.0k, False: 12.5k]
  ------------------
 3011|  11.0k|                return on_error("Invalid literal character");
 3012|  11.0k|            }
 3013|  12.5k|            ++beg;
 3014|  12.5k|            ++m_begin;
 3015|  12.5k|        }
 3016|  23.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3035|  3.70k|    {
 3036|  3.70k|#if !SCN_DISABLE_LOCALE
 3037|  3.70k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 3.70k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  3.70k|#endif
 3044|       |
 3045|  3.70k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  3.70k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  3.70k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2686|  3.70k|    {
 2687|  3.70k|        t.year = y;
 2688|  3.70k|        st.set_full_year(h);
 2689|  3.70k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3671|  42.6k|    {
 3672|  42.6k|        int digits_read = 0;
 3673|  42.6k|        int accumulator = 0;
 3674|  69.3k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 69.0k, False: 356]
  ------------------
 3675|  69.0k|            const auto ch = *m_begin;
 3676|  69.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 21.1k, False: 47.9k]
  |  Branch (3676:36): [True: 17.0k, False: 30.8k]
  ------------------
 3677|  38.1k|                break;
 3678|  38.1k|            }
 3679|  30.8k|            ++m_begin;
 3680|  30.8k|            ++digits_read;
 3681|  30.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  30.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 4.14k, False: 26.7k]
  ------------------
 3683|  4.14k|                break;
 3684|  4.14k|            }
 3685|  30.8k|        }
 3686|  42.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 17.9k, False: 24.7k]
  ------------------
 3687|  17.9k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  17.9k|                                 "Too few integer digits"});
 3689|  17.9k|            return -1;
 3690|  17.9k|        }
 3691|  24.7k|        return accumulator;
 3692|  42.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3049|  1.82k|    {
 3050|  1.82k|#if !SCN_DISABLE_LOCALE
 3051|  1.82k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 1.82k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  1.82k|#endif
 3059|       |
 3060|  1.82k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  1.82k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  1.82k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2709|  1.82k|    {
 2710|  1.82k|        if (!t.year) {
  ------------------
  |  Branch (2710:13): [True: 1.82k, False: 0]
  ------------------
 2711|  1.82k|            t.year = y;
 2712|  1.82k|        }
 2713|      0|        else {
 2714|      0|            t.year = *t.year + y;
 2715|      0|        }
 2716|  1.82k|        st.set_short_year(h);
 2717|  1.82k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3092|  4.67k|    {
 3093|  4.67k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.67k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.67k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.67k|#endif
 3101|       |
 3102|  4.67k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.67k|            {"January", 1},
 3104|  4.67k|            {"February", 2},
 3105|  4.67k|            {"March", 3},
 3106|  4.67k|            {"April", 4},
 3107|  4.67k|            {"May", 5},
 3108|  4.67k|            {"June", 6},
 3109|  4.67k|            {"July", 7},
 3110|  4.67k|            {"August", 8},
 3111|  4.67k|            {"September", 9},
 3112|  4.67k|            {"October", 10},
 3113|  4.67k|            {"November", 11},
 3114|  4.67k|            {"December", 12},
 3115|  4.67k|        }};
 3116|  4.67k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 76, False: 4.60k]
  ------------------
 3117|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     76|        }
 3119|  4.60k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.60k|            {"Jan", 1},
 3121|  4.60k|            {"Feb", 2},
 3122|  4.60k|            {"Mar", 3},
 3123|  4.60k|            {"Apr", 4},
 3124|  4.60k|            {"Jun", 6},
 3125|  4.60k|            {"Jul", 7},
 3126|  4.60k|            {"Aug", 8},
 3127|  4.60k|            {"Sep", 9},
 3128|  4.60k|            {"Oct", 10},
 3129|  4.60k|            {"Nov", 11},
 3130|  4.60k|            {"Dec", 12},
 3131|  4.60k|        }};
 3132|  4.60k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 2.92k, False: 1.67k]
  ------------------
 3133|  2.92k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|  2.92k|        }
 3135|  1.67k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  1.67k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2673|  6.89k|    {
 2674|  6.89k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.90k, False: 3.99k]
  |  |  |  Branch (986:45): [True: 2.80k, False: 4.09k]
  |  |  |  Branch (986:45): [True: 102, False: 3.99k]
  |  |  ------------------
  ------------------
 2675|  2.90k|            return h.set_error(
 2676|  2.90k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2677|  2.90k|        }
 2678|  3.99k|        t.mon = month{static_cast<unsigned>(m)};
 2679|  3.99k|        st.set_mon(h);
 2680|  3.99k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.67k|    {
 3710|  4.67k|        auto start_it = m_begin;
 3711|  4.67k|        std::size_t options_available = N;
 3712|  4.67k|        std::size_t chars_consumed = 0;
 3713|  18.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 13.9k, False: 4.54k]
  ------------------
 3714|  18.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 13.9k, False: 76]
  ------------------
 3715|  13.9k|            std::size_t i = 0;
 3716|  13.9k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 60, False: 13.8k]
  ------------------
 3717|     60|                options_available = 0;
 3718|     60|                break;
 3719|     60|            }
 3720|  13.8k|            const auto ch = *m_begin;
 3721|  13.8k|            ++m_begin;
 3722|  85.3k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 71.5k, False: 13.8k]
  ------------------
 3723|  71.5k|                const auto cmp = static_cast<unsigned>(
 3724|  71.5k|                    ch ^ options[i].first[chars_consumed]);
 3725|  71.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 71.5k]
  ------------------
 3726|  71.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 58.9k, False: 12.5k]
  |  Branch (3726:34): [True: 55.9k, False: 3.05k]
  ------------------
 3727|  55.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  55.9k|                                options.end());
 3729|  55.9k|                    --options_available;
 3730|  55.9k|                    continue;
 3731|  55.9k|                }
 3732|  15.5k|                ++i;
 3733|  15.5k|            }
 3734|  13.8k|            ++chars_consumed;
 3735|  13.8k|        }
 3736|  4.67k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.60k, False: 76]
  ------------------
 3737|  4.60k|            m_begin = start_it;
 3738|  4.60k|            return std::nullopt;
 3739|  4.60k|        }
 3740|     76|        return options.front().second;
 3741|  4.67k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.60k|    {
 3710|  4.60k|        auto start_it = m_begin;
 3711|  4.60k|        std::size_t options_available = N;
 3712|  4.60k|        std::size_t chars_consumed = 0;
 3713|  15.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 13.6k, False: 1.62k]
  ------------------
 3714|  15.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 10.7k, False: 2.92k]
  ------------------
 3715|  10.7k|            std::size_t i = 0;
 3716|  10.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 52, False: 10.6k]
  ------------------
 3717|     52|                options_available = 0;
 3718|     52|                break;
 3719|     52|            }
 3720|  10.6k|            const auto ch = *m_begin;
 3721|  10.6k|            ++m_begin;
 3722|  67.4k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 56.7k, False: 10.6k]
  ------------------
 3723|  56.7k|                const auto cmp = static_cast<unsigned>(
 3724|  56.7k|                    ch ^ options[i].first[chars_consumed]);
 3725|  56.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 56.7k]
  ------------------
 3726|  56.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.5k, False: 6.13k]
  |  Branch (3726:34): [True: 47.6k, False: 2.97k]
  ------------------
 3727|  47.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  47.6k|                                options.end());
 3729|  47.6k|                    --options_available;
 3730|  47.6k|                    continue;
 3731|  47.6k|                }
 3732|  9.11k|                ++i;
 3733|  9.11k|            }
 3734|  10.6k|            ++chars_consumed;
 3735|  10.6k|        }
 3736|  4.60k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 1.67k, False: 2.92k]
  ------------------
 3737|  1.67k|            m_begin = start_it;
 3738|  1.67k|            return std::nullopt;
 3739|  1.67k|        }
 3740|  2.92k|        return options.front().second;
 3741|  4.60k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3138|  3.89k|    {
 3139|  3.89k|#if !SCN_DISABLE_LOCALE
 3140|  3.89k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 3.89k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  3.89k|#endif
 3147|       |
 3148|  3.89k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  3.89k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  3.89k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3170|  3.88k|    {
 3171|  3.88k|#if !SCN_DISABLE_LOCALE
 3172|  3.88k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 3.88k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  3.88k|#endif
 3179|       |
 3180|  3.88k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  3.88k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  3.88k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2660|  3.88k|    {
 2661|  3.88k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.34k, False: 536]
  |  |  |  Branch (986:45): [True: 3.27k, False: 608]
  |  |  |  Branch (986:45): [True: 72, False: 536]
  |  |  ------------------
  ------------------
 2662|  3.34k|            return h.set_error(
 2663|  3.34k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2664|  3.34k|        }
 2665|    536|        t.mday = d;
 2666|    536|        st.set_mday(h);
 2667|    536|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3185|  3.24k|    {
 3186|  3.24k|#if !SCN_DISABLE_LOCALE
 3187|  3.24k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.24k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.24k|#endif
 3194|       |
 3195|  3.24k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.24k|            {"Sunday", 0},
 3197|  3.24k|            {"Monday", 1},
 3198|  3.24k|            {"Tuesday", 2},
 3199|  3.24k|            {"Wednesday", 3},
 3200|  3.24k|            {"Thursday", 4},
 3201|  3.24k|            {"Friday", 5},
 3202|  3.24k|            {"Saturday", 6},
 3203|  3.24k|        }};
 3204|  3.24k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.24k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.24k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.24k|            {"Sun", 0},
 3209|  3.24k|            {"Mon", 1},
 3210|  3.24k|            {"Tue", 2},
 3211|  3.24k|            {"Wed", 3},
 3212|  3.24k|            {"Thu", 4},
 3213|  3.24k|            {"Fri", 5},
 3214|  3.24k|            {"Sat", 6},
 3215|  3.24k|        }};
 3216|  3.24k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 1.55k, False: 1.69k]
  ------------------
 3217|  1.55k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|  1.55k|        }
 3219|  1.69k|        return set_error(
 3220|  1.69k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.24k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2723|  1.55k|    {
 2724|  1.55k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  986|  3.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.55k]
  |  |  |  Branch (986:45): [True: 0, False: 1.55k]
  |  |  |  Branch (986:45): [True: 0, False: 1.55k]
  |  |  ------------------
  ------------------
 2725|      0|            return h.set_error(
 2726|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 2727|      0|        }
 2728|  1.55k|        t.wday = weekday{static_cast<unsigned>(d)};
 2729|  1.55k|        st.set_wday(h);
 2730|  1.55k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  6.48k|    {
 3710|  6.48k|        auto start_it = m_begin;
 3711|  6.48k|        std::size_t options_available = N;
 3712|  6.48k|        std::size_t chars_consumed = 0;
 3713|  21.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 16.3k, False: 4.89k]
  ------------------
 3714|  21.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 14.7k, False: 1.55k]
  ------------------
 3715|  14.7k|            std::size_t i = 0;
 3716|  14.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 38, False: 14.7k]
  ------------------
 3717|     38|                options_available = 0;
 3718|     38|                break;
 3719|     38|            }
 3720|  14.7k|            const auto ch = *m_begin;
 3721|  14.7k|            ++m_begin;
 3722|  68.4k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 53.6k, False: 14.7k]
  ------------------
 3723|  53.6k|                const auto cmp = static_cast<unsigned>(
 3724|  53.6k|                    ch ^ options[i].first[chars_consumed]);
 3725|  53.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 53.6k]
  ------------------
 3726|  53.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 43.8k, False: 9.84k]
  |  Branch (3726:34): [True: 43.7k, False: 44]
  ------------------
 3727|  43.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  43.7k|                                options.end());
 3729|  43.7k|                    --options_available;
 3730|  43.7k|                    continue;
 3731|  43.7k|                }
 3732|  9.88k|                ++i;
 3733|  9.88k|            }
 3734|  14.7k|            ++chars_consumed;
 3735|  14.7k|        }
 3736|  6.48k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.93k, False: 1.55k]
  ------------------
 3737|  4.93k|            m_begin = start_it;
 3738|  4.93k|            return std::nullopt;
 3739|  4.93k|        }
 3740|  1.55k|        return options.front().second;
 3741|  6.48k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 3259|  13.3k|    {
 3260|  13.3k|#if !SCN_DISABLE_LOCALE
 3261|  13.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 13.3k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  13.3k|#endif
 3268|       |
 3269|  13.3k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  13.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  13.3k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2634|  13.3k|    {
 2635|  13.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.66k, False: 10.6k]
  |  |  |  Branch (986:45): [True: 2.48k, False: 10.8k]
  |  |  |  Branch (986:45): [True: 186, False: 10.6k]
  |  |  ------------------
  ------------------
 2636|  2.66k|            return hdl.set_error(
 2637|  2.66k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2638|  2.66k|        }
 2639|  10.6k|        t.hour = h;
 2640|  10.6k|        st.set_hour24(hdl);
 2641|  10.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 3287|  13.2k|    {
 3288|  13.2k|#if !SCN_DISABLE_LOCALE
 3289|  13.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 13.2k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  13.2k|#endif
 3296|       |
 3297|  13.2k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  13.2k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  13.2k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2621|  13.2k|    {
 2622|  13.2k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.84k, False: 10.4k]
  |  |  |  Branch (986:45): [True: 2.82k, False: 10.4k]
  |  |  |  Branch (986:45): [True: 18, False: 10.4k]
  |  |  ------------------
  ------------------
 2623|  2.84k|            return h.set_error({scan_error::invalid_scanned_value,
 2624|  2.84k|                                "Invalid value for minutes"});
 2625|  2.84k|        }
 2626|  10.4k|        t.min = m;
 2627|  10.4k|        st.set_min(h);
 2628|  10.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3301|  2.72k|    {
 3302|  2.72k|#if !SCN_DISABLE_LOCALE
 3303|  2.72k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 2.72k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  2.72k|#endif
 3310|       |
 3311|  2.72k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  2.72k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  2.72k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2608|  2.72k|    {
 2609|  2.72k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  3.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.66k, False: 1.06k]
  |  |  |  Branch (986:45): [True: 1.66k, False: 1.06k]
  |  |  |  Branch (986:45): [True: 2, False: 1.06k]
  |  |  ------------------
  ------------------
 2610|  1.66k|            return h.set_error({scan_error::invalid_scanned_value,
 2611|  1.66k|                                "Invalid value for seconds"});
 2612|  1.66k|        }
 2613|  1.06k|        t.sec = s;
 2614|  1.06k|        st.set_sec(h);
 2615|  1.06k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3543|  1.82k|    {
 3544|       |        // %m/%d/%y
 3545|  1.82k|        constexpr CharT slash = '/';
 3546|  1.82k|        on_dec_month();
 3547|  1.82k|        on_text(&slash, &slash + 1);
 3548|  1.82k|        on_day_of_month();
 3549|  1.82k|        on_text(&slash, &slash + 1);
 3550|  1.82k|        on_short_year();
 3551|  1.82k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3553|  2.00k|    {
 3554|       |        // %Y-%m-%d
 3555|  2.00k|        constexpr CharT dash = '-';
 3556|  2.00k|        on_full_year();
 3557|  2.00k|        on_text(&dash, &dash + 1);
 3558|  2.00k|        on_dec_month();
 3559|  2.00k|        on_text(&dash, &dash + 1);
 3560|  2.00k|        on_day_of_month();
 3561|  2.00k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3585|  10.5k|    {
 3586|       |        // %H:%M
 3587|  10.5k|        constexpr CharT colon = ':';
 3588|  10.5k|        on_24_hour();
 3589|  10.5k|        on_text(&colon, &colon + 1);
 3590|  10.5k|        on_minute();
 3591|  10.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3593|  2.72k|    {
 3594|       |        // %H:%M:%S
 3595|  2.72k|        constexpr CharT colon = ':';
 3596|  2.72k|        on_24_hour();
 3597|  2.72k|        on_text(&colon, &colon + 1);
 3598|  2.72k|        on_minute();
 3599|  2.72k|        on_text(&colon, &colon + 1);
 3600|  2.72k|        on_second();
 3601|  2.72k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3632|  14.9k|    {
 3633|  14.9k|        m_st.verify(*this);
 3634|  14.9k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 14.9k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  14.9k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 14.6k, False: 314]
  |  Branch (3637:37): [True: 136, False: 14.5k]
  |  Branch (3637:60): [True: 0, False: 14.5k]
  ------------------
 3638|    136|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|    136|        }
 3640|  14.9k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3643|  53.6k|    {
 3644|  53.6k|        return m_error;
 3645|  53.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3660|  14.9k|    {
 3661|  14.9k|        return m_begin;
 3662|  14.9k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3853|  31.8k|{
 3854|  31.8k|    {
 3855|  31.8k|        SCN_TRY(it,
  ------------------
  |  | 3939|  31.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  31.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  31.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 346, False: 31.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    346|    }                                                  \
  |  |  |  | 3938|  31.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  31.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  31.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  31.5k|    static_cast<    \
  |  | 1056|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  31.5k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  31.5k|        ctx.range(), t, ctx.locale());
 3862|  31.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  31.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 23.7k, False: 7.77k]
  |  |  ------------------
  ------------------
 3864|  23.7k|        return unexpected(e.error());
 3865|  23.7k|    }
 3866|  7.77k|    return r.get_iterator();
 3867|  31.5k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2997|  31.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  31.5k|    static_cast<    \
  |  | 1056|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  31.5k|          m_begin(ranges::begin(m_range)),
 2999|  31.5k|          m_tm(t),
 3000|  31.5k|          m_loc(loc)
 3001|  31.5k|    {
 3002|  31.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3648|  23.1k|    {
 3649|  23.1k|        set_error({scan_error::invalid_format_string, msg});
 3650|  23.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3653|   101k|    {
 3654|   101k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 23.7k, False: 78.2k]
  ------------------
 3655|  23.7k|            m_error = unexpected(e);
 3656|  23.7k|        }
 3657|   101k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3005|  31.0k|    {
 3006|  38.8k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 31.0k, False: 7.79k]
  ------------------
 3007|  31.0k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 120, False: 30.9k]
  ------------------
 3008|    120|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    120|            }
 3010|  30.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 23.1k, False: 7.79k]
  ------------------
 3011|  23.1k|                return on_error("Invalid literal character");
 3012|  23.1k|            }
 3013|  7.79k|            ++beg;
 3014|  7.79k|            ++m_begin;
 3015|  7.79k|        }
 3016|  31.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3035|  6.80k|    {
 3036|  6.80k|#if !SCN_DISABLE_LOCALE
 3037|  6.80k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 6.80k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  6.80k|#endif
 3044|       |
 3045|  6.80k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  6.80k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  6.80k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  6.80k|    {
 2509|  6.80k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 6.80k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  6.80k|        t.tm_year = y - 1900;
 2514|  6.80k|        st.set_full_year(h);
 2515|  6.80k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3671|  55.0k|    {
 3672|  55.0k|        int digits_read = 0;
 3673|  55.0k|        int accumulator = 0;
 3674|  71.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 71.5k, False: 262]
  ------------------
 3675|  71.5k|            const auto ch = *m_begin;
 3676|  71.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 30.4k, False: 41.0k]
  |  Branch (3676:36): [True: 21.7k, False: 19.3k]
  ------------------
 3677|  52.1k|                break;
 3678|  52.1k|            }
 3679|  19.3k|            ++m_begin;
 3680|  19.3k|            ++digits_read;
 3681|  19.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  19.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 2.61k, False: 16.6k]
  ------------------
 3683|  2.61k|                break;
 3684|  2.61k|            }
 3685|  19.3k|        }
 3686|  55.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 39.2k, False: 15.8k]
  ------------------
 3687|  39.2k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  39.2k|                                 "Too few integer digits"});
 3689|  39.2k|            return -1;
 3690|  39.2k|        }
 3691|  15.8k|        return accumulator;
 3692|  55.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3049|  3.40k|    {
 3050|  3.40k|#if !SCN_DISABLE_LOCALE
 3051|  3.40k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 3.40k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  3.40k|#endif
 3059|       |
 3060|  3.40k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  3.40k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  3.40k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  3.40k|    {
 2526|  3.40k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  3.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.38k, False: 18]
  |  |  |  Branch (986:45): [True: 3.38k, False: 18]
  |  |  |  Branch (986:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2527|  3.38k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  3.38k|                                "Invalid value for tm_year"});
 2529|  3.38k|        }
 2530|     18|        st.short_year_value = y;
 2531|     18|        st.set_short_year(h);
 2532|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3092|  4.11k|    {
 3093|  4.11k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.11k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.11k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.11k|#endif
 3101|       |
 3102|  4.11k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.11k|            {"January", 1},
 3104|  4.11k|            {"February", 2},
 3105|  4.11k|            {"March", 3},
 3106|  4.11k|            {"April", 4},
 3107|  4.11k|            {"May", 5},
 3108|  4.11k|            {"June", 6},
 3109|  4.11k|            {"July", 7},
 3110|  4.11k|            {"August", 8},
 3111|  4.11k|            {"September", 9},
 3112|  4.11k|            {"October", 10},
 3113|  4.11k|            {"November", 11},
 3114|  4.11k|            {"December", 12},
 3115|  4.11k|        }};
 3116|  4.11k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 22, False: 4.08k]
  ------------------
 3117|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     22|        }
 3119|  4.08k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.08k|            {"Jan", 1},
 3121|  4.08k|            {"Feb", 2},
 3122|  4.08k|            {"Mar", 3},
 3123|  4.08k|            {"Apr", 4},
 3124|  4.08k|            {"Jun", 6},
 3125|  4.08k|            {"Jul", 7},
 3126|  4.08k|            {"Aug", 8},
 3127|  4.08k|            {"Sep", 9},
 3128|  4.08k|            {"Oct", 10},
 3129|  4.08k|            {"Nov", 11},
 3130|  4.08k|            {"Dec", 12},
 3131|  4.08k|        }};
 3132|  4.08k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 704, False: 3.38k]
  ------------------
 3133|    704|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|    704|        }
 3135|  3.38k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  3.38k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  7.57k|    {
 2499|  7.57k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.45k, False: 1.12k]
  |  |  |  Branch (986:45): [True: 6.40k, False: 1.17k]
  |  |  |  Branch (986:45): [True: 52, False: 1.12k]
  |  |  ------------------
  ------------------
 2500|  6.45k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  6.45k|                                "Invalid value for tm_mon"});
 2502|  6.45k|        }
 2503|  1.12k|        t.tm_mon = m - 1;
 2504|  1.12k|        st.set_mon(h);
 2505|  1.12k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.11k|    {
 3710|  4.11k|        auto start_it = m_begin;
 3711|  4.11k|        std::size_t options_available = N;
 3712|  4.11k|        std::size_t chars_consumed = 0;
 3713|  10.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.38k, False: 4.04k]
  ------------------
 3714|  10.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.36k, False: 22]
  ------------------
 3715|  6.36k|            std::size_t i = 0;
 3716|  6.36k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 40, False: 6.32k]
  ------------------
 3717|     40|                options_available = 0;
 3718|     40|                break;
 3719|     40|            }
 3720|  6.32k|            const auto ch = *m_begin;
 3721|  6.32k|            ++m_begin;
 3722|  59.3k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 53.0k, False: 6.32k]
  ------------------
 3723|  53.0k|                const auto cmp = static_cast<unsigned>(
 3724|  53.0k|                    ch ^ options[i].first[chars_consumed]);
 3725|  53.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 53.0k]
  ------------------
 3726|  53.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.0k, False: 2.96k]
  |  Branch (3726:34): [True: 49.2k, False: 838]
  ------------------
 3727|  49.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.2k|                                options.end());
 3729|  49.2k|                    --options_available;
 3730|  49.2k|                    continue;
 3731|  49.2k|                }
 3732|  3.79k|                ++i;
 3733|  3.79k|            }
 3734|  6.32k|            ++chars_consumed;
 3735|  6.32k|        }
 3736|  4.11k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.08k, False: 22]
  ------------------
 3737|  4.08k|            m_begin = start_it;
 3738|  4.08k|            return std::nullopt;
 3739|  4.08k|        }
 3740|     22|        return options.front().second;
 3741|  4.11k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.08k|    {
 3710|  4.08k|        auto start_it = m_begin;
 3711|  4.08k|        std::size_t options_available = N;
 3712|  4.08k|        std::size_t chars_consumed = 0;
 3713|  9.64k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.29k, False: 3.35k]
  ------------------
 3714|  9.64k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 5.59k, False: 704]
  ------------------
 3715|  5.59k|            std::size_t i = 0;
 3716|  5.59k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 30, False: 5.56k]
  ------------------
 3717|     30|                options_available = 0;
 3718|     30|                break;
 3719|     30|            }
 3720|  5.56k|            const auto ch = *m_begin;
 3721|  5.56k|            ++m_begin;
 3722|  52.0k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 46.4k, False: 5.56k]
  ------------------
 3723|  46.4k|                const auto cmp = static_cast<unsigned>(
 3724|  46.4k|                    ch ^ options[i].first[chars_consumed]);
 3725|  46.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 46.4k]
  ------------------
 3726|  46.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 45.0k, False: 1.45k]
  |  Branch (3726:34): [True: 44.2k, False: 786]
  ------------------
 3727|  44.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  44.2k|                                options.end());
 3729|  44.2k|                    --options_available;
 3730|  44.2k|                    continue;
 3731|  44.2k|                }
 3732|  2.24k|                ++i;
 3733|  2.24k|            }
 3734|  5.56k|            ++chars_consumed;
 3735|  5.56k|        }
 3736|  4.08k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 3.38k, False: 704]
  ------------------
 3737|  3.38k|            m_begin = start_it;
 3738|  3.38k|            return std::nullopt;
 3739|  3.38k|        }
 3740|    704|        return options.front().second;
 3741|  4.08k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3138|  6.85k|    {
 3139|  6.85k|#if !SCN_DISABLE_LOCALE
 3140|  6.85k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 6.85k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  6.85k|#endif
 3147|       |
 3148|  6.85k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  6.85k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  6.85k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3170|  6.83k|    {
 3171|  6.83k|#if !SCN_DISABLE_LOCALE
 3172|  6.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 6.83k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  6.83k|#endif
 3179|       |
 3180|  6.83k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  6.83k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  6.83k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  6.83k|    {
 2489|  6.83k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.75k, False: 78]
  |  |  |  Branch (986:45): [True: 6.74k, False: 86]
  |  |  |  Branch (986:45): [True: 8, False: 78]
  |  |  ------------------
  ------------------
 2490|  6.75k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  6.75k|                                "Invalid value for tm_mday"});
 2492|  6.75k|        }
 2493|     78|        t.tm_mday = d;
 2494|     78|        st.set_mday(h);
 2495|     78|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3185|  3.40k|    {
 3186|  3.40k|#if !SCN_DISABLE_LOCALE
 3187|  3.40k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.40k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.40k|#endif
 3194|       |
 3195|  3.40k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.40k|            {"Sunday", 0},
 3197|  3.40k|            {"Monday", 1},
 3198|  3.40k|            {"Tuesday", 2},
 3199|  3.40k|            {"Wednesday", 3},
 3200|  3.40k|            {"Thursday", 4},
 3201|  3.40k|            {"Friday", 5},
 3202|  3.40k|            {"Saturday", 6},
 3203|  3.40k|        }};
 3204|  3.40k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.40k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.40k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.40k|            {"Sun", 0},
 3209|  3.40k|            {"Mon", 1},
 3210|  3.40k|            {"Tue", 2},
 3211|  3.40k|            {"Wed", 3},
 3212|  3.40k|            {"Thu", 4},
 3213|  3.40k|            {"Fri", 5},
 3214|  3.40k|            {"Sat", 6},
 3215|  3.40k|        }};
 3216|  3.40k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 0, False: 3.40k]
  ------------------
 3217|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|      0|        }
 3219|  3.40k|        return set_error(
 3220|  3.40k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.40k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  6.80k|    {
 3710|  6.80k|        auto start_it = m_begin;
 3711|  6.80k|        std::size_t options_available = N;
 3712|  6.80k|        std::size_t chars_consumed = 0;
 3713|  13.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.99k, False: 6.78k]
  ------------------
 3714|  13.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.99k, False: 0]
  ------------------
 3715|  6.99k|            std::size_t i = 0;
 3716|  6.99k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 20, False: 6.97k]
  ------------------
 3717|     20|                options_available = 0;
 3718|     20|                break;
 3719|     20|            }
 3720|  6.97k|            const auto ch = *m_begin;
 3721|  6.97k|            ++m_begin;
 3722|  54.7k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 47.7k, False: 6.97k]
  ------------------
 3723|  47.7k|                const auto cmp = static_cast<unsigned>(
 3724|  47.7k|                    ch ^ options[i].first[chars_consumed]);
 3725|  47.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 47.7k]
  ------------------
 3726|  47.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 47.5k, False: 200]
  |  Branch (3726:34): [True: 47.5k, False: 16]
  ------------------
 3727|  47.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  47.5k|                                options.end());
 3729|  47.5k|                    --options_available;
 3730|  47.5k|                    continue;
 3731|  47.5k|                }
 3732|    216|                ++i;
 3733|    216|            }
 3734|  6.97k|            ++chars_consumed;
 3735|  6.97k|        }
 3736|  6.80k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 6.80k, False: 0]
  ------------------
 3737|  6.80k|            m_begin = start_it;
 3738|  6.80k|            return std::nullopt;
 3739|  6.80k|        }
 3740|      0|        return options.front().second;
 3741|  6.80k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 3259|  13.7k|    {
 3260|  13.7k|#if !SCN_DISABLE_LOCALE
 3261|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 13.7k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  13.7k|#endif
 3268|       |
 3269|  13.7k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  13.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  13.7k|    {
 2469|  13.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.33k, False: 7.45k]
  |  |  |  Branch (986:45): [True: 6.25k, False: 7.54k]
  |  |  |  Branch (986:45): [True: 82, False: 7.45k]
  |  |  ------------------
  ------------------
 2470|  6.33k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  6.33k|                                  "Invalid value for tm_hour"});
 2472|  6.33k|        }
 2473|  7.45k|        t.tm_hour = h;
 2474|  7.45k|        st.set_hour24(hdl);
 2475|  7.45k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 3287|  13.7k|    {
 3288|  13.7k|#if !SCN_DISABLE_LOCALE
 3289|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 13.7k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  13.7k|#endif
 3296|       |
 3297|  13.7k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  13.7k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  13.7k|    {
 2459|  13.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.37k, False: 7.41k]
  |  |  |  Branch (986:45): [True: 6.36k, False: 7.42k]
  |  |  |  Branch (986:45): [True: 12, False: 7.41k]
  |  |  ------------------
  ------------------
 2460|  6.37k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  6.37k|                                "Invalid value for tm_min"});
 2462|  6.37k|        }
 2463|  7.41k|        t.tm_min = m;
 2464|  7.41k|        st.set_min(h);
 2465|  7.41k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3301|  3.59k|    {
 3302|  3.59k|#if !SCN_DISABLE_LOCALE
 3303|  3.59k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.59k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.59k|#endif
 3310|       |
 3311|  3.59k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.59k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.59k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  3.59k|    {
 2449|  3.59k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  3.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.36k, False: 230]
  |  |  |  Branch (986:45): [True: 3.36k, False: 232]
  |  |  |  Branch (986:45): [True: 2, False: 230]
  |  |  ------------------
  ------------------
 2450|  3.36k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  3.36k|                                "Invalid value for tm_sec"});
 2452|  3.36k|        }
 2453|    230|        t.tm_sec = s;
 2454|    230|        st.set_sec(h);
 2455|    230|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3543|  3.40k|    {
 3544|       |        // %m/%d/%y
 3545|  3.40k|        constexpr CharT slash = '/';
 3546|  3.40k|        on_dec_month();
 3547|  3.40k|        on_text(&slash, &slash + 1);
 3548|  3.40k|        on_day_of_month();
 3549|  3.40k|        on_text(&slash, &slash + 1);
 3550|  3.40k|        on_short_year();
 3551|  3.40k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3553|  3.40k|    {
 3554|       |        // %Y-%m-%d
 3555|  3.40k|        constexpr CharT dash = '-';
 3556|  3.40k|        on_full_year();
 3557|  3.40k|        on_text(&dash, &dash + 1);
 3558|  3.40k|        on_dec_month();
 3559|  3.40k|        on_text(&dash, &dash + 1);
 3560|  3.40k|        on_day_of_month();
 3561|  3.40k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3585|  10.1k|    {
 3586|       |        // %H:%M
 3587|  10.1k|        constexpr CharT colon = ':';
 3588|  10.1k|        on_24_hour();
 3589|  10.1k|        on_text(&colon, &colon + 1);
 3590|  10.1k|        on_minute();
 3591|  10.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3593|  3.59k|    {
 3594|       |        // %H:%M:%S
 3595|  3.59k|        constexpr CharT colon = ':';
 3596|  3.59k|        on_24_hour();
 3597|  3.59k|        on_text(&colon, &colon + 1);
 3598|  3.59k|        on_minute();
 3599|  3.59k|        on_text(&colon, &colon + 1);
 3600|  3.59k|        on_second();
 3601|  3.59k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3632|  7.77k|    {
 3633|  7.77k|        m_st.verify(*this);
 3634|  7.77k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 7.77k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  7.77k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 7.76k, False: 10]
  |  Branch (3637:37): [True: 10, False: 7.75k]
  |  Branch (3637:60): [True: 0, False: 7.75k]
  ------------------
 3638|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|     10|        }
 3640|  7.77k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3643|  63.0k|    {
 3644|  63.0k|        return m_error;
 3645|  63.0k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3660|  7.77k|    {
 3661|  7.77k|        return m_begin;
 3662|  7.77k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3853|  31.8k|{
 3854|  31.8k|    {
 3855|  31.8k|        SCN_TRY(it,
  ------------------
  |  | 3939|  31.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  31.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  31.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 346, False: 31.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    346|    }                                                  \
  |  |  |  | 3938|  31.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  31.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  31.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  31.5k|    static_cast<    \
  |  | 1056|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  31.5k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  31.5k|        ctx.range(), t, ctx.locale());
 3862|  31.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  31.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 23.7k, False: 7.77k]
  |  |  ------------------
  ------------------
 3864|  23.7k|        return unexpected(e.error());
 3865|  23.7k|    }
 3866|  7.77k|    return r.get_iterator();
 3867|  31.5k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  95.5k|{
  250|  95.5k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  95.5k|        .transform_error(impl::make_eof_scan_error);
  252|  95.5k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2997|  31.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  31.5k|    static_cast<    \
  |  | 1056|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  31.5k|          m_begin(ranges::begin(m_range)),
 2999|  31.5k|          m_tm(t),
 3000|  31.5k|          m_loc(loc)
 3001|  31.5k|    {
 3002|  31.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3648|  23.1k|    {
 3649|  23.1k|        set_error({scan_error::invalid_format_string, msg});
 3650|  23.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3653|   101k|    {
 3654|   101k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 23.7k, False: 78.2k]
  ------------------
 3655|  23.7k|            m_error = unexpected(e);
 3656|  23.7k|        }
 3657|   101k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3005|  31.0k|    {
 3006|  38.8k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 31.0k, False: 7.79k]
  ------------------
 3007|  31.0k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 120, False: 30.9k]
  ------------------
 3008|    120|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    120|            }
 3010|  30.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 23.1k, False: 7.79k]
  ------------------
 3011|  23.1k|                return on_error("Invalid literal character");
 3012|  23.1k|            }
 3013|  7.79k|            ++beg;
 3014|  7.79k|            ++m_begin;
 3015|  7.79k|        }
 3016|  31.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3035|  6.80k|    {
 3036|  6.80k|#if !SCN_DISABLE_LOCALE
 3037|  6.80k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 6.80k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  6.80k|#endif
 3044|       |
 3045|  6.80k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  6.80k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  6.80k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  6.80k|    {
 2509|  6.80k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 6.80k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  6.80k|        t.tm_year = y - 1900;
 2514|  6.80k|        st.set_full_year(h);
 2515|  6.80k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3671|  55.0k|    {
 3672|  55.0k|        int digits_read = 0;
 3673|  55.0k|        int accumulator = 0;
 3674|  71.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 71.5k, False: 262]
  ------------------
 3675|  71.5k|            const auto ch = *m_begin;
 3676|  71.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 30.4k, False: 41.0k]
  |  Branch (3676:36): [True: 21.7k, False: 19.3k]
  ------------------
 3677|  52.1k|                break;
 3678|  52.1k|            }
 3679|  19.3k|            ++m_begin;
 3680|  19.3k|            ++digits_read;
 3681|  19.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  19.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 2.61k, False: 16.6k]
  ------------------
 3683|  2.61k|                break;
 3684|  2.61k|            }
 3685|  19.3k|        }
 3686|  55.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 39.2k, False: 15.8k]
  ------------------
 3687|  39.2k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  39.2k|                                 "Too few integer digits"});
 3689|  39.2k|            return -1;
 3690|  39.2k|        }
 3691|  15.8k|        return accumulator;
 3692|  55.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3049|  3.40k|    {
 3050|  3.40k|#if !SCN_DISABLE_LOCALE
 3051|  3.40k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 3.40k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  3.40k|#endif
 3059|       |
 3060|  3.40k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  3.40k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  3.40k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  3.40k|    {
 2526|  3.40k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  3.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.38k, False: 18]
  |  |  |  Branch (986:45): [True: 3.38k, False: 18]
  |  |  |  Branch (986:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2527|  3.38k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  3.38k|                                "Invalid value for tm_year"});
 2529|  3.38k|        }
 2530|     18|        st.short_year_value = y;
 2531|     18|        st.set_short_year(h);
 2532|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3092|  4.11k|    {
 3093|  4.11k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.11k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.11k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.11k|#endif
 3101|       |
 3102|  4.11k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.11k|            {"January", 1},
 3104|  4.11k|            {"February", 2},
 3105|  4.11k|            {"March", 3},
 3106|  4.11k|            {"April", 4},
 3107|  4.11k|            {"May", 5},
 3108|  4.11k|            {"June", 6},
 3109|  4.11k|            {"July", 7},
 3110|  4.11k|            {"August", 8},
 3111|  4.11k|            {"September", 9},
 3112|  4.11k|            {"October", 10},
 3113|  4.11k|            {"November", 11},
 3114|  4.11k|            {"December", 12},
 3115|  4.11k|        }};
 3116|  4.11k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 22, False: 4.08k]
  ------------------
 3117|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     22|        }
 3119|  4.08k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.08k|            {"Jan", 1},
 3121|  4.08k|            {"Feb", 2},
 3122|  4.08k|            {"Mar", 3},
 3123|  4.08k|            {"Apr", 4},
 3124|  4.08k|            {"Jun", 6},
 3125|  4.08k|            {"Jul", 7},
 3126|  4.08k|            {"Aug", 8},
 3127|  4.08k|            {"Sep", 9},
 3128|  4.08k|            {"Oct", 10},
 3129|  4.08k|            {"Nov", 11},
 3130|  4.08k|            {"Dec", 12},
 3131|  4.08k|        }};
 3132|  4.08k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 704, False: 3.38k]
  ------------------
 3133|    704|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|    704|        }
 3135|  3.38k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  3.38k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  7.57k|    {
 2499|  7.57k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.45k, False: 1.12k]
  |  |  |  Branch (986:45): [True: 6.40k, False: 1.17k]
  |  |  |  Branch (986:45): [True: 52, False: 1.12k]
  |  |  ------------------
  ------------------
 2500|  6.45k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  6.45k|                                "Invalid value for tm_mon"});
 2502|  6.45k|        }
 2503|  1.12k|        t.tm_mon = m - 1;
 2504|  1.12k|        st.set_mon(h);
 2505|  1.12k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.11k|    {
 3710|  4.11k|        auto start_it = m_begin;
 3711|  4.11k|        std::size_t options_available = N;
 3712|  4.11k|        std::size_t chars_consumed = 0;
 3713|  10.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.38k, False: 4.04k]
  ------------------
 3714|  10.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.36k, False: 22]
  ------------------
 3715|  6.36k|            std::size_t i = 0;
 3716|  6.36k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 40, False: 6.32k]
  ------------------
 3717|     40|                options_available = 0;
 3718|     40|                break;
 3719|     40|            }
 3720|  6.32k|            const auto ch = *m_begin;
 3721|  6.32k|            ++m_begin;
 3722|  59.3k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 53.0k, False: 6.32k]
  ------------------
 3723|  53.0k|                const auto cmp = static_cast<unsigned>(
 3724|  53.0k|                    ch ^ options[i].first[chars_consumed]);
 3725|  53.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 53.0k]
  ------------------
 3726|  53.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.0k, False: 2.96k]
  |  Branch (3726:34): [True: 49.2k, False: 838]
  ------------------
 3727|  49.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.2k|                                options.end());
 3729|  49.2k|                    --options_available;
 3730|  49.2k|                    continue;
 3731|  49.2k|                }
 3732|  3.79k|                ++i;
 3733|  3.79k|            }
 3734|  6.32k|            ++chars_consumed;
 3735|  6.32k|        }
 3736|  4.11k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.08k, False: 22]
  ------------------
 3737|  4.08k|            m_begin = start_it;
 3738|  4.08k|            return std::nullopt;
 3739|  4.08k|        }
 3740|     22|        return options.front().second;
 3741|  4.11k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.08k|    {
 3710|  4.08k|        auto start_it = m_begin;
 3711|  4.08k|        std::size_t options_available = N;
 3712|  4.08k|        std::size_t chars_consumed = 0;
 3713|  9.64k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.29k, False: 3.35k]
  ------------------
 3714|  9.64k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 5.59k, False: 704]
  ------------------
 3715|  5.59k|            std::size_t i = 0;
 3716|  5.59k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 30, False: 5.56k]
  ------------------
 3717|     30|                options_available = 0;
 3718|     30|                break;
 3719|     30|            }
 3720|  5.56k|            const auto ch = *m_begin;
 3721|  5.56k|            ++m_begin;
 3722|  52.0k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 46.4k, False: 5.56k]
  ------------------
 3723|  46.4k|                const auto cmp = static_cast<unsigned>(
 3724|  46.4k|                    ch ^ options[i].first[chars_consumed]);
 3725|  46.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 46.4k]
  ------------------
 3726|  46.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 45.0k, False: 1.45k]
  |  Branch (3726:34): [True: 44.2k, False: 786]
  ------------------
 3727|  44.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  44.2k|                                options.end());
 3729|  44.2k|                    --options_available;
 3730|  44.2k|                    continue;
 3731|  44.2k|                }
 3732|  2.24k|                ++i;
 3733|  2.24k|            }
 3734|  5.56k|            ++chars_consumed;
 3735|  5.56k|        }
 3736|  4.08k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 3.38k, False: 704]
  ------------------
 3737|  3.38k|            m_begin = start_it;
 3738|  3.38k|            return std::nullopt;
 3739|  3.38k|        }
 3740|    704|        return options.front().second;
 3741|  4.08k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3138|  6.85k|    {
 3139|  6.85k|#if !SCN_DISABLE_LOCALE
 3140|  6.85k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 6.85k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  6.85k|#endif
 3147|       |
 3148|  6.85k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  6.85k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  6.85k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3170|  6.83k|    {
 3171|  6.83k|#if !SCN_DISABLE_LOCALE
 3172|  6.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 6.83k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  6.83k|#endif
 3179|       |
 3180|  6.83k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  6.83k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  6.83k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  6.83k|    {
 2489|  6.83k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.75k, False: 78]
  |  |  |  Branch (986:45): [True: 6.74k, False: 86]
  |  |  |  Branch (986:45): [True: 8, False: 78]
  |  |  ------------------
  ------------------
 2490|  6.75k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  6.75k|                                "Invalid value for tm_mday"});
 2492|  6.75k|        }
 2493|     78|        t.tm_mday = d;
 2494|     78|        st.set_mday(h);
 2495|     78|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3185|  3.40k|    {
 3186|  3.40k|#if !SCN_DISABLE_LOCALE
 3187|  3.40k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.40k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.40k|#endif
 3194|       |
 3195|  3.40k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.40k|            {"Sunday", 0},
 3197|  3.40k|            {"Monday", 1},
 3198|  3.40k|            {"Tuesday", 2},
 3199|  3.40k|            {"Wednesday", 3},
 3200|  3.40k|            {"Thursday", 4},
 3201|  3.40k|            {"Friday", 5},
 3202|  3.40k|            {"Saturday", 6},
 3203|  3.40k|        }};
 3204|  3.40k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.40k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.40k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.40k|            {"Sun", 0},
 3209|  3.40k|            {"Mon", 1},
 3210|  3.40k|            {"Tue", 2},
 3211|  3.40k|            {"Wed", 3},
 3212|  3.40k|            {"Thu", 4},
 3213|  3.40k|            {"Fri", 5},
 3214|  3.40k|            {"Sat", 6},
 3215|  3.40k|        }};
 3216|  3.40k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 0, False: 3.40k]
  ------------------
 3217|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|      0|        }
 3219|  3.40k|        return set_error(
 3220|  3.40k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.40k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  6.80k|    {
 3710|  6.80k|        auto start_it = m_begin;
 3711|  6.80k|        std::size_t options_available = N;
 3712|  6.80k|        std::size_t chars_consumed = 0;
 3713|  13.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.99k, False: 6.78k]
  ------------------
 3714|  13.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.99k, False: 0]
  ------------------
 3715|  6.99k|            std::size_t i = 0;
 3716|  6.99k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 20, False: 6.97k]
  ------------------
 3717|     20|                options_available = 0;
 3718|     20|                break;
 3719|     20|            }
 3720|  6.97k|            const auto ch = *m_begin;
 3721|  6.97k|            ++m_begin;
 3722|  54.7k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 47.7k, False: 6.97k]
  ------------------
 3723|  47.7k|                const auto cmp = static_cast<unsigned>(
 3724|  47.7k|                    ch ^ options[i].first[chars_consumed]);
 3725|  47.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 47.7k]
  ------------------
 3726|  47.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 47.5k, False: 200]
  |  Branch (3726:34): [True: 47.5k, False: 16]
  ------------------
 3727|  47.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  47.5k|                                options.end());
 3729|  47.5k|                    --options_available;
 3730|  47.5k|                    continue;
 3731|  47.5k|                }
 3732|    216|                ++i;
 3733|    216|            }
 3734|  6.97k|            ++chars_consumed;
 3735|  6.97k|        }
 3736|  6.80k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 6.80k, False: 0]
  ------------------
 3737|  6.80k|            m_begin = start_it;
 3738|  6.80k|            return std::nullopt;
 3739|  6.80k|        }
 3740|      0|        return options.front().second;
 3741|  6.80k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 3259|  13.7k|    {
 3260|  13.7k|#if !SCN_DISABLE_LOCALE
 3261|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 13.7k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  13.7k|#endif
 3268|       |
 3269|  13.7k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  13.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  13.7k|    {
 2469|  13.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.33k, False: 7.45k]
  |  |  |  Branch (986:45): [True: 6.25k, False: 7.54k]
  |  |  |  Branch (986:45): [True: 82, False: 7.45k]
  |  |  ------------------
  ------------------
 2470|  6.33k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  6.33k|                                  "Invalid value for tm_hour"});
 2472|  6.33k|        }
 2473|  7.45k|        t.tm_hour = h;
 2474|  7.45k|        st.set_hour24(hdl);
 2475|  7.45k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 3287|  13.7k|    {
 3288|  13.7k|#if !SCN_DISABLE_LOCALE
 3289|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 13.7k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  13.7k|#endif
 3296|       |
 3297|  13.7k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  13.7k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  13.7k|    {
 2459|  13.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.37k, False: 7.41k]
  |  |  |  Branch (986:45): [True: 6.36k, False: 7.42k]
  |  |  |  Branch (986:45): [True: 12, False: 7.41k]
  |  |  ------------------
  ------------------
 2460|  6.37k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  6.37k|                                "Invalid value for tm_min"});
 2462|  6.37k|        }
 2463|  7.41k|        t.tm_min = m;
 2464|  7.41k|        st.set_min(h);
 2465|  7.41k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3301|  3.59k|    {
 3302|  3.59k|#if !SCN_DISABLE_LOCALE
 3303|  3.59k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.59k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.59k|#endif
 3310|       |
 3311|  3.59k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.59k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.59k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  3.59k|    {
 2449|  3.59k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  3.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.36k, False: 230]
  |  |  |  Branch (986:45): [True: 3.36k, False: 232]
  |  |  |  Branch (986:45): [True: 2, False: 230]
  |  |  ------------------
  ------------------
 2450|  3.36k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  3.36k|                                "Invalid value for tm_sec"});
 2452|  3.36k|        }
 2453|    230|        t.tm_sec = s;
 2454|    230|        st.set_sec(h);
 2455|    230|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3543|  3.40k|    {
 3544|       |        // %m/%d/%y
 3545|  3.40k|        constexpr CharT slash = '/';
 3546|  3.40k|        on_dec_month();
 3547|  3.40k|        on_text(&slash, &slash + 1);
 3548|  3.40k|        on_day_of_month();
 3549|  3.40k|        on_text(&slash, &slash + 1);
 3550|  3.40k|        on_short_year();
 3551|  3.40k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3553|  3.40k|    {
 3554|       |        // %Y-%m-%d
 3555|  3.40k|        constexpr CharT dash = '-';
 3556|  3.40k|        on_full_year();
 3557|  3.40k|        on_text(&dash, &dash + 1);
 3558|  3.40k|        on_dec_month();
 3559|  3.40k|        on_text(&dash, &dash + 1);
 3560|  3.40k|        on_day_of_month();
 3561|  3.40k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3585|  10.1k|    {
 3586|       |        // %H:%M
 3587|  10.1k|        constexpr CharT colon = ':';
 3588|  10.1k|        on_24_hour();
 3589|  10.1k|        on_text(&colon, &colon + 1);
 3590|  10.1k|        on_minute();
 3591|  10.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3593|  3.59k|    {
 3594|       |        // %H:%M:%S
 3595|  3.59k|        constexpr CharT colon = ':';
 3596|  3.59k|        on_24_hour();
 3597|  3.59k|        on_text(&colon, &colon + 1);
 3598|  3.59k|        on_minute();
 3599|  3.59k|        on_text(&colon, &colon + 1);
 3600|  3.59k|        on_second();
 3601|  3.59k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3632|  7.77k|    {
 3633|  7.77k|        m_st.verify(*this);
 3634|  7.77k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 7.77k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  7.77k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 7.76k, False: 10]
  |  Branch (3637:37): [True: 10, False: 7.75k]
  |  Branch (3637:60): [True: 0, False: 7.75k]
  ------------------
 3638|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|     10|        }
 3640|  7.77k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3643|  63.0k|    {
 3644|  63.0k|        return m_error;
 3645|  63.0k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3660|  7.77k|    {
 3661|  7.77k|        return m_begin;
 3662|  7.77k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3853|  31.8k|{
 3854|  31.8k|    {
 3855|  31.8k|        SCN_TRY(it,
  ------------------
  |  | 3939|  31.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  31.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  31.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 346, False: 31.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    346|    }                                                  \
  |  |  |  | 3938|  31.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  31.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  31.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  31.5k|    static_cast<    \
  |  | 1056|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  31.5k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  31.5k|        ctx.range(), t, ctx.locale());
 3862|  31.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  31.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 23.7k, False: 7.77k]
  |  |  ------------------
  ------------------
 3864|  23.7k|        return unexpected(e.error());
 3865|  23.7k|    }
 3866|  7.77k|    return r.get_iterator();
 3867|  31.5k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2997|  31.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  31.5k|    static_cast<    \
  |  | 1056|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  31.5k|          m_begin(ranges::begin(m_range)),
 2999|  31.5k|          m_tm(t),
 3000|  31.5k|          m_loc(loc)
 3001|  31.5k|    {
 3002|  31.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3648|  23.1k|    {
 3649|  23.1k|        set_error({scan_error::invalid_format_string, msg});
 3650|  23.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3653|   101k|    {
 3654|   101k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 23.7k, False: 78.2k]
  ------------------
 3655|  23.7k|            m_error = unexpected(e);
 3656|  23.7k|        }
 3657|   101k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3005|  31.0k|    {
 3006|  38.8k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 31.0k, False: 7.79k]
  ------------------
 3007|  31.0k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 120, False: 30.9k]
  ------------------
 3008|    120|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    120|            }
 3010|  30.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 23.1k, False: 7.79k]
  ------------------
 3011|  23.1k|                return on_error("Invalid literal character");
 3012|  23.1k|            }
 3013|  7.79k|            ++beg;
 3014|  7.79k|            ++m_begin;
 3015|  7.79k|        }
 3016|  31.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3035|  6.80k|    {
 3036|  6.80k|#if !SCN_DISABLE_LOCALE
 3037|  6.80k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 6.80k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  6.80k|#endif
 3044|       |
 3045|  6.80k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  6.80k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  6.80k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  6.80k|    {
 2509|  6.80k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 6.80k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  6.80k|        t.tm_year = y - 1900;
 2514|  6.80k|        st.set_full_year(h);
 2515|  6.80k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3671|  55.0k|    {
 3672|  55.0k|        int digits_read = 0;
 3673|  55.0k|        int accumulator = 0;
 3674|  71.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 71.5k, False: 262]
  ------------------
 3675|  71.5k|            const auto ch = *m_begin;
 3676|  71.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 30.4k, False: 41.0k]
  |  Branch (3676:36): [True: 21.7k, False: 19.3k]
  ------------------
 3677|  52.1k|                break;
 3678|  52.1k|            }
 3679|  19.3k|            ++m_begin;
 3680|  19.3k|            ++digits_read;
 3681|  19.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  19.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 2.61k, False: 16.6k]
  ------------------
 3683|  2.61k|                break;
 3684|  2.61k|            }
 3685|  19.3k|        }
 3686|  55.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 39.2k, False: 15.8k]
  ------------------
 3687|  39.2k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  39.2k|                                 "Too few integer digits"});
 3689|  39.2k|            return -1;
 3690|  39.2k|        }
 3691|  15.8k|        return accumulator;
 3692|  55.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3049|  3.40k|    {
 3050|  3.40k|#if !SCN_DISABLE_LOCALE
 3051|  3.40k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 3.40k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  3.40k|#endif
 3059|       |
 3060|  3.40k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  3.40k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  3.40k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  3.40k|    {
 2526|  3.40k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  3.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.38k, False: 18]
  |  |  |  Branch (986:45): [True: 3.38k, False: 18]
  |  |  |  Branch (986:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2527|  3.38k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  3.38k|                                "Invalid value for tm_year"});
 2529|  3.38k|        }
 2530|     18|        st.short_year_value = y;
 2531|     18|        st.set_short_year(h);
 2532|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3092|  4.11k|    {
 3093|  4.11k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.11k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.11k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.11k|#endif
 3101|       |
 3102|  4.11k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.11k|            {"January", 1},
 3104|  4.11k|            {"February", 2},
 3105|  4.11k|            {"March", 3},
 3106|  4.11k|            {"April", 4},
 3107|  4.11k|            {"May", 5},
 3108|  4.11k|            {"June", 6},
 3109|  4.11k|            {"July", 7},
 3110|  4.11k|            {"August", 8},
 3111|  4.11k|            {"September", 9},
 3112|  4.11k|            {"October", 10},
 3113|  4.11k|            {"November", 11},
 3114|  4.11k|            {"December", 12},
 3115|  4.11k|        }};
 3116|  4.11k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 22, False: 4.08k]
  ------------------
 3117|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     22|        }
 3119|  4.08k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.08k|            {"Jan", 1},
 3121|  4.08k|            {"Feb", 2},
 3122|  4.08k|            {"Mar", 3},
 3123|  4.08k|            {"Apr", 4},
 3124|  4.08k|            {"Jun", 6},
 3125|  4.08k|            {"Jul", 7},
 3126|  4.08k|            {"Aug", 8},
 3127|  4.08k|            {"Sep", 9},
 3128|  4.08k|            {"Oct", 10},
 3129|  4.08k|            {"Nov", 11},
 3130|  4.08k|            {"Dec", 12},
 3131|  4.08k|        }};
 3132|  4.08k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 704, False: 3.38k]
  ------------------
 3133|    704|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|    704|        }
 3135|  3.38k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  3.38k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  7.57k|    {
 2499|  7.57k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.45k, False: 1.12k]
  |  |  |  Branch (986:45): [True: 6.40k, False: 1.17k]
  |  |  |  Branch (986:45): [True: 52, False: 1.12k]
  |  |  ------------------
  ------------------
 2500|  6.45k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  6.45k|                                "Invalid value for tm_mon"});
 2502|  6.45k|        }
 2503|  1.12k|        t.tm_mon = m - 1;
 2504|  1.12k|        st.set_mon(h);
 2505|  1.12k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.11k|    {
 3710|  4.11k|        auto start_it = m_begin;
 3711|  4.11k|        std::size_t options_available = N;
 3712|  4.11k|        std::size_t chars_consumed = 0;
 3713|  10.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.38k, False: 4.04k]
  ------------------
 3714|  10.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.36k, False: 22]
  ------------------
 3715|  6.36k|            std::size_t i = 0;
 3716|  6.36k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 40, False: 6.32k]
  ------------------
 3717|     40|                options_available = 0;
 3718|     40|                break;
 3719|     40|            }
 3720|  6.32k|            const auto ch = *m_begin;
 3721|  6.32k|            ++m_begin;
 3722|  59.3k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 53.0k, False: 6.32k]
  ------------------
 3723|  53.0k|                const auto cmp = static_cast<unsigned>(
 3724|  53.0k|                    ch ^ options[i].first[chars_consumed]);
 3725|  53.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 53.0k]
  ------------------
 3726|  53.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.0k, False: 2.96k]
  |  Branch (3726:34): [True: 49.2k, False: 838]
  ------------------
 3727|  49.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.2k|                                options.end());
 3729|  49.2k|                    --options_available;
 3730|  49.2k|                    continue;
 3731|  49.2k|                }
 3732|  3.79k|                ++i;
 3733|  3.79k|            }
 3734|  6.32k|            ++chars_consumed;
 3735|  6.32k|        }
 3736|  4.11k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.08k, False: 22]
  ------------------
 3737|  4.08k|            m_begin = start_it;
 3738|  4.08k|            return std::nullopt;
 3739|  4.08k|        }
 3740|     22|        return options.front().second;
 3741|  4.11k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.08k|    {
 3710|  4.08k|        auto start_it = m_begin;
 3711|  4.08k|        std::size_t options_available = N;
 3712|  4.08k|        std::size_t chars_consumed = 0;
 3713|  9.64k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.29k, False: 3.35k]
  ------------------
 3714|  9.64k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 5.59k, False: 704]
  ------------------
 3715|  5.59k|            std::size_t i = 0;
 3716|  5.59k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 30, False: 5.56k]
  ------------------
 3717|     30|                options_available = 0;
 3718|     30|                break;
 3719|     30|            }
 3720|  5.56k|            const auto ch = *m_begin;
 3721|  5.56k|            ++m_begin;
 3722|  52.0k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 46.4k, False: 5.56k]
  ------------------
 3723|  46.4k|                const auto cmp = static_cast<unsigned>(
 3724|  46.4k|                    ch ^ options[i].first[chars_consumed]);
 3725|  46.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 46.4k]
  ------------------
 3726|  46.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 45.0k, False: 1.45k]
  |  Branch (3726:34): [True: 44.2k, False: 786]
  ------------------
 3727|  44.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  44.2k|                                options.end());
 3729|  44.2k|                    --options_available;
 3730|  44.2k|                    continue;
 3731|  44.2k|                }
 3732|  2.24k|                ++i;
 3733|  2.24k|            }
 3734|  5.56k|            ++chars_consumed;
 3735|  5.56k|        }
 3736|  4.08k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 3.38k, False: 704]
  ------------------
 3737|  3.38k|            m_begin = start_it;
 3738|  3.38k|            return std::nullopt;
 3739|  3.38k|        }
 3740|    704|        return options.front().second;
 3741|  4.08k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3138|  6.85k|    {
 3139|  6.85k|#if !SCN_DISABLE_LOCALE
 3140|  6.85k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 6.85k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  6.85k|#endif
 3147|       |
 3148|  6.85k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  6.85k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  6.85k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3170|  6.83k|    {
 3171|  6.83k|#if !SCN_DISABLE_LOCALE
 3172|  6.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 6.83k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  6.83k|#endif
 3179|       |
 3180|  6.83k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  6.83k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  6.83k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  6.83k|    {
 2489|  6.83k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.75k, False: 78]
  |  |  |  Branch (986:45): [True: 6.74k, False: 86]
  |  |  |  Branch (986:45): [True: 8, False: 78]
  |  |  ------------------
  ------------------
 2490|  6.75k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  6.75k|                                "Invalid value for tm_mday"});
 2492|  6.75k|        }
 2493|     78|        t.tm_mday = d;
 2494|     78|        st.set_mday(h);
 2495|     78|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3185|  3.40k|    {
 3186|  3.40k|#if !SCN_DISABLE_LOCALE
 3187|  3.40k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.40k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.40k|#endif
 3194|       |
 3195|  3.40k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.40k|            {"Sunday", 0},
 3197|  3.40k|            {"Monday", 1},
 3198|  3.40k|            {"Tuesday", 2},
 3199|  3.40k|            {"Wednesday", 3},
 3200|  3.40k|            {"Thursday", 4},
 3201|  3.40k|            {"Friday", 5},
 3202|  3.40k|            {"Saturday", 6},
 3203|  3.40k|        }};
 3204|  3.40k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.40k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.40k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.40k|            {"Sun", 0},
 3209|  3.40k|            {"Mon", 1},
 3210|  3.40k|            {"Tue", 2},
 3211|  3.40k|            {"Wed", 3},
 3212|  3.40k|            {"Thu", 4},
 3213|  3.40k|            {"Fri", 5},
 3214|  3.40k|            {"Sat", 6},
 3215|  3.40k|        }};
 3216|  3.40k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 0, False: 3.40k]
  ------------------
 3217|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|      0|        }
 3219|  3.40k|        return set_error(
 3220|  3.40k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  6.80k|    {
 3710|  6.80k|        auto start_it = m_begin;
 3711|  6.80k|        std::size_t options_available = N;
 3712|  6.80k|        std::size_t chars_consumed = 0;
 3713|  13.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.99k, False: 6.78k]
  ------------------
 3714|  13.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.99k, False: 0]
  ------------------
 3715|  6.99k|            std::size_t i = 0;
 3716|  6.99k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 20, False: 6.97k]
  ------------------
 3717|     20|                options_available = 0;
 3718|     20|                break;
 3719|     20|            }
 3720|  6.97k|            const auto ch = *m_begin;
 3721|  6.97k|            ++m_begin;
 3722|  54.7k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 47.7k, False: 6.97k]
  ------------------
 3723|  47.7k|                const auto cmp = static_cast<unsigned>(
 3724|  47.7k|                    ch ^ options[i].first[chars_consumed]);
 3725|  47.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 47.7k]
  ------------------
 3726|  47.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 47.5k, False: 200]
  |  Branch (3726:34): [True: 47.5k, False: 16]
  ------------------
 3727|  47.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  47.5k|                                options.end());
 3729|  47.5k|                    --options_available;
 3730|  47.5k|                    continue;
 3731|  47.5k|                }
 3732|    216|                ++i;
 3733|    216|            }
 3734|  6.97k|            ++chars_consumed;
 3735|  6.97k|        }
 3736|  6.80k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 6.80k, False: 0]
  ------------------
 3737|  6.80k|            m_begin = start_it;
 3738|  6.80k|            return std::nullopt;
 3739|  6.80k|        }
 3740|      0|        return options.front().second;
 3741|  6.80k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 3259|  13.7k|    {
 3260|  13.7k|#if !SCN_DISABLE_LOCALE
 3261|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 13.7k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  13.7k|#endif
 3268|       |
 3269|  13.7k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  13.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  13.7k|    {
 2469|  13.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.33k, False: 7.45k]
  |  |  |  Branch (986:45): [True: 6.25k, False: 7.54k]
  |  |  |  Branch (986:45): [True: 82, False: 7.45k]
  |  |  ------------------
  ------------------
 2470|  6.33k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  6.33k|                                  "Invalid value for tm_hour"});
 2472|  6.33k|        }
 2473|  7.45k|        t.tm_hour = h;
 2474|  7.45k|        st.set_hour24(hdl);
 2475|  7.45k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 3287|  13.7k|    {
 3288|  13.7k|#if !SCN_DISABLE_LOCALE
 3289|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 13.7k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  13.7k|#endif
 3296|       |
 3297|  13.7k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  13.7k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  13.7k|    {
 2459|  13.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.37k, False: 7.41k]
  |  |  |  Branch (986:45): [True: 6.36k, False: 7.42k]
  |  |  |  Branch (986:45): [True: 12, False: 7.41k]
  |  |  ------------------
  ------------------
 2460|  6.37k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  6.37k|                                "Invalid value for tm_min"});
 2462|  6.37k|        }
 2463|  7.41k|        t.tm_min = m;
 2464|  7.41k|        st.set_min(h);
 2465|  7.41k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3301|  3.59k|    {
 3302|  3.59k|#if !SCN_DISABLE_LOCALE
 3303|  3.59k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.59k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.59k|#endif
 3310|       |
 3311|  3.59k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.59k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.59k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  3.59k|    {
 2449|  3.59k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  3.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.36k, False: 230]
  |  |  |  Branch (986:45): [True: 3.36k, False: 232]
  |  |  |  Branch (986:45): [True: 2, False: 230]
  |  |  ------------------
  ------------------
 2450|  3.36k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  3.36k|                                "Invalid value for tm_sec"});
 2452|  3.36k|        }
 2453|    230|        t.tm_sec = s;
 2454|    230|        st.set_sec(h);
 2455|    230|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3543|  3.40k|    {
 3544|       |        // %m/%d/%y
 3545|  3.40k|        constexpr CharT slash = '/';
 3546|  3.40k|        on_dec_month();
 3547|  3.40k|        on_text(&slash, &slash + 1);
 3548|  3.40k|        on_day_of_month();
 3549|  3.40k|        on_text(&slash, &slash + 1);
 3550|  3.40k|        on_short_year();
 3551|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3553|  3.40k|    {
 3554|       |        // %Y-%m-%d
 3555|  3.40k|        constexpr CharT dash = '-';
 3556|  3.40k|        on_full_year();
 3557|  3.40k|        on_text(&dash, &dash + 1);
 3558|  3.40k|        on_dec_month();
 3559|  3.40k|        on_text(&dash, &dash + 1);
 3560|  3.40k|        on_day_of_month();
 3561|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3585|  10.1k|    {
 3586|       |        // %H:%M
 3587|  10.1k|        constexpr CharT colon = ':';
 3588|  10.1k|        on_24_hour();
 3589|  10.1k|        on_text(&colon, &colon + 1);
 3590|  10.1k|        on_minute();
 3591|  10.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3593|  3.59k|    {
 3594|       |        // %H:%M:%S
 3595|  3.59k|        constexpr CharT colon = ':';
 3596|  3.59k|        on_24_hour();
 3597|  3.59k|        on_text(&colon, &colon + 1);
 3598|  3.59k|        on_minute();
 3599|  3.59k|        on_text(&colon, &colon + 1);
 3600|  3.59k|        on_second();
 3601|  3.59k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3632|  7.77k|    {
 3633|  7.77k|        m_st.verify(*this);
 3634|  7.77k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 7.77k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  7.77k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 7.76k, False: 10]
  |  Branch (3637:37): [True: 10, False: 7.75k]
  |  Branch (3637:60): [True: 0, False: 7.75k]
  ------------------
 3638|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|     10|        }
 3640|  7.77k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3643|  63.0k|    {
 3644|  63.0k|        return m_error;
 3645|  63.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3660|  7.77k|    {
 3661|  7.77k|        return m_begin;
 3662|  7.77k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3853|  31.8k|{
 3854|  31.8k|    {
 3855|  31.8k|        SCN_TRY(it,
  ------------------
  |  | 3939|  31.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  31.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  31.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 346, False: 31.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    346|    }                                                  \
  |  |  |  | 3938|  31.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  31.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  31.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  31.5k|    static_cast<    \
  |  | 1056|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  31.5k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  31.5k|        ctx.range(), t, ctx.locale());
 3862|  31.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  31.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 23.7k, False: 7.77k]
  |  |  ------------------
  ------------------
 3864|  23.7k|        return unexpected(e.error());
 3865|  23.7k|    }
 3866|  7.77k|    return r.get_iterator();
 3867|  31.5k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2997|  31.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  31.5k|    static_cast<    \
  |  | 1056|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  31.5k|          m_begin(ranges::begin(m_range)),
 2999|  31.5k|          m_tm(t),
 3000|  31.5k|          m_loc(loc)
 3001|  31.5k|    {
 3002|  31.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3648|  23.1k|    {
 3649|  23.1k|        set_error({scan_error::invalid_format_string, msg});
 3650|  23.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3653|   101k|    {
 3654|   101k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 23.7k, False: 78.2k]
  ------------------
 3655|  23.7k|            m_error = unexpected(e);
 3656|  23.7k|        }
 3657|   101k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3005|  31.0k|    {
 3006|  38.8k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 31.0k, False: 7.79k]
  ------------------
 3007|  31.0k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 120, False: 30.9k]
  ------------------
 3008|    120|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    120|            }
 3010|  30.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 23.1k, False: 7.79k]
  ------------------
 3011|  23.1k|                return on_error("Invalid literal character");
 3012|  23.1k|            }
 3013|  7.79k|            ++beg;
 3014|  7.79k|            ++m_begin;
 3015|  7.79k|        }
 3016|  31.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3035|  6.80k|    {
 3036|  6.80k|#if !SCN_DISABLE_LOCALE
 3037|  6.80k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 6.80k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  6.80k|#endif
 3044|       |
 3045|  6.80k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  6.80k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  6.80k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2508|  6.80k|    {
 2509|  6.80k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  986|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 6.80k]
  |  |  ------------------
  ------------------
 2510|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2511|      0|                                "Invalid value for tm_year"});
 2512|      0|        }
 2513|  6.80k|        t.tm_year = y - 1900;
 2514|  6.80k|        st.set_full_year(h);
 2515|  6.80k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3671|  55.0k|    {
 3672|  55.0k|        int digits_read = 0;
 3673|  55.0k|        int accumulator = 0;
 3674|  71.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 71.5k, False: 262]
  ------------------
 3675|  71.5k|            const auto ch = *m_begin;
 3676|  71.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 30.4k, False: 41.0k]
  |  Branch (3676:36): [True: 21.7k, False: 19.3k]
  ------------------
 3677|  52.1k|                break;
 3678|  52.1k|            }
 3679|  19.3k|            ++m_begin;
 3680|  19.3k|            ++digits_read;
 3681|  19.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  19.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 2.61k, False: 16.6k]
  ------------------
 3683|  2.61k|                break;
 3684|  2.61k|            }
 3685|  19.3k|        }
 3686|  55.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 39.2k, False: 15.8k]
  ------------------
 3687|  39.2k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  39.2k|                                 "Too few integer digits"});
 3689|  39.2k|            return -1;
 3690|  39.2k|        }
 3691|  15.8k|        return accumulator;
 3692|  55.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3049|  3.40k|    {
 3050|  3.40k|#if !SCN_DISABLE_LOCALE
 3051|  3.40k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 3.40k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  3.40k|#endif
 3059|       |
 3060|  3.40k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  3.40k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  3.40k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2525|  3.40k|    {
 2526|  3.40k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  986|  3.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.38k, False: 18]
  |  |  |  Branch (986:45): [True: 3.38k, False: 18]
  |  |  |  Branch (986:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2527|  3.38k|            return h.set_error({scan_error::invalid_scanned_value,
 2528|  3.38k|                                "Invalid value for tm_year"});
 2529|  3.38k|        }
 2530|     18|        st.short_year_value = y;
 2531|     18|        st.set_short_year(h);
 2532|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3092|  4.11k|    {
 3093|  4.11k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.11k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.11k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.11k|#endif
 3101|       |
 3102|  4.11k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.11k|            {"January", 1},
 3104|  4.11k|            {"February", 2},
 3105|  4.11k|            {"March", 3},
 3106|  4.11k|            {"April", 4},
 3107|  4.11k|            {"May", 5},
 3108|  4.11k|            {"June", 6},
 3109|  4.11k|            {"July", 7},
 3110|  4.11k|            {"August", 8},
 3111|  4.11k|            {"September", 9},
 3112|  4.11k|            {"October", 10},
 3113|  4.11k|            {"November", 11},
 3114|  4.11k|            {"December", 12},
 3115|  4.11k|        }};
 3116|  4.11k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 22, False: 4.08k]
  ------------------
 3117|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     22|        }
 3119|  4.08k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.08k|            {"Jan", 1},
 3121|  4.08k|            {"Feb", 2},
 3122|  4.08k|            {"Mar", 3},
 3123|  4.08k|            {"Apr", 4},
 3124|  4.08k|            {"Jun", 6},
 3125|  4.08k|            {"Jul", 7},
 3126|  4.08k|            {"Aug", 8},
 3127|  4.08k|            {"Sep", 9},
 3128|  4.08k|            {"Oct", 10},
 3129|  4.08k|            {"Nov", 11},
 3130|  4.08k|            {"Dec", 12},
 3131|  4.08k|        }};
 3132|  4.08k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 704, False: 3.38k]
  ------------------
 3133|    704|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|    704|        }
 3135|  3.38k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  3.38k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2498|  7.57k|    {
 2499|  7.57k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.45k, False: 1.12k]
  |  |  |  Branch (986:45): [True: 6.40k, False: 1.17k]
  |  |  |  Branch (986:45): [True: 52, False: 1.12k]
  |  |  ------------------
  ------------------
 2500|  6.45k|            return h.set_error({scan_error::invalid_scanned_value,
 2501|  6.45k|                                "Invalid value for tm_mon"});
 2502|  6.45k|        }
 2503|  1.12k|        t.tm_mon = m - 1;
 2504|  1.12k|        st.set_mon(h);
 2505|  1.12k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.11k|    {
 3710|  4.11k|        auto start_it = m_begin;
 3711|  4.11k|        std::size_t options_available = N;
 3712|  4.11k|        std::size_t chars_consumed = 0;
 3713|  10.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.38k, False: 4.04k]
  ------------------
 3714|  10.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.36k, False: 22]
  ------------------
 3715|  6.36k|            std::size_t i = 0;
 3716|  6.36k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 40, False: 6.32k]
  ------------------
 3717|     40|                options_available = 0;
 3718|     40|                break;
 3719|     40|            }
 3720|  6.32k|            const auto ch = *m_begin;
 3721|  6.32k|            ++m_begin;
 3722|  59.3k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 53.0k, False: 6.32k]
  ------------------
 3723|  53.0k|                const auto cmp = static_cast<unsigned>(
 3724|  53.0k|                    ch ^ options[i].first[chars_consumed]);
 3725|  53.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 53.0k]
  ------------------
 3726|  53.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.0k, False: 2.96k]
  |  Branch (3726:34): [True: 49.2k, False: 838]
  ------------------
 3727|  49.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.2k|                                options.end());
 3729|  49.2k|                    --options_available;
 3730|  49.2k|                    continue;
 3731|  49.2k|                }
 3732|  3.79k|                ++i;
 3733|  3.79k|            }
 3734|  6.32k|            ++chars_consumed;
 3735|  6.32k|        }
 3736|  4.11k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.08k, False: 22]
  ------------------
 3737|  4.08k|            m_begin = start_it;
 3738|  4.08k|            return std::nullopt;
 3739|  4.08k|        }
 3740|     22|        return options.front().second;
 3741|  4.11k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.08k|    {
 3710|  4.08k|        auto start_it = m_begin;
 3711|  4.08k|        std::size_t options_available = N;
 3712|  4.08k|        std::size_t chars_consumed = 0;
 3713|  9.64k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.29k, False: 3.35k]
  ------------------
 3714|  9.64k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 5.59k, False: 704]
  ------------------
 3715|  5.59k|            std::size_t i = 0;
 3716|  5.59k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 30, False: 5.56k]
  ------------------
 3717|     30|                options_available = 0;
 3718|     30|                break;
 3719|     30|            }
 3720|  5.56k|            const auto ch = *m_begin;
 3721|  5.56k|            ++m_begin;
 3722|  52.0k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 46.4k, False: 5.56k]
  ------------------
 3723|  46.4k|                const auto cmp = static_cast<unsigned>(
 3724|  46.4k|                    ch ^ options[i].first[chars_consumed]);
 3725|  46.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 46.4k]
  ------------------
 3726|  46.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 45.0k, False: 1.45k]
  |  Branch (3726:34): [True: 44.2k, False: 786]
  ------------------
 3727|  44.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  44.2k|                                options.end());
 3729|  44.2k|                    --options_available;
 3730|  44.2k|                    continue;
 3731|  44.2k|                }
 3732|  2.24k|                ++i;
 3733|  2.24k|            }
 3734|  5.56k|            ++chars_consumed;
 3735|  5.56k|        }
 3736|  4.08k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 3.38k, False: 704]
  ------------------
 3737|  3.38k|            m_begin = start_it;
 3738|  3.38k|            return std::nullopt;
 3739|  3.38k|        }
 3740|    704|        return options.front().second;
 3741|  4.08k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3138|  6.85k|    {
 3139|  6.85k|#if !SCN_DISABLE_LOCALE
 3140|  6.85k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 6.85k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  6.85k|#endif
 3147|       |
 3148|  6.85k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  6.85k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  6.85k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3170|  6.83k|    {
 3171|  6.83k|#if !SCN_DISABLE_LOCALE
 3172|  6.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 6.83k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  6.83k|#endif
 3179|       |
 3180|  6.83k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  6.83k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  6.83k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2488|  6.83k|    {
 2489|  6.83k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.75k, False: 78]
  |  |  |  Branch (986:45): [True: 6.74k, False: 86]
  |  |  |  Branch (986:45): [True: 8, False: 78]
  |  |  ------------------
  ------------------
 2490|  6.75k|            return h.set_error({scan_error::invalid_scanned_value,
 2491|  6.75k|                                "Invalid value for tm_mday"});
 2492|  6.75k|        }
 2493|     78|        t.tm_mday = d;
 2494|     78|        st.set_mday(h);
 2495|     78|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3185|  3.40k|    {
 3186|  3.40k|#if !SCN_DISABLE_LOCALE
 3187|  3.40k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.40k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.40k|#endif
 3194|       |
 3195|  3.40k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.40k|            {"Sunday", 0},
 3197|  3.40k|            {"Monday", 1},
 3198|  3.40k|            {"Tuesday", 2},
 3199|  3.40k|            {"Wednesday", 3},
 3200|  3.40k|            {"Thursday", 4},
 3201|  3.40k|            {"Friday", 5},
 3202|  3.40k|            {"Saturday", 6},
 3203|  3.40k|        }};
 3204|  3.40k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.40k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.40k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.40k|            {"Sun", 0},
 3209|  3.40k|            {"Mon", 1},
 3210|  3.40k|            {"Tue", 2},
 3211|  3.40k|            {"Wed", 3},
 3212|  3.40k|            {"Thu", 4},
 3213|  3.40k|            {"Fri", 5},
 3214|  3.40k|            {"Sat", 6},
 3215|  3.40k|        }};
 3216|  3.40k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 0, False: 3.40k]
  ------------------
 3217|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|      0|        }
 3219|  3.40k|        return set_error(
 3220|  3.40k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  6.80k|    {
 3710|  6.80k|        auto start_it = m_begin;
 3711|  6.80k|        std::size_t options_available = N;
 3712|  6.80k|        std::size_t chars_consumed = 0;
 3713|  13.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.99k, False: 6.78k]
  ------------------
 3714|  13.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.99k, False: 0]
  ------------------
 3715|  6.99k|            std::size_t i = 0;
 3716|  6.99k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 20, False: 6.97k]
  ------------------
 3717|     20|                options_available = 0;
 3718|     20|                break;
 3719|     20|            }
 3720|  6.97k|            const auto ch = *m_begin;
 3721|  6.97k|            ++m_begin;
 3722|  54.7k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 47.7k, False: 6.97k]
  ------------------
 3723|  47.7k|                const auto cmp = static_cast<unsigned>(
 3724|  47.7k|                    ch ^ options[i].first[chars_consumed]);
 3725|  47.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 47.7k]
  ------------------
 3726|  47.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 47.5k, False: 200]
  |  Branch (3726:34): [True: 47.5k, False: 16]
  ------------------
 3727|  47.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  47.5k|                                options.end());
 3729|  47.5k|                    --options_available;
 3730|  47.5k|                    continue;
 3731|  47.5k|                }
 3732|    216|                ++i;
 3733|    216|            }
 3734|  6.97k|            ++chars_consumed;
 3735|  6.97k|        }
 3736|  6.80k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 6.80k, False: 0]
  ------------------
 3737|  6.80k|            m_begin = start_it;
 3738|  6.80k|            return std::nullopt;
 3739|  6.80k|        }
 3740|      0|        return options.front().second;
 3741|  6.80k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 3259|  13.7k|    {
 3260|  13.7k|#if !SCN_DISABLE_LOCALE
 3261|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 13.7k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  13.7k|#endif
 3268|       |
 3269|  13.7k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  13.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2468|  13.7k|    {
 2469|  13.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.33k, False: 7.45k]
  |  |  |  Branch (986:45): [True: 6.25k, False: 7.54k]
  |  |  |  Branch (986:45): [True: 82, False: 7.45k]
  |  |  ------------------
  ------------------
 2470|  6.33k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2471|  6.33k|                                  "Invalid value for tm_hour"});
 2472|  6.33k|        }
 2473|  7.45k|        t.tm_hour = h;
 2474|  7.45k|        st.set_hour24(hdl);
 2475|  7.45k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 3287|  13.7k|    {
 3288|  13.7k|#if !SCN_DISABLE_LOCALE
 3289|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 13.7k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  13.7k|#endif
 3296|       |
 3297|  13.7k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  13.7k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2458|  13.7k|    {
 2459|  13.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.37k, False: 7.41k]
  |  |  |  Branch (986:45): [True: 6.36k, False: 7.42k]
  |  |  |  Branch (986:45): [True: 12, False: 7.41k]
  |  |  ------------------
  ------------------
 2460|  6.37k|            return h.set_error({scan_error::invalid_scanned_value,
 2461|  6.37k|                                "Invalid value for tm_min"});
 2462|  6.37k|        }
 2463|  7.41k|        t.tm_min = m;
 2464|  7.41k|        st.set_min(h);
 2465|  7.41k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3301|  3.59k|    {
 3302|  3.59k|#if !SCN_DISABLE_LOCALE
 3303|  3.59k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.59k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.59k|#endif
 3310|       |
 3311|  3.59k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.59k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.59k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2448|  3.59k|    {
 2449|  3.59k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  3.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.36k, False: 230]
  |  |  |  Branch (986:45): [True: 3.36k, False: 232]
  |  |  |  Branch (986:45): [True: 2, False: 230]
  |  |  ------------------
  ------------------
 2450|  3.36k|            return h.set_error({scan_error::invalid_scanned_value,
 2451|  3.36k|                                "Invalid value for tm_sec"});
 2452|  3.36k|        }
 2453|    230|        t.tm_sec = s;
 2454|    230|        st.set_sec(h);
 2455|    230|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3543|  3.40k|    {
 3544|       |        // %m/%d/%y
 3545|  3.40k|        constexpr CharT slash = '/';
 3546|  3.40k|        on_dec_month();
 3547|  3.40k|        on_text(&slash, &slash + 1);
 3548|  3.40k|        on_day_of_month();
 3549|  3.40k|        on_text(&slash, &slash + 1);
 3550|  3.40k|        on_short_year();
 3551|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3553|  3.40k|    {
 3554|       |        // %Y-%m-%d
 3555|  3.40k|        constexpr CharT dash = '-';
 3556|  3.40k|        on_full_year();
 3557|  3.40k|        on_text(&dash, &dash + 1);
 3558|  3.40k|        on_dec_month();
 3559|  3.40k|        on_text(&dash, &dash + 1);
 3560|  3.40k|        on_day_of_month();
 3561|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3585|  10.1k|    {
 3586|       |        // %H:%M
 3587|  10.1k|        constexpr CharT colon = ':';
 3588|  10.1k|        on_24_hour();
 3589|  10.1k|        on_text(&colon, &colon + 1);
 3590|  10.1k|        on_minute();
 3591|  10.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3593|  3.59k|    {
 3594|       |        // %H:%M:%S
 3595|  3.59k|        constexpr CharT colon = ':';
 3596|  3.59k|        on_24_hour();
 3597|  3.59k|        on_text(&colon, &colon + 1);
 3598|  3.59k|        on_minute();
 3599|  3.59k|        on_text(&colon, &colon + 1);
 3600|  3.59k|        on_second();
 3601|  3.59k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3632|  7.77k|    {
 3633|  7.77k|        m_st.verify(*this);
 3634|  7.77k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 7.77k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  7.77k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 7.76k, False: 10]
  |  Branch (3637:37): [True: 10, False: 7.75k]
  |  Branch (3637:60): [True: 0, False: 7.75k]
  ------------------
 3638|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|     10|        }
 3640|  7.77k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3643|  63.0k|    {
 3644|  63.0k|        return m_error;
 3645|  63.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3660|  7.77k|    {
 3661|  7.77k|        return m_begin;
 3662|  7.77k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3853|  31.8k|{
 3854|  31.8k|    {
 3855|  31.8k|        SCN_TRY(it,
  ------------------
  |  | 3939|  31.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  31.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  31.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 346, False: 31.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    346|    }                                                  \
  |  |  |  | 3938|  31.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  31.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  31.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  31.5k|    static_cast<    \
  |  | 1056|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  31.5k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  31.5k|        ctx.range(), t, ctx.locale());
 3862|  31.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  31.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 23.7k, False: 7.77k]
  |  |  ------------------
  ------------------
 3864|  23.7k|        return unexpected(e.error());
 3865|  23.7k|    }
 3866|  7.77k|    return r.get_iterator();
 3867|  31.5k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2997|  31.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  31.5k|    static_cast<    \
  |  | 1056|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  31.5k|          m_begin(ranges::begin(m_range)),
 2999|  31.5k|          m_tm(t),
 3000|  31.5k|          m_loc(loc)
 3001|  31.5k|    {
 3002|  31.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3648|  23.1k|    {
 3649|  23.1k|        set_error({scan_error::invalid_format_string, msg});
 3650|  23.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3653|  98.6k|    {
 3654|  98.6k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 23.7k, False: 74.8k]
  ------------------
 3655|  23.7k|            m_error = unexpected(e);
 3656|  23.7k|        }
 3657|  98.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3005|  31.0k|    {
 3006|  38.8k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 31.0k, False: 7.79k]
  ------------------
 3007|  31.0k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 120, False: 30.9k]
  ------------------
 3008|    120|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    120|            }
 3010|  30.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 23.1k, False: 7.79k]
  ------------------
 3011|  23.1k|                return on_error("Invalid literal character");
 3012|  23.1k|            }
 3013|  7.79k|            ++beg;
 3014|  7.79k|            ++m_begin;
 3015|  7.79k|        }
 3016|  31.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3035|  6.80k|    {
 3036|  6.80k|#if !SCN_DISABLE_LOCALE
 3037|  6.80k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 6.80k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  6.80k|#endif
 3044|       |
 3045|  6.80k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  6.80k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  6.80k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2686|  6.80k|    {
 2687|  6.80k|        t.year = y;
 2688|  6.80k|        st.set_full_year(h);
 2689|  6.80k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3671|  55.0k|    {
 3672|  55.0k|        int digits_read = 0;
 3673|  55.0k|        int accumulator = 0;
 3674|  71.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 71.5k, False: 262]
  ------------------
 3675|  71.5k|            const auto ch = *m_begin;
 3676|  71.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 30.4k, False: 41.0k]
  |  Branch (3676:36): [True: 21.7k, False: 19.3k]
  ------------------
 3677|  52.1k|                break;
 3678|  52.1k|            }
 3679|  19.3k|            ++m_begin;
 3680|  19.3k|            ++digits_read;
 3681|  19.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  19.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 2.61k, False: 16.6k]
  ------------------
 3683|  2.61k|                break;
 3684|  2.61k|            }
 3685|  19.3k|        }
 3686|  55.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 39.2k, False: 15.8k]
  ------------------
 3687|  39.2k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  39.2k|                                 "Too few integer digits"});
 3689|  39.2k|            return -1;
 3690|  39.2k|        }
 3691|  15.8k|        return accumulator;
 3692|  55.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3049|  3.40k|    {
 3050|  3.40k|#if !SCN_DISABLE_LOCALE
 3051|  3.40k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 3.40k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  3.40k|#endif
 3059|       |
 3060|  3.40k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  3.40k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  3.40k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2709|  3.40k|    {
 2710|  3.40k|        if (!t.year) {
  ------------------
  |  Branch (2710:13): [True: 3.40k, False: 0]
  ------------------
 2711|  3.40k|            t.year = y;
 2712|  3.40k|        }
 2713|      0|        else {
 2714|      0|            t.year = *t.year + y;
 2715|      0|        }
 2716|  3.40k|        st.set_short_year(h);
 2717|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3092|  4.11k|    {
 3093|  4.11k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.11k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.11k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.11k|#endif
 3101|       |
 3102|  4.11k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.11k|            {"January", 1},
 3104|  4.11k|            {"February", 2},
 3105|  4.11k|            {"March", 3},
 3106|  4.11k|            {"April", 4},
 3107|  4.11k|            {"May", 5},
 3108|  4.11k|            {"June", 6},
 3109|  4.11k|            {"July", 7},
 3110|  4.11k|            {"August", 8},
 3111|  4.11k|            {"September", 9},
 3112|  4.11k|            {"October", 10},
 3113|  4.11k|            {"November", 11},
 3114|  4.11k|            {"December", 12},
 3115|  4.11k|        }};
 3116|  4.11k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 22, False: 4.08k]
  ------------------
 3117|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     22|        }
 3119|  4.08k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.08k|            {"Jan", 1},
 3121|  4.08k|            {"Feb", 2},
 3122|  4.08k|            {"Mar", 3},
 3123|  4.08k|            {"Apr", 4},
 3124|  4.08k|            {"Jun", 6},
 3125|  4.08k|            {"Jul", 7},
 3126|  4.08k|            {"Aug", 8},
 3127|  4.08k|            {"Sep", 9},
 3128|  4.08k|            {"Oct", 10},
 3129|  4.08k|            {"Nov", 11},
 3130|  4.08k|            {"Dec", 12},
 3131|  4.08k|        }};
 3132|  4.08k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 704, False: 3.38k]
  ------------------
 3133|    704|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|    704|        }
 3135|  3.38k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  3.38k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2673|  7.57k|    {
 2674|  7.57k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.45k, False: 1.12k]
  |  |  |  Branch (986:45): [True: 6.40k, False: 1.17k]
  |  |  |  Branch (986:45): [True: 52, False: 1.12k]
  |  |  ------------------
  ------------------
 2675|  6.45k|            return h.set_error(
 2676|  6.45k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2677|  6.45k|        }
 2678|  1.12k|        t.mon = month{static_cast<unsigned>(m)};
 2679|  1.12k|        st.set_mon(h);
 2680|  1.12k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.11k|    {
 3710|  4.11k|        auto start_it = m_begin;
 3711|  4.11k|        std::size_t options_available = N;
 3712|  4.11k|        std::size_t chars_consumed = 0;
 3713|  10.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.38k, False: 4.04k]
  ------------------
 3714|  10.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.36k, False: 22]
  ------------------
 3715|  6.36k|            std::size_t i = 0;
 3716|  6.36k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 40, False: 6.32k]
  ------------------
 3717|     40|                options_available = 0;
 3718|     40|                break;
 3719|     40|            }
 3720|  6.32k|            const auto ch = *m_begin;
 3721|  6.32k|            ++m_begin;
 3722|  59.3k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 53.0k, False: 6.32k]
  ------------------
 3723|  53.0k|                const auto cmp = static_cast<unsigned>(
 3724|  53.0k|                    ch ^ options[i].first[chars_consumed]);
 3725|  53.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 53.0k]
  ------------------
 3726|  53.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.0k, False: 2.96k]
  |  Branch (3726:34): [True: 49.2k, False: 838]
  ------------------
 3727|  49.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.2k|                                options.end());
 3729|  49.2k|                    --options_available;
 3730|  49.2k|                    continue;
 3731|  49.2k|                }
 3732|  3.79k|                ++i;
 3733|  3.79k|            }
 3734|  6.32k|            ++chars_consumed;
 3735|  6.32k|        }
 3736|  4.11k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.08k, False: 22]
  ------------------
 3737|  4.08k|            m_begin = start_it;
 3738|  4.08k|            return std::nullopt;
 3739|  4.08k|        }
 3740|     22|        return options.front().second;
 3741|  4.11k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  4.08k|    {
 3710|  4.08k|        auto start_it = m_begin;
 3711|  4.08k|        std::size_t options_available = N;
 3712|  4.08k|        std::size_t chars_consumed = 0;
 3713|  9.64k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.29k, False: 3.35k]
  ------------------
 3714|  9.64k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 5.59k, False: 704]
  ------------------
 3715|  5.59k|            std::size_t i = 0;
 3716|  5.59k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 30, False: 5.56k]
  ------------------
 3717|     30|                options_available = 0;
 3718|     30|                break;
 3719|     30|            }
 3720|  5.56k|            const auto ch = *m_begin;
 3721|  5.56k|            ++m_begin;
 3722|  52.0k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 46.4k, False: 5.56k]
  ------------------
 3723|  46.4k|                const auto cmp = static_cast<unsigned>(
 3724|  46.4k|                    ch ^ options[i].first[chars_consumed]);
 3725|  46.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 46.4k]
  ------------------
 3726|  46.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 45.0k, False: 1.45k]
  |  Branch (3726:34): [True: 44.2k, False: 786]
  ------------------
 3727|  44.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  44.2k|                                options.end());
 3729|  44.2k|                    --options_available;
 3730|  44.2k|                    continue;
 3731|  44.2k|                }
 3732|  2.24k|                ++i;
 3733|  2.24k|            }
 3734|  5.56k|            ++chars_consumed;
 3735|  5.56k|        }
 3736|  4.08k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 3.38k, False: 704]
  ------------------
 3737|  3.38k|            m_begin = start_it;
 3738|  3.38k|            return std::nullopt;
 3739|  3.38k|        }
 3740|    704|        return options.front().second;
 3741|  4.08k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3138|  6.85k|    {
 3139|  6.85k|#if !SCN_DISABLE_LOCALE
 3140|  6.85k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 6.85k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  6.85k|#endif
 3147|       |
 3148|  6.85k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  6.85k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  6.85k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3170|  6.83k|    {
 3171|  6.83k|#if !SCN_DISABLE_LOCALE
 3172|  6.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 6.83k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  6.83k|#endif
 3179|       |
 3180|  6.83k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  6.83k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  6.83k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2660|  6.83k|    {
 2661|  6.83k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.75k, False: 78]
  |  |  |  Branch (986:45): [True: 6.74k, False: 86]
  |  |  |  Branch (986:45): [True: 8, False: 78]
  |  |  ------------------
  ------------------
 2662|  6.75k|            return h.set_error(
 2663|  6.75k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2664|  6.75k|        }
 2665|     78|        t.mday = d;
 2666|     78|        st.set_mday(h);
 2667|     78|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3185|  3.40k|    {
 3186|  3.40k|#if !SCN_DISABLE_LOCALE
 3187|  3.40k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.40k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.40k|#endif
 3194|       |
 3195|  3.40k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.40k|            {"Sunday", 0},
 3197|  3.40k|            {"Monday", 1},
 3198|  3.40k|            {"Tuesday", 2},
 3199|  3.40k|            {"Wednesday", 3},
 3200|  3.40k|            {"Thursday", 4},
 3201|  3.40k|            {"Friday", 5},
 3202|  3.40k|            {"Saturday", 6},
 3203|  3.40k|        }};
 3204|  3.40k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.40k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.40k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.40k|            {"Sun", 0},
 3209|  3.40k|            {"Mon", 1},
 3210|  3.40k|            {"Tue", 2},
 3211|  3.40k|            {"Wed", 3},
 3212|  3.40k|            {"Thu", 4},
 3213|  3.40k|            {"Fri", 5},
 3214|  3.40k|            {"Sat", 6},
 3215|  3.40k|        }};
 3216|  3.40k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 0, False: 3.40k]
  ------------------
 3217|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|      0|        }
 3219|  3.40k|        return set_error(
 3220|  3.40k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3709|  6.80k|    {
 3710|  6.80k|        auto start_it = m_begin;
 3711|  6.80k|        std::size_t options_available = N;
 3712|  6.80k|        std::size_t chars_consumed = 0;
 3713|  13.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.99k, False: 6.78k]
  ------------------
 3714|  13.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.99k, False: 0]
  ------------------
 3715|  6.99k|            std::size_t i = 0;
 3716|  6.99k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 20, False: 6.97k]
  ------------------
 3717|     20|                options_available = 0;
 3718|     20|                break;
 3719|     20|            }
 3720|  6.97k|            const auto ch = *m_begin;
 3721|  6.97k|            ++m_begin;
 3722|  54.7k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 47.7k, False: 6.97k]
  ------------------
 3723|  47.7k|                const auto cmp = static_cast<unsigned>(
 3724|  47.7k|                    ch ^ options[i].first[chars_consumed]);
 3725|  47.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 47.7k]
  ------------------
 3726|  47.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 47.5k, False: 200]
  |  Branch (3726:34): [True: 47.5k, False: 16]
  ------------------
 3727|  47.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  47.5k|                                options.end());
 3729|  47.5k|                    --options_available;
 3730|  47.5k|                    continue;
 3731|  47.5k|                }
 3732|    216|                ++i;
 3733|    216|            }
 3734|  6.97k|            ++chars_consumed;
 3735|  6.97k|        }
 3736|  6.80k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 6.80k, False: 0]
  ------------------
 3737|  6.80k|            m_begin = start_it;
 3738|  6.80k|            return std::nullopt;
 3739|  6.80k|        }
 3740|      0|        return options.front().second;
 3741|  6.80k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 3259|  13.7k|    {
 3260|  13.7k|#if !SCN_DISABLE_LOCALE
 3261|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 13.7k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  13.7k|#endif
 3268|       |
 3269|  13.7k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  13.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  13.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2634|  13.7k|    {
 2635|  13.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.33k, False: 7.45k]
  |  |  |  Branch (986:45): [True: 6.25k, False: 7.54k]
  |  |  |  Branch (986:45): [True: 82, False: 7.45k]
  |  |  ------------------
  ------------------
 2636|  6.33k|            return hdl.set_error(
 2637|  6.33k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2638|  6.33k|        }
 2639|  7.45k|        t.hour = h;
 2640|  7.45k|        st.set_hour24(hdl);
 2641|  7.45k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 3287|  13.7k|    {
 3288|  13.7k|#if !SCN_DISABLE_LOCALE
 3289|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 13.7k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  13.7k|#endif
 3296|       |
 3297|  13.7k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  13.7k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  13.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2621|  13.7k|    {
 2622|  13.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.37k, False: 7.41k]
  |  |  |  Branch (986:45): [True: 6.36k, False: 7.42k]
  |  |  |  Branch (986:45): [True: 12, False: 7.41k]
  |  |  ------------------
  ------------------
 2623|  6.37k|            return h.set_error({scan_error::invalid_scanned_value,
 2624|  6.37k|                                "Invalid value for minutes"});
 2625|  6.37k|        }
 2626|  7.41k|        t.min = m;
 2627|  7.41k|        st.set_min(h);
 2628|  7.41k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3301|  3.59k|    {
 3302|  3.59k|#if !SCN_DISABLE_LOCALE
 3303|  3.59k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.59k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.59k|#endif
 3310|       |
 3311|  3.59k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.59k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.59k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2608|  3.59k|    {
 2609|  3.59k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  3.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.36k, False: 230]
  |  |  |  Branch (986:45): [True: 3.36k, False: 232]
  |  |  |  Branch (986:45): [True: 2, False: 230]
  |  |  ------------------
  ------------------
 2610|  3.36k|            return h.set_error({scan_error::invalid_scanned_value,
 2611|  3.36k|                                "Invalid value for seconds"});
 2612|  3.36k|        }
 2613|    230|        t.sec = s;
 2614|    230|        st.set_sec(h);
 2615|    230|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3543|  3.40k|    {
 3544|       |        // %m/%d/%y
 3545|  3.40k|        constexpr CharT slash = '/';
 3546|  3.40k|        on_dec_month();
 3547|  3.40k|        on_text(&slash, &slash + 1);
 3548|  3.40k|        on_day_of_month();
 3549|  3.40k|        on_text(&slash, &slash + 1);
 3550|  3.40k|        on_short_year();
 3551|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3553|  3.40k|    {
 3554|       |        // %Y-%m-%d
 3555|  3.40k|        constexpr CharT dash = '-';
 3556|  3.40k|        on_full_year();
 3557|  3.40k|        on_text(&dash, &dash + 1);
 3558|  3.40k|        on_dec_month();
 3559|  3.40k|        on_text(&dash, &dash + 1);
 3560|  3.40k|        on_day_of_month();
 3561|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3585|  10.1k|    {
 3586|       |        // %H:%M
 3587|  10.1k|        constexpr CharT colon = ':';
 3588|  10.1k|        on_24_hour();
 3589|  10.1k|        on_text(&colon, &colon + 1);
 3590|  10.1k|        on_minute();
 3591|  10.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3593|  3.59k|    {
 3594|       |        // %H:%M:%S
 3595|  3.59k|        constexpr CharT colon = ':';
 3596|  3.59k|        on_24_hour();
 3597|  3.59k|        on_text(&colon, &colon + 1);
 3598|  3.59k|        on_minute();
 3599|  3.59k|        on_text(&colon, &colon + 1);
 3600|  3.59k|        on_second();
 3601|  3.59k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3632|  7.77k|    {
 3633|  7.77k|        m_st.verify(*this);
 3634|  7.77k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 7.77k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  7.77k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 7.76k, False: 10]
  |  Branch (3637:37): [True: 10, False: 7.75k]
  |  Branch (3637:60): [True: 0, False: 7.75k]
  ------------------
 3638|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|     10|        }
 3640|  7.77k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3643|  63.0k|    {
 3644|  63.0k|        return m_error;
 3645|  63.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3660|  7.77k|    {
 3661|  7.77k|        return m_begin;
 3662|  7.77k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3853|  31.8k|{
 3854|  31.8k|    {
 3855|  31.8k|        SCN_TRY(it,
  ------------------
  |  | 3939|  31.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  31.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  31.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 346, False: 31.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    346|    }                                                  \
  |  |  |  | 3938|  31.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3856|  31.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3857|  31.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1055|  31.5k|    static_cast<    \
  |  | 1056|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3858|  31.5k|    }
 3859|       |
 3860|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3861|  31.5k|        ctx.range(), t, ctx.locale());
 3862|  31.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3863|  31.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 23.7k, False: 7.77k]
  |  |  ------------------
  ------------------
 3864|  23.7k|        return unexpected(e.error());
 3865|  23.7k|    }
 3866|  7.77k|    return r.get_iterator();
 3867|  31.5k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2997|  31.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1055|  31.5k|    static_cast<    \
  |  | 1056|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2998|  31.5k|          m_begin(ranges::begin(m_range)),
 2999|  31.5k|          m_tm(t),
 3000|  31.5k|          m_loc(loc)
 3001|  31.5k|    {
 3002|  31.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3648|  23.1k|    {
 3649|  23.1k|        set_error({scan_error::invalid_format_string, msg});
 3650|  23.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3653|  98.6k|    {
 3654|  98.6k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3654:13): [True: 23.7k, False: 74.8k]
  ------------------
 3655|  23.7k|            m_error = unexpected(e);
 3656|  23.7k|        }
 3657|  98.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3005|  31.0k|    {
 3006|  38.8k|        while (beg != end) {
  ------------------
  |  Branch (3006:16): [True: 31.0k, False: 7.79k]
  ------------------
 3007|  31.0k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3007:17): [True: 120, False: 30.9k]
  ------------------
 3008|    120|                return set_error({scan_error::end_of_input, "EOF"});
 3009|    120|            }
 3010|  30.9k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3010:17): [True: 23.1k, False: 7.79k]
  ------------------
 3011|  23.1k|                return on_error("Invalid literal character");
 3012|  23.1k|            }
 3013|  7.79k|            ++beg;
 3014|  7.79k|            ++m_begin;
 3015|  7.79k|        }
 3016|  31.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3035|  6.80k|    {
 3036|  6.80k|#if !SCN_DISABLE_LOCALE
 3037|  6.80k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3037:13): [True: 0, False: 6.80k]
  |  Branch (3037:31): [True: 0, False: 0]
  ------------------
 3038|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3038:22): [True: 0, False: 0]
  ------------------
 3039|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3040|      0|            }
 3041|      0|            return;
 3042|      0|        }
 3043|  6.80k|#endif
 3044|       |
 3045|  6.80k|        int yr = read_classic_unsigned_integer(4, 4);
 3046|  6.80k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3047|  6.80k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2686|  6.80k|    {
 2687|  6.80k|        t.year = y;
 2688|  6.80k|        st.set_full_year(h);
 2689|  6.80k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3671|  55.0k|    {
 3672|  55.0k|        int digits_read = 0;
 3673|  55.0k|        int accumulator = 0;
 3674|  71.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3674:16): [True: 71.5k, False: 262]
  ------------------
 3675|  71.5k|            const auto ch = *m_begin;
 3676|  71.5k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3676:17): [True: 30.4k, False: 41.0k]
  |  Branch (3676:36): [True: 21.7k, False: 19.3k]
  ------------------
 3677|  52.1k|                break;
 3678|  52.1k|            }
 3679|  19.3k|            ++m_begin;
 3680|  19.3k|            ++digits_read;
 3681|  19.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3682|  19.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3682:17): [True: 2.61k, False: 16.6k]
  ------------------
 3683|  2.61k|                break;
 3684|  2.61k|            }
 3685|  19.3k|        }
 3686|  55.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3686:13): [True: 39.2k, False: 15.8k]
  ------------------
 3687|  39.2k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3688|  39.2k|                                 "Too few integer digits"});
 3689|  39.2k|            return -1;
 3690|  39.2k|        }
 3691|  15.8k|        return accumulator;
 3692|  55.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3049|  3.40k|    {
 3050|  3.40k|#if !SCN_DISABLE_LOCALE
 3051|  3.40k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3051:13): [True: 0, False: 3.40k]
  |  Branch (3051:31): [True: 0, False: 0]
  ------------------
 3052|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3052:22): [True: 0, False: 0]
  ------------------
 3053|      0|                setter::set_short_year(*this, m_tm, m_st,
 3054|      0|                                       (t->tm_year + 1900) % 100);
 3055|      0|            }
 3056|      0|            return;
 3057|      0|        }
 3058|  3.40k|#endif
 3059|       |
 3060|  3.40k|        int yr = read_classic_unsigned_integer(2, 2);
 3061|  3.40k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3062|  3.40k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2709|  3.40k|    {
 2710|  3.40k|        if (!t.year) {
  ------------------
  |  Branch (2710:13): [True: 3.40k, False: 0]
  ------------------
 2711|  3.40k|            t.year = y;
 2712|  3.40k|        }
 2713|      0|        else {
 2714|      0|            t.year = *t.year + y;
 2715|      0|        }
 2716|  3.40k|        st.set_short_year(h);
 2717|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3092|  4.11k|    {
 3093|  4.11k|#if !SCN_DISABLE_FAST_FLOAT
 3094|  4.11k|        if (m_st.localized) {
  ------------------
  |  Branch (3094:13): [True: 0, False: 4.11k]
  ------------------
 3095|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3095:22): [True: 0, False: 0]
  ------------------
 3096|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3097|      0|            }
 3098|      0|            return;
 3099|      0|        }
 3100|  4.11k|#endif
 3101|       |
 3102|  4.11k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3103|  4.11k|            {"January", 1},
 3104|  4.11k|            {"February", 2},
 3105|  4.11k|            {"March", 3},
 3106|  4.11k|            {"April", 4},
 3107|  4.11k|            {"May", 5},
 3108|  4.11k|            {"June", 6},
 3109|  4.11k|            {"July", 7},
 3110|  4.11k|            {"August", 8},
 3111|  4.11k|            {"September", 9},
 3112|  4.11k|            {"October", 10},
 3113|  4.11k|            {"November", 11},
 3114|  4.11k|            {"December", 12},
 3115|  4.11k|        }};
 3116|  4.11k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3116:18): [True: 22, False: 4.08k]
  ------------------
 3117|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3118|     22|        }
 3119|  4.08k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3120|  4.08k|            {"Jan", 1},
 3121|  4.08k|            {"Feb", 2},
 3122|  4.08k|            {"Mar", 3},
 3123|  4.08k|            {"Apr", 4},
 3124|  4.08k|            {"Jun", 6},
 3125|  4.08k|            {"Jul", 7},
 3126|  4.08k|            {"Aug", 8},
 3127|  4.08k|            {"Sep", 9},
 3128|  4.08k|            {"Oct", 10},
 3129|  4.08k|            {"Nov", 11},
 3130|  4.08k|            {"Dec", 12},
 3131|  4.08k|        }};
 3132|  4.08k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3132:18): [True: 704, False: 3.38k]
  ------------------
 3133|    704|            return setter::set_mon(*this, m_tm, m_st, *m);
 3134|    704|        }
 3135|  3.38k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3136|  3.38k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2673|  7.57k|    {
 2674|  7.57k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  986|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.45k, False: 1.12k]
  |  |  |  Branch (986:45): [True: 6.40k, False: 1.17k]
  |  |  |  Branch (986:45): [True: 52, False: 1.12k]
  |  |  ------------------
  ------------------
 2675|  6.45k|            return h.set_error(
 2676|  6.45k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2677|  6.45k|        }
 2678|  1.12k|        t.mon = month{static_cast<unsigned>(m)};
 2679|  1.12k|        st.set_mon(h);
 2680|  1.12k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.11k|    {
 3710|  4.11k|        auto start_it = m_begin;
 3711|  4.11k|        std::size_t options_available = N;
 3712|  4.11k|        std::size_t chars_consumed = 0;
 3713|  10.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.38k, False: 4.04k]
  ------------------
 3714|  10.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.36k, False: 22]
  ------------------
 3715|  6.36k|            std::size_t i = 0;
 3716|  6.36k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 40, False: 6.32k]
  ------------------
 3717|     40|                options_available = 0;
 3718|     40|                break;
 3719|     40|            }
 3720|  6.32k|            const auto ch = *m_begin;
 3721|  6.32k|            ++m_begin;
 3722|  59.3k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 53.0k, False: 6.32k]
  ------------------
 3723|  53.0k|                const auto cmp = static_cast<unsigned>(
 3724|  53.0k|                    ch ^ options[i].first[chars_consumed]);
 3725|  53.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 53.0k]
  ------------------
 3726|  53.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 50.0k, False: 2.96k]
  |  Branch (3726:34): [True: 49.2k, False: 838]
  ------------------
 3727|  49.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  49.2k|                                options.end());
 3729|  49.2k|                    --options_available;
 3730|  49.2k|                    continue;
 3731|  49.2k|                }
 3732|  3.79k|                ++i;
 3733|  3.79k|            }
 3734|  6.32k|            ++chars_consumed;
 3735|  6.32k|        }
 3736|  4.11k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 4.08k, False: 22]
  ------------------
 3737|  4.08k|            m_begin = start_it;
 3738|  4.08k|            return std::nullopt;
 3739|  4.08k|        }
 3740|     22|        return options.front().second;
 3741|  4.11k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  4.08k|    {
 3710|  4.08k|        auto start_it = m_begin;
 3711|  4.08k|        std::size_t options_available = N;
 3712|  4.08k|        std::size_t chars_consumed = 0;
 3713|  9.64k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.29k, False: 3.35k]
  ------------------
 3714|  9.64k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 5.59k, False: 704]
  ------------------
 3715|  5.59k|            std::size_t i = 0;
 3716|  5.59k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 30, False: 5.56k]
  ------------------
 3717|     30|                options_available = 0;
 3718|     30|                break;
 3719|     30|            }
 3720|  5.56k|            const auto ch = *m_begin;
 3721|  5.56k|            ++m_begin;
 3722|  52.0k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 46.4k, False: 5.56k]
  ------------------
 3723|  46.4k|                const auto cmp = static_cast<unsigned>(
 3724|  46.4k|                    ch ^ options[i].first[chars_consumed]);
 3725|  46.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 46.4k]
  ------------------
 3726|  46.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 45.0k, False: 1.45k]
  |  Branch (3726:34): [True: 44.2k, False: 786]
  ------------------
 3727|  44.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  44.2k|                                options.end());
 3729|  44.2k|                    --options_available;
 3730|  44.2k|                    continue;
 3731|  44.2k|                }
 3732|  2.24k|                ++i;
 3733|  2.24k|            }
 3734|  5.56k|            ++chars_consumed;
 3735|  5.56k|        }
 3736|  4.08k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 3.38k, False: 704]
  ------------------
 3737|  3.38k|            m_begin = start_it;
 3738|  3.38k|            return std::nullopt;
 3739|  3.38k|        }
 3740|    704|        return options.front().second;
 3741|  4.08k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3138|  6.85k|    {
 3139|  6.85k|#if !SCN_DISABLE_LOCALE
 3140|  6.85k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3140:13): [True: 0, False: 6.85k]
  |  Branch (3140:31): [True: 0, False: 0]
  ------------------
 3141|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3141:22): [True: 0, False: 0]
  ------------------
 3142|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3143|      0|            }
 3144|      0|            return;
 3145|      0|        }
 3146|  6.85k|#endif
 3147|       |
 3148|  6.85k|        int mon = read_classic_unsigned_integer(1, 2);
 3149|  6.85k|        setter::set_mon(*this, m_tm, m_st, mon);
 3150|  6.85k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3170|  6.83k|    {
 3171|  6.83k|#if !SCN_DISABLE_LOCALE
 3172|  6.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3172:13): [True: 0, False: 6.83k]
  |  Branch (3172:31): [True: 0, False: 0]
  ------------------
 3173|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3173:22): [True: 0, False: 0]
  ------------------
 3174|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3175|      0|            }
 3176|      0|            return;
 3177|      0|        }
 3178|  6.83k|#endif
 3179|       |
 3180|  6.83k|        int mday = read_classic_unsigned_integer(1, 2);
 3181|  6.83k|        setter::set_mday(*this, m_tm, m_st, mday);
 3182|  6.83k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2660|  6.83k|    {
 2661|  6.83k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  986|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.75k, False: 78]
  |  |  |  Branch (986:45): [True: 6.74k, False: 86]
  |  |  |  Branch (986:45): [True: 8, False: 78]
  |  |  ------------------
  ------------------
 2662|  6.75k|            return h.set_error(
 2663|  6.75k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2664|  6.75k|        }
 2665|     78|        t.mday = d;
 2666|     78|        st.set_mday(h);
 2667|     78|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3185|  3.40k|    {
 3186|  3.40k|#if !SCN_DISABLE_LOCALE
 3187|  3.40k|        if (m_st.localized) {
  ------------------
  |  Branch (3187:13): [True: 0, False: 3.40k]
  ------------------
 3188|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3188:22): [True: 0, False: 0]
  ------------------
 3189|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3190|      0|            }
 3191|      0|            return;
 3192|      0|        }
 3193|  3.40k|#endif
 3194|       |
 3195|  3.40k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3196|  3.40k|            {"Sunday", 0},
 3197|  3.40k|            {"Monday", 1},
 3198|  3.40k|            {"Tuesday", 2},
 3199|  3.40k|            {"Wednesday", 3},
 3200|  3.40k|            {"Thursday", 4},
 3201|  3.40k|            {"Friday", 5},
 3202|  3.40k|            {"Saturday", 6},
 3203|  3.40k|        }};
 3204|  3.40k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3204:18): [True: 0, False: 3.40k]
  ------------------
 3205|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3206|      0|        }
 3207|  3.40k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3208|  3.40k|            {"Sun", 0},
 3209|  3.40k|            {"Mon", 1},
 3210|  3.40k|            {"Tue", 2},
 3211|  3.40k|            {"Wed", 3},
 3212|  3.40k|            {"Thu", 4},
 3213|  3.40k|            {"Fri", 5},
 3214|  3.40k|            {"Sat", 6},
 3215|  3.40k|        }};
 3216|  3.40k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3216:18): [True: 0, False: 3.40k]
  ------------------
 3217|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3218|      0|        }
 3219|  3.40k|        return set_error(
 3220|  3.40k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3221|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3709|  6.80k|    {
 3710|  6.80k|        auto start_it = m_begin;
 3711|  6.80k|        std::size_t options_available = N;
 3712|  6.80k|        std::size_t chars_consumed = 0;
 3713|  13.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3713:16): [True: 6.99k, False: 6.78k]
  ------------------
 3714|  13.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3714:16): [True: 6.99k, False: 0]
  ------------------
 3715|  6.99k|            std::size_t i = 0;
 3716|  6.99k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3716:17): [True: 20, False: 6.97k]
  ------------------
 3717|     20|                options_available = 0;
 3718|     20|                break;
 3719|     20|            }
 3720|  6.97k|            const auto ch = *m_begin;
 3721|  6.97k|            ++m_begin;
 3722|  54.7k|            while (i < options_available) {
  ------------------
  |  Branch (3722:20): [True: 47.7k, False: 6.97k]
  ------------------
 3723|  47.7k|                const auto cmp = static_cast<unsigned>(
 3724|  47.7k|                    ch ^ options[i].first[chars_consumed]);
 3725|  47.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3725:21): [True: 0, False: 47.7k]
  ------------------
 3726|  47.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3726:22): [True: 47.5k, False: 200]
  |  Branch (3726:34): [True: 47.5k, False: 16]
  ------------------
 3727|  47.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3728|  47.5k|                                options.end());
 3729|  47.5k|                    --options_available;
 3730|  47.5k|                    continue;
 3731|  47.5k|                }
 3732|    216|                ++i;
 3733|    216|            }
 3734|  6.97k|            ++chars_consumed;
 3735|  6.97k|        }
 3736|  6.80k|        if (options_available != 1) {
  ------------------
  |  Branch (3736:13): [True: 6.80k, False: 0]
  ------------------
 3737|  6.80k|            m_begin = start_it;
 3738|  6.80k|            return std::nullopt;
 3739|  6.80k|        }
 3740|      0|        return options.front().second;
 3741|  6.80k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 3259|  13.7k|    {
 3260|  13.7k|#if !SCN_DISABLE_LOCALE
 3261|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3261:13): [True: 0, False: 13.7k]
  |  Branch (3261:31): [True: 0, False: 0]
  ------------------
 3262|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (3262:22): [True: 0, False: 0]
  ------------------
 3263|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 3264|      0|            }
 3265|      0|            return;
 3266|      0|        }
 3267|  13.7k|#endif
 3268|       |
 3269|  13.7k|        int hr = read_classic_unsigned_integer(1, 2);
 3270|  13.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 3271|  13.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2634|  13.7k|    {
 2635|  13.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  986|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.33k, False: 7.45k]
  |  |  |  Branch (986:45): [True: 6.25k, False: 7.54k]
  |  |  |  Branch (986:45): [True: 82, False: 7.45k]
  |  |  ------------------
  ------------------
 2636|  6.33k|            return hdl.set_error(
 2637|  6.33k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2638|  6.33k|        }
 2639|  7.45k|        t.hour = h;
 2640|  7.45k|        st.set_hour24(hdl);
 2641|  7.45k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 3287|  13.7k|    {
 3288|  13.7k|#if !SCN_DISABLE_LOCALE
 3289|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3289:13): [True: 0, False: 13.7k]
  |  Branch (3289:31): [True: 0, False: 0]
  ------------------
 3290|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (3290:22): [True: 0, False: 0]
  ------------------
 3291|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3292|      0|            }
 3293|      0|            return;
 3294|      0|        }
 3295|  13.7k|#endif
 3296|       |
 3297|  13.7k|        int min = read_classic_unsigned_integer(1, 2);
 3298|  13.7k|        setter::set_min(*this, m_tm, m_st, min);
 3299|  13.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2621|  13.7k|    {
 2622|  13.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  986|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.37k, False: 7.41k]
  |  |  |  Branch (986:45): [True: 6.36k, False: 7.42k]
  |  |  |  Branch (986:45): [True: 12, False: 7.41k]
  |  |  ------------------
  ------------------
 2623|  6.37k|            return h.set_error({scan_error::invalid_scanned_value,
 2624|  6.37k|                                "Invalid value for minutes"});
 2625|  6.37k|        }
 2626|  7.41k|        t.min = m;
 2627|  7.41k|        st.set_min(h);
 2628|  7.41k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3301|  3.59k|    {
 3302|  3.59k|#if !SCN_DISABLE_LOCALE
 3303|  3.59k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3303:13): [True: 0, False: 3.59k]
  |  Branch (3303:31): [True: 0, False: 0]
  ------------------
 3304|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3304:22): [True: 0, False: 0]
  ------------------
 3305|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3306|      0|            }
 3307|      0|            return;
 3308|      0|        }
 3309|  3.59k|#endif
 3310|       |
 3311|  3.59k|        int sec = read_classic_unsigned_integer(1, 2);
 3312|  3.59k|        setter::set_sec(*this, m_tm, m_st, sec);
 3313|  3.59k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2608|  3.59k|    {
 2609|  3.59k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  986|  3.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.36k, False: 230]
  |  |  |  Branch (986:45): [True: 3.36k, False: 232]
  |  |  |  Branch (986:45): [True: 2, False: 230]
  |  |  ------------------
  ------------------
 2610|  3.36k|            return h.set_error({scan_error::invalid_scanned_value,
 2611|  3.36k|                                "Invalid value for seconds"});
 2612|  3.36k|        }
 2613|    230|        t.sec = s;
 2614|    230|        st.set_sec(h);
 2615|    230|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3543|  3.40k|    {
 3544|       |        // %m/%d/%y
 3545|  3.40k|        constexpr CharT slash = '/';
 3546|  3.40k|        on_dec_month();
 3547|  3.40k|        on_text(&slash, &slash + 1);
 3548|  3.40k|        on_day_of_month();
 3549|  3.40k|        on_text(&slash, &slash + 1);
 3550|  3.40k|        on_short_year();
 3551|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3553|  3.40k|    {
 3554|       |        // %Y-%m-%d
 3555|  3.40k|        constexpr CharT dash = '-';
 3556|  3.40k|        on_full_year();
 3557|  3.40k|        on_text(&dash, &dash + 1);
 3558|  3.40k|        on_dec_month();
 3559|  3.40k|        on_text(&dash, &dash + 1);
 3560|  3.40k|        on_day_of_month();
 3561|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3585|  10.1k|    {
 3586|       |        // %H:%M
 3587|  10.1k|        constexpr CharT colon = ':';
 3588|  10.1k|        on_24_hour();
 3589|  10.1k|        on_text(&colon, &colon + 1);
 3590|  10.1k|        on_minute();
 3591|  10.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3593|  3.59k|    {
 3594|       |        // %H:%M:%S
 3595|  3.59k|        constexpr CharT colon = ':';
 3596|  3.59k|        on_24_hour();
 3597|  3.59k|        on_text(&colon, &colon + 1);
 3598|  3.59k|        on_minute();
 3599|  3.59k|        on_text(&colon, &colon + 1);
 3600|  3.59k|        on_second();
 3601|  3.59k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3632|  7.77k|    {
 3633|  7.77k|        m_st.verify(*this);
 3634|  7.77k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3634:13): [True: 0, False: 7.77k]
  |  Branch (3634:31): [True: 0, False: 0]
  ------------------
 3635|      0|            setter::handle_am_pm(m_tm, m_st);
 3636|      0|        }
 3637|  7.77k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3637:13): [True: 7.76k, False: 10]
  |  Branch (3637:37): [True: 10, False: 7.75k]
  |  Branch (3637:60): [True: 0, False: 7.75k]
  ------------------
 3638|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3639|     10|        }
 3640|  7.77k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3643|  63.0k|    {
 3644|  63.0k|        return m_error;
 3645|  63.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3660|  7.77k|    {
 3661|  7.77k|        return m_begin;
 3662|  7.77k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    860|{
 1462|    860|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    860|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    860|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    860|            return transcode_to_string_impl_to32(src, dest);
 1473|    860|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    860|    SCN_EXPECT(false);
  ------------------
  |  | 1051|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    860|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    860|{
 1355|    860|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    860|    auto it = src.begin();
 1358|   233k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 232k, False: 860]
  ------------------
 1359|   232k|        auto res = get_next_code_point(
 1360|   232k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   232k|                                                                 src.end()));
 1362|   232k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  986|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.80k, False: 225k]
  |  |  ------------------
  ------------------
 1363|  6.80k|            dest.push_back(DestCharT{0xfffd});
 1364|  6.80k|        }
 1365|   225k|        else {
 1366|   225k|            dest.push_back(res.value);
 1367|   225k|        }
 1368|   232k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   232k|    }
 1370|    860|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   249k|{
 1279|   249k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1051|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   249k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   249k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 9.95k, False: 239k]
  |  |  ------------------
  ------------------
 1283|  9.95k|        return {get_start_for_next_code_point(input),
 1284|  9.95k|                detail::invalid_code_point};
 1285|  9.95k|    }
 1286|   239k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  986|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 317, False: 238k]
  |  |  ------------------
  ------------------
 1287|    317|        return {input.end(), detail::invalid_code_point};
 1288|    317|    }
 1289|       |
 1290|   238k|    return {input.begin() + len,
 1291|   238k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   239k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  9.95k|{
 1265|  9.95k|    auto it = input.begin();
 1266|   137k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 136k, False: 615]
  ------------------
 1267|   136k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 9.33k, False: 127k]
  ------------------
 1268|  9.33k|            break;
 1269|  9.33k|        }
 1270|   136k|    }
 1271|  9.95k|    return it;
 1272|  9.95k|}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   162k|{
  458|   162k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   162k|        static_cast<unsigned char>(ch))];
  460|   162k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  86.1k|{
  539|  86.1k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  86.1k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|   368k|{
  784|   368k|    return e != eof_error::good;
  785|   368k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  4.42k|{
  798|  4.42k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1051|  4.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  4.42k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  4.42k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  80.9k|    {
  304|  80.9k|        ranges::advance(x, n);
  305|  80.9k|        return x;
  306|  80.9k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  80.9k|    {
  268|  80.9k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  80.9k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  80.9k|    {
  151|  80.9k|        i += n;
  152|  80.9k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   212k|    {
  108|   212k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   212k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   212k|    {
   87|   212k|        return s - i;
   88|   212k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   118k|    {
  108|   118k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   118k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   118k|    {
   87|   118k|        return s - i;
   88|   118k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2INSt3__117basic_string_viewIcNSB_11char_traitsIcEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSO_10locale_refE:
 2985|  80.9k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|  80.9k|    static_cast<    \
  |  | 1056|  80.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  80.9k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  80.9k|          m_current(m_range.begin())
 2988|  80.9k|    {
 2989|  80.9k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   448k|    {
 2993|   448k|        return m_current;
 2994|   448k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2INSt3__117basic_string_viewIwNSB_11char_traitsIwEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSO_10locale_refE:
 2985|  95.5k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|  95.5k|    static_cast<    \
  |  | 1056|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  95.5k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  95.5k|          m_current(m_range.begin())
 2988|  95.5k|    {
 2989|  95.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   500k|    {
 2993|   500k|        return m_current;
 2994|   500k|    }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  1.12M|    {
  763|  1.12M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.12M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   287k|        : m_fptr([](storage fn,
  743|   287k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   287k|              cvref<T> obj = *get<T>(fn);
  745|   287k|              if constexpr (std::is_void_v<R>) {
  746|   287k|                  obj(static_cast<decltype(args)>(args)...);
  747|   287k|              }
  748|   287k|              else {
  749|   287k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   287k|              }
  751|   287k|          }),
  752|   287k|          m_storage(std::addressof(f))
  753|   287k|    {
  754|   287k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   564k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   564k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   564k|              else {
  749|   564k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   564k|              }
  751|   564k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   564k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   564k|        else if constexpr (std::is_object_v<T>) {
  688|   564k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   564k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   287k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   287k|        {
  662|   287k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  60.2k|    {
  108|  60.2k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  60.2k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  60.2k|    {
   94|  60.2k|        iter_difference_t<I> counter{0};
   95|   547k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 487k, False: 60.2k]
  ------------------
   96|   487k|            ++i;
   97|   487k|            ++counter;
   98|   487k|        }
   99|  60.2k|        return counter;
  100|  60.2k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  96.3k|{
  951|  96.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.56k, False: 94.8k]
  |  |  ------------------
  ------------------
  952|  1.56k|        return eof_error::eof;
  953|  1.56k|    }
  954|  94.8k|    return eof_error::good;
  955|  96.3k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   316k|{
  945|   316k|    return is_range_eof(r.begin(), r.end());
  946|   316k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   316k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   316k|    {
  938|   316k|        return begin == end;
  939|   316k|    }
  940|   316k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  80.9k|{
  951|  80.9k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 780, False: 80.1k]
  |  |  ------------------
  ------------------
  952|    780|        return eof_error::eof;
  953|    780|    }
  954|  80.1k|    return eof_error::good;
  955|  80.9k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  80.9k|{
  945|  80.9k|    return is_range_eof(r.begin(), r.end());
  946|  80.9k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  80.9k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  80.9k|    {
  938|  80.9k|        return begin == end;
  939|  80.9k|    }
  940|  80.9k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|   161k|    {
 1602|   161k|        return sv;
 1603|   161k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  80.9k|{
 3066|  80.9k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 80.9k, False: 0]
  ------------------
 3067|  80.9k|        auto it = read_while_classic_space(range);
 3068|  80.9k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  80.9k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 780, False: 80.1k]
  |  |  ------------------
  ------------------
 3070|    780|            return unexpected(e);
 3071|    780|        }
 3072|       |
 3073|  80.1k|        return it;
 3074|  80.9k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  80.9k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  80.9k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  80.9k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  80.9k|        auto buf = make_contiguous_buffer(range);
 2220|  80.9k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  80.9k|        return ranges::next(range.begin(),
 2222|  80.9k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  80.9k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  80.9k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  80.9k|                  ranges::sized_range<Range>) {
 1785|  80.9k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  80.9k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  80.9k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  80.9k|    {
 1589|  80.9k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  96.3k|    {
  268|  96.3k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  96.3k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  96.3k|    {
  181|  96.3k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 0, False: 96.3k]
  ------------------
  182|      0|            ++i;
  183|      0|        }
  184|  96.3k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  96.3k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  96.3k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  96.3k|        else {
 1055|  96.3k|            return r.begin().contiguous_segment();
 1056|  96.3k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  96.3k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  96.3k|{
 2160|  96.3k|    auto it = range.begin();
 2161|   221k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 220k, False: 1.56k]
  ------------------
 2162|   220k|        const auto val =
 2163|   220k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   220k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|   220k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 201k, False: 18.8k]
  |  |  ------------------
  ------------------
 2165|   201k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   201k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   201k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 94.8k, False: 106k]
  ------------------
 2168|  94.8k|                return it;
 2169|  94.8k|            }
 2170|   201k|        }
 2171|   125k|        it = val.iterator;
 2172|   125k|    }
 2173|       |
 2174|  1.56k|    return it;
 2175|  96.3k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   220k|{
 1998|   220k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   220k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   220k|    auto it = range.begin();
 2002|   220k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   220k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 18.8k, False: 201k]
  |  |  ------------------
  ------------------
 2005|  18.8k|        ++it;
 2006|  18.8k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  18.8k|        return {it, {}};
 2008|  18.8k|    }
 2009|       |
 2010|   201k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 196k, False: 5.28k]
  ------------------
 2011|   196k|        ++it;
 2012|   196k|        return {it, string_type(1, *range.begin())};
 2013|   196k|    }
 2014|       |
 2015|  5.28k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  5.28k|    return {it, string_type{range.begin(), it}};
 2017|   201k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  18.8k|{
 1265|  18.8k|    auto it = input.begin();
 1266|   244k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 244k, False: 588]
  ------------------
 1267|   244k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 18.2k, False: 225k]
  ------------------
 1268|  18.2k|            break;
 1269|  18.2k|        }
 1270|   244k|    }
 1271|  18.8k|    return it;
 1272|  18.8k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  5.28k|    {
  283|  5.28k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  5.28k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  5.28k|    {
  252|  5.28k|        constexpr iter_difference_t<I> zero{0};
  253|  5.28k|        iter_difference_t<I> counter{0};
  254|       |
  255|  16.5k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 11.6k, False: 4.96k]
  |  Branch (255:30): [True: 11.3k, False: 324]
  ------------------
  256|  11.3k|            ++i;
  257|  11.3k|            ++counter;
  258|  11.3k|        }
  259|       |
  260|  5.28k|        return counter;
  261|  5.28k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   220k|    {
 1989|   220k|        return !codepoint.empty();
 1990|   220k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  96.3k|{
 2181|  96.3k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  96.3k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  96.3k|{
 3066|  96.3k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 96.3k, False: 0]
  ------------------
 3067|  96.3k|        auto it = read_while_classic_space(range);
 3068|  96.3k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  96.3k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.56k, False: 94.8k]
  |  |  ------------------
  ------------------
 3070|  1.56k|            return unexpected(e);
 3071|  1.56k|        }
 3072|       |
 3073|  94.8k|        return it;
 3074|  96.3k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  96.3k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  96.3k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  96.3k|    else {
 2225|  96.3k|        auto it = range.begin();
 2226|       |
 2227|  96.3k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  96.3k|            auto seg = get_contiguous_beginning(range);
 2229|  96.3k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  96.3k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 96.3k]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|  96.3k|            ranges::advance(it, seg.size());
 2234|  96.3k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  96.3k|            return detail::is_cp_space(cp);
 2238|  96.3k|        });
 2239|  96.3k|    }
 2240|  96.3k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  96.3k|        : m_fptr([](storage fn,
  743|  96.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.3k|              cvref<T> obj = *get<T>(fn);
  745|  96.3k|              if constexpr (std::is_void_v<R>) {
  746|  96.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  96.3k|              }
  748|  96.3k|              else {
  749|  96.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.3k|              }
  751|  96.3k|          }),
  752|  96.3k|          m_storage(std::addressof(f))
  753|  96.3k|    {
  754|  96.3k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   201k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   201k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   201k|              else {
  749|   201k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   201k|              }
  751|   201k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   201k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   201k|        else if constexpr (std::is_object_v<T>) {
  688|   201k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   201k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   201k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   201k|            return detail::is_cp_space(cp);
 2238|   201k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  96.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  96.3k|        {
  662|  96.3k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  23.3k|    {
  108|  23.3k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  23.3k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  23.3k|    {
   94|  23.3k|        iter_difference_t<I> counter{0};
   95|   161k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 138k, False: 23.3k]
  ------------------
   96|   138k|            ++i;
   97|   138k|            ++counter;
   98|   138k|        }
   99|  23.3k|        return counter;
  100|  23.3k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  95.5k|{
  951|  95.5k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.03k, False: 94.5k]
  |  |  ------------------
  ------------------
  952|  1.03k|        return eof_error::eof;
  953|  1.03k|    }
  954|  94.5k|    return eof_error::good;
  955|  95.5k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   276k|{
  945|   276k|    return is_range_eof(r.begin(), r.end());
  946|   276k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   276k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   276k|    {
  938|   276k|        return begin == end;
  939|   276k|    }
  940|   276k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   181k|{
 1998|   181k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   181k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   181k|    auto it = range.begin();
 2002|   181k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   181k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   181k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 181k, False: 0]
  ------------------
 2011|   181k|        ++it;
 2012|   181k|        return {it, string_type(1, *range.begin())};
 2013|   181k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   181k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   276k|{
  945|   276k|    return is_range_eof(r.begin(), r.end());
  946|   276k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   276k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   276k|    {
  938|   276k|        return begin == end;
  939|   276k|    }
  940|   276k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   181k|    {
 1989|   181k|        return !codepoint.empty();
 1990|   181k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  95.5k|{
  951|  95.5k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.03k, False: 94.5k]
  |  |  ------------------
  ------------------
  952|  1.03k|        return eof_error::eof;
  953|  1.03k|    }
  954|  94.5k|    return eof_error::good;
  955|  95.5k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  95.5k|{
 3066|  95.5k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 95.5k, False: 0]
  ------------------
 3067|  95.5k|        auto it = read_while_classic_space(range);
 3068|  95.5k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  95.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.03k, False: 94.5k]
  |  |  ------------------
  ------------------
 3070|  1.03k|            return unexpected(e);
 3071|  1.03k|        }
 3072|       |
 3073|  94.5k|        return it;
 3074|  95.5k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  95.5k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  95.5k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  95.5k|    else {
 2225|  95.5k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  95.5k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  95.5k|            return detail::is_cp_space(cp);
 2238|  95.5k|        });
 2239|  95.5k|    }
 2240|  95.5k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  95.5k|{
 2181|  95.5k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  95.5k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  95.5k|{
 2160|  95.5k|    auto it = range.begin();
 2161|   182k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 181k, False: 1.03k]
  ------------------
 2162|   181k|        const auto val =
 2163|   181k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   181k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|   181k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 181k, False: 0]
  |  |  ------------------
  ------------------
 2165|   181k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   181k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   181k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 94.5k, False: 86.8k]
  ------------------
 2168|  94.5k|                return it;
 2169|  94.5k|            }
 2170|   181k|        }
 2171|  86.8k|        it = val.iterator;
 2172|  86.8k|    }
 2173|       |
 2174|  1.03k|    return it;
 2175|  95.5k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  95.5k|        : m_fptr([](storage fn,
  743|  95.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  95.5k|              cvref<T> obj = *get<T>(fn);
  745|  95.5k|              if constexpr (std::is_void_v<R>) {
  746|  95.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  95.5k|              }
  748|  95.5k|              else {
  749|  95.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  95.5k|              }
  751|  95.5k|          }),
  752|  95.5k|          m_storage(std::addressof(f))
  753|  95.5k|    {
  754|  95.5k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   181k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   181k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   181k|              else {
  749|   181k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   181k|              }
  751|   181k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   181k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   181k|        else if constexpr (std::is_object_v<T>) {
  688|   181k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   181k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   181k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   181k|            return detail::is_cp_space(cp);
 2238|   181k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  95.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  95.5k|        {
  662|  95.5k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  95.5k|{
 2160|  95.5k|    auto it = range.begin();
 2161|   182k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 181k, False: 1.03k]
  ------------------
 2162|   181k|        const auto val =
 2163|   181k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   181k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|   181k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 181k, False: 0]
  |  |  ------------------
  ------------------
 2165|   181k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   181k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   181k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 94.5k, False: 86.8k]
  ------------------
 2168|  94.5k|                return it;
 2169|  94.5k|            }
 2170|   181k|        }
 2171|  86.8k|        it = val.iterator;
 2172|  86.8k|    }
 2173|       |
 2174|  1.03k|    return it;
 2175|  95.5k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   181k|{
 1998|   181k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   181k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   181k|    auto it = range.begin();
 2002|   181k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   181k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   181k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 181k, False: 0]
  ------------------
 2011|   181k|        ++it;
 2012|   181k|        return {it, string_type(1, *range.begin())};
 2013|   181k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   181k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   181k|    {
 1989|   181k|        return !codepoint.empty();
 1990|   181k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  95.5k|{
 2181|  95.5k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  95.5k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  95.5k|{
 3066|  95.5k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 95.5k, False: 0]
  ------------------
 3067|  95.5k|        auto it = read_while_classic_space(range);
 3068|  95.5k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  95.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  95.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.03k, False: 94.5k]
  |  |  ------------------
  ------------------
 3070|  1.03k|            return unexpected(e);
 3071|  1.03k|        }
 3072|       |
 3073|  94.5k|        return it;
 3074|  95.5k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  95.5k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  95.5k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  95.5k|    else {
 2225|  95.5k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  95.5k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  95.5k|            return detail::is_cp_space(cp);
 2238|  95.5k|        });
 2239|  95.5k|    }
 2240|  95.5k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  95.5k|        : m_fptr([](storage fn,
  743|  95.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  95.5k|              cvref<T> obj = *get<T>(fn);
  745|  95.5k|              if constexpr (std::is_void_v<R>) {
  746|  95.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  95.5k|              }
  748|  95.5k|              else {
  749|  95.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  95.5k|              }
  751|  95.5k|          }),
  752|  95.5k|          m_storage(std::addressof(f))
  753|  95.5k|    {
  754|  95.5k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   181k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   181k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   181k|              else {
  749|   181k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   181k|              }
  751|   181k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   181k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   181k|        else if constexpr (std::is_object_v<T>) {
  688|   181k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   181k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   181k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   181k|            return detail::is_cp_space(cp);
 2238|   181k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  95.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  95.5k|        {
  662|  95.5k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEcEEE6handleE:
 5953|  2.58k|    {
 5954|  2.58k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.58k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  2.58k|                source_tag<range_type>, {}};
 5957|  2.58k|            auto ctx = make_custom_ctx();
 5958|  2.58k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3929|  2.58k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  2.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 2.58k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  2.58k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  2.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  2.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  2.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.58k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|      0|                              basic_contiguous_scan_context<char_type>>) {
 5963|      0|                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|       |            else {
 5966|       |                return ctx.begin();
 5967|       |            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  2.58k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE15make_custom_ctxEv:
 5935|  2.58k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  2.58k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  2.58k|            auto it =
 5940|  2.58k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  2.58k|                    std::basic_string_view<char_type>(range.data(),
 5942|  2.58k|                                                      range.size()),
 5943|  2.58k|                    0};
 5944|  2.58k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  2.58k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  2.58k|    {
 5954|  2.58k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.58k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  2.58k|                source_tag<range_type>, {}};
 5957|  2.58k|            auto ctx = make_custom_ctx();
 5958|  2.58k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3929|  2.58k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  2.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 2.58k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  2.58k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  2.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  2.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  2.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.58k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|       |                              basic_contiguous_scan_context<char_type>>) {
 5963|       |                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|      0|            else {
 5966|      0|                return ctx.begin();
 5967|      0|            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  2.58k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15make_custom_ctxEv:
 5935|  2.58k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  2.58k|        else {
 5947|  2.58k|            return {range.begin(), args, loc};
 5948|  2.58k|        }
 5949|  2.58k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  80.9k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|  80.9k|    static_cast<    \
  |  | 1056|  80.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  80.9k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  80.9k|          m_current(m_range.begin())
 2988|  80.9k|    {
 2989|  80.9k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   241k|    {
 2998|   241k|        return m_range.end();
 2999|   241k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  80.1k|    {
 3013|  80.1k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1051|  80.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  80.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  80.1k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  80.1k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 80.1k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  80.1k|        }
 3019|  80.1k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|  80.1k|    static_cast<    \
  |  | 1056|  80.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  80.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   161k|    {
 3003|   161k|        return ranges::subrange{begin(), end()};
 3004|   161k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 6285|   177k|    {
 6286|   177k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3929|   177k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 72.2k, False: 105k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  72.2k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  72.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  72.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  72.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  72.2k|    }
  ------------------
 6287|   105k|        return {ctx.begin()};
 6288|   177k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toERKNS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 3023|  44.8k|    {
 3024|  44.8k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  | 1051|  44.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  44.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  44.8k|        m_current = m_range.begin() + it.position();
 3026|  44.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE16underlying_rangeEv:
 3007|   242k|    {
 3008|   242k|        return m_range;
 3009|   242k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE14begin_positionEv:
 3029|  80.9k|    {
 3030|  80.9k|        return ranges::distance(m_range.begin(), begin());
 3031|  80.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEwEEE6handleE:
 5953|  5.16k|    {
 5954|  5.16k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  5.16k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  5.16k|                source_tag<range_type>, {}};
 5957|  5.16k|            auto ctx = make_custom_ctx();
 5958|  5.16k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3929|  5.16k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  5.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 5.16k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  5.16k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  5.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  5.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  5.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  5.16k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|      0|                              basic_contiguous_scan_context<char_type>>) {
 5963|      0|                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|       |            else {
 5966|       |                return ctx.begin();
 5967|       |            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  5.16k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE15make_custom_ctxEv:
 5935|  5.16k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  5.16k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  5.16k|            auto it =
 5940|  5.16k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  5.16k|                    std::basic_string_view<char_type>(range.data(),
 5942|  5.16k|                                                      range.size()),
 5943|  5.16k|                    0};
 5944|  5.16k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  5.16k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|  95.5k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|  95.5k|    static_cast<    \
  |  | 1056|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  95.5k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  95.5k|          m_current(m_range.begin())
 2988|  95.5k|    {
 2989|  95.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   284k|    {
 2998|   284k|        return m_range.end();
 2999|   284k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|  94.5k|    {
 3013|  94.5k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1051|  94.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  94.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  94.5k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  94.5k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 94.5k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  94.5k|        }
 3019|  94.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|  94.5k|    static_cast<    \
  |  | 1056|  94.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  94.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   190k|    {
 3003|   190k|        return ranges::subrange{begin(), end()};
 3004|   190k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 6285|   191k|    {
 6286|   191k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3929|   191k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 144k, False: 46.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|   144k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|   144k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|   144k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|   144k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|   144k|    }
  ------------------
 6287|  46.6k|        return {ctx.begin()};
 6288|   191k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toERKNS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 3023|  23.3k|    {
 3024|  23.3k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  | 1051|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  23.3k|        m_current = m_range.begin() + it.position();
 3026|  23.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE16underlying_rangeEv:
 3007|   286k|    {
 3008|   286k|        return m_range;
 3009|   286k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE14begin_positionEv:
 3029|  95.5k|    {
 3030|  95.5k|        return ranges::distance(m_range.begin(), begin());
 3031|  95.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  5.16k|    {
 5954|  5.16k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  5.16k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  5.16k|                source_tag<range_type>, {}};
 5957|  5.16k|            auto ctx = make_custom_ctx();
 5958|  5.16k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3929|  5.16k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  5.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 5.16k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  5.16k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  5.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  5.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  5.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  5.16k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|       |                              basic_contiguous_scan_context<char_type>>) {
 5963|       |                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|      0|            else {
 5966|      0|                return ctx.begin();
 5967|      0|            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  5.16k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15make_custom_ctxEv:
 5935|  5.16k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  5.16k|        else {
 5947|  5.16k|            return {range.begin(), args, loc};
 5948|  5.16k|        }
 5949|  5.16k|    }

LLVMFuzzerTestOneInput:
   58|    860|{
   59|    860|    scn::fuzz::run(data, size);
   60|    860|    return 0;
   61|    860|}
chrono_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   34|    860|{
   35|    860|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (35:9): [True: 0, False: 860]
  |  Branch (35:35): [True: 0, False: 860]
  ------------------
   36|      0|        return;
   37|      0|    }
   38|       |
   39|    860|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   40|       |
   41|    860|    const auto& f =
   42|    860|        get_format_strings<char>("{:%T}", "{:%R}", "{:%D}", "{:%F}",
   43|    860|                                 "{:%Y-%m-%dT%H:%M:%S%z}", "{:%a}", "{:%b}");
   44|    860|    do_basic_run(sv, f);
   45|       |
   46|    860|    const auto& wf = get_format_strings<wchar_t>(
   47|    860|        L"{:%T}", L"{:%R}", L"{:%D}", L"{:%F}", L"{:%Y-%m-%dT%H:%M:%S%z}",
   48|    860|        L"{:%a}", L"{:%b}");
   49|    860|    do_basic_run(wsv_reinterpret, wf);
   50|    860|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (50:9): [True: 860, False: 0]
  ------------------
   51|    860|        do_basic_run(wsv_transcode, wf);
   52|    860|    }
   53|    860|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|    860|{
   27|    860|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    860|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    860|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    860|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|    860|{
   27|    860|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    860|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    860|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    860|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|  1.72k|{
   27|  1.72k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.72k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.72k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.72k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|  1.72k|{
   27|  1.72k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.72k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.72k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.72k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    860|{
   53|    860|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1051|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    860|    string_buffer.resize(size);
   57|    860|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    860|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    860|    const auto wsv_reinterpret_size =
   62|    860|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 77, False: 783]
  ------------------
   63|    860|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    860|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    860|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    860|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    860|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    860|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    860|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    860|{
  123|    860|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    860|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    860|    buf.resize(sizeof...(Args));
  126|    860|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    860|    return buf;
  128|    860|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    860|{
  109|    860|    if constexpr (std::is_same_v<CharT, char>) {
  110|    860|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    860|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    860|{
  186|    860|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    860|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    860|                                   format_strings);
  189|    860|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|    860|{
  134|       |    // Regular scan
  135|  6.02k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.02k, False: 860]
  ------------------
  136|  6.02k|        auto it = scn::ranges::begin(source);
  137|  13.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.4k|            auto result = scn::scan<T>(
  140|  13.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.4k|                scn::runtime_format(f));
  142|  13.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.02k, False: 7.47k]
  ------------------
  143|  6.02k|                break;
  144|  6.02k|            }
  145|  7.47k|            it = result->begin();
  146|  7.47k|        }
  147|  6.02k|    }
  148|       |
  149|       |    // scan localized
  150|  6.02k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.02k, False: 860]
  ------------------
  151|  6.02k|        auto it = scn::ranges::begin(source);
  152|  13.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.4k|            auto result = scn::scan<T>(
  155|  13.4k|                global_locale,
  156|  13.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.4k|                scn::runtime_format(f));
  158|  13.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.02k, False: 7.47k]
  ------------------
  159|  6.02k|                break;
  160|  6.02k|            }
  161|  7.47k|            it = result->begin();
  162|  7.47k|        }
  163|  6.02k|    }
  164|       |
  165|       |    // scan_value
  166|    860|    {
  167|    860|        auto it = scn::ranges::begin(source);
  168|    860|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    860|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    860|            auto result = scn::scan_value<T>(
  171|    860|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    860|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 860, False: 0]
  ------------------
  173|    860|                break;
  174|    860|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    860|    }
  178|    860|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    860|{
  134|       |    // Regular scan
  135|  6.02k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.02k, False: 860]
  ------------------
  136|  6.02k|        auto it = scn::ranges::begin(source);
  137|  13.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.4k|            auto result = scn::scan<T>(
  140|  13.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.4k|                scn::runtime_format(f));
  142|  13.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.02k, False: 7.47k]
  ------------------
  143|  6.02k|                break;
  144|  6.02k|            }
  145|  7.47k|            it = result->begin();
  146|  7.47k|        }
  147|  6.02k|    }
  148|       |
  149|       |    // scan localized
  150|  6.02k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.02k, False: 860]
  ------------------
  151|  6.02k|        auto it = scn::ranges::begin(source);
  152|  13.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.4k|            auto result = scn::scan<T>(
  155|  13.4k|                global_locale,
  156|  13.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.4k|                scn::runtime_format(f));
  158|  13.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.02k, False: 7.47k]
  ------------------
  159|  6.02k|                break;
  160|  6.02k|            }
  161|  7.47k|            it = result->begin();
  162|  7.47k|        }
  163|  6.02k|    }
  164|       |
  165|       |    // scan_value
  166|    860|    {
  167|    860|        auto it = scn::ranges::begin(source);
  168|    860|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    860|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    860|            auto result = scn::scan_value<T>(
  171|    860|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    860|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 860, False: 0]
  ------------------
  173|    860|                break;
  174|    860|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    860|    }
  178|    860|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    860|{
  134|       |    // Regular scan
  135|  6.02k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.02k, False: 860]
  ------------------
  136|  6.02k|        auto it = scn::ranges::begin(source);
  137|  13.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.4k|            auto result = scn::scan<T>(
  140|  13.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.4k|                scn::runtime_format(f));
  142|  13.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.02k, False: 7.47k]
  ------------------
  143|  6.02k|                break;
  144|  6.02k|            }
  145|  7.47k|            it = result->begin();
  146|  7.47k|        }
  147|  6.02k|    }
  148|       |
  149|       |    // scan localized
  150|  6.02k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.02k, False: 860]
  ------------------
  151|  6.02k|        auto it = scn::ranges::begin(source);
  152|  13.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.4k|            auto result = scn::scan<T>(
  155|  13.4k|                global_locale,
  156|  13.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.4k|                scn::runtime_format(f));
  158|  13.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.02k, False: 7.47k]
  ------------------
  159|  6.02k|                break;
  160|  6.02k|            }
  161|  7.47k|            it = result->begin();
  162|  7.47k|        }
  163|  6.02k|    }
  164|       |
  165|       |    // scan_value
  166|    860|    {
  167|    860|        auto it = scn::ranges::begin(source);
  168|    860|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    860|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    860|            auto result = scn::scan_value<T>(
  171|    860|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    860|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 860, False: 0]
  ------------------
  173|    860|                break;
  174|    860|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    860|    }
  178|    860|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmKNSt3__15dequeIcNS3_9allocatorIcEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|    860|{
  134|       |    // Regular scan
  135|  6.02k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.02k, False: 860]
  ------------------
  136|  6.02k|        auto it = scn::ranges::begin(source);
  137|  16.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.0k|            auto result = scn::scan<T>(
  140|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.0k|                scn::runtime_format(f));
  142|  16.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.02k, False: 10.0k]
  ------------------
  143|  6.02k|                break;
  144|  6.02k|            }
  145|  10.0k|            it = result->begin();
  146|  10.0k|        }
  147|  6.02k|    }
  148|       |
  149|       |    // scan localized
  150|  6.02k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.02k, False: 860]
  ------------------
  151|  6.02k|        auto it = scn::ranges::begin(source);
  152|  16.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.0k|            auto result = scn::scan<T>(
  155|  16.0k|                global_locale,
  156|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.0k|                scn::runtime_format(f));
  158|  16.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.02k, False: 10.0k]
  ------------------
  159|  6.02k|                break;
  160|  6.02k|            }
  161|  10.0k|            it = result->begin();
  162|  10.0k|        }
  163|  6.02k|    }
  164|       |
  165|       |    // scan_value
  166|    860|    {
  167|    860|        auto it = scn::ranges::begin(source);
  168|    860|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    860|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    860|            auto result = scn::scan_value<T>(
  171|    860|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    860|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 860, False: 0]
  ------------------
  173|    860|                break;
  174|    860|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    860|    }
  178|    860|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    860|{
  134|       |    // Regular scan
  135|  6.02k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.02k, False: 860]
  ------------------
  136|  6.02k|        auto it = scn::ranges::begin(source);
  137|  16.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.0k|            auto result = scn::scan<T>(
  140|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.0k|                scn::runtime_format(f));
  142|  16.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.02k, False: 10.0k]
  ------------------
  143|  6.02k|                break;
  144|  6.02k|            }
  145|  10.0k|            it = result->begin();
  146|  10.0k|        }
  147|  6.02k|    }
  148|       |
  149|       |    // scan localized
  150|  6.02k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.02k, False: 860]
  ------------------
  151|  6.02k|        auto it = scn::ranges::begin(source);
  152|  16.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.0k|            auto result = scn::scan<T>(
  155|  16.0k|                global_locale,
  156|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.0k|                scn::runtime_format(f));
  158|  16.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.02k, False: 10.0k]
  ------------------
  159|  6.02k|                break;
  160|  6.02k|            }
  161|  10.0k|            it = result->begin();
  162|  10.0k|        }
  163|  6.02k|    }
  164|       |
  165|       |    // scan_value
  166|    860|    {
  167|    860|        auto it = scn::ranges::begin(source);
  168|    860|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    860|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    860|            auto result = scn::scan_value<T>(
  171|    860|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    860|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 860, False: 0]
  ------------------
  173|    860|                break;
  174|    860|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    860|    }
  178|    860|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    860|{
  134|       |    // Regular scan
  135|  6.02k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.02k, False: 860]
  ------------------
  136|  6.02k|        auto it = scn::ranges::begin(source);
  137|  16.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.0k|            auto result = scn::scan<T>(
  140|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.0k|                scn::runtime_format(f));
  142|  16.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.02k, False: 10.0k]
  ------------------
  143|  6.02k|                break;
  144|  6.02k|            }
  145|  10.0k|            it = result->begin();
  146|  10.0k|        }
  147|  6.02k|    }
  148|       |
  149|       |    // scan localized
  150|  6.02k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.02k, False: 860]
  ------------------
  151|  6.02k|        auto it = scn::ranges::begin(source);
  152|  16.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.0k|            auto result = scn::scan<T>(
  155|  16.0k|                global_locale,
  156|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.0k|                scn::runtime_format(f));
  158|  16.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.02k, False: 10.0k]
  ------------------
  159|  6.02k|                break;
  160|  6.02k|            }
  161|  10.0k|            it = result->begin();
  162|  10.0k|        }
  163|  6.02k|    }
  164|       |
  165|       |    // scan_value
  166|    860|    {
  167|    860|        auto it = scn::ranges::begin(source);
  168|    860|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    860|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    860|            auto result = scn::scan_value<T>(
  171|    860|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    860|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 860, False: 0]
  ------------------
  173|    860|                break;
  174|    860|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    860|    }
  178|    860|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    860|{
   91|    860|    using char_type = ranges::range_value_t<Source>;
   92|    860|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    860|    deque.clear();
   94|    860|    std::copy(ranges::begin(source), ranges::end(source),
   95|    860|              std::back_inserter(deque));
   96|    860|    return deque;
   97|    860|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    860|{
   80|    860|    if constexpr (std::is_same_v<CharT, char>) {
   81|    860|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    860|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    860|{
  123|    860|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    860|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    860|    buf.resize(sizeof...(Args));
  126|    860|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    860|    return buf;
  128|    860|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    860|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    860|    else {
  113|    860|        return wformat_string_view_buffer;
  114|    860|    }
  115|    860|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.72k|{
  186|  1.72k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.72k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.72k|                                   format_strings);
  189|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|  1.72k|{
  134|       |    // Regular scan
  135|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.0k, False: 1.72k]
  ------------------
  136|  12.0k|        auto it = scn::ranges::begin(source);
  137|  15.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.9k|            auto result = scn::scan<T>(
  140|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.9k|                scn::runtime_format(f));
  142|  15.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.0k, False: 3.88k]
  ------------------
  143|  12.0k|                break;
  144|  12.0k|            }
  145|  3.88k|            it = result->begin();
  146|  3.88k|        }
  147|  12.0k|    }
  148|       |
  149|       |    // scan localized
  150|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.0k, False: 1.72k]
  ------------------
  151|  12.0k|        auto it = scn::ranges::begin(source);
  152|  15.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.9k|            auto result = scn::scan<T>(
  155|  15.9k|                global_locale,
  156|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.9k|                scn::runtime_format(f));
  158|  15.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.0k, False: 3.88k]
  ------------------
  159|  12.0k|                break;
  160|  12.0k|            }
  161|  3.88k|            it = result->begin();
  162|  3.88k|        }
  163|  12.0k|    }
  164|       |
  165|       |    // scan_value
  166|  1.72k|    {
  167|  1.72k|        auto it = scn::ranges::begin(source);
  168|  1.72k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.72k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.72k|            auto result = scn::scan_value<T>(
  171|  1.72k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.72k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.72k, False: 0]
  ------------------
  173|  1.72k|                break;
  174|  1.72k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.72k|    }
  178|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.72k|{
  134|       |    // Regular scan
  135|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.0k, False: 1.72k]
  ------------------
  136|  12.0k|        auto it = scn::ranges::begin(source);
  137|  15.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.9k|            auto result = scn::scan<T>(
  140|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.9k|                scn::runtime_format(f));
  142|  15.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.0k, False: 3.88k]
  ------------------
  143|  12.0k|                break;
  144|  12.0k|            }
  145|  3.88k|            it = result->begin();
  146|  3.88k|        }
  147|  12.0k|    }
  148|       |
  149|       |    // scan localized
  150|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.0k, False: 1.72k]
  ------------------
  151|  12.0k|        auto it = scn::ranges::begin(source);
  152|  15.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.9k|            auto result = scn::scan<T>(
  155|  15.9k|                global_locale,
  156|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.9k|                scn::runtime_format(f));
  158|  15.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.0k, False: 3.88k]
  ------------------
  159|  12.0k|                break;
  160|  12.0k|            }
  161|  3.88k|            it = result->begin();
  162|  3.88k|        }
  163|  12.0k|    }
  164|       |
  165|       |    // scan_value
  166|  1.72k|    {
  167|  1.72k|        auto it = scn::ranges::begin(source);
  168|  1.72k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.72k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.72k|            auto result = scn::scan_value<T>(
  171|  1.72k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.72k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.72k, False: 0]
  ------------------
  173|  1.72k|                break;
  174|  1.72k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.72k|    }
  178|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.72k|{
  134|       |    // Regular scan
  135|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.0k, False: 1.72k]
  ------------------
  136|  12.0k|        auto it = scn::ranges::begin(source);
  137|  15.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.9k|            auto result = scn::scan<T>(
  140|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.9k|                scn::runtime_format(f));
  142|  15.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.0k, False: 3.88k]
  ------------------
  143|  12.0k|                break;
  144|  12.0k|            }
  145|  3.88k|            it = result->begin();
  146|  3.88k|        }
  147|  12.0k|    }
  148|       |
  149|       |    // scan localized
  150|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.0k, False: 1.72k]
  ------------------
  151|  12.0k|        auto it = scn::ranges::begin(source);
  152|  15.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.9k|            auto result = scn::scan<T>(
  155|  15.9k|                global_locale,
  156|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.9k|                scn::runtime_format(f));
  158|  15.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.0k, False: 3.88k]
  ------------------
  159|  12.0k|                break;
  160|  12.0k|            }
  161|  3.88k|            it = result->begin();
  162|  3.88k|        }
  163|  12.0k|    }
  164|       |
  165|       |    // scan_value
  166|  1.72k|    {
  167|  1.72k|        auto it = scn::ranges::begin(source);
  168|  1.72k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.72k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.72k|            auto result = scn::scan_value<T>(
  171|  1.72k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.72k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.72k, False: 0]
  ------------------
  173|  1.72k|                break;
  174|  1.72k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.72k|    }
  178|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmKNSt3__15dequeIwNS3_9allocatorIwEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|  1.72k|{
  134|       |    // Regular scan
  135|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.0k, False: 1.72k]
  ------------------
  136|  12.0k|        auto it = scn::ranges::begin(source);
  137|  15.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.9k|            auto result = scn::scan<T>(
  140|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.9k|                scn::runtime_format(f));
  142|  15.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.0k, False: 3.88k]
  ------------------
  143|  12.0k|                break;
  144|  12.0k|            }
  145|  3.88k|            it = result->begin();
  146|  3.88k|        }
  147|  12.0k|    }
  148|       |
  149|       |    // scan localized
  150|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.0k, False: 1.72k]
  ------------------
  151|  12.0k|        auto it = scn::ranges::begin(source);
  152|  15.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.9k|            auto result = scn::scan<T>(
  155|  15.9k|                global_locale,
  156|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.9k|                scn::runtime_format(f));
  158|  15.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.0k, False: 3.88k]
  ------------------
  159|  12.0k|                break;
  160|  12.0k|            }
  161|  3.88k|            it = result->begin();
  162|  3.88k|        }
  163|  12.0k|    }
  164|       |
  165|       |    // scan_value
  166|  1.72k|    {
  167|  1.72k|        auto it = scn::ranges::begin(source);
  168|  1.72k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.72k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.72k|            auto result = scn::scan_value<T>(
  171|  1.72k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.72k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.72k, False: 0]
  ------------------
  173|  1.72k|                break;
  174|  1.72k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.72k|    }
  178|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.72k|{
  134|       |    // Regular scan
  135|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.0k, False: 1.72k]
  ------------------
  136|  12.0k|        auto it = scn::ranges::begin(source);
  137|  15.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.9k|            auto result = scn::scan<T>(
  140|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.9k|                scn::runtime_format(f));
  142|  15.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.0k, False: 3.88k]
  ------------------
  143|  12.0k|                break;
  144|  12.0k|            }
  145|  3.88k|            it = result->begin();
  146|  3.88k|        }
  147|  12.0k|    }
  148|       |
  149|       |    // scan localized
  150|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.0k, False: 1.72k]
  ------------------
  151|  12.0k|        auto it = scn::ranges::begin(source);
  152|  15.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.9k|            auto result = scn::scan<T>(
  155|  15.9k|                global_locale,
  156|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.9k|                scn::runtime_format(f));
  158|  15.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.0k, False: 3.88k]
  ------------------
  159|  12.0k|                break;
  160|  12.0k|            }
  161|  3.88k|            it = result->begin();
  162|  3.88k|        }
  163|  12.0k|    }
  164|       |
  165|       |    // scan_value
  166|  1.72k|    {
  167|  1.72k|        auto it = scn::ranges::begin(source);
  168|  1.72k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.72k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.72k|            auto result = scn::scan_value<T>(
  171|  1.72k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.72k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.72k, False: 0]
  ------------------
  173|  1.72k|                break;
  174|  1.72k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.72k|    }
  178|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.72k|{
  134|       |    // Regular scan
  135|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.0k, False: 1.72k]
  ------------------
  136|  12.0k|        auto it = scn::ranges::begin(source);
  137|  15.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.9k|            auto result = scn::scan<T>(
  140|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.9k|                scn::runtime_format(f));
  142|  15.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.0k, False: 3.88k]
  ------------------
  143|  12.0k|                break;
  144|  12.0k|            }
  145|  3.88k|            it = result->begin();
  146|  3.88k|        }
  147|  12.0k|    }
  148|       |
  149|       |    // scan localized
  150|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.0k, False: 1.72k]
  ------------------
  151|  12.0k|        auto it = scn::ranges::begin(source);
  152|  15.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.9k|            auto result = scn::scan<T>(
  155|  15.9k|                global_locale,
  156|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.9k|                scn::runtime_format(f));
  158|  15.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.0k, False: 3.88k]
  ------------------
  159|  12.0k|                break;
  160|  12.0k|            }
  161|  3.88k|            it = result->begin();
  162|  3.88k|        }
  163|  12.0k|    }
  164|       |
  165|       |    // scan_value
  166|  1.72k|    {
  167|  1.72k|        auto it = scn::ranges::begin(source);
  168|  1.72k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.72k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.72k|            auto result = scn::scan_value<T>(
  171|  1.72k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.72k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.72k, False: 0]
  ------------------
  173|  1.72k|                break;
  174|  1.72k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.72k|    }
  178|  1.72k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.72k|{
   91|  1.72k|    using char_type = ranges::range_value_t<Source>;
   92|  1.72k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.72k|    deque.clear();
   94|  1.72k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.72k|              std::back_inserter(deque));
   96|  1.72k|    return deque;
   97|  1.72k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.72k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.72k|    else {
   84|  1.72k|        return wnoncontiguous_buffer;
   85|  1.72k|    }
   86|  1.72k|}

